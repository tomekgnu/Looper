
Looper-STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ffc  08017dcc  08017dcc  00027dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019dc8  08019dc8  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  08019dc8  08019dc8  00029dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019dd0  08019dd0  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019dd0  08019dd0  00029dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019dd4  08019dd4  00029dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08019dd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030358  2**0
                  CONTENTS
 10 .bss          00002ec4  20000358  20000358  00030358  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000321c  2000321c  00030358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ab3c  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008cfd  00000000  00000000  0006aec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d28  00000000  00000000  00073bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029d8  00000000  00000000  000768f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033c76  00000000  00000000  000792c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c223  00000000  00000000  000acf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104812  00000000  00000000  000e9161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ed973  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c504  00000000  00000000  001ed9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000358 	.word	0x20000358
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017db4 	.word	0x08017db4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	08017db4 	.word	0x08017db4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <SRAM_resetReader>:
static void incrementWriter(int size);
static void SRAM_resetReader();
static void SRAM_resetWriter();


static void SRAM_resetReader(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	currentReader.currentByte.value = 0;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SRAM_resetReader+0x28>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	currentReader.currentPage.value = 0;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <SRAM_resetReader+0x28>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
	currentReader.totalBytes.value = 0;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SRAM_resetReader+0x28>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
	currentSRAM = 0;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SRAM_resetReader+0x2c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000378 	.word	0x20000378
 8000dac:	20000374 	.word	0x20000374

08000db0 <SRAM_resetWriter>:

static void SRAM_resetWriter(){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	currentWriter.currentByte.value = 0;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <SRAM_resetWriter+0x28>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
	currentWriter.currentPage.value = 0;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <SRAM_resetWriter+0x28>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
	currentWriter.totalBytes.value = 0;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SRAM_resetWriter+0x28>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
	currentSRAM = 0;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SRAM_resetWriter+0x2c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000388 	.word	0x20000388
 8000ddc:	20000374 	.word	0x20000374

08000de0 <SRAM_readerPosition>:

uint32_t SRAM_writerPosition(){
	return currentWriter.totalBytes.value;
}

uint32_t SRAM_readerPosition(){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return currentReader.totalBytes.value;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <SRAM_readerPosition+0x14>)
 8000de6:	689b      	ldr	r3, [r3, #8]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000378 	.word	0x20000378

08000df8 <SRAM_seekRead>:

void SRAM_seekRead(unsigned int size,unsigned int whence){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	switch(whence){
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d010      	beq.n	8000e2a <SRAM_seekRead+0x32>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d81b      	bhi.n	8000e46 <SRAM_seekRead+0x4e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <SRAM_seekRead+0x24>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00c      	beq.n	8000e34 <SRAM_seekRead+0x3c>
		case SRAM_CUR: incrementReader(size);
					   break;
		case SRAM_END: SRAM_resetReader();
					   incrementReader(SRAMTotalSize - size);
					   break;
		default:	   break;
 8000e1a:	e014      	b.n	8000e46 <SRAM_seekRead+0x4e>
		case SRAM_SET: SRAM_resetReader();
 8000e1c:	f7ff ffb0 	bl	8000d80 <SRAM_resetReader>
					   incrementReader(size);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f840 	bl	8000ea8 <incrementReader>
					   break;
 8000e28:	e00e      	b.n	8000e48 <SRAM_seekRead+0x50>
		case SRAM_CUR: incrementReader(size);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f83b 	bl	8000ea8 <incrementReader>
					   break;
 8000e32:	e009      	b.n	8000e48 <SRAM_seekRead+0x50>
		case SRAM_END: SRAM_resetReader();
 8000e34:	f7ff ffa4 	bl	8000d80 <SRAM_resetReader>
					   incrementReader(SRAMTotalSize - size);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f832 	bl	8000ea8 <incrementReader>
					   break;
 8000e44:	e000      	b.n	8000e48 <SRAM_seekRead+0x50>
		default:	   break;
 8000e46:	bf00      	nop

	}

}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <SRAM_seekWrite>:

void SRAM_seekWrite(unsigned int size,unsigned int whence){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	switch(whence){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d010      	beq.n	8000e82 <SRAM_seekWrite+0x32>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d81b      	bhi.n	8000e9e <SRAM_seekWrite+0x4e>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <SRAM_seekWrite+0x24>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00c      	beq.n	8000e8c <SRAM_seekWrite+0x3c>
		case SRAM_CUR: incrementWriter(size);
					   break;
		case SRAM_END: SRAM_resetWriter();
					   incrementWriter(SRAMTotalSize - size);
					   break;
		default:	   break;
 8000e72:	e014      	b.n	8000e9e <SRAM_seekWrite+0x4e>
		case SRAM_SET: SRAM_resetWriter();
 8000e74:	f7ff ff9c 	bl	8000db0 <SRAM_resetWriter>
					   incrementWriter(size);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f84a 	bl	8000f14 <incrementWriter>
					   break;
 8000e80:	e00e      	b.n	8000ea0 <SRAM_seekWrite+0x50>
		case SRAM_CUR: incrementWriter(size);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f845 	bl	8000f14 <incrementWriter>
					   break;
 8000e8a:	e009      	b.n	8000ea0 <SRAM_seekWrite+0x50>
		case SRAM_END: SRAM_resetWriter();
 8000e8c:	f7ff ff90 	bl	8000db0 <SRAM_resetWriter>
					   incrementWriter(SRAMTotalSize - size);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f83c 	bl	8000f14 <incrementWriter>
					   break;
 8000e9c:	e000      	b.n	8000ea0 <SRAM_seekWrite+0x50>
		default:	   break;
 8000e9e:	bf00      	nop

	}

}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <incrementReader>:

uint32_t SRAM_read(){
	return currentReader.totalBytes.value;
}

static void incrementReader(int size){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	currentReader.totalBytes.value += size;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <incrementReader+0x64>)
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <incrementReader+0x64>)
 8000eba:	6093      	str	r3, [r2, #8]
	if(currentReader.totalBytes.value >= SRAMTotalSize)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <incrementReader+0x64>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ec4:	d305      	bcc.n	8000ed2 <incrementReader+0x2a>
		currentReader.totalBytes.value %= SRAMTotalSize;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <incrementReader+0x64>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <incrementReader+0x64>)
 8000ed0:	6093      	str	r3, [r2, #8]
	currentReader.currentByte.value = currentReader.totalBytes.value % SRAMChipSize;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <incrementReader+0x64>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <incrementReader+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]
	currentReader.currentPage.value = (currentReader.totalBytes.value / SRAMPageSize) % SRAMPageCount;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <incrementReader+0x64>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <incrementReader+0x64>)
 8000eea:	6053      	str	r3, [r2, #4]
	currentReader.currentSram = currentReader.totalBytes.value / SRAMChipSize;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <incrementReader+0x64>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	0c5b      	lsrs	r3, r3, #17
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <incrementReader+0x64>)
 8000ef6:	731a      	strb	r2, [r3, #12]
	currentSRAM = currentReader.currentSram;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <incrementReader+0x64>)
 8000efa:	7b1a      	ldrb	r2, [r3, #12]
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <incrementReader+0x68>)
 8000efe:	701a      	strb	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000378 	.word	0x20000378
 8000f10:	20000374 	.word	0x20000374

08000f14 <incrementWriter>:

static void incrementWriter(int size){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	currentWriter.totalBytes.value += size;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <incrementWriter+0x64>)
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <incrementWriter+0x64>)
 8000f26:	6093      	str	r3, [r2, #8]
	if(currentWriter.totalBytes.value >= SRAMTotalSize)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <incrementWriter+0x64>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f30:	d305      	bcc.n	8000f3e <incrementWriter+0x2a>
		currentWriter.totalBytes.value %= SRAMTotalSize;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <incrementWriter+0x64>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <incrementWriter+0x64>)
 8000f3c:	6093      	str	r3, [r2, #8]
	currentWriter.currentByte.value = currentWriter.totalBytes.value % SRAMChipSize;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <incrementWriter+0x64>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <incrementWriter+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <incrementWriter+0x64>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <incrementWriter+0x64>)
 8000f56:	6053      	str	r3, [r2, #4]
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <incrementWriter+0x64>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	0c5b      	lsrs	r3, r3, #17
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <incrementWriter+0x64>)
 8000f62:	731a      	strb	r2, [r3, #12]
	currentSRAM = currentWriter.currentSram;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <incrementWriter+0x64>)
 8000f66:	7b1a      	ldrb	r2, [r3, #12]
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <incrementWriter+0x68>)
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000388 	.word	0x20000388
 8000f7c:	20000374 	.word	0x20000374

08000f80 <writeSRAM>:

void writeSRAM(unsigned char *buf,unsigned int size){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <writeSRAM+0x128>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	60fb      	str	r3, [r7, #12]
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <writeSRAM+0x22>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1c3 0320 	rsb	r3, r3, #32
 8000fa0:	e000      	b.n	8000fa4 <writeSRAM+0x24>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
	if(size == 0)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d078      	beq.n	800109e <writeSRAM+0x11e>
		return;

	if(size >= SRAMPageSize){
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b1f      	cmp	r3, #31
 8000fb0:	d933      	bls.n	800101a <writeSRAM+0x9a>
		if(unaligned == 0){
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d117      	bne.n	8000fe8 <writeSRAM+0x68>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <writeSRAM+0x128>)
 8000fba:	7818      	ldrb	r0, [r3, #0]
 8000fbc:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <writeSRAM+0x128>)
 8000fbe:	7859      	ldrb	r1, [r3, #1]
 8000fc0:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <writeSRAM+0x128>)
 8000fc2:	789a      	ldrb	r2, [r3, #2]
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f000 f9b7 	bl	800133c <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
 8000fce:	2020      	movs	r0, #32
 8000fd0:	f7ff ffa0 	bl	8000f14 <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f103 0220 	add.w	r2, r3, #32
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f7ff ffcd 	bl	8000f80 <writeSRAM>
 8000fe6:	e05b      	b.n	80010a0 <writeSRAM+0x120>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <writeSRAM+0x128>)
 8000fea:	7818      	ldrb	r0, [r3, #0]
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <writeSRAM+0x128>)
 8000fee:	7859      	ldrb	r1, [r3, #1]
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <writeSRAM+0x128>)
 8000ff2:	789a      	ldrb	r2, [r3, #2]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f000 f99f 	bl	800133c <SRAMWriteSeq>
			incrementWriter(remainder);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff87 	bl	8000f14 <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	18d0      	adds	r0, r2, r3
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff ffb4 	bl	8000f80 <writeSRAM>
 8001018:	e042      	b.n	80010a0 <writeSRAM+0x120>


	}
	else{

		if(unaligned > 0){
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02e      	beq.n	800107e <writeSRAM+0xfe>
			if(size > remainder){
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	429a      	cmp	r2, r3
 8001026:	d91a      	bls.n	800105e <writeSRAM+0xde>
				size -= remainder;
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	603b      	str	r3, [r7, #0]
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <writeSRAM+0x128>)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <writeSRAM+0x128>)
 8001036:	7859      	ldrb	r1, [r3, #1]
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <writeSRAM+0x128>)
 800103a:	789a      	ldrb	r2, [r3, #2]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f000 f97b 	bl	800133c <SRAMWriteSeq>
				incrementWriter(remainder);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff63 	bl	8000f14 <incrementWriter>
				writeSRAM(buf + remainder,size);
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff92 	bl	8000f80 <writeSRAM>
 800105c:	e020      	b.n	80010a0 <writeSRAM+0x120>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <writeSRAM+0x128>)
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <writeSRAM+0x128>)
 8001064:	7859      	ldrb	r1, [r3, #1]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <writeSRAM+0x128>)
 8001068:	789a      	ldrb	r2, [r3, #2]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f000 f964 	bl	800133c <SRAMWriteSeq>
				incrementWriter(size);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff4c 	bl	8000f14 <incrementWriter>
 800107c:	e010      	b.n	80010a0 <writeSRAM+0x120>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <writeSRAM+0x128>)
 8001080:	7818      	ldrb	r0, [r3, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <writeSRAM+0x128>)
 8001084:	7859      	ldrb	r1, [r3, #1]
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <writeSRAM+0x128>)
 8001088:	789a      	ldrb	r2, [r3, #2]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f000 f954 	bl	800133c <SRAMWriteSeq>
			incrementWriter(size);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff3c 	bl	8000f14 <incrementWriter>
 800109c:	e000      	b.n	80010a0 <writeSRAM+0x120>
		return;
 800109e:	bf00      	nop
		}
	}
}
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000388 	.word	0x20000388

080010ac <readSRAM>:


void readSRAM(unsigned char *buf,unsigned int size){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <readSRAM+0x128>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	60fb      	str	r3, [r7, #12]
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <readSRAM+0x22>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1c3 0320 	rsb	r3, r3, #32
 80010cc:	e000      	b.n	80010d0 <readSRAM+0x24>
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]

	if(size == 0)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d078      	beq.n	80011ca <readSRAM+0x11e>
		return;

	if(size >= SRAMPageSize){
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b1f      	cmp	r3, #31
 80010dc:	d933      	bls.n	8001146 <readSRAM+0x9a>
		if(unaligned == 0){
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d117      	bne.n	8001114 <readSRAM+0x68>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <readSRAM+0x128>)
 80010e6:	7818      	ldrb	r0, [r3, #0]
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <readSRAM+0x128>)
 80010ea:	7859      	ldrb	r1, [r3, #1]
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <readSRAM+0x128>)
 80010ee:	789a      	ldrb	r2, [r3, #2]
 80010f0:	2320      	movs	r3, #32
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f000 f953 	bl	80013a0 <SRAMReadSeq>
			incrementReader(SRAMPageSize);
 80010fa:	2020      	movs	r0, #32
 80010fc:	f7ff fed4 	bl	8000ea8 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f103 0220 	add.w	r2, r3, #32
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3b20      	subs	r3, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff ffcd 	bl	80010ac <readSRAM>
 8001112:	e05b      	b.n	80011cc <readSRAM+0x120>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <readSRAM+0x128>)
 8001116:	7818      	ldrb	r0, [r3, #0]
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <readSRAM+0x128>)
 800111a:	7859      	ldrb	r1, [r3, #1]
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <readSRAM+0x128>)
 800111e:	789a      	ldrb	r2, [r3, #2]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f000 f93b 	bl	80013a0 <SRAMReadSeq>
			incrementReader(remainder);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff febb 	bl	8000ea8 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	18d0      	adds	r0, r2, r3
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff ffb4 	bl	80010ac <readSRAM>
 8001144:	e042      	b.n	80011cc <readSRAM+0x120>


	}
	else{

		if(unaligned > 0){
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02e      	beq.n	80011aa <readSRAM+0xfe>
			if(size > remainder){
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	429a      	cmp	r2, r3
 8001152:	d91a      	bls.n	800118a <readSRAM+0xde>
				size -= remainder;
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	603b      	str	r3, [r7, #0]
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <readSRAM+0x128>)
 800115e:	7818      	ldrb	r0, [r3, #0]
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <readSRAM+0x128>)
 8001162:	7859      	ldrb	r1, [r3, #1]
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <readSRAM+0x128>)
 8001166:	789a      	ldrb	r2, [r3, #2]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f000 f917 	bl	80013a0 <SRAMReadSeq>
				incrementReader(remainder);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe97 	bl	8000ea8 <incrementReader>
				readSRAM(buf + remainder,size);
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff92 	bl	80010ac <readSRAM>
 8001188:	e020      	b.n	80011cc <readSRAM+0x120>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <readSRAM+0x128>)
 800118c:	7818      	ldrb	r0, [r3, #0]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <readSRAM+0x128>)
 8001190:	7859      	ldrb	r1, [r3, #1]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <readSRAM+0x128>)
 8001194:	789a      	ldrb	r2, [r3, #2]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f000 f900 	bl	80013a0 <SRAMReadSeq>
				incrementReader(size);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe80 	bl	8000ea8 <incrementReader>
 80011a8:	e010      	b.n	80011cc <readSRAM+0x120>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <readSRAM+0x128>)
 80011ac:	7818      	ldrb	r0, [r3, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <readSRAM+0x128>)
 80011b0:	7859      	ldrb	r1, [r3, #1]
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <readSRAM+0x128>)
 80011b4:	789a      	ldrb	r2, [r3, #2]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f000 f8f0 	bl	80013a0 <SRAMReadSeq>
			incrementReader(size);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fe70 	bl	8000ea8 <incrementReader>
 80011c8:	e000      	b.n	80011cc <readSRAM+0x120>
		return;
 80011ca:	bf00      	nop
		}
	}


}
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000378 	.word	0x20000378

080011d8 <ReadSPI>:
		SRAM_5_CS_GPIO_Port,
		SRAM_6_CS_GPIO_Port,
		SRAM_7_CS_GPIO_Port
};

static uint8_t ReadSPI(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	uint8_t byte;
	HAL_SPI_Receive(&hspi5,&byte,1,100);
 80011de:	1df9      	adds	r1, r7, #7
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	2201      	movs	r2, #1
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <ReadSPI+0x1c>)
 80011e6:	f00f fbca 	bl	801097e <HAL_SPI_Receive>
	return byte;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000209c 	.word	0x2000209c

080011f8 <WriteSPI>:

void WriteSPI(uint8_t byte){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi5,&byte,1,100);
 8001202:	1df9      	adds	r1, r7, #7
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	2201      	movs	r2, #1
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <WriteSPI+0x20>)
 800120a:	f00f fa7c 	bl	8010706 <HAL_SPI_Transmit>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000209c 	.word	0x2000209c

0800121c <SRAMEnable>:

static void SRAMEnable(uint8_t n){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sramPorts[n],sramPins[n],GPIO_PIN_RESET);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SRAMEnable+0x2c>)
 800122a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <SRAMEnable+0x30>)
 8001232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	f00d f8ef 	bl	800e41c <HAL_GPIO_WritePin>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000010 	.word	0x20000010
 800124c:	20000000 	.word	0x20000000

08001250 <SRAMDisable>:

static void SRAMDisable(uint8_t n){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sramPorts[n],sramPins[n],GPIO_PIN_SET);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <SRAMDisable+0x2c>)
 800125e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <SRAMDisable+0x30>)
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126a:	2201      	movs	r2, #1
 800126c:	4619      	mov	r1, r3
 800126e:	f00d f8d5 	bl	800e41c <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000010 	.word	0x20000010
 8001280:	20000000 	.word	0x20000000

08001284 <InitSRAM>:

void InitSRAM(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	for(currentSRAM = SRAM_0; currentSRAM <= SRAM_7; currentSRAM++)
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <InitSRAM+0x30>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e00a      	b.n	80012a6 <InitSRAM+0x22>
		SRAMDisable(currentSRAM);
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <InitSRAM+0x30>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffdb 	bl	8001250 <SRAMDisable>
	for(currentSRAM = SRAM_0; currentSRAM <= SRAM_7; currentSRAM++)
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <InitSRAM+0x30>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <InitSRAM+0x30>)
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <InitSRAM+0x30>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b07      	cmp	r3, #7
 80012ac:	d9f0      	bls.n	8001290 <InitSRAM+0xc>
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000374 	.word	0x20000374

080012b8 <SRAMWriteStatusReg>:

uint8_t SRAMWriteStatusReg(uint8_t WriteVal)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	SRAMEnable(currentSRAM);
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SRAMWriteStatusReg+0x38>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ffa8 	bl	800121c <SRAMEnable>
	WriteSPI(CMD_SRAMWRSR);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff93 	bl	80011f8 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	WriteSPI(WriteVal);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff8f 	bl	80011f8 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	SRAMDisable(currentSRAM);
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SRAMWriteStatusReg+0x38>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffb6 	bl	8001250 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000374 	.word	0x20000374

080012f4 <SRAMCommand>:
	ReadData = ReadSPI();
	SRAMDisable(currentSRAM);
	return ReadData;
}
void SRAMCommand(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t RWCmd)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4604      	mov	r4, r0
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4623      	mov	r3, r4
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	4603      	mov	r3, r0
 8001308:	71bb      	strb	r3, [r7, #6]
 800130a:	460b      	mov	r3, r1
 800130c:	717b      	strb	r3, [r7, #5]
 800130e:	4613      	mov	r3, r2
 8001310:	713b      	strb	r3, [r7, #4]
	//Send Read or Write command to SRAM
	WriteSPI(RWCmd);
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff6f 	bl	80011f8 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	//Send High byte of address to SRAM
	WriteSPI(AddHB);
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff6b 	bl	80011f8 <WriteSPI>
	WriteSPI(AddMB);
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff67 	bl	80011f8 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	//Send Low byte of address to SRAM
	WriteSPI(AddLB);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff63 	bl	80011f8 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}
	...

0800133c <SRAMWriteSeq>:
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	71bb      	strb	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	717b      	strb	r3, [r7, #5]
	SRAMWriteStatusReg(SRAMSeqMode);
 8001350:	2040      	movs	r0, #64	; 0x40
 8001352:	f7ff ffb1 	bl	80012b8 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <SRAMWriteSeq+0x60>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff5e 	bl	800121c <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
 8001360:	797a      	ldrb	r2, [r7, #5]
 8001362:	79b9      	ldrb	r1, [r7, #6]
 8001364:	79f8      	ldrb	r0, [r7, #7]
 8001366:	2302      	movs	r3, #2
 8001368:	f7ff ffc4 	bl	80012f4 <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
 800136c:	e009      	b.n	8001382 <SRAMWriteSeq+0x46>
	{
		WriteSPI(*WriteData++);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	603a      	str	r2, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff3e 	bl	80011f8 <WriteSPI>
	for(;WriteCnt > 0;WriteCnt--)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	3b01      	subs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f2      	bne.n	800136e <SRAMWriteSeq+0x32>
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <SRAMWriteSeq+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000374 	.word	0x20000374

080013a0 <SRAMReadSeq>:

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	460b      	mov	r3, r1
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	717b      	strb	r3, [r7, #5]
	SRAMWriteStatusReg(SRAMSeqMode);
 80013b4:	2040      	movs	r0, #64	; 0x40
 80013b6:	f7ff ff7f 	bl	80012b8 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <SRAMReadSeq+0x60>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff2c 	bl	800121c <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
 80013c4:	797a      	ldrb	r2, [r7, #5]
 80013c6:	79b9      	ldrb	r1, [r7, #6]
 80013c8:	79f8      	ldrb	r0, [r7, #7]
 80013ca:	2303      	movs	r3, #3
 80013cc:	f7ff ff92 	bl	80012f4 <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
 80013d0:	e009      	b.n	80013e6 <SRAMReadSeq+0x46>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
 80013d2:	683c      	ldr	r4, [r7, #0]
 80013d4:	1c63      	adds	r3, r4, #1
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	f7ff fefe 	bl	80011d8 <ReadSPI>
 80013dc:	4603      	mov	r3, r0
 80013de:	7023      	strb	r3, [r4, #0]
	for(; ReadCnt > 0; ReadCnt--)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <SRAMReadSeq+0x32>
	}
	SRAMDisable(currentSRAM);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SRAMReadSeq+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff2d 	bl	8001250 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	20000374 	.word	0x20000374

08001404 <HAL_ADC_ErrorCallback>:
uint32_t adcvals[2];

char strval[5];
uint32_t ind = 0;

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef * hadc){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	utoa(hadc->ErrorCode,strval,10);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	220a      	movs	r2, #10
 8001412:	4906      	ldr	r1, [pc, #24]	; (800142c <HAL_ADC_ErrorCallback+0x28>)
 8001414:	4618      	mov	r0, r3
 8001416:	f015 fc97 	bl	8016d48 <utoa>
	TM_HD44780_Puts(0,1,strval);
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_ADC_ErrorCallback+0x28>)
 800141c:	2101      	movs	r1, #1
 800141e:	2000      	movs	r0, #0
 8001420:	f00a f89a 	bl	800b558 <TM_HD44780_Puts>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000039c 	.word	0x2000039c

08001430 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC3){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a33      	ldr	r2, [pc, #204]	; (800150c <HAL_ADC_ConvCpltCallback+0xdc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d102      	bne.n	8001448 <HAL_ADC_ConvCpltCallback+0x18>
		Update_Joystick();
 8001442:	f005 fb01 	bl	8006a48 <Update_Joystick>
		return;
 8001446:	e05d      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
	}

	if(hadc->Instance == ADC1){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_ADC_ConvCpltCallback+0xe0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d158      	bne.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>

		adc1val = HAL_ADC_GetValue(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f00b fb18 	bl	800ca88 <HAL_ADC_GetValue>
 8001458:	4603      	mov	r3, r0
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_ADC_ConvCpltCallback+0xe4>)
 800145c:	6013      	str	r3, [r2, #0]
		if(adc1val == 63)
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b3f      	cmp	r3, #63	; 0x3f
 8001464:	d04b      	beq.n	80014fe <HAL_ADC_ConvCpltCallback+0xce>
			return;

		switch(adc1val >> 3){
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	2b07      	cmp	r3, #7
 800146e:	d848      	bhi.n	8001502 <HAL_ADC_ConvCpltCallback+0xd2>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <HAL_ADC_ConvCpltCallback+0x48>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001499 	.word	0x08001499
 800147c:	08001503 	.word	0x08001503
 8001480:	08001503 	.word	0x08001503
 8001484:	080014c7 	.word	0x080014c7
 8001488:	08001503 	.word	0x08001503
 800148c:	080014d7 	.word	0x080014d7
 8001490:	08001503 	.word	0x08001503
 8001494:	080014e7 	.word	0x080014e7

		case 0:		if(looper.PlayBass == TRUE){
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_ADC_ConvCpltCallback+0x84>
						looper.PlayBass = FALSE;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	711a      	strb	r2, [r3, #4]
						TM_HD44780_Puts(0,1,"Drums active");
 80014a8:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_ADC_ConvCpltCallback+0xec>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	2000      	movs	r0, #0
 80014ae:	f00a f853 	bl	800b558 <TM_HD44780_Puts>
					}
					else{
						looper.PlayBass = TRUE;
						TM_HD44780_Puts(0,1,"Bass active ");
					}
					break;
 80014b2:	e027      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
						looper.PlayBass = TRUE;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	711a      	strb	r2, [r3, #4]
						TM_HD44780_Puts(0,1,"Bass active ");
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014bc:	2101      	movs	r1, #1
 80014be:	2000      	movs	r0, #0
 80014c0:	f00a f84a 	bl	800b558 <TM_HD44780_Puts>
					break;
 80014c4:	e01e      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
		case 3 :	looper.timeIncrement -= 1;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
					updateMetronome();
 80014d0:	f000 fff6 	bl	80024c0 <updateMetronome>
					break;
 80014d4:	e016      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
		case 5 :	looper.timeIncrement += 1;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	3301      	adds	r3, #1
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
					updateMetronome();
 80014e0:	f000 ffee 	bl	80024c0 <updateMetronome>
					break;
 80014e4:	e00e      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
		case 6: 	//adc1val = 15;
				 	break;

		case 7: looper.Metronome = !looper.Metronome;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014e8:	795b      	ldrb	r3, [r3, #5]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014fa:	715a      	strb	r2, [r3, #5]
				 break;
 80014fc:	e002      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>
			return;
 80014fe:	bf00      	nop
 8001500:	e000      	b.n	8001504 <HAL_ADC_ConvCpltCallback+0xd4>

		default: return;
 8001502:	bf00      	nop

		}

	}
}
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012200 	.word	0x40012200
 8001510:	40012000 	.word	0x40012000
 8001514:	20000398 	.word	0x20000398
 8001518:	20001220 	.word	0x20001220
 800151c:	08017dcc 	.word	0x08017dcc
 8001520:	08017ddc 	.word	0x08017ddc

08001524 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800152c:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <MX_ADC1_Init+0xa0>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001536:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800153a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800153e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001548:	2200      	movs	r2, #0
 800154a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_Ext_IT11;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800155e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_ADC1_Init+0x9c>)
 800157a:	2201      	movs	r2, #1
 800157c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <MX_ADC1_Init+0x9c>)
 8001580:	f00a ff40 	bl	800c404 <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <MX_ADC1_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800158a:	2198      	movs	r1, #152	; 0x98
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_ADC1_Init+0xa4>)
 800158e:	f005 fc93 	bl	8006eb8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001592:	2304      	movs	r3, #4
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800159a:	2307      	movs	r3, #7
 800159c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_ADC1_Init+0x9c>)
 80015a4:	f00b fa92 	bl	800cacc <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <MX_ADC1_Init+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015ae:	21a2      	movs	r1, #162	; 0xa2
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_ADC1_Init+0xa4>)
 80015b2:	f005 fc81 	bl	8006eb8 <_Error_Handler>
  }

}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200003a4 	.word	0x200003a4
 80015c4:	40012000 	.word	0x40012000
 80015c8:	08017dec 	.word	0x08017dec

080015cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <MX_ADC3_Init+0xbc>)
 80015d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015e2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80015e6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_ADC3_Init+0xb8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <MX_ADC3_Init+0xc0>)
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_ADC3_Init+0xb8>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001610:	2202      	movs	r2, #2
 8001612:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_ADC3_Init+0xb8>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001624:	f00a feee 	bl	800c404 <HAL_ADC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <MX_ADC3_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800162e:	21bb      	movs	r1, #187	; 0xbb
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <MX_ADC3_Init+0xc4>)
 8001632:	f005 fc41 	bl	8006eb8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001636:	2301      	movs	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800163e:	2306      	movs	r3, #6
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001648:	f00b fa40 	bl	800cacc <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <MX_ADC3_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001652:	21c5      	movs	r1, #197	; 0xc5
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_ADC3_Init+0xc4>)
 8001656:	f005 fc2f 	bl	8006eb8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800165a:	2302      	movs	r3, #2
 800165c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	4619      	mov	r1, r3
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <MX_ADC3_Init+0xb8>)
 8001668:	f00b fa30 	bl	800cacc <HAL_ADC_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <MX_ADC3_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001672:	21ce      	movs	r1, #206	; 0xce
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_ADC3_Init+0xc4>)
 8001676:	f005 fc1f 	bl	8006eb8 <_Error_Handler>
  }

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200003ec 	.word	0x200003ec
 8001688:	40012200 	.word	0x40012200
 800168c:	0f000001 	.word	0x0f000001
 8001690:	08017dec 	.word	0x08017dec

08001694 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_ADC_MspInit+0x124>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d127      	bne.n	80016f6 <HAL_ADC_MspInit+0x62>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_ADC_MspInit+0x128>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a43      	ldr	r2, [pc, #268]	; (80017bc <HAL_ADC_MspInit+0x128>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_ADC_MspInit+0x128>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = AD_KBD_Pin;
 80016c2:	2310      	movs	r3, #16
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AD_KBD_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	483a      	ldr	r0, [pc, #232]	; (80017c0 <HAL_ADC_MspInit+0x12c>)
 80016d6:	f00c fcdd 	bl	800e094 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2103      	movs	r1, #3
 80016de:	2012      	movs	r0, #18
 80016e0:	f00b fdad 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016e4:	2012      	movs	r0, #18
 80016e6:	f00b fdc6 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
    HAL_GPIO_WritePin(AD_KBD_GPIO_Port,AD_KBD_Pin,GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2110      	movs	r1, #16
 80016ee:	4834      	ldr	r0, [pc, #208]	; (80017c0 <HAL_ADC_MspInit+0x12c>)
 80016f0:	f00c fe94 	bl	800e41c <HAL_GPIO_WritePin>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80016f4:	e05b      	b.n	80017ae <HAL_ADC_MspInit+0x11a>
  else if(adcHandle->Instance==ADC3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_ADC_MspInit+0x130>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d156      	bne.n	80017ae <HAL_ADC_MspInit+0x11a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_ADC_MspInit+0x128>)
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <HAL_ADC_MspInit+0x128>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6453      	str	r3, [r2, #68]	; 0x44
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_ADC_MspInit+0x128>)
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Joystick_X_Pin|Joystick_Y_Pin;
 800171c:	2306      	movs	r3, #6
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001720:	2303      	movs	r3, #3
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4824      	ldr	r0, [pc, #144]	; (80017c0 <HAL_ADC_MspInit+0x12c>)
 8001730:	f00c fcb0 	bl	800e094 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_ADC_MspInit+0x138>)
 8001738:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 800173c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001740:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001754:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001764:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001770:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001774:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 800177e:	f00c f84b 	bl	800d818 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_MspInit+0xfe>
      _Error_Handler(__FILE__, __LINE__);
 8001788:	f240 110d 	movw	r1, #269	; 0x10d
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <HAL_ADC_MspInit+0x13c>)
 800178e:	f005 fb93 	bl	8006eb8 <_Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_ADC_MspInit+0x134>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2103      	movs	r1, #3
 80017a2:	2012      	movs	r0, #18
 80017a4:	f00b fd4b 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017a8:	2012      	movs	r0, #18
 80017aa:	f00b fd64 	bl	800d276 <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40012200 	.word	0x40012200
 80017c8:	20000434 	.word	0x20000434
 80017cc:	40026428 	.word	0x40026428
 80017d0:	08017dec 	.word	0x08017dec

080017d4 <ShortDelayUS>:
__STATIC_INLINE void DelayUS(__IO uint32_t micros);

volatile int totalDelay = 0;

void ShortDelayUS(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	DelayUS(Delay);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f805 	bl	80017ec <DelayUS>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <DelayUS>:

__STATIC_INLINE void DelayUS(__IO uint32_t micros) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

#if !defined(STM32F0xx)
    uint32_t start = DWT->CYCCNT;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <DelayUS+0x40>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80017fa:	f00e fd47 	bl	801028c <HAL_RCC_GetHCLKFreq>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <DelayUS+0x44>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - start) < micros);
 8001810:	bf00      	nop
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <DelayUS+0x40>)
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad2      	subs	r2, r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3f8      	bcc.n	8001812 <DelayUS+0x26>
    micros *= (SystemCoreClock / 1000000) / 5;

    /* Wait till done */
    while (micros--);
#endif
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e0001000 	.word	0xe0001000
 8001830:	431bde83 	.word	0x431bde83

08001834 <bsp_DelayUS>:


void  bsp_DelayUS(uint64_t micros)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	e9c7 0100 	strd	r0, r1, [r7]
		ShortDelayUS(micros);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ffc7 	bl	80017d4 <ShortDelayUS>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <ADS1256_Send8Bit>:
*	parameter: _data:  data
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_Send8Bit(uint8_t _data)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]

	bsp_DelayUS(10);
 800185a:	f04f 000a 	mov.w	r0, #10
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	f7ff ffe7 	bl	8001834 <bsp_DelayUS>
	HAL_SPI_Transmit(&hspi3,&_data,1,10);
 8001866:	1df9      	adds	r1, r7, #7
 8001868:	230a      	movs	r3, #10
 800186a:	2201      	movs	r2, #1
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <ADS1256_Send8Bit+0x2c>)
 800186e:	f00e ff4a 	bl	8010706 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi3,&_data,1);
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20002044 	.word	0x20002044

08001880 <ADS1256_CfgADC>:
*                      _drate:  data  rate
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_CfgADC(ADS1256_GAIN_E _gain, ADS1256_DRATE_E _drate)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	460a      	mov	r2, r1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4613      	mov	r3, r2
 800188e:	71bb      	strb	r3, [r7, #6]
	g_tADS1256.Gain = _gain;
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <ADS1256_CfgADC+0x8c>)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	7013      	strb	r3, [r2, #0]
	g_tADS1256.DataRate = _drate;
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <ADS1256_CfgADC+0x8c>)
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	7053      	strb	r3, [r2, #1]

	ADS1256_WaitDRDY();
 800189c:	f000 f900 	bl	8001aa0 <ADS1256_WaitDRDY>
			Bit 0 DRDY :  Data Ready (Read Only)
				This bit duplicates the state of the DRDY pin.

			ACAL=1  enable  calibration
		*/
		buf[0] = (0 << 3) | (1 << 2) | (1 << 1);//enable the internal buffer
 80018a0:	2306      	movs	r3, #6
 80018a2:	733b      	strb	r3, [r7, #12]
        //buf[0] = (0 << 3) | (1 << 2) | (0 << 1);  // The internal buffer is prohibited

        //ADS1256_WriteReg(REG_STATUS, (0 << 3) | (1 << 2) | (1 << 1));

		buf[1] = 0x08;	
 80018a4:	2308      	movs	r3, #8
 80018a6:	737b      	strb	r3, [r7, #13]
				100 = 16
				101 = 32
				110 = 64
				111 = 64
		*/
		buf[2] = (0 << 5) | (0 << 3) | (_gain << 0);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	73bb      	strb	r3, [r7, #14]
		//ADS1256_WriteReg(REG_ADCON, (0 << 5) | (0 << 2) | (GAIN_1 << 1));	/*choose 1: gain 1 ;input 5V/
		buf[3] = s_tabDataRate[_drate];	// DRATE_10SPS;	
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <ADS1256_CfgADC+0x90>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	73fb      	strb	r3, [r7, #15]

		CS_0();	/* SPIƬѡ = 0 */
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ba:	4816      	ldr	r0, [pc, #88]	; (8001914 <ADS1256_CfgADC+0x94>)
 80018bc:	f00c fdae 	bl	800e41c <HAL_GPIO_WritePin>
		ADS1256_Send8Bit(CMD_WREG | 0);	/* Write command register, send the register address */
 80018c0:	2050      	movs	r0, #80	; 0x50
 80018c2:	f7ff ffc5 	bl	8001850 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(0x03);			/* Register number 4,Initialize the number  -1*/
 80018c6:	2003      	movs	r0, #3
 80018c8:	f7ff ffc2 	bl	8001850 <ADS1256_Send8Bit>

		ADS1256_Send8Bit(buf[0]);	/* Set the status register */
 80018cc:	7b3b      	ldrb	r3, [r7, #12]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffbe 	bl	8001850 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[1]);	/* Set the input channel parameters */
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ffba 	bl	8001850 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[2]);	/* Set the ADCON control register,gain */
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ffb6 	bl	8001850 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[3]);	/* Set the output rate */
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ffb2 	bl	8001850 <ADS1256_Send8Bit>

		CS_1();	/* SPI  cs = 1 */
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <ADS1256_CfgADC+0x94>)
 80018f4:	f00c fd92 	bl	800e41c <HAL_GPIO_WritePin>
	}

	bsp_DelayUS(50);
 80018f8:	f04f 0032 	mov.w	r0, #50	; 0x32
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	f7ff ff98 	bl	8001834 <bsp_DelayUS>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000494 	.word	0x20000494
 8001910:	08018768 	.word	0x08018768
 8001914:	40020800 	.word	0x40020800

08001918 <ADS1256_DelayDATA>:
*	parameter: NULL
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_DelayDATA(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	/*
		Delay from last SCLK edge for DIN to first SCLK rising edge for DOUT: RDATA, RDATAC,RREG Commands
		min  50   CLK = 50 * 0.13uS = 6.5uS
	*/
	bsp_DelayUS(10);	/* The minimum time delay 6.5us */
 800191c:	f04f 000a 	mov.w	r0, #10
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f7ff ff86 	bl	8001834 <bsp_DelayUS>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <ADS1256_Recive8Bit>:
*	parameter: NULL
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t ADS1256_Recive8Bit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	uint8_t read = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	71bb      	strb	r3, [r7, #6]
	uint8_t byte = 0xff;
 8001936:	23ff      	movs	r3, #255	; 0xff
 8001938:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi3,&read,1,10);
 800193a:	1db9      	adds	r1, r7, #6
 800193c:	230a      	movs	r3, #10
 800193e:	2201      	movs	r2, #1
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <ADS1256_Recive8Bit+0x24>)
 8001942:	f00f f81c 	bl	801097e <HAL_SPI_Receive>
	//HAL_SPI_Receive_DMA(&hspi3,&read,1);
	return read;
 8001946:	79bb      	ldrb	r3, [r7, #6]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20002044 	.word	0x20002044

08001954 <ADS1256_WriteReg>:
*			 _RegValue: register Value
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_WriteReg(uint8_t _RegID, uint8_t _RegValue)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	CS_0();	/* SPI  cs  = 0 */
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <ADS1256_WriteReg+0x4c>)
 800196c:	f00c fd56 	bl	800e41c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(CMD_WREG | _RegID);	/*Write command register */
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff69 	bl	8001850 <ADS1256_Send8Bit>
	ADS1256_Send8Bit(0x00);		/*Write the register number */
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ff66 	bl	8001850 <ADS1256_Send8Bit>

	ADS1256_Send8Bit(_RegValue);	/*send register value */
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff62 	bl	8001850 <ADS1256_Send8Bit>
	CS_1();	/* SPI   cs = 1 */
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001992:	4803      	ldr	r0, [pc, #12]	; (80019a0 <ADS1256_WriteReg+0x4c>)
 8001994:	f00c fd42 	bl	800e41c <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020800 	.word	0x40020800

080019a4 <ADS1256_ReadReg>:
*	parameter: _RegID: register  ID
*	The return value: read register value
*********************************************************************************************************
*/
uint8_t ADS1256_ReadReg(uint8_t _RegID)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	uint8_t read;

	CS_0();	/* SPI  cs  = 0 */
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b4:	480e      	ldr	r0, [pc, #56]	; (80019f0 <ADS1256_ReadReg+0x4c>)
 80019b6:	f00c fd31 	bl	800e41c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(CMD_RREG | _RegID);	/* Write command register */
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff44 	bl	8001850 <ADS1256_Send8Bit>
	ADS1256_Send8Bit(0x00);	/* Write the register number */
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ff41 	bl	8001850 <ADS1256_Send8Bit>

	ADS1256_DelayDATA();	/*delay time */
 80019ce:	f7ff ffa3 	bl	8001918 <ADS1256_DelayDATA>

	read = ADS1256_Recive8Bit();	/* Read the register values */
 80019d2:	f7ff ffab 	bl	800192c <ADS1256_Recive8Bit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
	CS_1();	/* SPI   cs  = 1 */
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <ADS1256_ReadReg+0x4c>)
 80019e2:	f00c fd1b 	bl	800e41c <HAL_GPIO_WritePin>

	return read;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020800 	.word	0x40020800

080019f4 <ADS1256_WriteCmd>:
*	parameter: _cmd : command
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_WriteCmd(uint8_t _cmd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	CS_0();	/* SPI   cs = 0 */
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <ADS1256_WriteCmd+0x34>)
 8001a06:	f00c fd09 	bl	800e41c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(_cmd);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff1f 	bl	8001850 <ADS1256_Send8Bit>
	CS_1();	/* SPI  cs  = 1 */
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <ADS1256_WriteCmd+0x34>)
 8001a1a:	f00c fcff 	bl	800e41c <HAL_GPIO_WritePin>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020800 	.word	0x40020800

08001a2c <ADS1256_ReadChipID>:
*	parameter: _cmd : NULL
*	The return value: four high status register
*********************************************************************************************************
*/
uint8_t ADS1256_ReadChipID(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	uint8_t id;
	ADS1256_WaitDRDY();
 8001a32:	f000 f835 	bl	8001aa0 <ADS1256_WaitDRDY>

	id = ADS1256_ReadReg(REG_STATUS);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff ffb4 	bl	80019a4 <ADS1256_ReadReg>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	b2db      	uxtb	r3, r3
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <ADS1256_SetDiffChannel>:
*	parameter:  _ch:  channel number  0--3
*	The return value:  four high status register
*********************************************************************************************************
*/
void ADS1256_SetDiffChannel(uint8_t _ch)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
		0101 = AIN5 (ADS1256 only)
		0110 = AIN6 (ADS1256 only)
		0111 = AIN7 (ADS1256 only)
		1xxx = AINCOM (when NSEL3 = 1, NSEL2, NSEL1, NSEL0 are ��don��t care��)
	*/
	if (_ch == 0)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d104      	bne.n	8001a68 <ADS1256_SetDiffChannel+0x1a>
	{
		ADS1256_WriteReg(REG_MUX, (0 << 4) | 1);	/* DiffChannal  AIN0�� AIN1 */
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff ff77 	bl	8001954 <ADS1256_WriteReg>
	}
	else if (_ch == 3)
	{
		ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);	/*DiffChannal   AIN6�� AIN7 */
	}
}
 8001a66:	e016      	b.n	8001a96 <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 1)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d104      	bne.n	8001a78 <ADS1256_SetDiffChannel+0x2a>
		ADS1256_WriteReg(REG_MUX, (2 << 4) | 3);	/*DiffChannal   AIN2�� AIN3 */
 8001a6e:	2123      	movs	r1, #35	; 0x23
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ff6f 	bl	8001954 <ADS1256_WriteReg>
}
 8001a76:	e00e      	b.n	8001a96 <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 2)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d104      	bne.n	8001a88 <ADS1256_SetDiffChannel+0x3a>
		ADS1256_WriteReg(REG_MUX, (4 << 4) | 5);	/*DiffChannal    AIN4�� AIN5 */
 8001a7e:	2145      	movs	r1, #69	; 0x45
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff ff67 	bl	8001954 <ADS1256_WriteReg>
}
 8001a86:	e006      	b.n	8001a96 <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 3)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d103      	bne.n	8001a96 <ADS1256_SetDiffChannel+0x48>
		ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);	/*DiffChannal   AIN6�� AIN7 */
 8001a8e:	2167      	movs	r1, #103	; 0x67
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff ff5f 	bl	8001954 <ADS1256_WriteReg>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <ADS1256_WaitDRDY>:
*	parameter:  NULL
*	The return value:  NULL
*********************************************************************************************************
*/
void ADS1256_WaitDRDY(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	uint32_t i;


	for (i = 0; i < 400000; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	e009      	b.n	8001ac0 <ADS1256_WaitDRDY+0x20>
	{
		if (DRDY_IS_LOW())
 8001aac:	2104      	movs	r1, #4
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <ADS1256_WaitDRDY+0x34>)
 8001ab0:	f00c fc9c 	bl	800e3ec <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <ADS1256_WaitDRDY+0x2a>
	for (i = 0; i < 400000; i++)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <ADS1256_WaitDRDY+0x38>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d9f1      	bls.n	8001aac <ADS1256_WaitDRDY+0xc>
	}
	if (i >= 400000)
	{
		//printf("ADS1256_WaitDRDY() Time Out ...\r\n");
	}
}
 8001ac8:	e000      	b.n	8001acc <ADS1256_WaitDRDY+0x2c>
			break;
 8001aca:	bf00      	nop
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	00061a7f 	.word	0x00061a7f

08001adc <updateSdramPointer>:
static uint32_t sdramPointerTmp = 0;
static uint32_t sampleCounter = 0;
static BOOL recordState = FALSE;
static BOOL playbackState = FALSE;

void updateSdramPointer(){
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	sdram_pointer = pattern_audio_map[looper.StartPattern].sample_position * looper.SampleBytes;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <updateSdramPointer+0x30>)
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	490a      	ldr	r1, [pc, #40]	; (8001b10 <updateSdramPointer+0x34>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3304      	adds	r3, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <updateSdramPointer+0x30>)
 8001af6:	6912      	ldr	r2, [r2, #16]
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <updateSdramPointer+0x38>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20001220 	.word	0x20001220
 8001b10:	20000560 	.word	0x20000560
 8001b14:	200004bc 	.word	0x200004bc

08001b18 <setSampleCounter>:

void setSampleCounter(uint32_t cnt){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	sampleCounter = cnt;
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <setSampleCounter+0x1c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200004cc 	.word	0x200004cc

08001b38 <getStartEndPatterns>:

void getStartEndPatterns(uint32_t *start,uint32_t *end){
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	*start = startPatternTmp;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <getStartEndPatterns+0x28>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
	*end = endPatternTmp;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <getStartEndPatterns+0x2c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200004c0 	.word	0x200004c0
 8001b64:	200004c4 	.word	0x200004c4

08001b68 <setStartEndPatterns>:

void setStartEndPatterns(uint32_t start,uint32_t end){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	startPatternTmp = start;
 8001b72:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <setStartEndPatterns+0xb4>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6013      	str	r3, [r2, #0]
	endPatternTmp = end;
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <setStartEndPatterns+0xb8>)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6013      	str	r3, [r2, #0]

	// happens only when playback button is pressed immediately after recording
	if(looper.Function == AUDIO_ONLY && looper.Playback == TRUE && looper.Recording == TRUE)
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001b80:	7f5b      	ldrb	r3, [r3, #29]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d116      	bne.n	8001bb6 <setStartEndPatterns+0x4e>
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d111      	bne.n	8001bb6 <setStartEndPatterns+0x4e>
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10c      	bne.n	8001bb6 <setStartEndPatterns+0x4e>
		pattern_audio_map[endPatternTmp + 1].sample_position = sampleCounter;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <setStartEndPatterns+0xb8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <setStartEndPatterns+0xc0>)
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	4821      	ldr	r0, [pc, #132]	; (8001c2c <setStartEndPatterns+0xc4>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4403      	add	r3, r0
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	6019      	str	r1, [r3, #0]

	sdram_pointer =  sdramPointerTmp = pattern_audio_map[startPatternTmp].sample_position * looper.SampleBytes;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <setStartEndPatterns+0xb4>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	491c      	ldr	r1, [pc, #112]	; (8001c2c <setStartEndPatterns+0xc4>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001bcc:	6912      	ldr	r2, [r2, #16]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <setStartEndPatterns+0xc8>)
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <setStartEndPatterns+0xc8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <setStartEndPatterns+0xcc>)
 8001bdc:	6013      	str	r3, [r2, #0]
	looper.SamplesRead = pattern_audio_map[startPatternTmp].sample_position;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <setStartEndPatterns+0xb4>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4912      	ldr	r1, [pc, #72]	; (8001c2c <setStartEndPatterns+0xc4>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	3304      	adds	r3, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001bf4:	6093      	str	r3, [r2, #8]
	looper.SamplesWritten = pattern_audio_map[endPatternTmp + 1].sample_position;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <setStartEndPatterns+0xb8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	490b      	ldr	r1, [pc, #44]	; (8001c2c <setStartEndPatterns+0xc4>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <setStartEndPatterns+0xbc>)
 8001c0e:	60d3      	str	r3, [r2, #12]

	//}
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200004c0 	.word	0x200004c0
 8001c20:	200004c4 	.word	0x200004c4
 8001c24:	20001220 	.word	0x20001220
 8001c28:	200004cc 	.word	0x200004cc
 8001c2c:	20000560 	.word	0x20000560
 8001c30:	200004c8 	.word	0x200004c8
 8001c34:	200004bc 	.word	0x200004bc

08001c38 <signed16_unsigned12>:
	if(looper.Recording == TRUE){
		//looper.SampleOffset = 0;
	}
}

void signed16_unsigned12(int16_t *buf,int32_t start,int32_t stop){
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	for(;start < stop;start++)
 8001c44:	e017      	b.n	8001c76 <signed16_unsigned12+0x3e>
		buf[start] = SIGNED16_UNSIGNED12(buf[start]);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da00      	bge.n	8001c58 <signed16_unsigned12+0x20>
 8001c56:	3303      	adds	r3, #3
 8001c58:	109b      	asrs	r3, r3, #2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	b299      	uxth	r1, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b20a      	sxth	r2, r1
 8001c6e:	801a      	strh	r2, [r3, #0]
	for(;start < stop;start++)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3301      	adds	r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbe3      	blt.n	8001c46 <signed16_unsigned12+0xe>
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <setActiveChannelOne>:
	looper.ch1.mix32Max = looper.ch2.mix32Max = FALSE;
	looper.ch1.gain = looper.ch2.gain = 1.0;
	looper.ch1.CurrentSample = looper.ch2.CurrentSample = 0;
}

void setActiveChannelOne(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	looper.StartLooper = FALSE;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <setActiveChannelOne+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	709a      	strb	r2, [r3, #2]
	looper.ch1.Active = TRUE;
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <setActiveChannelOne+0x40>)
 8001c98:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f882 3020 	strb.w	r3, [r2, #32]
	looper.ch2.Active = FALSE;
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <setActiveChannelOne+0x40>)
 8001ca6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001caa:	f36f 0300 	bfc	r3, #0, #1
 8001cae:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	setSampleBytesAndOffset();
 8001cb2:	f000 f82f 	bl	8001d14 <setSampleBytesAndOffset>
	ADS1256_SetDiffChannel(0);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff fec9 	bl	8001a4e <ADS1256_SetDiffChannel>
	ADS1256_WriteCmd(CMD_SELFCAL);
 8001cbc:	20f0      	movs	r0, #240	; 0xf0
 8001cbe:	f7ff fe99 	bl	80019f4 <ADS1256_WriteCmd>
	ADS1256_WriteCmd(CMD_SELFOCAL);
 8001cc2:	20f1      	movs	r0, #241	; 0xf1
 8001cc4:	f7ff fe96 	bl	80019f4 <ADS1256_WriteCmd>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20001220 	.word	0x20001220

08001cd0 <setActiveChannelTwo>:

void setActiveChannelTwo(){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	looper.StartLooper = FALSE;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <setActiveChannelTwo+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	709a      	strb	r2, [r3, #2]
	looper.ch2.Active = TRUE;
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <setActiveChannelTwo+0x40>)
 8001cdc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	looper.ch1.Active = FALSE;
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <setActiveChannelTwo+0x40>)
 8001cea:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001cee:	f36f 0300 	bfc	r3, #0, #1
 8001cf2:	f882 3020 	strb.w	r3, [r2, #32]
	setSampleBytesAndOffset();
 8001cf6:	f000 f80d 	bl	8001d14 <setSampleBytesAndOffset>
	ADS1256_SetDiffChannel(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fea7 	bl	8001a4e <ADS1256_SetDiffChannel>
	ADS1256_WriteCmd(CMD_SELFCAL);
 8001d00:	20f0      	movs	r0, #240	; 0xf0
 8001d02:	f7ff fe77 	bl	80019f4 <ADS1256_WriteCmd>
	ADS1256_WriteCmd(CMD_SELFOCAL);
 8001d06:	20f1      	movs	r0, #241	; 0xf1
 8001d08:	f7ff fe74 	bl	80019f4 <ADS1256_WriteCmd>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20001220 	.word	0x20001220

08001d14 <setSampleBytesAndOffset>:

void setSampleBytesAndOffset(){
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	if(looper.TwoChannels == TRUE){
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d112      	bne.n	8001d48 <setSampleBytesAndOffset+0x34>
		looper.SampleBytes = 4;
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d24:	2204      	movs	r2, #4
 8001d26:	611a      	str	r2, [r3, #16]
		looper.ch1.Offset = 0;
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d2a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001d2e:	f36f 1307 	bfc	r3, #4, #4
 8001d32:	f882 3020 	strb.w	r3, [r2, #32]
		looper.ch2.Offset = 2;
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d38:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	f361 1307 	bfi	r3, r1, #4, #4
 8001d42:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
		looper.SampleBytes = 2;
		looper.ch1.Offset = 0;
		if(looper.ch2.Active == TRUE)
			looper.ch2.Offset = 0;
	}
}
 8001d46:	e018      	b.n	8001d7a <setSampleBytesAndOffset+0x66>
		looper.SampleBytes = 2;
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
		looper.ch1.Offset = 0;
 8001d4e:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d50:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001d54:	f36f 1307 	bfc	r3, #4, #4
 8001d58:	f882 3020 	strb.w	r3, [r2, #32]
		if(looper.ch2.Active == TRUE)
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <setSampleBytesAndOffset+0x66>
			looper.ch2.Offset = 0;
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <setSampleBytesAndOffset+0x70>)
 8001d6e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001d72:	f36f 1307 	bfc	r3, #4, #4
 8001d76:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20001220 	.word	0x20001220

08001d88 <toggleActiveBothChannels>:

void toggleActiveBothChannels(uint8_t state){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	looper.TwoChannels = !looper.TwoChannels;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <toggleActiveBothChannels+0x2c>)
 8001d94:	78db      	ldrb	r3, [r3, #3]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <toggleActiveBothChannels+0x2c>)
 8001da6:	70da      	strb	r2, [r3, #3]
	setSampleBytesAndOffset();
 8001da8:	f7ff ffb4 	bl	8001d14 <setSampleBytesAndOffset>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20001220 	.word	0x20001220

08001db8 <resetChannel>:


void resetChannel(__IO CHANNEL *ch){
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	//looper.SamplesWritten = 0;
	//looper.SamplesRead = 0;
	ch->Clipping = FALSE;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	7813      	ldrb	r3, [r2, #0]
 8001dc4:	f36f 0382 	bfc	r3, #2, #1
 8001dc8:	7013      	strb	r3, [r2, #0]
	ch->Overdub = FALSE;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	7813      	ldrb	r3, [r2, #0]
 8001dce:	f36f 03c3 	bfc	r3, #3, #1
 8001dd2:	7013      	strb	r3, [r2, #0]
	ch->mix32Max = 16383;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001dda:	605a      	str	r2, [r3, #4]
	ch->gain = 1.0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001de2:	60da      	str	r2, [r3, #12]
	ch->CurrentSample = 0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <pauseLoop>:
	pattern_audio_map[looper.StartPattern].channel_recorded[_CH1] = FALSE;
	pattern_audio_map[looper.StartPattern].channel_recorded[_CH2] = FALSE;
}


void pauseLoop() {
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
	if(looper.StartLooper == TRUE){
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <pauseLoop+0x78>)
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d11d      	bne.n	8001e42 <pauseLoop+0x4a>
		looper.StartLooper = FALSE;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <pauseLoop+0x78>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	709a      	strb	r2, [r3, #2]
		if(looper.Recording == TRUE)
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <pauseLoop+0x78>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <pauseLoop+0x28>
			recordState = looper.Recording;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <pauseLoop+0x78>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <pauseLoop+0x7c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
		if(looper.Playback == TRUE)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <pauseLoop+0x78>)
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d104      	bne.n	8001e34 <pauseLoop+0x3c>
			playbackState = looper.Playback;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <pauseLoop+0x78>)
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <pauseLoop+0x80>)
 8001e32:	701a      	strb	r2, [r3, #0]
		looper.Recording = FALSE;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <pauseLoop+0x78>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
		looper.Playback = FALSE;
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <pauseLoop+0x78>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
		looper.Recording = recordState;
		looper.Playback = playbackState;
		recordState = FALSE;
		playbackState = FALSE;
	}
}
 8001e40:	e010      	b.n	8001e64 <pauseLoop+0x6c>
		looper.StartLooper = TRUE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <pauseLoop+0x78>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	709a      	strb	r2, [r3, #2]
		looper.Recording = recordState;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <pauseLoop+0x7c>)
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <pauseLoop+0x78>)
 8001e4e:	701a      	strb	r2, [r3, #0]
		looper.Playback = playbackState;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <pauseLoop+0x80>)
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <pauseLoop+0x78>)
 8001e56:	705a      	strb	r2, [r3, #1]
		recordState = FALSE;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <pauseLoop+0x7c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
		playbackState = FALSE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <pauseLoop+0x80>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20001220 	.word	0x20001220
 8001e74:	200004d0 	.word	0x200004d0
 8001e78:	200004d1 	.word	0x200004d1

08001e7c <stopAll>:


void stopAll(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	looper.Recording = FALSE;
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <stopAll+0x48>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	looper.Playback = FALSE;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <stopAll+0x48>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	705a      	strb	r2, [r3, #1]
	looper.StartLooper = FALSE;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <stopAll+0x48>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	709a      	strb	r2, [r3, #2]
	looper.DrumState = DRUMS_STOPPED;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <stopAll+0x48>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
	//looper.Function = NONE;
	resetChannel(&looper.ch1);
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <stopAll+0x4c>)
 8001e9a:	f7ff ff8d 	bl	8001db8 <resetChannel>
	resetChannel(&looper.ch2);
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <stopAll+0x50>)
 8001ea0:	f7ff ff8a 	bl	8001db8 <resetChannel>
	setSampleCounter(0);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fe37 	bl	8001b18 <setSampleCounter>
	stopDrums();
 8001eaa:	f000 fef7 	bl	8002c9c <stopDrums>
	BSP_LED_Off(LED_RED);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f008 fd3c 	bl	800a92c <BSP_LED_Off>
	BSP_LED_Off(LED_GREEN);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f008 fd39 	bl	800a92c <BSP_LED_Off>
	show_status_line = TRUE;
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <stopAll+0x54>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20001220 	.word	0x20001220
 8001ec8:	20001240 	.word	0x20001240
 8001ecc:	20001250 	.word	0x20001250
 8001ed0:	20001c3c 	.word	0x20001c3c

08001ed4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_DAC_Init+0x54>)
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <MX_DAC_Init+0x58>)
 8001ee6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <MX_DAC_Init+0x54>)
 8001eea:	f00b fa09 	bl	800d300 <HAL_DAC_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8001ef4:	2131      	movs	r1, #49	; 0x31
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <MX_DAC_Init+0x5c>)
 8001ef8:	f004 ffde 	bl	8006eb8 <_Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8001efc:	230c      	movs	r3, #12
 8001efe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	2210      	movs	r2, #16
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <MX_DAC_Init+0x54>)
 8001f0c:	f00b fbbe 	bl	800d68c <HAL_DAC_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8001f16:	213a      	movs	r1, #58	; 0x3a
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_DAC_Init+0x5c>)
 8001f1a:	f004 ffcd 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004d4 	.word	0x200004d4
 8001f2c:	40007400 	.word	0x40007400
 8001f30:	08017e00 	.word	0x08017e00

08001f34 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_DAC_MspInit+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d15b      	bne.n	800200e <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_DAC_MspInit+0xe8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f92:	2303      	movs	r3, #3
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481f      	ldr	r0, [pc, #124]	; (8002020 <HAL_DAC_MspInit+0xec>)
 8001fa2:	f00c f877 	bl	800e094 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_DAC_MspInit+0xf4>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001fb2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fce:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe6:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001fee:	480d      	ldr	r0, [pc, #52]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8001ff0:	f00b fc12 	bl	800d818 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DAC_MspInit+0xce>
    {
      Error_Handler();
 8001ffa:	2165      	movs	r1, #101	; 0x65
 8001ffc:	480b      	ldr	r0, [pc, #44]	; (800202c <HAL_DAC_MspInit+0xf8>)
 8001ffe:	f004 ff5b 	bl	8006eb8 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_DAC_MspInit+0xf0>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40007400 	.word	0x40007400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	200004e8 	.word	0x200004e8
 8002028:	400260a0 	.word	0x400260a0
 800202c:	08017e00 	.word	0x08017e00

08002030 <disk_initialize>:
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_initialize) {
 800203a:	79fa      	ldrb	r2, [r7, #7]
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <disk_initialize+0x40>)
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <disk_initialize+0x34>
		return FATFS_LowLevelDrivers[pdrv].disk_initialize();
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <disk_initialize+0x40>)
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	e000      	b.n	8002066 <disk_initialize+0x36>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8002064:	2304      	movs	r3, #4
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000030 	.word	0x20000030

08002074 <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_status) {
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	490d      	ldr	r1, [pc, #52]	; (80020b8 <disk_status+0x44>)
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3304      	adds	r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <disk_status+0x38>
		return FATFS_LowLevelDrivers[pdrv].disk_status();
 8002094:	79fa      	ldrb	r2, [r7, #7]
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <disk_status+0x44>)
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3304      	adds	r3, #4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4798      	blx	r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	e000      	b.n	80020ae <disk_status+0x3a>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80020ac:	2304      	movs	r3, #4
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000030 	.word	0x20000030

080020bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <disk_read+0x1a>
		return RES_PARERR;
 80020d2:	2304      	movs	r3, #4
 80020d4:	e01a      	b.n	800210c <disk_read+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_read) {
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <disk_read+0x58>)
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3310      	adds	r3, #16
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <disk_read+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_read(buff, sector, count);
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	4909      	ldr	r1, [pc, #36]	; (8002114 <disk_read+0x58>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3310      	adds	r3, #16
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	4798      	blx	r3
 8002106:	4603      	mov	r3, r0
 8002108:	e000      	b.n	800210c <disk_read+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800210a:	2304      	movs	r3, #4
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000030 	.word	0x20000030

08002118 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4603      	mov	r3, r0
 8002126:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <disk_write+0x1a>
		return RES_PARERR;
 800212e:	2304      	movs	r3, #4
 8002130:	e01a      	b.n	8002168 <disk_write+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_write) {
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <disk_write+0x58>)
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	330c      	adds	r3, #12
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <disk_write+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_write(buff, sector, count);
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	4909      	ldr	r1, [pc, #36]	; (8002170 <disk_write+0x58>)
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	330c      	adds	r3, #12
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	4798      	blx	r3
 8002162:	4603      	mov	r3, r0
 8002164:	e000      	b.n	8002168 <disk_write+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8002166:	2304      	movs	r3, #4
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000030 	.word	0x20000030

08002174 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	603a      	str	r2, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	460b      	mov	r3, r1
 8002182:	71bb      	strb	r3, [r7, #6]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_ioctl) {
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	490f      	ldr	r1, [pc, #60]	; (80021c4 <disk_ioctl+0x50>)
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3308      	adds	r3, #8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <disk_ioctl+0x44>
		return FATFS_LowLevelDrivers[pdrv].disk_ioctl(cmd, buff);
 800219a:	79fa      	ldrb	r2, [r7, #7]
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <disk_ioctl+0x50>)
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3308      	adds	r3, #8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4610      	mov	r0, r2
 80021b2:	4798      	blx	r3
 80021b4:	4603      	mov	r3, r0
 80021b6:	e000      	b.n	80021ba <disk_ioctl+0x46>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80021b8:	2304      	movs	r3, #4
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000030 	.word	0x20000030

080021c8 <get_fattime>:
#endif

/*-----------------------------------------------------------------------*/
/* Get time for fatfs for files                                          */
/*-----------------------------------------------------------------------*/
__weak DWORD get_fattime(void) {
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	/* Returns current time packed into a DWORD variable */
	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <get_fattime+0x10>)
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	42fc0000 	.word	0x42fc0000

080021dc <TM_FATFS_SD_disk_initialize>:

/* Function declarations to prevent link errors if functions are not found */
__weak DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_initialize(void) {return RES_ERROR;}
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
 80021e0:	2301      	movs	r3, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <TM_FATFS_USB_disk_initialize>:
__weak DSTATUS TM_FATFS_USB_disk_initialize(void) {return RES_ERROR;}
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	2301      	movs	r3, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <TM_FATFS_SDRAM_disk_initialize>:
__weak DSTATUS TM_FATFS_SDRAM_disk_initialize(void) {return RES_ERROR;}
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
 8002200:	2301      	movs	r3, #1
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <TM_FATFS_SPI_FLASH_disk_initialize>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_initialize(void) {return RES_ERROR;}
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
 8002210:	2301      	movs	r3, #1
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <TM_FATFS_SD_disk_status>:

__weak DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_status(void) {return RES_ERROR;}
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 8002220:	2301      	movs	r3, #1
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TM_FATFS_USB_disk_status>:
__weak DSTATUS TM_FATFS_USB_disk_status(void) {return RES_ERROR;}
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
 8002230:	2301      	movs	r3, #1
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <TM_FATFS_SDRAM_disk_status>:
__weak DSTATUS TM_FATFS_SDRAM_disk_status(void) {return RES_ERROR;}
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
 8002240:	2301      	movs	r3, #1
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <TM_FATFS_SPI_FLASH_disk_status>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_status(void) {return RES_ERROR;}
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
 8002250:	2301      	movs	r3, #1
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <TM_FATFS_SD_disk_ioctl>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	2301      	movs	r3, #1
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <TM_FATFS_USB_disk_ioctl>:
__weak DRESULT TM_FATFS_USB_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	6039      	str	r1, [r7, #0]
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	2301      	movs	r3, #1
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <TM_FATFS_SDRAM_disk_ioctl>:
__weak DRESULT TM_FATFS_SDRAM_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	2301      	movs	r3, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <TM_FATFS_SPI_FLASH_disk_ioctl>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	6039      	str	r1, [r7, #0]
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	2301      	movs	r3, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <TM_FATFS_SD_disk_read>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	2301      	movs	r3, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <TM_FATFS_USB_disk_read>:
__weak DRESULT TM_FATFS_USB_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	2301      	movs	r3, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <TM_FATFS_SDRAM_disk_read>:
__weak DRESULT TM_FATFS_SDRAM_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	2301      	movs	r3, #1
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <TM_FATFS_SPI_FLASH_disk_read>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	2301      	movs	r3, #1
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <TM_FATFS_SD_disk_write>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	2301      	movs	r3, #1
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <TM_FATFS_USB_disk_write>:
__weak DRESULT TM_FATFS_USB_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	2301      	movs	r3, #1
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <TM_FATFS_SDRAM_disk_write>:
__weak DRESULT TM_FATFS_SDRAM_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	2301      	movs	r3, #1
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <TM_FATFS_SPI_FLASH_disk_write>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	2301      	movs	r3, #1
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_DMA_Init+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <MX_DMA_Init+0x88>)
 80023a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_DMA_Init+0x88>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_DMA_Init+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <MX_DMA_Init+0x88>)
 80023c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_DMA_Init+0x88>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 2);
 80023d2:	2202      	movs	r2, #2
 80023d4:	2101      	movs	r1, #1
 80023d6:	2011      	movs	r0, #17
 80023d8:	f00a ff31 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023dc:	2011      	movs	r0, #17
 80023de:	f00a ff4a 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 3);
 80023e2:	2203      	movs	r2, #3
 80023e4:	2101      	movs	r1, #1
 80023e6:	2039      	movs	r0, #57	; 0x39
 80023e8:	f00a ff29 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80023ec:	2039      	movs	r0, #57	; 0x39
 80023ee:	f00a ff42 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2103      	movs	r1, #3
 80023f6:	203b      	movs	r0, #59	; 0x3b
 80023f8:	f00a ff21 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80023fc:	203b      	movs	r0, #59	; 0x3b
 80023fe:	f00a ff3a 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 3, 2);
 8002402:	2202      	movs	r2, #2
 8002404:	2103      	movs	r1, #3
 8002406:	203c      	movs	r0, #60	; 0x3c
 8002408:	f00a ff19 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800240c:	203c      	movs	r0, #60	; 0x3c
 800240e:	f00a ff32 	bl	800d276 <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <getRhythmParams>:
__IO PatternTimes tim2;
__IO PatternTimes *timptr;
__IO PatternBeats *patptr;


void getRhythmParams(uint32_t *bts,uint32_t *div,uint32_t *time){
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	*bts = beats;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <getRhythmParams+0x30>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]
	*div = division;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <getRhythmParams+0x34>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	601a      	str	r2, [r3, #0]
	*time = beattime;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <getRhythmParams+0x38>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	200000ec 	.word	0x200000ec
 8002454:	200000e8 	.word	0x200000e8
 8002458:	200000e4 	.word	0x200000e4

0800245c <seekPattern>:

static void seekPattern(PatternData *pattern_audio_map,uint32_t ind){
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	switch_buff = FALSE;
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <seekPattern+0x54>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
	SRAM_seekRead(pattern_audio_map[ind].sram_position,SRAM_SET);
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fcb9 	bl	8000df8 <SRAM_seekRead>
	readSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8002486:	2110      	movs	r1, #16
 8002488:	480a      	ldr	r0, [pc, #40]	; (80024b4 <seekPattern+0x58>)
 800248a:	f7fe fe0f 	bl	80010ac <readSRAM>
	setPatternTime(&pat1,&tim1);
 800248e:	490a      	ldr	r1, [pc, #40]	; (80024b8 <seekPattern+0x5c>)
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <seekPattern+0x58>)
 8002492:	f000 fc15 	bl	8002cc0 <setPatternTime>
	readSRAM((uint8_t *)drumBuffA,tim1.subbeats * 5);
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <seekPattern+0x5c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <seekPattern+0x60>)
 80024a4:	f7fe fe02 	bl	80010ac <readSRAM>

}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000558 	.word	0x20000558
 80024b4:	20001174 	.word	0x20001174
 80024b8:	20001194 	.word	0x20001194
 80024bc:	20000ecc 	.word	0x20000ecc

080024c0 <updateMetronome>:

void updateMetronome(){
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	metronomeUpdated = TRUE;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <updateMetronome+0x14>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000548 	.word	0x20000548

080024d8 <drumLoop>:
	//looper.SampleOffset = pattern_audio_map[looper.StartPattern].sample_position;
	//sdram_pointer = looper.SampleOffset * 2;
	//looper.SampleCount = pattern_audio_map[looper.EndPattern + 1].sample_position;
}

void drumLoop(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af02      	add	r7, sp, #8
	uint32_t tmp = looper.StartPattern;
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <drumLoop+0x21c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	607b      	str	r3, [r7, #4]
	switch_buff = FALSE;
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <drumLoop+0x220>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
	first_beat = FALSE;
 80024ea:	4b84      	ldr	r3, [pc, #528]	; (80026fc <drumLoop+0x224>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80024f0:	4883      	ldr	r0, [pc, #524]	; (8002700 <drumLoop+0x228>)
 80024f2:	f00e ffcd 	bl	8011490 <HAL_TIM_Base_Start_IT>
	seekPattern(pattern_audio_map,looper.StartPattern);
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <drumLoop+0x21c>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4881      	ldr	r0, [pc, #516]	; (8002704 <drumLoop+0x22c>)
 80024fe:	f7ff ffad 	bl	800245c <seekPattern>
	looper.Function = AUDIO_DRUMS;
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <drumLoop+0x21c>)
 8002504:	2202      	movs	r2, #2
 8002506:	775a      	strb	r2, [r3, #29]
	looper.DrumState = DRUMS_STARTED;
 8002508:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <drumLoop+0x21c>)
 800250a:	2201      	movs	r2, #1
 800250c:	771a      	strb	r2, [r3, #28]
	resetDrums();
 800250e:	f001 f88f 	bl	8003630 <resetDrums>

	//setStartEndPatterns(looper.StartPattern,looper.EndPattern);

	while(looper.DrumState == DRUMS_STARTED && looper.StartPattern < (looper.EndPattern + 1)){
 8002512:	e0c6      	b.n	80026a2 <drumLoop+0x1ca>
			updateSdramPointer();
 8002514:	f7ff fae2 	bl	8001adc <updateSdramPointer>
			looper.StartLooper = TRUE;
 8002518:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <drumLoop+0x21c>)
 800251a:	2201      	movs	r2, #1
 800251c:	709a      	strb	r2, [r3, #2]

			if(switch_buff == FALSE){
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <drumLoop+0x220>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d129      	bne.n	800257c <drumLoop+0xa4>
					updatePatternTime(&pat1,&tim1);
 8002528:	4977      	ldr	r1, [pc, #476]	; (8002708 <drumLoop+0x230>)
 800252a:	4878      	ldr	r0, [pc, #480]	; (800270c <drumLoop+0x234>)
 800252c:	f000 fbfc 	bl	8002d28 <updatePatternTime>
					timptr = &tim1;
 8002530:	4b77      	ldr	r3, [pc, #476]	; (8002710 <drumLoop+0x238>)
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <drumLoop+0x230>)
 8002534:	601a      	str	r2, [r3, #0]
					patptr = &pat1;
 8002536:	4b77      	ldr	r3, [pc, #476]	; (8002714 <drumLoop+0x23c>)
 8002538:	4a74      	ldr	r2, [pc, #464]	; (800270c <drumLoop+0x234>)
 800253a:	601a      	str	r2, [r3, #0]
					drumBuffReadPtr = drumBuffA;
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <drumLoop+0x240>)
 800253e:	4a77      	ldr	r2, [pc, #476]	; (800271c <drumLoop+0x244>)
 8002540:	601a      	str	r2, [r3, #0]
					menuShowStatus();
 8002542:	f005 fbb7 	bl	8007cb4 <menuShowStatus>
					if(looper.StartPattern == looper.EndPattern)
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <drumLoop+0x21c>)
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <drumLoop+0x21c>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	429a      	cmp	r2, r3
 8002550:	d03c      	beq.n	80025cc <drumLoop+0xf4>
						goto wait_first_beat;
					readSRAM((uint8_t *)&pat2,sizeof(PatternBeats));
 8002552:	2110      	movs	r1, #16
 8002554:	4872      	ldr	r0, [pc, #456]	; (8002720 <drumLoop+0x248>)
 8002556:	f7fe fda9 	bl	80010ac <readSRAM>
					setPatternTime(&pat2,&tim2);
 800255a:	4972      	ldr	r1, [pc, #456]	; (8002724 <drumLoop+0x24c>)
 800255c:	4870      	ldr	r0, [pc, #448]	; (8002720 <drumLoop+0x248>)
 800255e:	f000 fbaf 	bl	8002cc0 <setPatternTime>
					readSRAM((uint8_t *)drumBuffB,tim2.subbeats * NUM_ALL_TRACKS);
 8002562:	4b70      	ldr	r3, [pc, #448]	; (8002724 <drumLoop+0x24c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	4619      	mov	r1, r3
 800256e:	486e      	ldr	r0, [pc, #440]	; (8002728 <drumLoop+0x250>)
 8002570:	f7fe fd9c 	bl	80010ac <readSRAM>
					switch_buff = TRUE;
 8002574:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <drumLoop+0x220>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e02a      	b.n	80025d2 <drumLoop+0xfa>
				}
				else{
					updatePatternTime(&pat2,&tim2);
 800257c:	4969      	ldr	r1, [pc, #420]	; (8002724 <drumLoop+0x24c>)
 800257e:	4868      	ldr	r0, [pc, #416]	; (8002720 <drumLoop+0x248>)
 8002580:	f000 fbd2 	bl	8002d28 <updatePatternTime>
					timptr = &tim2;
 8002584:	4b62      	ldr	r3, [pc, #392]	; (8002710 <drumLoop+0x238>)
 8002586:	4a67      	ldr	r2, [pc, #412]	; (8002724 <drumLoop+0x24c>)
 8002588:	601a      	str	r2, [r3, #0]
					patptr = &pat2;
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <drumLoop+0x23c>)
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <drumLoop+0x248>)
 800258e:	601a      	str	r2, [r3, #0]
					drumBuffReadPtr = drumBuffB;
 8002590:	4b61      	ldr	r3, [pc, #388]	; (8002718 <drumLoop+0x240>)
 8002592:	4a65      	ldr	r2, [pc, #404]	; (8002728 <drumLoop+0x250>)
 8002594:	601a      	str	r2, [r3, #0]
					if(looper.StartPattern == looper.EndPattern)
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <drumLoop+0x21c>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <drumLoop+0x21c>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d016      	beq.n	80025d0 <drumLoop+0xf8>
						goto wait_first_beat;
					readSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 80025a2:	2110      	movs	r1, #16
 80025a4:	4859      	ldr	r0, [pc, #356]	; (800270c <drumLoop+0x234>)
 80025a6:	f7fe fd81 	bl	80010ac <readSRAM>
					setPatternTime(&pat1,&tim1);
 80025aa:	4957      	ldr	r1, [pc, #348]	; (8002708 <drumLoop+0x230>)
 80025ac:	4857      	ldr	r0, [pc, #348]	; (800270c <drumLoop+0x234>)
 80025ae:	f000 fb87 	bl	8002cc0 <setPatternTime>
					readSRAM((uint8_t *)drumBuffA,tim1.subbeats * NUM_ALL_TRACKS);
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <drumLoop+0x230>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	4857      	ldr	r0, [pc, #348]	; (800271c <drumLoop+0x244>)
 80025c0:	f7fe fd74 	bl	80010ac <readSRAM>
					switch_buff = FALSE;
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <drumLoop+0x220>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e002      	b.n	80025d2 <drumLoop+0xfa>
						goto wait_first_beat;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <drumLoop+0xfa>
						goto wait_first_beat;
 80025d0:	bf00      	nop
				}

				wait_first_beat:
				sprintf(lcdline," Playing bar: %-4u",(unsigned int)(looper.StartPattern + 1));
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <drumLoop+0x21c>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	461a      	mov	r2, r3
 80025da:	4954      	ldr	r1, [pc, #336]	; (800272c <drumLoop+0x254>)
 80025dc:	4854      	ldr	r0, [pc, #336]	; (8002730 <drumLoop+0x258>)
 80025de:	f014 fb25 	bl	8016c2c <siprintf>
				TM_ILI9341_Puts(10, 150, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 80025e2:	f240 531d 	movw	r3, #1309	; 0x51d
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <drumLoop+0x25c>)
 80025ee:	4a50      	ldr	r2, [pc, #320]	; (8002730 <drumLoop+0x258>)
 80025f0:	2196      	movs	r1, #150	; 0x96
 80025f2:	200a      	movs	r0, #10
 80025f4:	f009 fc30 	bl	800be58 <TM_ILI9341_Puts>

				while(first_beat == FALSE){
 80025f8:	e00a      	b.n	8002610 <drumLoop+0x138>
					if(looper.DrumState == DRUMS_PAUSED || looper.DrumState == DRUMS_STOPPED)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <drumLoop+0x21c>)
 80025fc:	7f1b      	ldrb	r3, [r3, #28]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d05c      	beq.n	80026be <drumLoop+0x1e6>
 8002604:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <drumLoop+0x21c>)
 8002606:	7f1b      	ldrb	r3, [r3, #28]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d057      	beq.n	80026be <drumLoop+0x1e6>
						goto end_drum_loop;
					continue;
 800260e:	bf00      	nop
				while(first_beat == FALSE){
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <drumLoop+0x224>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ef      	beq.n	80025fa <drumLoop+0x122>
				}

				first_beat = FALSE;
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <drumLoop+0x224>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
				if(looper.Recording == TRUE)
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <drumLoop+0x21c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d115      	bne.n	8002656 <drumLoop+0x17e>
					pattern_audio_map[looper.StartPattern].channel_recorded[ACTIVE_CHANNEL_INDEX] = TRUE;
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <drumLoop+0x21c>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <drumLoop+0x21c>)
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f083 0301 	eor.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4930      	ldr	r1, [pc, #192]	; (8002704 <drumLoop+0x22c>)
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	4403      	add	r3, r0
 8002650:	3308      	adds	r3, #8
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
				looper.StartPattern++;
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <drumLoop+0x21c>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	3301      	adds	r3, #1
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <drumLoop+0x21c>)
 800265e:	6153      	str	r3, [r2, #20]

				if(looper.StartPattern == (looper.EndPattern + 1)){
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <drumLoop+0x21c>)
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <drumLoop+0x21c>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	3301      	adds	r3, #1
 800266a:	429a      	cmp	r2, r3
 800266c:	d119      	bne.n	80026a2 <drumLoop+0x1ca>
					if(looper.Recording == TRUE){
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <drumLoop+0x21c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d103      	bne.n	8002680 <drumLoop+0x1a8>
						looper.Recording = FALSE;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <drumLoop+0x21c>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
						goto end_drum_loop;
 800267e:	e021      	b.n	80026c4 <drumLoop+0x1ec>
					}

					looper.StartPattern = tmp;	// restore original start pattern number
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <drumLoop+0x21c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6153      	str	r3, [r2, #20]
					// setStartEndPatterns in read_sample and read_samples
					switch_buff = FALSE;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <drumLoop+0x220>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
					first_beat = FALSE;
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <drumLoop+0x224>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
					seekPattern(pattern_audio_map,looper.StartPattern);
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <drumLoop+0x21c>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4619      	mov	r1, r3
 8002698:	481a      	ldr	r0, [pc, #104]	; (8002704 <drumLoop+0x22c>)
 800269a:	f7ff fedf 	bl	800245c <seekPattern>
					resetDrums();
 800269e:	f000 ffc7 	bl	8003630 <resetDrums>
	while(looper.DrumState == DRUMS_STARTED && looper.StartPattern < (looper.EndPattern + 1)){
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <drumLoop+0x21c>)
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10a      	bne.n	80026c2 <drumLoop+0x1ea>
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <drumLoop+0x21c>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <drumLoop+0x21c>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	3301      	adds	r3, #1
 80026b6:	429a      	cmp	r2, r3
 80026b8:	f4ff af2c 	bcc.w	8002514 <drumLoop+0x3c>
				}

		}


		end_drum_loop:
 80026bc:	e001      	b.n	80026c2 <drumLoop+0x1ea>
						goto end_drum_loop;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <drumLoop+0x1ec>
		end_drum_loop:
 80026c2:	bf00      	nop
		stopDrums();
 80026c4:	f000 faea 	bl	8002c9c <stopDrums>
		looper.StartPattern = tmp;
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <drumLoop+0x21c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6153      	str	r3, [r2, #20]
		looper.StartLooper = FALSE;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <drumLoop+0x21c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	709a      	strb	r2, [r3, #2]
		looper.Playback = FALSE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <drumLoop+0x21c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	705a      	strb	r2, [r3, #1]
		looper.Recording = FALSE;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <drumLoop+0x21c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		BSP_LED_Off(LED_GREEN);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f008 f923 	bl	800a92c <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f008 f920 	bl	800a92c <BSP_LED_Off>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20001220 	.word	0x20001220
 80026f8:	20000558 	.word	0x20000558
 80026fc:	20000559 	.word	0x20000559
 8002700:	20002278 	.word	0x20002278
 8002704:	20000560 	.word	0x20000560
 8002708:	20001194 	.word	0x20001194
 800270c:	20001174 	.word	0x20001174
 8002710:	200011b4 	.word	0x200011b4
 8002714:	200011b8 	.word	0x200011b8
 8002718:	2000116c 	.word	0x2000116c
 800271c:	20000ecc 	.word	0x20000ecc
 8002720:	20001184 	.word	0x20001184
 8002724:	200011a4 	.word	0x200011a4
 8002728:	20000fbc 	.word	0x20000fbc
 800272c:	08017f2c 	.word	0x08017f2c
 8002730:	20001264 	.word	0x20001264
 8002734:	200001e0 	.word	0x200001e0

08002738 <show_rhythm_param_values>:

static void show_rhythm_param_values(uint8_t currentPosition){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af02      	add	r7, sp, #8
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	switch(currentPosition){
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d02e      	beq.n	80027a6 <show_rhythm_param_values+0x6e>
 8002748:	2b02      	cmp	r3, #2
 800274a:	dc40      	bgt.n	80027ce <show_rhythm_param_values+0x96>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <show_rhythm_param_values+0x1e>
 8002750:	2b01      	cmp	r3, #1
 8002752:	d014      	beq.n	800277e <show_rhythm_param_values+0x46>
		case 2: sprintf(lcdline,"%3u",(unsigned int)beattime);
				TM_ILI9341_Puts(120, 130,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
				break;
		}

}
 8002754:	e03b      	b.n	80027ce <show_rhythm_param_values+0x96>
		case 0: sprintf(lcdline,"%3u",(unsigned int)beats);
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <show_rhythm_param_values+0xa0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	491f      	ldr	r1, [pc, #124]	; (80027dc <show_rhythm_param_values+0xa4>)
 800275e:	4820      	ldr	r0, [pc, #128]	; (80027e0 <show_rhythm_param_values+0xa8>)
 8002760:	f014 fa64 	bl	8016c2c <siprintf>
				TM_ILI9341_Puts(120, 90,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 8002764:	f240 531d 	movw	r3, #1309	; 0x51d
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <show_rhythm_param_values+0xac>)
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <show_rhythm_param_values+0xa8>)
 8002774:	215a      	movs	r1, #90	; 0x5a
 8002776:	2078      	movs	r0, #120	; 0x78
 8002778:	f009 fb6e 	bl	800be58 <TM_ILI9341_Puts>
				break;
 800277c:	e027      	b.n	80027ce <show_rhythm_param_values+0x96>
		case 1: sprintf(lcdline,"%3u",(unsigned int)division);
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <show_rhythm_param_values+0xb0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4915      	ldr	r1, [pc, #84]	; (80027dc <show_rhythm_param_values+0xa4>)
 8002786:	4816      	ldr	r0, [pc, #88]	; (80027e0 <show_rhythm_param_values+0xa8>)
 8002788:	f014 fa50 	bl	8016c2c <siprintf>
				TM_ILI9341_Puts(120, 110,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 800278c:	f240 531d 	movw	r3, #1309	; 0x51d
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <show_rhythm_param_values+0xac>)
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <show_rhythm_param_values+0xa8>)
 800279c:	216e      	movs	r1, #110	; 0x6e
 800279e:	2078      	movs	r0, #120	; 0x78
 80027a0:	f009 fb5a 	bl	800be58 <TM_ILI9341_Puts>
				break;
 80027a4:	e013      	b.n	80027ce <show_rhythm_param_values+0x96>
		case 2: sprintf(lcdline,"%3u",(unsigned int)beattime);
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <show_rhythm_param_values+0xb4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	490b      	ldr	r1, [pc, #44]	; (80027dc <show_rhythm_param_values+0xa4>)
 80027ae:	480c      	ldr	r0, [pc, #48]	; (80027e0 <show_rhythm_param_values+0xa8>)
 80027b0:	f014 fa3c 	bl	8016c2c <siprintf>
				TM_ILI9341_Puts(120, 130,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 80027b4:	f240 531d 	movw	r3, #1309	; 0x51d
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <show_rhythm_param_values+0xac>)
 80027c2:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <show_rhythm_param_values+0xa8>)
 80027c4:	2182      	movs	r1, #130	; 0x82
 80027c6:	2078      	movs	r0, #120	; 0x78
 80027c8:	f009 fb46 	bl	800be58 <TM_ILI9341_Puts>
				break;
 80027cc:	bf00      	nop
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200000ec 	.word	0x200000ec
 80027dc:	08017f40 	.word	0x08017f40
 80027e0:	20001264 	.word	0x20001264
 80027e4:	200001e0 	.word	0x200001e0
 80027e8:	200000e8 	.word	0x200000e8
 80027ec:	200000e4 	.word	0x200000e4

080027f0 <show_rhythm_params>:

static void show_rhythm_params(uint8_t currentPosition){
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
	char *options[4] = {"Beats","Subbeats","Time [bpm]","Other"};
 80027fa:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <show_rhythm_params+0xbc>)
 80027fc:	f107 0408 	add.w	r4, r7, #8
 8002800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002802:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menuMultiLine(4,90,options[0],options[1],options[2],options[3]);
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	9201      	str	r2, [sp, #4]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4603      	mov	r3, r0
 8002814:	460a      	mov	r2, r1
 8002816:	215a      	movs	r1, #90	; 0x5a
 8002818:	2004      	movs	r0, #4
 800281a:	f005 fb91 	bl	8007f40 <menuMultiLine>
	TM_ILI9341_Puts(10, 90 + currentPosition * 20,options[currentPosition], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	b29b      	uxth	r3, r3
 800282c:	335a      	adds	r3, #90	; 0x5a
 800282e:	b299      	uxth	r1, r3
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	3318      	adds	r3, #24
 8002836:	443b      	add	r3, r7
 8002838:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800283c:	231f      	movs	r3, #31
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <show_rhythm_params+0xc0>)
 8002848:	200a      	movs	r0, #10
 800284a:	f009 fb05 	bl	800be58 <TM_ILI9341_Puts>
	if(currentPosition > 0)
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01a      	beq.n	800288a <show_rhythm_params+0x9a>
		TM_ILI9341_Puts(10, 90 + currentPosition * 20 - 20,options[currentPosition - 1], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	b29b      	uxth	r3, r3
 8002862:	3346      	adds	r3, #70	; 0x46
 8002864:	b299      	uxth	r1, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	3b01      	subs	r3, #1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	3318      	adds	r3, #24
 800286e:	443b      	add	r3, r7
 8002870:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002874:	f240 531d 	movw	r3, #1309	; 0x51d
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <show_rhythm_params+0xc0>)
 8002882:	200a      	movs	r0, #10
 8002884:	f009 fae8 	bl	800be58 <TM_ILI9341_Puts>
	 else
		 TM_ILI9341_Puts(10, 90 + 3 * 20,options[3], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
}
 8002888:	e00b      	b.n	80028a2 <show_rhythm_params+0xb2>
		 TM_ILI9341_Puts(10, 90 + 3 * 20,options[3], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	f240 531d 	movw	r3, #1309	; 0x51d
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <show_rhythm_params+0xc0>)
 800289a:	2196      	movs	r1, #150	; 0x96
 800289c:	200a      	movs	r0, #10
 800289e:	f009 fadb 	bl	800be58 <TM_ILI9341_Puts>
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd90      	pop	{r4, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	08017f44 	.word	0x08017f44
 80028b0:	200001e0 	.word	0x200001e0

080028b4 <change_value>:

static void change_value(uint8_t currentPosition,TM_KEYPAD_Button_t key){
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	460a      	mov	r2, r1
 80028be:	71fb      	strb	r3, [r7, #7]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71bb      	strb	r3, [r7, #6]
	uint32_t *ptr;
	switch(currentPosition){
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d00c      	beq.n	80028e4 <change_value+0x30>
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	dc0d      	bgt.n	80028ea <change_value+0x36>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <change_value+0x24>
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <change_value+0x2a>
 80028d6:	e008      	b.n	80028ea <change_value+0x36>
	case 0: ptr = &beats;
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <change_value+0xa8>)
 80028da:	60fb      	str	r3, [r7, #12]
			break;
 80028dc:	e005      	b.n	80028ea <change_value+0x36>
	case 1: ptr = &division;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <change_value+0xac>)
 80028e0:	60fb      	str	r3, [r7, #12]
			break;
 80028e2:	e002      	b.n	80028ea <change_value+0x36>
	case 2: ptr = &beattime;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <change_value+0xb0>)
 80028e6:	60fb      	str	r3, [r7, #12]
			break;
 80028e8:	bf00      	nop
	}

	if(*ptr == 0)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <change_value+0x9c>
		return;

	if(key == TM_KEYPAD_Button_5 && beats > 1 && division > 1)
 80028f2:	79bb      	ldrb	r3, [r7, #6]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d10d      	bne.n	8002914 <change_value+0x60>
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <change_value+0xa8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d909      	bls.n	8002914 <change_value+0x60>
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <change_value+0xac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d905      	bls.n	8002914 <change_value+0x60>
		(*ptr)--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e00f      	b.n	8002934 <change_value+0x80>
	else if(key == TM_KEYPAD_Button_2 && division * beats < MAX_SUBBEATS)
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d10c      	bne.n	8002934 <change_value+0x80>
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <change_value+0xac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <change_value+0xa8>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	2b2f      	cmp	r3, #47	; 0x2f
 8002928:	d804      	bhi.n	8002934 <change_value+0x80>
		(*ptr)++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]
	if(division * beats > MAX_SUBBEATS)
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <change_value+0xac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <change_value+0xa8>)
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	2b30      	cmp	r3, #48	; 0x30
 8002942:	d906      	bls.n	8002952 <change_value+0x9e>
		(*ptr)--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e000      	b.n	8002952 <change_value+0x9e>
		return;
 8002950:	bf00      	nop
}
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	200000ec 	.word	0x200000ec
 8002960:	200000e8 	.word	0x200000e8
 8002964:	200000e4 	.word	0x200000e4

08002968 <select_rhythm_params>:


void select_rhythm_params(){
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af02      	add	r7, sp, #8
	uint8_t currentPosition = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8002972:	f24a 2054 	movw	r0, #41556	; 0xa254
 8002976:	f009 f96b 	bl	800bc50 <TM_ILI9341_Fill>
	menuMultiLine(3,10,"[0] Exit","[1:4] Select options","[2:5] Set value");
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <select_rhythm_params+0xc4>)
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <select_rhythm_params+0xc8>)
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <select_rhythm_params+0xcc>)
 8002982:	210a      	movs	r1, #10
 8002984:	2003      	movs	r0, #3
 8002986:	f005 fadb 	bl	8007f40 <menuMultiLine>
	show_rhythm_params(0);
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff ff30 	bl	80027f0 <show_rhythm_params>
	show_rhythm_param_values(0);
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fed1 	bl	8002738 <show_rhythm_param_values>
	show_rhythm_param_values(1);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fece 	bl	8002738 <show_rhythm_param_values>
	show_rhythm_param_values(2);
 800299c:	2002      	movs	r0, #2
 800299e:	f7ff fecb 	bl	8002738 <show_rhythm_param_values>
	while(TRUE){
		Keypad_Button = TM_KEYPAD_Read();
 80029a2:	f009 fb93 	bl	800c0cc <TM_KEYPAD_Read>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <select_rhythm_params+0xd0>)
 80029ac:	701a      	strb	r2, [r3, #0]
		switch(Keypad_Button){
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <select_rhythm_params+0xd0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d8f5      	bhi.n	80029a2 <select_rhythm_params+0x3a>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <select_rhythm_params+0x54>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	08002a1b 	.word	0x08002a1b
 80029c0:	080029d5 	.word	0x080029d5
 80029c4:	08002a01 	.word	0x08002a01
 80029c8:	080029a3 	.word	0x080029a3
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	08002a01 	.word	0x08002a01
			case TM_KEYPAD_Button_0: goto end_select_params;
			case TM_KEYPAD_Button_1:
				if(currentPosition > 0)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <select_rhythm_params+0x78>
					currentPosition--;
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	3b01      	subs	r3, #1
 80029de:	71fb      	strb	r3, [r7, #7]
				show_rhythm_params(currentPosition);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff04 	bl	80027f0 <show_rhythm_params>
				break;
 80029e8:	e016      	b.n	8002a18 <select_rhythm_params+0xb0>
			case TM_KEYPAD_Button_4:
				if(currentPosition < 3)
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d802      	bhi.n	80029f6 <select_rhythm_params+0x8e>
					currentPosition++;
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	3301      	adds	r3, #1
 80029f4:	71fb      	strb	r3, [r7, #7]
				show_rhythm_params(currentPosition);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fef9 	bl	80027f0 <show_rhythm_params>
				break;
 80029fe:	e00b      	b.n	8002a18 <select_rhythm_params+0xb0>
			case TM_KEYPAD_Button_2:
			case TM_KEYPAD_Button_5:
				change_value(currentPosition,Keypad_Button);
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <select_rhythm_params+0xd0>)
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff53 	bl	80028b4 <change_value>
				show_rhythm_param_values(currentPosition);
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe91 	bl	8002738 <show_rhythm_param_values>
				break;
 8002a16:	bf00      	nop
		Keypad_Button = TM_KEYPAD_Read();
 8002a18:	e7c3      	b.n	80029a2 <select_rhythm_params+0x3a>
			case TM_KEYPAD_Button_0: goto end_select_params;
 8002a1a:	bf00      	nop

		}
	}

	end_select_params:
	Skip_Read_Button = TRUE;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <select_rhythm_params+0xd4>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
	return;
 8002a22:	bf00      	nop

}
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08017f78 	.word	0x08017f78
 8002a30:	08017f54 	.word	0x08017f54
 8002a34:	08017f6c 	.word	0x08017f6c
 8002a38:	20001c39 	.word	0x20001c39
 8002a3c:	20001c3b 	.word	0x20001c3b

08002a40 <save_first>:

void save_first(uint8_t *ptr){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	uint32_t header[3];
	SRAM_seekWrite(0,SRAM_SET);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe fa00 	bl	8000e50 <SRAM_seekWrite>
	header[HEADER_NUM_BYTES] = sizeof(header) + sizeof(PatternBeats) + pat1.beats * pat1.division * NUM_ALL_TRACKS;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <save_first+0x68>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <save_first+0x68>)
 8002a56:	6852      	ldr	r2, [r2, #4]
 8002a58:	fb03 f202 	mul.w	r2, r3, r2
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	331c      	adds	r3, #28
 8002a64:	60fb      	str	r3, [r7, #12]
	header[HEADER_NUM_PATTS] = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	613b      	str	r3, [r7, #16]
	header[HEADER_MAX_BEATS] = tim1.subbeats;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <save_first+0x6c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
	writeSRAM((uint8_t *)header,sizeof(header));
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	210c      	movs	r1, #12
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fa82 	bl	8000f80 <writeSRAM>
	writeSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <save_first+0x68>)
 8002a80:	f7fe fa7e 	bl	8000f80 <writeSRAM>
	writeSRAM((uint8_t *)ptr,pat1.beats * pat1.division * NUM_ALL_TRACKS);
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <save_first+0x68>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <save_first+0x68>)
 8002a8a:	6852      	ldr	r2, [r2, #4]
 8002a8c:	fb03 f202 	mul.w	r2, r3, r2
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fa71 	bl	8000f80 <writeSRAM>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20001174 	.word	0x20001174
 8002aac:	20001194 	.word	0x20001194

08002ab0 <save_next>:

void save_next(uint8_t *ptr){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	uint32_t header[3];		// number of patterns, number of bytes, max. resolution
	uint32_t currentBytes;
	SRAM_seekRead(0,SRAM_SET);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe f99c 	bl	8000df8 <SRAM_seekRead>
	SRAM_seekWrite(0,SRAM_SET);
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe f9c4 	bl	8000e50 <SRAM_seekWrite>
	readSRAM((uint8_t *)header,sizeof(header));
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	210c      	movs	r1, #12
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe faec 	bl	80010ac <readSRAM>
	if(header[HEADER_NUM_BYTES] == 0){
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <save_next+0x32>
		save_first(ptr);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffb0 	bl	8002a40 <save_first>
 8002ae0:	e035      	b.n	8002b4e <save_next+0x9e>
		return;
	}
	currentBytes = header[HEADER_NUM_BYTES];
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	617b      	str	r3, [r7, #20]
	header[HEADER_NUM_BYTES] += (sizeof(PatternBeats) + pat1.beats * pat1.division * NUM_ALL_TRACKS);
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <save_next+0xa4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <save_next+0xa4>)
 8002aec:	6852      	ldr	r2, [r2, #4]
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	f103 0210 	add.w	r2, r3, #16
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4413      	add	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]
	header[HEADER_NUM_PATTS]++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
	if(tim1.subbeats > header[HEADER_MAX_BEATS])
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <save_next+0xa8>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d902      	bls.n	8002b18 <save_next+0x68>
		header[HEADER_MAX_BEATS] = tim1.subbeats;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <save_next+0xa8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
	writeSRAM((uint8_t *)header,sizeof(header));
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	210c      	movs	r1, #12
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fa2e 	bl	8000f80 <writeSRAM>
	SRAM_seekWrite(currentBytes,SRAM_SET);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7fe f992 	bl	8000e50 <SRAM_seekWrite>
	writeSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	4809      	ldr	r0, [pc, #36]	; (8002b54 <save_next+0xa4>)
 8002b30:	f7fe fa26 	bl	8000f80 <writeSRAM>
	writeSRAM((uint8_t *)ptr,pat1.beats * pat1.division * NUM_ALL_TRACKS);
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <save_next+0xa4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <save_next+0xa4>)
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	fb03 f202 	mul.w	r2, r3, r2
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe fa19 	bl	8000f80 <writeSRAM>
}
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20001174 	.word	0x20001174
 8002b58:	20001194 	.word	0x20001194

08002b5c <readDrums>:


void readDrums(uint32_t *numOfPatterns,uint32_t *numOfBytes,uint32_t *maxResolution){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08e      	sub	sp, #56	; 0x38
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	PatternBeats tmp;
	uint32_t header[3];		// number of patterns, number of bytes, max. resolution
	//uint32_t (*map)[2] = NULL;
	uint32_t currPat = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
	switch_buff = FALSE;
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <readDrums+0x130>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
	first_beat = FALSE;
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <readDrums+0x134>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]

	//f_read(fil,header,sizeof(header),&bytesRead);
	SRAM_seekRead(0,SRAM_SET);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f93c 	bl	8000df8 <SRAM_seekRead>
	readSRAM((uint8_t *)header,sizeof(header));
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	210c      	movs	r1, #12
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fa90 	bl	80010ac <readSRAM>
	*numOfBytes = header[HEADER_NUM_BYTES];
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	601a      	str	r2, [r3, #0]
	*numOfPatterns = header[HEADER_NUM_PATTS];
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]
	*maxResolution = header[HEADER_MAX_BEATS];
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]

	if(*numOfPatterns == 0 || *maxResolution > MAX_SUBBEATS)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06e      	beq.n	8002c84 <readDrums+0x128>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b30      	cmp	r3, #48	; 0x30
 8002bac:	d86a      	bhi.n	8002c84 <readDrums+0x128>
		return;

	// create memory map
	pattern_audio_map[0].sample_position = 0;
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <readDrums+0x138>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
	pattern_audio_map[0].channel_recorded[_CH1] = FALSE;
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <readDrums+0x138>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	721a      	strb	r2, [r3, #8]
	pattern_audio_map[0].channel_recorded[_CH2] = FALSE;
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <readDrums+0x138>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	725a      	strb	r2, [r3, #9]
	for(currPat = 0; currPat < *numOfPatterns; currPat++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	e058      	b.n	8002c78 <readDrums+0x11c>
		pattern_audio_map[currPat].channel_recorded[_CH1] = FALSE;
 8002bc6:	4933      	ldr	r1, [pc, #204]	; (8002c94 <readDrums+0x138>)
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
		pattern_audio_map[currPat].channel_recorded[_CH2] = FALSE;
 8002bda:	492e      	ldr	r1, [pc, #184]	; (8002c94 <readDrums+0x138>)
 8002bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3309      	adds	r3, #9
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
		pattern_audio_map[currPat].sram_position = SRAM_readerPosition();
 8002bee:	f7fe f8f7 	bl	8000de0 <SRAM_readerPosition>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4827      	ldr	r0, [pc, #156]	; (8002c94 <readDrums+0x138>)
 8002bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4403      	add	r3, r0
 8002c02:	6019      	str	r1, [r3, #0]
		readSRAM((uint8_t *)&tmp,sizeof(PatternBeats));
 8002c04:	f107 0320 	add.w	r3, r7, #32
 8002c08:	2110      	movs	r1, #16
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fa4e 	bl	80010ac <readSRAM>
		readSRAM((uint8_t *)drumBuffA,tmp.beats * tmp.division * NUM_ALL_TRACKS);
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	fb03 f202 	mul.w	r2, r3, r2
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	481d      	ldr	r0, [pc, #116]	; (8002c98 <readDrums+0x13c>)
 8002c22:	f7fe fa43 	bl	80010ac <readSRAM>
		if(currPat < *numOfPatterns){
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d220      	bcs.n	8002c72 <readDrums+0x116>
			uint32_t millis = BEAT_MILLIS(tmp.beattime);
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
			pattern_audio_map[currPat + 1].sample_position = pattern_audio_map[currPat].sample_position + (millis * tmp.beats * 15);
 8002c3c:	4915      	ldr	r1, [pc, #84]	; (8002c94 <readDrums+0x138>)
 8002c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c52:	fb03 f202 	mul.w	r2, r3, r2
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5e:	3201      	adds	r2, #1
 8002c60:	4419      	add	r1, r3
 8002c62:	480c      	ldr	r0, [pc, #48]	; (8002c94 <readDrums+0x138>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4403      	add	r3, r0
 8002c6e:	3304      	adds	r3, #4
 8002c70:	6019      	str	r1, [r3, #0]
	for(currPat = 0; currPat < *numOfPatterns; currPat++){
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	3301      	adds	r3, #1
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3a1      	bcc.n	8002bc6 <readDrums+0x6a>
 8002c82:	e000      	b.n	8002c86 <readDrums+0x12a>
		return;
 8002c84:	bf00      	nop
		}
	}

	//return (uint32_t *)map;

}
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000558 	.word	0x20000558
 8002c90:	20000559 	.word	0x20000559
 8002c94:	20000560 	.word	0x20000560
 8002c98:	20000ecc 	.word	0x20000ecc

08002c9c <stopDrums>:
void startDrums(){
	HAL_TIM_Base_Start_IT(&htim2);
	looper.DrumState = DRUMS_STARTED;
}

void stopDrums(){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	looper.DrumState = DRUMS_STOPPED;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <stopDrums+0x1c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
	HAL_TIM_Base_Stop_IT(&htim2);
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <stopDrums+0x20>)
 8002ca8:	f00e fc62 	bl	8011570 <HAL_TIM_Base_Stop_IT>
	HAL_Delay(100);
 8002cac:	2064      	movs	r0, #100	; 0x64
 8002cae:	f009 fb85 	bl	800c3bc <HAL_Delay>

}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20001220 	.word	0x20001220
 8002cbc:	20002278 	.word	0x20002278

08002cc0 <setPatternTime>:

void setPatternTime(__IO PatternBeats *p,__IO PatternTimes *t){
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	uint32_t millis = BEAT_MILLIS(p->beattime);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	60fb      	str	r3, [r7, #12]
	t->subbeats = p->beats * p->division;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6852      	ldr	r2, [r2, #4]
 8002ce0:	fb03 f202 	mul.w	r2, r3, r2
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	601a      	str	r2, [r3, #0]
	t->barDuration = p->beats * millis;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
	t->remainder = t->barDuration % t->subbeats;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d02:	fb01 f202 	mul.w	r2, r1, r2
 8002d06:	1a9a      	subs	r2, r3, r2
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	609a      	str	r2, [r3, #8]
	t->subBeatDuration = t->barDuration / t->subbeats;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <updatePatternTime>:

void updatePatternTime(__IO PatternBeats *p,__IO PatternTimes *t){
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	uint32_t millis = BEAT_MILLIS(p->beattime + looper.timeIncrement) ;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <updatePatternTime+0x70>)
 8002d38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	60fb      	str	r3, [r7, #12]
	t->subbeats = p->beats * p->division;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6852      	ldr	r2, [r2, #4]
 8002d4e:	fb03 f202 	mul.w	r2, r3, r2
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	601a      	str	r2, [r3, #0]
	t->barDuration = p->beats * millis;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	fb03 f202 	mul.w	r2, r3, r2
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]
	t->remainder = t->barDuration % t->subbeats;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d70:	fb01 f202 	mul.w	r2, r1, r2
 8002d74:	1a9a      	subs	r2, r3, r2
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]
	t->subBeatDuration = t->barDuration / t->subbeats;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	60da      	str	r2, [r3, #12]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20001220 	.word	0x20001220

08002d9c <readDrumKeyboard>:


TM_KEYPAD_Button_t readDrumKeyboard(BOOL record){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]

	TM_KEYPAD_Button_t key = TM_KEYPAD_Read();
 8002da6:	f009 f991 	bl	800c0cc <TM_KEYPAD_Read>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
	JOYSTICK js = Read_Joystick();
 8002dae:	f003 fe2d 	bl	8006a0c <Read_Joystick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	733a      	strb	r2, [r7, #12]
 8002db8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002dbc:	737a      	strb	r2, [r7, #13]
 8002dbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002dc2:	73bb      	strb	r3, [r7, #14]
	if(js.xpos == MAX_JOY)
 8002dc4:	7b3b      	ldrb	r3, [r7, #12]
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	d103      	bne.n	8002dd2 <readDrumKeyboard+0x36>
		octave = 12;
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <readDrumKeyboard+0x128>)
 8002dcc:	220c      	movs	r2, #12
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e009      	b.n	8002de6 <readDrumKeyboard+0x4a>
	else if(js.xpos == MIN_JOY)
 8002dd2:	7b3b      	ldrb	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <readDrumKeyboard+0x44>
		octave = -12;
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <readDrumKeyboard+0x128>)
 8002dda:	22f4      	movs	r2, #244	; 0xf4
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e002      	b.n	8002de6 <readDrumKeyboard+0x4a>
	else
		octave = 0;
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <readDrumKeyboard+0x128>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]

	if(key != TM_KEYPAD_Button_NOPRESSED){
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2bff      	cmp	r3, #255	; 0xff
 8002dea:	d066      	beq.n	8002eba <readDrumKeyboard+0x11e>
		if(record == TRUE){
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d134      	bne.n	8002e5c <readDrumKeyboard+0xc0>
			if(looper.DrumState != DRUMS_STARTED){
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <readDrumKeyboard+0x12c>)
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d004      	beq.n	8002e06 <readDrumKeyboard+0x6a>
					resetDrums();
 8002dfc:	f000 fc18 	bl	8003630 <resetDrums>
					looper.DrumState = DRUMS_STARTED;
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <readDrumKeyboard+0x12c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	771a      	strb	r2, [r3, #28]
			}

			if(looper.PlayBass == FALSE)
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <readDrumKeyboard+0x12c>)
 8002e08:	791b      	ldrb	r3, [r3, #4]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <readDrumKeyboard+0x84>
				drumBuffWritePtr[drumBufferIndex] = key;	// numbers are resolved to drums and parts using key_to_drum_part array
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <readDrumKeyboard+0x130>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <readDrumKeyboard+0x134>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e00e      	b.n	8002e3e <readDrumKeyboard+0xa2>
			else
				drumBuffWritePtr[drumBufferIndex] = key_to_bass[key] + octave;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	4a2c      	ldr	r2, [pc, #176]	; (8002ed4 <readDrumKeyboard+0x138>)
 8002e24:	5cd1      	ldrb	r1, [r2, r3]
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <readDrumKeyboard+0x128>)
 8002e28:	f993 3000 	ldrsb.w	r3, [r3]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <readDrumKeyboard+0x130>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <readDrumKeyboard+0x134>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4403      	add	r3, r0
 8002e38:	440a      	add	r2, r1
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
			drumEventTimes[drumBufferIndex] = midiDrumClock;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <readDrumKeyboard+0x134>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <readDrumKeyboard+0x13c>)
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <readDrumKeyboard+0x140>)
 8002e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			drumBufferIndex++;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <readDrumKeyboard+0x134>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <readDrumKeyboard+0x134>)
 8002e54:	6013      	str	r3, [r2, #0]
			BSP_LED_On(LED_RED);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f007 fd4e 	bl	800a8f8 <BSP_LED_On>
		}

		if(looper.PlayBass == FALSE)
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <readDrumKeyboard+0x12c>)
 8002e5e:	791b      	ldrb	r3, [r3, #4]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d108      	bne.n	8002e78 <readDrumKeyboard+0xdc>
			playPercussion(NOTEON,key_to_drum_part[key][0]);
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <readDrumKeyboard+0x144>)
 8002e6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	2001      	movs	r0, #1
 8002e72:	f006 fb49 	bl	8009508 <playPercussion>
 8002e76:	e020      	b.n	8002eba <readDrumKeyboard+0x11e>
		else{

				currNote = key_to_bass[key] + octave;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <readDrumKeyboard+0x138>)
 8002e7c:	5cd2      	ldrb	r2, [r2, r3]
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <readDrumKeyboard+0x128>)
 8002e80:	f993 3000 	ldrsb.w	r3, [r3]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <readDrumKeyboard+0x148>)
 8002e8c:	701a      	strb	r2, [r3, #0]
				if(prevNote != currNote)
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <readDrumKeyboard+0x14c>)
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <readDrumKeyboard+0x148>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d005      	beq.n	8002ea6 <readDrumKeyboard+0x10a>
					playBass(NOTEOFF,prevNote);
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <readDrumKeyboard+0x14c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f006 fb4d 	bl	8009540 <playBass>
				playBass(NOTEON,currNote);	// Bass lowest E midi code = 28, each key adds half-tone
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <readDrumKeyboard+0x148>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	2001      	movs	r0, #1
 8002eae:	f006 fb47 	bl	8009540 <playBass>

				prevNote = currNote;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <readDrumKeyboard+0x148>)
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <readDrumKeyboard+0x14c>)
 8002eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	return key;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]

}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000055d 	.word	0x2000055d
 8002ec8:	20001220 	.word	0x20001220
 8002ecc:	20001170 	.word	0x20001170
 8002ed0:	20000550 	.word	0x20000550
 8002ed4:	20000190 	.word	0x20000190
 8002ed8:	20000554 	.word	0x20000554
 8002edc:	200010ac 	.word	0x200010ac
 8002ee0:	20000170 	.word	0x20000170
 8002ee4:	2000055c 	.word	0x2000055c
 8002ee8:	2000055b 	.word	0x2000055b

08002eec <clear_drums>:
		drumBeatIndex = 0;
	}

}

void clear_drums(){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	memset(drumBuffA,0,MAX_SUBBEATS * NUM_ALL_TRACKS);
 8002ef0:	22f0      	movs	r2, #240	; 0xf0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <clear_drums+0x28>)
 8002ef6:	f013 fd89 	bl	8016a0c <memset>
	memset(drumBuffB,0,MAX_SUBBEATS * NUM_ALL_TRACKS);
 8002efa:	22f0      	movs	r2, #240	; 0xf0
 8002efc:	2100      	movs	r1, #0
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <clear_drums+0x2c>)
 8002f00:	f013 fd84 	bl	8016a0c <memset>
	memset(drumEventTimes,0,MAX_SUBBEATS * 4);
 8002f04:	22c0      	movs	r2, #192	; 0xc0
 8002f06:	2100      	movs	r1, #0
 8002f08:	4804      	ldr	r0, [pc, #16]	; (8002f1c <clear_drums+0x30>)
 8002f0a:	f013 fd7f 	bl	8016a0c <memset>
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000ecc 	.word	0x20000ecc
 8002f18:	20000fbc 	.word	0x20000fbc
 8002f1c:	200010ac 	.word	0x200010ac

08002f20 <preview_drums>:

void preview_drums() {
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af04      	add	r7, sp, #16
	uint16_t x, y, i;
	JOYSTICK js;
	TM_KEYPAD_Button_t currentkey = TM_KEYPAD_Button_NOPRESSED, tmpkey =
 8002f26:	23ff      	movs	r3, #255	; 0xff
 8002f28:	713b      	strb	r3, [r7, #4]
 8002f2a:	23ff      	movs	r3, #255	; 0xff
 8002f2c:	727b      	strb	r3, [r7, #9]
			TM_KEYPAD_Button_NOPRESSED;
	uint8_t joydrumkey = 0, joypartkey = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	723b      	strb	r3, [r7, #8]
 8002f32:	2300      	movs	r3, #0
 8002f34:	71fb      	strb	r3, [r7, #7]
	BOOL pressed = FALSE, changed = FALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	71bb      	strb	r3, [r7, #6]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	717b      	strb	r3, [r7, #5]
	//menuClearLines(2,4,6);

	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8002f3e:	f24a 2054 	movw	r0, #41556	; 0xa254
 8002f42:	f008 fe85 	bl	800bc50 <TM_ILI9341_Fill>
	menuTextBox(5, 190, 10,"Press keys to hear","drum sounds","Move joystick","to change sound",
 8002f46:	4ba3      	ldr	r3, [pc, #652]	; (80031d4 <preview_drums+0x2b4>)
 8002f48:	9303      	str	r3, [sp, #12]
 8002f4a:	4ba3      	ldr	r3, [pc, #652]	; (80031d8 <preview_drums+0x2b8>)
 8002f4c:	9302      	str	r3, [sp, #8]
 8002f4e:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <preview_drums+0x2bc>)
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	4ba3      	ldr	r3, [pc, #652]	; (80031e0 <preview_drums+0x2c0>)
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	4ba3      	ldr	r3, [pc, #652]	; (80031e4 <preview_drums+0x2c4>)
 8002f58:	220a      	movs	r2, #10
 8002f5a:	21be      	movs	r1, #190	; 0xbe
 8002f5c:	2005      	movs	r0, #5
 8002f5e:	f004 ffb5 	bl	8007ecc <menuTextBox>
			"Blue button finish");

	for (x = 10; x < 160; x += 42) {
 8002f62:	230a      	movs	r3, #10
 8002f64:	81fb      	strh	r3, [r7, #14]
 8002f66:	e018      	b.n	8002f9a <preview_drums+0x7a>
		for (y = 10; y < 160; y += 42) {
 8002f68:	230a      	movs	r3, #10
 8002f6a:	81bb      	strh	r3, [r7, #12]
 8002f6c:	e00f      	b.n	8002f8e <preview_drums+0x6e>
			TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,ILI9341_COLOR_BLUE2);
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	3328      	adds	r3, #40	; 0x28
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	89bb      	ldrh	r3, [r7, #12]
 8002f76:	3328      	adds	r3, #40	; 0x28
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	89b9      	ldrh	r1, [r7, #12]
 8002f7c:	89f8      	ldrh	r0, [r7, #14]
 8002f7e:	f240 541d 	movw	r4, #1309	; 0x51d
 8002f82:	9400      	str	r4, [sp, #0]
 8002f84:	f009 f852 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
		for (y = 10; y < 160; y += 42) {
 8002f88:	89bb      	ldrh	r3, [r7, #12]
 8002f8a:	332a      	adds	r3, #42	; 0x2a
 8002f8c:	81bb      	strh	r3, [r7, #12]
 8002f8e:	89bb      	ldrh	r3, [r7, #12]
 8002f90:	2b9f      	cmp	r3, #159	; 0x9f
 8002f92:	d9ec      	bls.n	8002f6e <preview_drums+0x4e>
	for (x = 10; x < 160; x += 42) {
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	332a      	adds	r3, #42	; 0x2a
 8002f98:	81fb      	strh	r3, [r7, #14]
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	2b9f      	cmp	r3, #159	; 0x9f
 8002f9e:	d9e3      	bls.n	8002f68 <preview_drums+0x48>
		}
	}

	looper.DrumState = DRUMS_PAUSED;
 8002fa0:	4b91      	ldr	r3, [pc, #580]	; (80031e8 <preview_drums+0x2c8>)
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	771a      	strb	r2, [r3, #28]
	while (looper.DrumState == DRUMS_PAUSED) {
 8002fa6:	e16d      	b.n	8003284 <preview_drums+0x364>
		if ((currentkey = readDrumKeyboard(FALSE))
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff fef7 	bl	8002d9c <readDrumKeyboard>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	713b      	strb	r3, [r7, #4]
 8002fb2:	793b      	ldrb	r3, [r7, #4]
 8002fb4:	2bff      	cmp	r3, #255	; 0xff
 8002fb6:	f000 80c5 	beq.w	8003144 <preview_drums+0x224>
				!= TM_KEYPAD_Button_NOPRESSED) {
			switch (currentkey) {
 8002fba:	793b      	ldrb	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d873      	bhi.n	80030a8 <preview_drums+0x188>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <preview_drums+0xa8>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08003009 	.word	0x08003009
 8002fcc:	08003013 	.word	0x08003013
 8002fd0:	0800301d 	.word	0x0800301d
 8002fd4:	08003027 	.word	0x08003027
 8002fd8:	08003031 	.word	0x08003031
 8002fdc:	0800303b 	.word	0x0800303b
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	0800304f 	.word	0x0800304f
 8002fe8:	08003059 	.word	0x08003059
 8002fec:	08003063 	.word	0x08003063
 8002ff0:	08003095 	.word	0x08003095
 8002ff4:	0800309f 	.word	0x0800309f
 8002ff8:	0800306d 	.word	0x0800306d
 8002ffc:	08003077 	.word	0x08003077
 8003000:	08003081 	.word	0x08003081
 8003004:	0800308b 	.word	0x0800308b
			case TM_KEYPAD_Button_0:
				y = 136;
 8003008:	2388      	movs	r3, #136	; 0x88
 800300a:	81bb      	strh	r3, [r7, #12]
				x = 52;
 800300c:	2334      	movs	r3, #52	; 0x34
 800300e:	81fb      	strh	r3, [r7, #14]
				break;
 8003010:	e04a      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_1:
				y = 10;
 8003012:	230a      	movs	r3, #10
 8003014:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003016:	230a      	movs	r3, #10
 8003018:	81fb      	strh	r3, [r7, #14]
				break;
 800301a:	e045      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_2:
				y = 10;
 800301c:	230a      	movs	r3, #10
 800301e:	81bb      	strh	r3, [r7, #12]
				x = 52;
 8003020:	2334      	movs	r3, #52	; 0x34
 8003022:	81fb      	strh	r3, [r7, #14]
				break;
 8003024:	e040      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_3:
				y = 10;
 8003026:	230a      	movs	r3, #10
 8003028:	81bb      	strh	r3, [r7, #12]
				x = 94;
 800302a:	235e      	movs	r3, #94	; 0x5e
 800302c:	81fb      	strh	r3, [r7, #14]
				break;
 800302e:	e03b      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_4:
				y = 52;
 8003030:	2334      	movs	r3, #52	; 0x34
 8003032:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003034:	230a      	movs	r3, #10
 8003036:	81fb      	strh	r3, [r7, #14]
				break;
 8003038:	e036      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_5:
				y = 52;
 800303a:	2334      	movs	r3, #52	; 0x34
 800303c:	81bb      	strh	r3, [r7, #12]
				x = 52;
 800303e:	2334      	movs	r3, #52	; 0x34
 8003040:	81fb      	strh	r3, [r7, #14]
				break;
 8003042:	e031      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_6:
				y = 52;
 8003044:	2334      	movs	r3, #52	; 0x34
 8003046:	81bb      	strh	r3, [r7, #12]
				x = 94;
 8003048:	235e      	movs	r3, #94	; 0x5e
 800304a:	81fb      	strh	r3, [r7, #14]
				break;
 800304c:	e02c      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_7:
				y = 94;
 800304e:	235e      	movs	r3, #94	; 0x5e
 8003050:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003052:	230a      	movs	r3, #10
 8003054:	81fb      	strh	r3, [r7, #14]
				break;
 8003056:	e027      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_8:
				y = 94;
 8003058:	235e      	movs	r3, #94	; 0x5e
 800305a:	81bb      	strh	r3, [r7, #12]
				x = 52;
 800305c:	2334      	movs	r3, #52	; 0x34
 800305e:	81fb      	strh	r3, [r7, #14]
				break;
 8003060:	e022      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_9:
				y = 94;
 8003062:	235e      	movs	r3, #94	; 0x5e
 8003064:	81bb      	strh	r3, [r7, #12]
				x = 94;
 8003066:	235e      	movs	r3, #94	; 0x5e
 8003068:	81fb      	strh	r3, [r7, #14]
				break;
 800306a:	e01d      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_A:
				y = 10;
 800306c:	230a      	movs	r3, #10
 800306e:	81bb      	strh	r3, [r7, #12]
				x = 136;
 8003070:	2388      	movs	r3, #136	; 0x88
 8003072:	81fb      	strh	r3, [r7, #14]
				break;
 8003074:	e018      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_B:
				y = 52;
 8003076:	2334      	movs	r3, #52	; 0x34
 8003078:	81bb      	strh	r3, [r7, #12]
				x = 136;
 800307a:	2388      	movs	r3, #136	; 0x88
 800307c:	81fb      	strh	r3, [r7, #14]
				break;
 800307e:	e013      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_C:
				y = 94;
 8003080:	235e      	movs	r3, #94	; 0x5e
 8003082:	81bb      	strh	r3, [r7, #12]
				x = 136;
 8003084:	2388      	movs	r3, #136	; 0x88
 8003086:	81fb      	strh	r3, [r7, #14]
				break;
 8003088:	e00e      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_D:
				y = 136;
 800308a:	2388      	movs	r3, #136	; 0x88
 800308c:	81bb      	strh	r3, [r7, #12]
				x = 136;
 800308e:	2388      	movs	r3, #136	; 0x88
 8003090:	81fb      	strh	r3, [r7, #14]
				break;
 8003092:	e009      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_STAR:
				y = 136;
 8003094:	2388      	movs	r3, #136	; 0x88
 8003096:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003098:	230a      	movs	r3, #10
 800309a:	81fb      	strh	r3, [r7, #14]
				break;
 800309c:	e004      	b.n	80030a8 <preview_drums+0x188>
			case TM_KEYPAD_Button_HASH:
				y = 136;
 800309e:	2388      	movs	r3, #136	; 0x88
 80030a0:	81bb      	strh	r3, [r7, #12]
				x = 94;
 80030a2:	235e      	movs	r3, #94	; 0x5e
 80030a4:	81fb      	strh	r3, [r7, #14]
				break;
 80030a6:	bf00      	nop

			}


			changed = FALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	717b      	strb	r3, [r7, #5]
			pressed = TRUE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	71bb      	strb	r3, [r7, #6]
			tmpkey = currentkey;
 80030b0:	793b      	ldrb	r3, [r7, #4]
 80030b2:	727b      	strb	r3, [r7, #9]
			for (i = 0; key_to_drum_part[currentkey][0] != drum_midi_values[i];i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	817b      	strh	r3, [r7, #10]
 80030b8:	e002      	b.n	80030c0 <preview_drums+0x1a0>
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	3301      	adds	r3, #1
 80030be:	817b      	strh	r3, [r7, #10]
 80030c0:	793b      	ldrb	r3, [r7, #4]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <preview_drums+0x2cc>)
 80030c4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80030c8:	897b      	ldrh	r3, [r7, #10]
 80030ca:	4949      	ldr	r1, [pc, #292]	; (80031f0 <preview_drums+0x2d0>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d1f3      	bne.n	80030ba <preview_drums+0x19a>
				continue;
			sprintf(lcdline,"%s ",drum_names[i]);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	4a47      	ldr	r2, [pc, #284]	; (80031f4 <preview_drums+0x2d4>)
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	461a      	mov	r2, r3
 80030dc:	4946      	ldr	r1, [pc, #280]	; (80031f8 <preview_drums+0x2d8>)
 80030de:	4847      	ldr	r0, [pc, #284]	; (80031fc <preview_drums+0x2dc>)
 80030e0:	f013 fda4 	bl	8016c2c <siprintf>
			joydrumkey = i;
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	723b      	strb	r3, [r7, #8]
			if (key_to_drum_part[currentkey][1] == drum_parts[currentkey][0])
 80030e8:	793b      	ldrb	r3, [r7, #4]
 80030ea:	4a40      	ldr	r2, [pc, #256]	; (80031ec <preview_drums+0x2cc>)
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	785a      	ldrb	r2, [r3, #1]
 80030f2:	793b      	ldrb	r3, [r7, #4]
 80030f4:	4942      	ldr	r1, [pc, #264]	; (8003200 <preview_drums+0x2e0>)
 80030f6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d102      	bne.n	8003104 <preview_drums+0x1e4>
				joypartkey = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	71fb      	strb	r3, [r7, #7]
 8003102:	e001      	b.n	8003108 <preview_drums+0x1e8>
			else
				joypartkey = 1;
 8003104:	2301      	movs	r3, #1
 8003106:	71fb      	strb	r3, [r7, #7]
			strcat(lcdline, part_names[key_to_drum_part[currentkey][1]]);
 8003108:	793b      	ldrb	r3, [r7, #4]
 800310a:	4a38      	ldr	r2, [pc, #224]	; (80031ec <preview_drums+0x2cc>)
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	461a      	mov	r2, r3
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <preview_drums+0x2e4>)
 8003116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311a:	4619      	mov	r1, r3
 800311c:	4837      	ldr	r0, [pc, #220]	; (80031fc <preview_drums+0x2dc>)
 800311e:	f013 fda5 	bl	8016c6c <strcat>
			menuStatusLine(lcdline);
 8003122:	4836      	ldr	r0, [pc, #216]	; (80031fc <preview_drums+0x2dc>)
 8003124:	f004 fe7a 	bl	8007e1c <menuStatusLine>
			TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	3328      	adds	r3, #40	; 0x28
 800312c:	b29a      	uxth	r2, r3
 800312e:	89bb      	ldrh	r3, [r7, #12]
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	b29b      	uxth	r3, r3
 8003134:	89b9      	ldrh	r1, [r7, #12]
 8003136:	89f8      	ldrh	r0, [r7, #14]
 8003138:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800313c:	9400      	str	r4, [sp, #0]
 800313e:	f008 ff75 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
 8003142:	e09f      	b.n	8003284 <preview_drums+0x364>
					ILI9341_COLOR_RED);	// square on keyboard

		}

		else {
			if (pressed == TRUE) {
 8003144:	79bb      	ldrb	r3, [r7, #6]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10e      	bne.n	8003168 <preview_drums+0x248>
				TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,ILI9341_COLOR_BLUE2);
 800314a:	89fb      	ldrh	r3, [r7, #14]
 800314c:	3328      	adds	r3, #40	; 0x28
 800314e:	b29a      	uxth	r2, r3
 8003150:	89bb      	ldrh	r3, [r7, #12]
 8003152:	3328      	adds	r3, #40	; 0x28
 8003154:	b29b      	uxth	r3, r3
 8003156:	89b9      	ldrh	r1, [r7, #12]
 8003158:	89f8      	ldrh	r0, [r7, #14]
 800315a:	f240 541d 	movw	r4, #1309	; 0x51d
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	f008 ff64 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
				pressed = FALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	71bb      	strb	r3, [r7, #6]
			}
			if (Active_Joystick() == TRUE && looper.PlayBass == FALSE) {
 8003168:	f003 fc74 	bl	8006a54 <Active_Joystick>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	f040 8088 	bne.w	8003284 <preview_drums+0x364>
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <preview_drums+0x2c8>)
 8003176:	791b      	ldrb	r3, [r3, #4]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 8082 	bne.w	8003284 <preview_drums+0x364>
				js = Read_Joystick();
 8003180:	f003 fc44 	bl	8006a0c <Read_Joystick>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	703a      	strb	r2, [r7, #0]
 800318a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800318e:	707a      	strb	r2, [r7, #1]
 8003190:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003194:	70bb      	strb	r3, [r7, #2]
				if (js.xpos == MAX_JOY && joydrumkey < 15) {
 8003196:	783b      	ldrb	r3, [r7, #0]
 8003198:	2b07      	cmp	r3, #7
 800319a:	d107      	bne.n	80031ac <preview_drums+0x28c>
 800319c:	7a3b      	ldrb	r3, [r7, #8]
 800319e:	2b0e      	cmp	r3, #14
 80031a0:	d804      	bhi.n	80031ac <preview_drums+0x28c>
					joydrumkey++;
 80031a2:	7a3b      	ldrb	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	723b      	strb	r3, [r7, #8]
					changed = TRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	717b      	strb	r3, [r7, #5]
				}
				if (js.xpos == MIN_JOY && joydrumkey > 0) {
 80031ac:	783b      	ldrb	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <preview_drums+0x2a2>
 80031b2:	7a3b      	ldrb	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <preview_drums+0x2a2>
					joydrumkey--;
 80031b8:	7a3b      	ldrb	r3, [r7, #8]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	723b      	strb	r3, [r7, #8]
					changed = TRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	717b      	strb	r3, [r7, #5]
				}

				if (js.ypos == MAX_JOY) {
 80031c2:	787b      	ldrb	r3, [r7, #1]
 80031c4:	2b07      	cmp	r3, #7
 80031c6:	d11f      	bne.n	8003208 <preview_drums+0x2e8>
					joypartkey = 1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	71fb      	strb	r3, [r7, #7]
					changed = TRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	717b      	strb	r3, [r7, #5]
 80031d0:	e021      	b.n	8003216 <preview_drums+0x2f6>
 80031d2:	bf00      	nop
 80031d4:	08017f9c 	.word	0x08017f9c
 80031d8:	08017fb0 	.word	0x08017fb0
 80031dc:	08017fc0 	.word	0x08017fc0
 80031e0:	08017fd0 	.word	0x08017fd0
 80031e4:	08017f88 	.word	0x08017f88
 80031e8:	20001220 	.word	0x20001220
 80031ec:	20000170 	.word	0x20000170
 80031f0:	20000140 	.word	0x20000140
 80031f4:	200000f0 	.word	0x200000f0
 80031f8:	08017fdc 	.word	0x08017fdc
 80031fc:	20001264 	.word	0x20001264
 8003200:	20000150 	.word	0x20000150
 8003204:	20000130 	.word	0x20000130
				} else if (js.ypos == MIN_JOY) {
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <preview_drums+0x2f6>
					joypartkey = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	71fb      	strb	r3, [r7, #7]
					changed = TRUE;
 8003212:	2301      	movs	r3, #1
 8003214:	717b      	strb	r3, [r7, #5]
				}

				// assign new values in key_to_drum_part[]
				if (changed == TRUE) {
 8003216:	797b      	ldrb	r3, [r7, #5]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d133      	bne.n	8003284 <preview_drums+0x364>
					sprintf(lcdline, "%s ", drum_names[joydrumkey]);
 800321c:	7a3b      	ldrb	r3, [r7, #8]
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <preview_drums+0x37c>)
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	461a      	mov	r2, r3
 8003226:	491e      	ldr	r1, [pc, #120]	; (80032a0 <preview_drums+0x380>)
 8003228:	481e      	ldr	r0, [pc, #120]	; (80032a4 <preview_drums+0x384>)
 800322a:	f013 fcff 	bl	8016c2c <siprintf>
					strcat(lcdline,part_names[drum_parts[joydrumkey][joypartkey]]);
 800322e:	7a3a      	ldrb	r2, [r7, #8]
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	491d      	ldr	r1, [pc, #116]	; (80032a8 <preview_drums+0x388>)
 8003234:	0052      	lsls	r2, r2, #1
 8003236:	440a      	add	r2, r1
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <preview_drums+0x38c>)
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	4619      	mov	r1, r3
 8003246:	4817      	ldr	r0, [pc, #92]	; (80032a4 <preview_drums+0x384>)
 8003248:	f013 fd10 	bl	8016c6c <strcat>
					menuStatusLine(lcdline);
 800324c:	4815      	ldr	r0, [pc, #84]	; (80032a4 <preview_drums+0x384>)
 800324e:	f004 fde5 	bl	8007e1c <menuStatusLine>
					//TM_ILI9341_DrawFilledRectangle(10, 180, 320, 240,ILI9341_COLOR_MAGENTA);	// clear text field
					//TM_ILI9341_Puts(10, 180, lcdline, &TM_Font_11x18,ILI9341_COLOR_WHITE, ILI9341_COLOR_MAGENTA);// put text
					key_to_drum_part[tmpkey][0] = drum_midi_values[joydrumkey];
 8003252:	7a3a      	ldrb	r2, [r7, #8]
 8003254:	7a7b      	ldrb	r3, [r7, #9]
 8003256:	4916      	ldr	r1, [pc, #88]	; (80032b0 <preview_drums+0x390>)
 8003258:	5c89      	ldrb	r1, [r1, r2]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <preview_drums+0x394>)
 800325c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					key_to_drum_part[tmpkey][1] = drum_parts[joydrumkey][joypartkey];
 8003260:	7a39      	ldrb	r1, [r7, #8]
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	7a7b      	ldrb	r3, [r7, #9]
 8003266:	4810      	ldr	r0, [pc, #64]	; (80032a8 <preview_drums+0x388>)
 8003268:	0049      	lsls	r1, r1, #1
 800326a:	4401      	add	r1, r0
 800326c:	440a      	add	r2, r1
 800326e:	7811      	ldrb	r1, [r2, #0]
 8003270:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <preview_drums+0x394>)
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	460a      	mov	r2, r1
 8003278:	705a      	strb	r2, [r3, #1]
					changed = FALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	717b      	strb	r3, [r7, #5]
					HAL_Delay(100);
 800327e:	2064      	movs	r0, #100	; 0x64
 8003280:	f009 f89c 	bl	800c3bc <HAL_Delay>
	while (looper.DrumState == DRUMS_PAUSED) {
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <preview_drums+0x398>)
 8003286:	7f1b      	ldrb	r3, [r3, #28]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b03      	cmp	r3, #3
 800328c:	f43f ae8c 	beq.w	8002fa8 <preview_drums+0x88>
		}

	}


}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	bf00      	nop
 800329c:	200000f0 	.word	0x200000f0
 80032a0:	08017fdc 	.word	0x08017fdc
 80032a4:	20001264 	.word	0x20001264
 80032a8:	20000150 	.word	0x20000150
 80032ac:	20000130 	.word	0x20000130
 80032b0:	20000140 	.word	0x20000140
 80032b4:	20000170 	.word	0x20000170
 80032b8:	20001220 	.word	0x20001220

080032bc <play_drums>:

void play_drums() {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
	looper.Metronome = FALSE;
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <play_drums+0x88>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	715a      	strb	r2, [r3, #5]
	uint8_t beat_counter = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Start_IT(&htim2);
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <play_drums+0x8c>)
 80032ce:	f00e f8df 	bl	8011490 <HAL_TIM_Base_Start_IT>
	resetDrums();
 80032d2:	f000 f9ad 	bl	8003630 <resetDrums>
	pat1.beattime = beattime;
 80032d6:	4b1d      	ldr	r3, [pc, #116]	; (800334c <play_drums+0x90>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <play_drums+0x94>)
 80032dc:	6093      	str	r3, [r2, #8]
	setPatternTime(&pat1, &tim1);
 80032de:	491d      	ldr	r1, [pc, #116]	; (8003354 <play_drums+0x98>)
 80032e0:	481b      	ldr	r0, [pc, #108]	; (8003350 <play_drums+0x94>)
 80032e2:	f7ff fced 	bl	8002cc0 <setPatternTime>
	looper.DrumState = DRUMS_STARTED;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <play_drums+0x88>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	771a      	strb	r2, [r3, #28]
	while(TRUE) {
		while(midiDrumClock < tim1.barDuration){
 80032ec:	e01a      	b.n	8003324 <play_drums+0x68>
			 if(every_beat == TRUE){
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <play_drums+0x9c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d110      	bne.n	800331a <play_drums+0x5e>
				  sprintf(lcdline,"Beat: %2u",(unsigned int)++beat_counter);
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	3301      	adds	r3, #1
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	461a      	mov	r2, r3
 8003302:	4916      	ldr	r1, [pc, #88]	; (800335c <play_drums+0xa0>)
 8003304:	4816      	ldr	r0, [pc, #88]	; (8003360 <play_drums+0xa4>)
 8003306:	f013 fc91 	bl	8016c2c <siprintf>
				  TM_HD44780_Puts(0,1,lcdline);
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <play_drums+0xa4>)
 800330c:	2101      	movs	r1, #1
 800330e:	2000      	movs	r0, #0
 8003310:	f008 f922 	bl	800b558 <TM_HD44780_Puts>
				  every_beat = FALSE;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <play_drums+0x9c>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
			 }
			 if(looper.DrumState == DRUMS_STOPPED)
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <play_drums+0x88>)
 800331c:	7f1b      	ldrb	r3, [r3, #28]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <play_drums+0x7a>
		while(midiDrumClock < tim1.barDuration){
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <play_drums+0x98>)
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <play_drums+0xa8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d8de      	bhi.n	80032ee <play_drums+0x32>
			 	goto end_play_drums;
		}

		beat_counter = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	71fb      	strb	r3, [r7, #7]
		while(midiDrumClock < tim1.barDuration){
 8003334:	e7f6      	b.n	8003324 <play_drums+0x68>
			 	goto end_play_drums;
 8003336:	bf00      	nop

	}

	end_play_drums:
	stopDrums();
 8003338:	f7ff fcb0 	bl	8002c9c <stopDrums>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20001220 	.word	0x20001220
 8003348:	20002278 	.word	0x20002278
 800334c:	200000e4 	.word	0x200000e4
 8003350:	20001174 	.word	0x20001174
 8003354:	20001194 	.word	0x20001194
 8003358:	2000055a 	.word	0x2000055a
 800335c:	08017fe0 	.word	0x08017fe0
 8003360:	20001264 	.word	0x20001264
 8003364:	20000554 	.word	0x20000554

08003368 <wait_metronome>:



static void wait_metronome(){
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	while(looper.DrumState != DRUMS_STARTED){
 800336c:	e00f      	b.n	800338e <wait_metronome+0x26>
		  if(metronomeUpdated == TRUE){
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <wait_metronome+0x38>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d106      	bne.n	8003384 <wait_metronome+0x1c>
			  updatePatternTime(&pat1,&tim1);
 8003376:	490b      	ldr	r1, [pc, #44]	; (80033a4 <wait_metronome+0x3c>)
 8003378:	480b      	ldr	r0, [pc, #44]	; (80033a8 <wait_metronome+0x40>)
 800337a:	f7ff fcd5 	bl	8002d28 <updatePatternTime>
			  metronomeUpdated = FALSE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <wait_metronome+0x38>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
		  }
		  if(looper.DrumState == DRUMS_STOPPED)	// blue button pressed
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <wait_metronome+0x44>)
 8003386:	7f1b      	ldrb	r3, [r3, #28]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <wait_metronome+0x32>
	while(looper.DrumState != DRUMS_STARTED){
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <wait_metronome+0x44>)
 8003390:	7f1b      	ldrb	r3, [r3, #28]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d1ea      	bne.n	800336e <wait_metronome+0x6>
			  break;
	}
}
 8003398:	e000      	b.n	800339c <wait_metronome+0x34>
			  break;
 800339a:	bf00      	nop
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000548 	.word	0x20000548
 80033a4:	20001194 	.word	0x20001194
 80033a8:	20001174 	.word	0x20001174
 80033ac:	20001220 	.word	0x20001220

080033b0 <fit_events>:

static void fit_events(){
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
	uint32_t barMillis;
	uint8_t drum,part;
	 while(drumBuffWritePtr[drumBufferIndex] != No_Event){
 80033b6:	e074      	b.n	80034a2 <fit_events+0xf2>
		for(barMillis = 0; barMillis < tim1.barDuration; barMillis += tim1.subBeatDuration){
 80033b8:	2300      	movs	r3, #0
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e067      	b.n	800348e <fit_events+0xde>
		  if(drumEventTimes[drumBufferIndex] >= barMillis && drumEventTimes[drumBufferIndex] < (barMillis + tim1.subBeatDuration)){
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <fit_events+0x110>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <fit_events+0x114>)
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d85a      	bhi.n	8003484 <fit_events+0xd4>
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <fit_events+0x110>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <fit_events+0x114>)
 80033d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <fit_events+0x118>)
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	440b      	add	r3, r1
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d24f      	bcs.n	8003484 <fit_events+0xd4>
			  drumBeatIndex = barMillis / tim1.subBeatDuration;
 80033e4:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <fit_events+0x118>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4a37      	ldr	r2, [pc, #220]	; (80034cc <fit_events+0x11c>)
 80033f0:	6013      	str	r3, [r2, #0]
			  if(looper.PlayBass == FALSE){
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <fit_events+0x120>)
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <fit_events+0x7a>
				  drum = key_to_drum_part[drumBuffWritePtr[drumBufferIndex]][0];
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <fit_events+0x124>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <fit_events+0x110>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <fit_events+0x128>)
 800340c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8003410:	70fb      	strb	r3, [r7, #3]
				  part = key_to_drum_part[drumBuffWritePtr[drumBufferIndex]][1];
 8003412:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <fit_events+0x124>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <fit_events+0x110>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	4a2e      	ldr	r2, [pc, #184]	; (80034d8 <fit_events+0x128>)
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	70bb      	strb	r3, [r7, #2]
 8003428:	e006      	b.n	8003438 <fit_events+0x88>
			  }
			  else{
				  drum = drumBuffB[drumBufferIndex];
 800342a:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <fit_events+0x110>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <fit_events+0x12c>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	70fb      	strb	r3, [r7, #3]
				  part = BASS;
 8003434:	2304      	movs	r3, #4
 8003436:	70bb      	strb	r3, [r7, #2]
			  }
			  if(drumEventTimes[drumBufferIndex] < (barMillis + tim1.subBeatDuration / 2))
 8003438:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <fit_events+0x110>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <fit_events+0x114>)
 800343e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <fit_events+0x118>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	0859      	lsrs	r1, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	440b      	add	r3, r1
 800344c:	429a      	cmp	r2, r3
 800344e:	d20c      	bcs.n	800346a <fit_events+0xba>
				  drumBuffReadPtr[drumBeatIndex * 5 + part] = drum;
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <fit_events+0x130>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <fit_events+0x11c>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	78bb      	ldrb	r3, [r7, #2]
 8003460:	4413      	add	r3, r2
 8003462:	440b      	add	r3, r1
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e00c      	b.n	8003484 <fit_events+0xd4>
			  else
				  drumBuffReadPtr[drumBeatIndex * 5 + 5 + part] = drum;
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <fit_events+0x130>)
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <fit_events+0x11c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	78bb      	ldrb	r3, [r7, #2]
 800347c:	4413      	add	r3, r2
 800347e:	440b      	add	r3, r1
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	701a      	strb	r2, [r3, #0]
		for(barMillis = 0; barMillis < tim1.barDuration; barMillis += tim1.subBeatDuration){
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <fit_events+0x118>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <fit_events+0x118>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d392      	bcc.n	80033be <fit_events+0xe>

		  }
		}

		drumBufferIndex++;
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <fit_events+0x110>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <fit_events+0x110>)
 80034a0:	6013      	str	r3, [r2, #0]
	 while(drumBuffWritePtr[drumBufferIndex] != No_Event){
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <fit_events+0x124>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <fit_events+0x110>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2bff      	cmp	r3, #255	; 0xff
 80034b0:	d182      	bne.n	80033b8 <fit_events+0x8>
	 }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000550 	.word	0x20000550
 80034c4:	200010ac 	.word	0x200010ac
 80034c8:	20001194 	.word	0x20001194
 80034cc:	2000054c 	.word	0x2000054c
 80034d0:	20001220 	.word	0x20001220
 80034d4:	20001170 	.word	0x20001170
 80034d8:	20000170 	.word	0x20000170
 80034dc:	20000fbc 	.word	0x20000fbc
 80034e0:	2000116c 	.word	0x2000116c

080034e4 <record_drums>:


void record_drums(){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
		uint8_t beat_counter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	71fb      	strb	r3, [r7, #7]
		pat1.beattime = beattime;
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <record_drums+0x100>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <record_drums+0x104>)
 80034f4:	6093      	str	r3, [r2, #8]
		pat1.division = division;
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <record_drums+0x108>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <record_drums+0x104>)
 80034fc:	6053      	str	r3, [r2, #4]
		pat1.beats = beats;
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <record_drums+0x10c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a39      	ldr	r2, [pc, #228]	; (80035e8 <record_drums+0x104>)
 8003504:	6013      	str	r3, [r2, #0]
		drumBuffReadPtr = drumBuffA;
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <record_drums+0x110>)
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <record_drums+0x114>)
 800350a:	601a      	str	r2, [r3, #0]
		drumBuffWritePtr = drumBuffB;
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <record_drums+0x118>)
 800350e:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <record_drums+0x11c>)
 8003510:	601a      	str	r2, [r3, #0]
		timptr = &tim1;
 8003512:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <record_drums+0x120>)
 8003514:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <record_drums+0x124>)
 8003516:	601a      	str	r2, [r3, #0]
		patptr = &pat1;
 8003518:	4b3c      	ldr	r3, [pc, #240]	; (800360c <record_drums+0x128>)
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <record_drums+0x104>)
 800351c:	601a      	str	r2, [r3, #0]
		looper.Metronome = TRUE;
 800351e:	4b3c      	ldr	r3, [pc, #240]	; (8003610 <record_drums+0x12c>)
 8003520:	2201      	movs	r2, #1
 8003522:	715a      	strb	r2, [r3, #5]
		setPatternTime(&pat1,&tim1);
 8003524:	4938      	ldr	r1, [pc, #224]	; (8003608 <record_drums+0x124>)
 8003526:	4830      	ldr	r0, [pc, #192]	; (80035e8 <record_drums+0x104>)
 8003528:	f7ff fbca 	bl	8002cc0 <setPatternTime>
		resetDrums();
 800352c:	f000 f880 	bl	8003630 <resetDrums>
		HAL_TIM_Base_Start_IT(&htim2);
 8003530:	4838      	ldr	r0, [pc, #224]	; (8003614 <record_drums+0x130>)
 8003532:	f00d ffad 	bl	8011490 <HAL_TIM_Base_Start_IT>

		while(TRUE){
			// Metronome is ticking. Pressing drum keyboard starts recording and sets clocks to 0
			wait_metronome();
 8003536:	f7ff ff17 	bl	8003368 <wait_metronome>
			// recording loop and playback: drum events added to buffer in readDrumKeyboard(), called in midiDrumHandler()
			while(midiDrumClock < tim1.barDuration){
 800353a:	e01b      	b.n	8003574 <record_drums+0x90>
			  if(every_beat == TRUE){
 800353c:	4b36      	ldr	r3, [pc, #216]	; (8003618 <record_drums+0x134>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d110      	bne.n	8003568 <record_drums+0x84>
				  sprintf(lcdline,"Beat: %2u",(unsigned int)++beat_counter);
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	3301      	adds	r3, #1
 800354a:	71fb      	strb	r3, [r7, #7]
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	461a      	mov	r2, r3
 8003550:	4932      	ldr	r1, [pc, #200]	; (800361c <record_drums+0x138>)
 8003552:	4833      	ldr	r0, [pc, #204]	; (8003620 <record_drums+0x13c>)
 8003554:	f013 fb6a 	bl	8016c2c <siprintf>
				  TM_HD44780_Puts(0,1,lcdline);
 8003558:	4a31      	ldr	r2, [pc, #196]	; (8003620 <record_drums+0x13c>)
 800355a:	2101      	movs	r1, #1
 800355c:	2000      	movs	r0, #0
 800355e:	f007 fffb 	bl	800b558 <TM_HD44780_Puts>
				  every_beat = FALSE;
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <record_drums+0x134>)
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
			  }

			  if(looper.DrumState == DRUMS_STOPPED)	// blue button pressed
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <record_drums+0x12c>)
 800356a:	7f1b      	ldrb	r3, [r3, #28]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d022      	beq.n	80035b8 <record_drums+0xd4>
				  goto end_drum_record;
			  continue;
 8003572:	bf00      	nop
			while(midiDrumClock < tim1.barDuration){
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <record_drums+0x124>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <record_drums+0x140>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d8dd      	bhi.n	800353c <record_drums+0x58>
		  }

		  drumBuffWritePtr[drumBufferIndex] = No_Event;
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <record_drums+0x118>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <record_drums+0x144>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	701a      	strb	r2, [r3, #0]
		  looper.DrumState = DRUMS_STOPPED;
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <record_drums+0x12c>)
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
		  beat_counter = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	71fb      	strb	r3, [r7, #7]
		  resetDrums();
 8003598:	f000 f84a 	bl	8003630 <resetDrums>
		  BSP_LED_Off(LED_RED);
 800359c:	2001      	movs	r0, #1
 800359e:	f007 f9c5 	bl	800a92c <BSP_LED_Off>
		  BSP_LED_On(LED_GREEN);
 80035a2:	2000      	movs	r0, #0
 80035a4:	f007 f9a8 	bl	800a8f8 <BSP_LED_On>
		  // fit events into playing buffer
		  fit_events();
 80035a8:	f7ff ff02 	bl	80033b0 <fit_events>
		  resetDrums();
 80035ac:	f000 f840 	bl	8003630 <resetDrums>
		  looper.DrumState = DRUMS_STARTED;
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <record_drums+0x12c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	771a      	strb	r2, [r3, #28]
			wait_metronome();
 80035b6:	e7be      	b.n	8003536 <record_drums+0x52>
				  goto end_drum_record;
 80035b8:	bf00      	nop

	  }

	  end_drum_record:
	  stopDrums();
 80035ba:	f7ff fb6f 	bl	8002c9c <stopDrums>
	  beattime += looper.timeIncrement;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <record_drums+0x12c>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <record_drums+0x100>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	4a06      	ldr	r2, [pc, #24]	; (80035e4 <record_drums+0x100>)
 80035cc:	6013      	str	r3, [r2, #0]
	  looper.timeIncrement = 0;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <record_drums+0x12c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
	  Skip_Read_Button = TRUE;
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <record_drums+0x148>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
	  return;
 80035da:	bf00      	nop
}
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200000e4 	.word	0x200000e4
 80035e8:	20001174 	.word	0x20001174
 80035ec:	200000e8 	.word	0x200000e8
 80035f0:	200000ec 	.word	0x200000ec
 80035f4:	2000116c 	.word	0x2000116c
 80035f8:	20000ecc 	.word	0x20000ecc
 80035fc:	20001170 	.word	0x20001170
 8003600:	20000fbc 	.word	0x20000fbc
 8003604:	200011b4 	.word	0x200011b4
 8003608:	20001194 	.word	0x20001194
 800360c:	200011b8 	.word	0x200011b8
 8003610:	20001220 	.word	0x20001220
 8003614:	20002278 	.word	0x20002278
 8003618:	2000055a 	.word	0x2000055a
 800361c:	08017fe0 	.word	0x08017fe0
 8003620:	20001264 	.word	0x20001264
 8003624:	20000554 	.word	0x20000554
 8003628:	20000550 	.word	0x20000550
 800362c:	20001c3b 	.word	0x20001c3b

08003630 <resetDrums>:

void resetDrums(){
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	midiDrumClock = 0;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <resetDrums+0x20>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
	drumBeatIndex = 0;
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <resetDrums+0x24>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
	drumBufferIndex = 0;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <resetDrums+0x28>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20000554 	.word	0x20000554
 8003654:	2000054c 	.word	0x2000054c
 8003658:	20000550 	.word	0x20000550

0800365c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003670:	e007      	b.n	8003682 <mem_cpy+0x26>
		*d++ = *s++;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	1c53      	adds	r3, r2, #1
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	6179      	str	r1, [r7, #20]
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1e5a      	subs	r2, r3, #1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f2      	bne.n	8003672 <mem_cpy+0x16>
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80036aa:	e005      	b.n	80036b8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	617a      	str	r2, [r7, #20]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f4      	bne.n	80036ac <mem_set+0x12>
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80036e8:	bf00      	nop
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <mem_cmp+0x40>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	61fa      	str	r2, [r7, #28]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	61ba      	str	r2, [r7, #24]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	1acb      	subs	r3, r1, r3
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ec      	beq.n	80036ea <mem_cmp+0x1a>
	return r;
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003728:	e002      	b.n	8003730 <chk_chr+0x12>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3301      	adds	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <chk_chr+0x26>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4293      	cmp	r3, r2
 8003742:	d1f2      	bne.n	800372a <chk_chr+0xc>
	return *str;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d034      	beq.n	80037d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7858      	ldrb	r0, [r3, #1]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003778:	2301      	movs	r3, #1
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	f7fe fccc 	bl	8002118 <disk_write>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <sync_window+0x38>
			res = FR_DISK_ERR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	e022      	b.n	80037d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	1ad2      	subs	r2, r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d217      	bcs.n	80037d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	78db      	ldrb	r3, [r3, #3]
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e010      	b.n	80037cc <sync_window+0x78>
					wsect += fs->fsize;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7858      	ldrb	r0, [r3, #1]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80037be:	2301      	movs	r3, #1
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	f7fe fca9 	bl	8002118 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d8eb      	bhi.n	80037aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d01b      	beq.n	800382c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffad 	bl	8003754 <sync_window>
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d113      	bne.n	800382c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7858      	ldrb	r0, [r3, #1]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800380e:	2301      	movs	r3, #1
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	f7fe fc53 	bl	80020bc <disk_read>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
 8003820:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff88 	bl	8003754 <sync_window>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8090 	bne.w	8003970 <sync_fs+0x13a>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d17f      	bne.n	8003958 <sync_fs+0x122>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	795b      	ldrb	r3, [r3, #5]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d17b      	bne.n	8003958 <sync_fs+0x122>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3334      	adds	r3, #52	; 0x34
 8003864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff15 	bl	800369a <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2255      	movs	r2, #85	; 0x55
 8003874:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	22aa      	movs	r2, #170	; 0xaa
 800387c:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2252      	movs	r2, #82	; 0x52
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2252      	movs	r2, #82	; 0x52
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2261      	movs	r2, #97	; 0x61
 8003894:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2241      	movs	r2, #65	; 0x41
 800389c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2272      	movs	r2, #114	; 0x72
 80038a4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2272      	movs	r2, #114	; 0x72
 80038ac:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2241      	movs	r2, #65	; 0x41
 80038b4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2261      	movs	r2, #97	; 0x61
 80038bc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	b29b      	uxth	r3, r3
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	b29b      	uxth	r3, r3
 8003910:	b2da      	uxtb	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	b2da      	uxtb	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	0e1b      	lsrs	r3, r3, #24
 800392c:	b2da      	uxtb	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7858      	ldrb	r0, [r3, #1]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	2301      	movs	r3, #1
 800394e:	f7fe fbe3 	bl	8002118 <disk_write>
			fs->fsi_flag = 0;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fc07 	bl	8002174 <disk_ioctl>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <sync_fs+0x13a>
			res = FR_DISK_ERR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	3b02      	subs	r3, #2
 8003988:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	3b02      	subs	r3, #2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d301      	bcc.n	800399a <clust2sect+0x20>
 8003996:	2300      	movs	r3, #0
 8003998:	e008      	b.n	80039ac <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	461a      	mov	r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	4413      	add	r3, r2
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d904      	bls.n	80039d2 <get_fat+0x1a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <get_fat+0x20>
		val = 1;	/* Internal error */
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e0a6      	b.n	8003b26 <get_fat+0x16e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d06b      	beq.n	8003abe <get_fat+0x106>
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	f300 8093 	bgt.w	8003b12 <get_fat+0x15a>
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d002      	beq.n	80039f6 <get_fat+0x3e>
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d042      	beq.n	8003a7a <get_fat+0xc2>
 80039f4:	e08d      	b.n	8003b12 <get_fat+0x15a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0a5b      	lsrs	r3, r3, #9
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fee3 	bl	80037dc <move_window>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d17d      	bne.n	8003b18 <get_fat+0x160>
			wc = fs->win[bc++ % SS(fs)];
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	60fa      	str	r2, [r7, #12]
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a2e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	4413      	add	r3, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fecd 	bl	80037dc <move_window>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d169      	bne.n	8003b1c <get_fat+0x164>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <get_fat+0xb8>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	e002      	b.n	8003a76 <get_fat+0xbe>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	617b      	str	r3, [r7, #20]
			break;
 8003a78:	e055      	b.n	8003b26 <get_fat+0x16e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	4413      	add	r3, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fea8 	bl	80037dc <move_window>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d146      	bne.n	8003b20 <get_fat+0x168>
			p = &fs->win[clst * 2 % SS(fs)];
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003a9a:	3330      	adds	r3, #48	; 0x30
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	617b      	str	r3, [r7, #20]
			break;
 8003abc:	e033      	b.n	8003b26 <get_fat+0x16e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	09db      	lsrs	r3, r3, #7
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fe86 	bl	80037dc <move_window>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d126      	bne.n	8003b24 <get_fat+0x16c>
			p = &fs->win[clst * 4 % SS(fs)];
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003ade:	3330      	adds	r3, #48	; 0x30
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3303      	adds	r3, #3
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	061a      	lsls	r2, r3, #24
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3302      	adds	r3, #2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	4313      	orrs	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	3201      	adds	r2, #1
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	0212      	lsls	r2, r2, #8
 8003b02:	4313      	orrs	r3, r2
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b0e:	617b      	str	r3, [r7, #20]
			break;
 8003b10:	e009      	b.n	8003b26 <get_fat+0x16e>

		default:
			val = 1;	/* Internal error */
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e006      	b.n	8003b26 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b18:	bf00      	nop
 8003b1a:	e004      	b.n	8003b26 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b1c:	bf00      	nop
 8003b1e:	e002      	b.n	8003b26 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b20:	bf00      	nop
 8003b22:	e000      	b.n	8003b26 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b24:	bf00      	nop
		}
	}

	return val;
 8003b26:	697b      	ldr	r3, [r7, #20]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d904      	bls.n	8003b4c <put_fat+0x1c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <put_fat+0x22>
		res = FR_INT_ERR;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e0f5      	b.n	8003d3e <put_fat+0x20e>

	} else {
		switch (fs->fs_type) {
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	f000 809e 	beq.w	8003c98 <put_fat+0x168>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	f300 80e4 	bgt.w	8003d2a <put_fat+0x1fa>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d002      	beq.n	8003b6c <put_fat+0x3c>
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d06f      	beq.n	8003c4a <put_fat+0x11a>
 8003b6a:	e0de      	b.n	8003d2a <put_fat+0x1fa>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	0a5b      	lsrs	r3, r3, #9
 8003b82:	4413      	add	r3, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff fe28 	bl	80037dc <move_window>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b90:	7ffb      	ldrb	r3, [r7, #31]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 80cc 	bne.w	8003d30 <put_fat+0x200>
			p = &fs->win[bc++ % SS(fs)];
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	617a      	str	r2, [r7, #20]
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	3330      	adds	r3, #48	; 0x30
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <put_fat+0xa2>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	b25a      	sxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e001      	b.n	8003bd6 <put_fat+0xa6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	0a5b      	lsrs	r3, r3, #9
 8003be8:	4413      	add	r3, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fdf5 	bl	80037dc <move_window>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 809b 	bne.w	8003d34 <put_fat+0x204>
			p = &fs->win[bc % SS(fs)];
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	3330      	adds	r3, #48	; 0x30
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <put_fat+0xf0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e00e      	b.n	8003c3e <put_fat+0x10e>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	f023 030f 	bic.w	r3, r3, #15
 8003c2a:	b25a      	sxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	b25b      	sxtb	r3, r3
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b25b      	sxtb	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	711a      	strb	r2, [r3, #4]
			break;
 8003c48:	e079      	b.n	8003d3e <put_fat+0x20e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	4413      	add	r3, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fdc0 	bl	80037dc <move_window>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d168      	bne.n	8003d38 <put_fat+0x208>
			p = &fs->win[clst * 2 % SS(fs)];
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c6e:	3330      	adds	r3, #48	; 0x30
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	3304      	adds	r3, #4
 8003c76:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	711a      	strb	r2, [r3, #4]
			break;
 8003c96:	e052      	b.n	8003d3e <put_fat+0x20e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fd99 	bl	80037dc <move_window>
 8003caa:	4603      	mov	r3, r0
 8003cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d143      	bne.n	8003d3c <put_fat+0x20c>
			p = &fs->win[clst * 4 % SS(fs)];
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003cbc:	3330      	adds	r3, #48	; 0x30
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3303      	adds	r3, #3
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	061a      	lsls	r2, r3, #24
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	3201      	adds	r2, #1
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	3301      	adds	r3, #1
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0c1a      	lsrs	r2, r3, #16
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3302      	adds	r3, #2
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0e1a      	lsrs	r2, r3, #24
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	3303      	adds	r3, #3
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	711a      	strb	r2, [r3, #4]
			break;
 8003d28:	e009      	b.n	8003d3e <put_fat+0x20e>

		default :
			res = FR_INT_ERR;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e006      	b.n	8003d3e <put_fat+0x20e>
			if (res != FR_OK) break;
 8003d30:	bf00      	nop
 8003d32:	e004      	b.n	8003d3e <put_fat+0x20e>
			if (res != FR_OK) break;
 8003d34:	bf00      	nop
 8003d36:	e002      	b.n	8003d3e <put_fat+0x20e>
			if (res != FR_OK) break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <put_fat+0x20e>
			if (res != FR_OK) break;
 8003d3c:	bf00      	nop
		}
	}

	return res;
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d904      	bls.n	8003d62 <remove_chain+0x1a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <remove_chain+0x20>
		res = FR_INT_ERR;
 8003d62:	2302      	movs	r3, #2
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e03d      	b.n	8003de4 <remove_chain+0x9c>

	} else {
		res = FR_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003d6c:	e031      	b.n	8003dd2 <remove_chain+0x8a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe21 	bl	80039b8 <get_fat>
 8003d76:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d02f      	beq.n	8003dde <remove_chain+0x96>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d102      	bne.n	8003d8a <remove_chain+0x42>
 8003d84:	2302      	movs	r3, #2
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e02c      	b.n	8003de4 <remove_chain+0x9c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d102      	bne.n	8003d98 <remove_chain+0x50>
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e025      	b.n	8003de4 <remove_chain+0x9c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003d98:	2200      	movs	r2, #0
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fec7 	bl	8003b30 <put_fat>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11a      	bne.n	8003de2 <remove_chain+0x9a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d00b      	beq.n	8003dce <remove_chain+0x86>
				fs->free_clust++;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	795b      	ldrb	r3, [r3, #5]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d3c8      	bcc.n	8003d6e <remove_chain+0x26>
 8003ddc:	e002      	b.n	8003de4 <remove_chain+0x9c>
			if (nxt == 0) break;				/* Empty cluster? */
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <remove_chain+0x9c>
			if (res != FR_OK) break;
 8003de2:	bf00      	nop
		}
	}

	return res;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <create_chain+0x26>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d31b      	bcc.n	8003e4c <create_chain+0x5e>
 8003e14:	2301      	movs	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e018      	b.n	8003e4c <create_chain+0x5e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fdcb 	bl	80039b8 <get_fat>
 8003e22:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d801      	bhi.n	8003e2e <create_chain+0x40>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06e      	b.n	8003f0c <create_chain+0x11e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d101      	bne.n	8003e3a <create_chain+0x4c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	e068      	b.n	8003f0c <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d201      	bcs.n	8003e48 <create_chain+0x5a>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	e061      	b.n	8003f0c <create_chain+0x11e>
		scl = clst;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d307      	bcc.n	8003e70 <create_chain+0x82>
			ncl = 2;
 8003e60:	2302      	movs	r3, #2
 8003e62:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d901      	bls.n	8003e70 <create_chain+0x82>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e04d      	b.n	8003f0c <create_chain+0x11e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fda0 	bl	80039b8 <get_fat>
 8003e78:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <create_chain+0xb0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d002      	beq.n	8003e8e <create_chain+0xa0>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <create_chain+0xa4>
			return cs;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	e03c      	b.n	8003f0c <create_chain+0x11e>
		if (ncl == scl) return 0;		/* No free cluster */
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1da      	bne.n	8003e50 <create_chain+0x62>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e036      	b.n	8003f0c <create_chain+0x11e>
		if (cs == 0) break;				/* Found a free cluster */
 8003e9e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003ea0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe42 	bl	8003b30 <put_fat>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <create_chain+0xdc>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <create_chain+0xdc>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fe35 	bl	8003b30 <put_fat>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d114      	bne.n	8003efa <create_chain+0x10c>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d014      	beq.n	8003f0a <create_chain+0x11c>
			fs->free_clust--;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	795b      	ldrb	r3, [r3, #5]
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	715a      	strb	r2, [r3, #5]
 8003ef8:	e007      	b.n	8003f0a <create_chain+0x11c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <create_chain+0x118>
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e000      	b.n	8003f08 <create_chain+0x11a>
 8003f06:	2301      	movs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003f0a:	697b      	ldr	r3, [r7, #20]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d005      	beq.n	8003f3e <dir_sdi+0x2a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d301      	bcc.n	8003f42 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e063      	b.n	800400a <dir_sdi+0xf6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <dir_sdi+0x46>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d103      	bne.n	8003f5a <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10d      	bne.n	8003f7c <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	891b      	ldrh	r3, [r3, #8]
 8003f66:	461a      	mov	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d301      	bcc.n	8003f72 <dir_sdi+0x5e>
			return FR_INT_ERR;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e04b      	b.n	800400a <dir_sdi+0xf6>
		sect = dp->fs->dirbase;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e02c      	b.n	8003fd6 <dir_sdi+0xc2>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	789b      	ldrb	r3, [r3, #2]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f86:	e01b      	b.n	8003fc0 <dir_sdi+0xac>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fd12 	bl	80039b8 <get_fat>
 8003f94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d101      	bne.n	8003fa2 <dir_sdi+0x8e>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e033      	b.n	800400a <dir_sdi+0xf6>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d905      	bls.n	8003fb4 <dir_sdi+0xa0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d301      	bcc.n	8003fb8 <dir_sdi+0xa4>
				return FR_INT_ERR;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e028      	b.n	800400a <dir_sdi+0xf6>
			idx -= ic;
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d2df      	bcs.n	8003f88 <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fcd3 	bl	800397a <clust2sect>
 8003fd4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <dir_sdi+0xd2>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e011      	b.n	800400a <dir_sdi+0xf6>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	091a      	lsrs	r2, r3, #4
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	441a      	add	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	015b      	lsls	r3, r3, #5
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004012:	b590      	push	{r4, r7, lr}
 8004014:	b087      	sub	sp, #28
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	88db      	ldrh	r3, [r3, #6]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <dir_next+0x22>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <dir_next+0x26>
		return FR_NO_FILE;
 8004034:	2304      	movs	r3, #4
 8004036:	e0bb      	b.n	80041b0 <dir_next+0x19e>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 80a6 	bne.w	8004190 <dir_next+0x17e>
		dp->sect++;					/* Next sector */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <dir_next+0x58>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	891b      	ldrh	r3, [r3, #8]
 800405c:	461a      	mov	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4293      	cmp	r3, r2
 8004062:	f0c0 8095 	bcc.w	8004190 <dir_next+0x17e>
				return FR_NO_FILE;
 8004066:	2304      	movs	r3, #4
 8004068:	e0a2      	b.n	80041b0 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	7892      	ldrb	r2, [r2, #2]
 8004074:	3a01      	subs	r2, #1
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 8089 	bne.w	8004190 <dir_next+0x17e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7ff fc95 	bl	80039b8 <get_fat>
 800408e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d801      	bhi.n	800409a <dir_next+0x88>
 8004096:	2302      	movs	r3, #2
 8004098:	e08a      	b.n	80041b0 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d101      	bne.n	80040a6 <dir_next+0x94>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e084      	b.n	80041b0 <dir_next+0x19e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d362      	bcc.n	8004178 <dir_next+0x166>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <dir_next+0xaa>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e079      	b.n	80041b0 <dir_next+0x19e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f7ff fe91 	bl	8003dee <create_chain>
 80040cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <dir_next+0xc6>
 80040d4:	2307      	movs	r3, #7
 80040d6:	e06b      	b.n	80041b0 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <dir_next+0xd0>
 80040de:	2302      	movs	r3, #2
 80040e0:	e066      	b.n	80041b0 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d101      	bne.n	80040ee <dir_next+0xdc>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e060      	b.n	80041b0 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fb2e 	bl	8003754 <sync_window>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <dir_next+0xf0>
 80040fe:	2301      	movs	r3, #1
 8004100:	e056      	b.n	80041b0 <dir_next+0x19e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3334      	adds	r3, #52	; 0x34
 8004108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fac3 	bl	800369a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681c      	ldr	r4, [r3, #0]
 800411c:	6979      	ldr	r1, [r7, #20]
 800411e:	4610      	mov	r0, r2
 8004120:	f7ff fc2b 	bl	800397a <clust2sect>
 8004124:	4603      	mov	r3, r0
 8004126:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e015      	b.n	800415a <dir_next+0x148>
						dp->fs->wflag = 1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fb0a 	bl	8003754 <sync_window>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <dir_next+0x138>
 8004146:	2301      	movs	r3, #1
 8004148:	e032      	b.n	80041b0 <dir_next+0x19e>
						dp->fs->winsect++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004150:	3201      	adds	r2, #1
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3301      	adds	r3, #1
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	461a      	mov	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4293      	cmp	r3, r2
 8004166:	d3e2      	bcc.n	800412e <dir_next+0x11c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	1a8a      	subs	r2, r1, r2
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6979      	ldr	r1, [r7, #20]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fbf8 	bl	800397a <clust2sect>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	015b      	lsls	r3, r3, #5
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}

080041b8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80041c2:	2100      	movs	r1, #0
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fea5 	bl	8003f14 <dir_sdi>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d12d      	bne.n	8004230 <dir_alloc+0x78>
		n = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7ff fafa 	bl	80037dc <move_window>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2be5      	cmp	r3, #229	; 0xe5
 80041fa:	d004      	beq.n	8004206 <dir_alloc+0x4e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d102      	bne.n	800421a <dir_alloc+0x62>
 8004214:	e00c      	b.n	8004230 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800421a:	2101      	movs	r1, #1
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fef8 	bl	8004012 <dir_next>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0d5      	beq.n	80041d8 <dir_alloc+0x20>
 800422c:	e000      	b.n	8004230 <dir_alloc+0x78>
			if (res != FR_OK) break;
 800422e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b04      	cmp	r3, #4
 8004234:	d101      	bne.n	800423a <dir_alloc+0x82>
 8004236:	2307      	movs	r3, #7
 8004238:	73fb      	strb	r3, [r7, #15]
	return res;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	331b      	adds	r3, #27
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	b21a      	sxth	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	331a      	adds	r3, #26
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b21b      	sxth	r3, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	b21b      	sxth	r3, r3
 8004264:	b29b      	uxth	r3, r3
 8004266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d10f      	bne.n	8004290 <ld_clust+0x4c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	3315      	adds	r3, #21
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	b21a      	sxth	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b21b      	sxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b21b      	sxth	r3, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

	return cl;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	331a      	adds	r3, #26
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	331b      	adds	r3, #27
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	0c1a      	lsrs	r2, r3, #16
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3314      	adds	r3, #20
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3315      	adds	r3, #21
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80042f4:	2100      	movs	r1, #0
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe0c 	bl	8003f14 <dir_sdi>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <dir_find+0x1e>
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	e037      	b.n	800437a <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7ff fa61 	bl	80037dc <move_window>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d126      	bne.n	8004372 <dir_find+0x86>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <dir_find+0x50>
 8004336:	2304      	movs	r3, #4
 8004338:	75fb      	strb	r3, [r7, #23]
 800433a:	e01d      	b.n	8004378 <dir_find+0x8c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	330b      	adds	r3, #11
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <dir_find+0x72>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	220b      	movs	r2, #11
 8004350:	4619      	mov	r1, r3
 8004352:	6938      	ldr	r0, [r7, #16]
 8004354:	f7ff f9bc 	bl	80036d0 <mem_cmp>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fe56 	bl	8004012 <dir_next>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0cc      	beq.n	800430a <dir_find+0x1e>
 8004370:	e002      	b.n	8004378 <dir_find+0x8c>
		if (res != FR_OK) break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <dir_find+0x8c>
			break;
 8004376:	bf00      	nop

	return res;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800438c:	2304      	movs	r3, #4
 800438e:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8004390:	e039      	b.n	8004406 <dir_read+0x84>
		res = move_window(dp->fs, dp->sect);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f7ff fa1d 	bl	80037dc <move_window>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d131      	bne.n	8004410 <dir_read+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <dir_read+0x42>
 80043be:	2304      	movs	r3, #4
 80043c0:	75fb      	strb	r3, [r7, #23]
 80043c2:	e02a      	b.n	800441a <dir_read+0x98>
		a = dir[DIR_Attr] & AM_MASK;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	330b      	adds	r3, #11
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ce:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2be5      	cmp	r3, #229	; 0xe5
 80043d4:	d00e      	beq.n	80043f4 <dir_read+0x72>
 80043d6:	7bbb      	ldrb	r3, [r7, #14]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d00b      	beq.n	80043f4 <dir_read+0x72>
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	f023 0320 	bic.w	r3, r3, #32
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00f      	beq.n	8004414 <dir_read+0x92>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80043f4:	2100      	movs	r1, #0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe0b 	bl	8004012 <dir_next>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <dir_read+0x96>
	while (dp->sect) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1c1      	bne.n	8004392 <dir_read+0x10>
 800440e:	e004      	b.n	800441a <dir_read+0x98>
		if (res != FR_OK) break;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <dir_read+0x98>
			break;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <dir_read+0x98>
		if (res != FR_OK) break;
 8004418:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <dir_read+0xa4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]

	return res;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004438:	2101      	movs	r1, #1
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff febc 	bl	80041b8 <dir_alloc>
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11f      	bne.n	800448a <dir_register+0x5a>
		res = move_window(dp->fs, dp->sect);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7ff f9c1 	bl	80037dc <move_window>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d112      	bne.n	800448a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2220      	movs	r2, #32
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff f914 	bl	800369a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6958      	ldr	r0, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	220b      	movs	r2, #11
 800447c:	4619      	mov	r1, r3
 800447e:	f7ff f8ed 	bl	800365c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2201      	movs	r2, #1
 8004488:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	88db      	ldrh	r3, [r3, #6]
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fd36 	bl	8003f14 <dir_sdi>
 80044a8:	4603      	mov	r3, r0
 80044aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11b      	bne.n	80044ea <dir_remove+0x56>
		res = move_window(dp->fs, dp->sect);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7ff f98d 	bl	80037dc <move_window>
 80044c2:	4603      	mov	r3, r0
 80044c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10e      	bne.n	80044ea <dir_remove+0x56>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2220      	movs	r2, #32
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f8e0 	bl	800369a <mem_set>
			*dp->dir = DDEM;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	22e5      	movs	r2, #229	; 0xe5
 80044e0:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	3309      	adds	r3, #9
 8004502:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d059      	beq.n	80045c0 <get_fileinfo+0xcc>
		dir = dp->dir;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	60bb      	str	r3, [r7, #8]
		i = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8004516:	e01c      	b.n	8004552 <get_fileinfo+0x5e>
			c = (TCHAR)dir[i++];
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	617a      	str	r2, [r7, #20]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b20      	cmp	r3, #32
 800452a:	d100      	bne.n	800452e <get_fileinfo+0x3a>
 800452c:	e011      	b.n	8004552 <get_fileinfo+0x5e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b05      	cmp	r3, #5
 8004532:	d101      	bne.n	8004538 <get_fileinfo+0x44>
 8004534:	23e5      	movs	r3, #229	; 0xe5
 8004536:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b09      	cmp	r3, #9
 800453c:	d104      	bne.n	8004548 <get_fileinfo+0x54>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	613a      	str	r2, [r7, #16]
 8004544:	222e      	movs	r2, #46	; 0x2e
 8004546:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	613a      	str	r2, [r7, #16]
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d9df      	bls.n	8004518 <get_fileinfo+0x24>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	7ada      	ldrb	r2, [r3, #11]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331f      	adds	r3, #31
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	061a      	lsls	r2, r3, #24
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	331e      	adds	r3, #30
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	4313      	orrs	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	321d      	adds	r2, #29
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	0212      	lsls	r2, r2, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	321c      	adds	r2, #28
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3319      	adds	r3, #25
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	b21a      	sxth	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3318      	adds	r3, #24
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b21b      	sxth	r3, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	b21b      	sxth	r3, r3
 800459e:	b29a      	uxth	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3317      	adds	r3, #23
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b21a      	sxth	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3316      	adds	r3, #22
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e002      	b.n	80045ec <create_name+0x18>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b2f      	cmp	r3, #47	; 0x2f
 80045f2:	d0f8      	beq.n	80045e6 <create_name+0x12>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b5c      	cmp	r3, #92	; 0x5c
 80045fa:	d0f4      	beq.n	80045e6 <create_name+0x12>
	sfn = dp->fn;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004602:	220b      	movs	r2, #11
 8004604:	2120      	movs	r1, #32
 8004606:	68b8      	ldr	r0, [r7, #8]
 8004608:	f7ff f847 	bl	800369a <mem_set>
	si = i = b = 0; ni = 8;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	2308      	movs	r3, #8
 800461a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4413      	add	r3, r2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b2e      	cmp	r3, #46	; 0x2e
 8004626:	d12f      	bne.n	8004688 <create_name+0xb4>
		for (;;) {
			c = (BYTE)p[si++];
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	617a      	str	r2, [r7, #20]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 8004636:	7fbb      	ldrb	r3, [r7, #30]
 8004638:	2b2e      	cmp	r3, #46	; 0x2e
 800463a:	d10a      	bne.n	8004652 <create_name+0x7e>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d807      	bhi.n	8004652 <create_name+0x7e>
			sfn[i++] = c;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	613a      	str	r2, [r7, #16]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	4413      	add	r3, r2
 800464c:	7fba      	ldrb	r2, [r7, #30]
 800464e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8004650:	e7ea      	b.n	8004628 <create_name+0x54>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8004652:	7fbb      	ldrb	r3, [r7, #30]
 8004654:	2b2f      	cmp	r3, #47	; 0x2f
 8004656:	d007      	beq.n	8004668 <create_name+0x94>
 8004658:	7fbb      	ldrb	r3, [r7, #30]
 800465a:	2b5c      	cmp	r3, #92	; 0x5c
 800465c:	d004      	beq.n	8004668 <create_name+0x94>
 800465e:	7fbb      	ldrb	r3, [r7, #30]
 8004660:	2b20      	cmp	r3, #32
 8004662:	d901      	bls.n	8004668 <create_name+0x94>
 8004664:	2306      	movs	r3, #6
 8004666:	e0a2      	b.n	80047ae <create_name+0x1da>
		*path = &p[si];									/* Return pointer to the next segment */
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	441a      	add	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8004672:	7fbb      	ldrb	r3, [r7, #30]
 8004674:	2b20      	cmp	r3, #32
 8004676:	d801      	bhi.n	800467c <create_name+0xa8>
 8004678:	2224      	movs	r2, #36	; 0x24
 800467a:	e000      	b.n	800467e <create_name+0xaa>
 800467c:	2220      	movs	r2, #32
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	330b      	adds	r3, #11
 8004682:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e092      	b.n	80047ae <create_name+0x1da>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	617a      	str	r2, [r7, #20]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004696:	7fbb      	ldrb	r3, [r7, #30]
 8004698:	2b20      	cmp	r3, #32
 800469a:	d953      	bls.n	8004744 <create_name+0x170>
 800469c:	7fbb      	ldrb	r3, [r7, #30]
 800469e:	2b2f      	cmp	r3, #47	; 0x2f
 80046a0:	d050      	beq.n	8004744 <create_name+0x170>
 80046a2:	7fbb      	ldrb	r3, [r7, #30]
 80046a4:	2b5c      	cmp	r3, #92	; 0x5c
 80046a6:	d04d      	beq.n	8004744 <create_name+0x170>
		if (c == '.' || i >= ni) {
 80046a8:	7fbb      	ldrb	r3, [r7, #30]
 80046aa:	2b2e      	cmp	r3, #46	; 0x2e
 80046ac:	d003      	beq.n	80046b6 <create_name+0xe2>
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d30f      	bcc.n	80046d6 <create_name+0x102>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d102      	bne.n	80046c2 <create_name+0xee>
 80046bc:	7fbb      	ldrb	r3, [r7, #30]
 80046be:	2b2e      	cmp	r3, #46	; 0x2e
 80046c0:	d001      	beq.n	80046c6 <create_name+0xf2>
 80046c2:	2306      	movs	r3, #6
 80046c4:	e073      	b.n	80047ae <create_name+0x1da>
			i = 8; ni = 11;
 80046c6:	2308      	movs	r3, #8
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	230b      	movs	r3, #11
 80046cc:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80046ce:	7ffb      	ldrb	r3, [r7, #31]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e035      	b.n	8004742 <create_name+0x16e>
		}
		if (c >= 0x80) {				/* Extended character? */
 80046d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da08      	bge.n	80046f0 <create_name+0x11c>
			b |= 3;						/* Eliminate NT flag */
 80046de:	7ffb      	ldrb	r3, [r7, #31]
 80046e0:	f043 0303 	orr.w	r3, r3, #3
 80046e4:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80046e6:	7fbb      	ldrb	r3, [r7, #30]
 80046e8:	3b80      	subs	r3, #128	; 0x80
 80046ea:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <create_name+0x1e4>)
 80046ec:	5cd3      	ldrb	r3, [r2, r3]
 80046ee:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80046f0:	7fbb      	ldrb	r3, [r7, #30]
 80046f2:	4619      	mov	r1, r3
 80046f4:	4831      	ldr	r0, [pc, #196]	; (80047bc <create_name+0x1e8>)
 80046f6:	f7ff f812 	bl	800371e <chk_chr>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <create_name+0x130>
				return FR_INVALID_NAME;
 8004700:	2306      	movs	r3, #6
 8004702:	e054      	b.n	80047ae <create_name+0x1da>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004704:	7fbb      	ldrb	r3, [r7, #30]
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d907      	bls.n	800471a <create_name+0x146>
 800470a:	7fbb      	ldrb	r3, [r7, #30]
 800470c:	2b5a      	cmp	r3, #90	; 0x5a
 800470e:	d804      	bhi.n	800471a <create_name+0x146>
				b |= 2;
 8004710:	7ffb      	ldrb	r3, [r7, #31]
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e00c      	b.n	8004734 <create_name+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800471a:	7fbb      	ldrb	r3, [r7, #30]
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d909      	bls.n	8004734 <create_name+0x160>
 8004720:	7fbb      	ldrb	r3, [r7, #30]
 8004722:	2b7a      	cmp	r3, #122	; 0x7a
 8004724:	d806      	bhi.n	8004734 <create_name+0x160>
					b |= 1; c -= 0x20;
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	7fbb      	ldrb	r3, [r7, #30]
 8004730:	3b20      	subs	r3, #32
 8004732:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	613a      	str	r2, [r7, #16]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	7fba      	ldrb	r2, [r7, #30]
 8004740:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004742:	e7a1      	b.n	8004688 <create_name+0xb4>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	441a      	add	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800474e:	7fbb      	ldrb	r3, [r7, #30]
 8004750:	2b20      	cmp	r3, #32
 8004752:	d801      	bhi.n	8004758 <create_name+0x184>
 8004754:	2304      	movs	r3, #4
 8004756:	e000      	b.n	800475a <create_name+0x186>
 8004758:	2300      	movs	r3, #0
 800475a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <create_name+0x192>
 8004762:	2306      	movs	r3, #6
 8004764:	e023      	b.n	80047ae <create_name+0x1da>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2be5      	cmp	r3, #229	; 0xe5
 800476c:	d102      	bne.n	8004774 <create_name+0x1a0>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2205      	movs	r2, #5
 8004772:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d102      	bne.n	8004780 <create_name+0x1ac>
 800477a:	7ffb      	ldrb	r3, [r7, #31]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d103      	bne.n	8004792 <create_name+0x1be>
 800478a:	7fbb      	ldrb	r3, [r7, #30]
 800478c:	f043 0310 	orr.w	r3, r3, #16
 8004790:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004792:	7ffb      	ldrb	r3, [r7, #31]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b04      	cmp	r3, #4
 800479a:	d103      	bne.n	80047a4 <create_name+0x1d0>
 800479c:	7fbb      	ldrb	r3, [r7, #30]
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	330b      	adds	r3, #11
 80047a8:	7fba      	ldrb	r2, [r7, #30]
 80047aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80047ac:	2300      	movs	r3, #0
#endif
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	08018778 	.word	0x08018778
 80047bc:	08017fec 	.word	0x08017fec

080047c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b2f      	cmp	r3, #47	; 0x2f
 80047d0:	d003      	beq.n	80047da <follow_path+0x1a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b5c      	cmp	r3, #92	; 0x5c
 80047d8:	d106      	bne.n	80047e8 <follow_path+0x28>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	e004      	b.n	80047f2 <follow_path+0x32>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b1f      	cmp	r3, #31
 80047f8:	d809      	bhi.n	800480e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80047fa:	2100      	movs	r1, #0
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fb89 	bl	8003f14 <dir_sdi>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	615a      	str	r2, [r3, #20]
 800480c:	e056      	b.n	80048bc <follow_path+0xfc>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800480e:	463b      	mov	r3, r7
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fede 	bl	80045d4 <create_name>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d147      	bne.n	80048b2 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fd62 	bl	80042ec <dir_find>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	7adb      	ldrb	r3, [r3, #11]
 8004832:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01d      	beq.n	8004876 <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d13a      	bne.n	80048b6 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <follow_path+0xa6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	615a      	str	r2, [r3, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d026      	beq.n	80048ae <follow_path+0xee>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8004864:	e027      	b.n	80048b6 <follow_path+0xf6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d122      	bne.n	80048b6 <follow_path+0xf6>
 8004870:	2305      	movs	r3, #5
 8004872:	73fb      	strb	r3, [r7, #15]
				break;
 8004874:	e01f      	b.n	80048b6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11c      	bne.n	80048ba <follow_path+0xfa>
			dir = dp->dir;						/* Follow the sub-directory */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	330b      	adds	r3, #11
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <follow_path+0xda>
				res = FR_NO_PATH; break;
 8004894:	2305      	movs	r3, #5
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e010      	b.n	80048bc <follow_path+0xfc>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fccf 	bl	8004244 <ld_clust>
 80048a6:	4602      	mov	r2, r0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e7af      	b.n	800480e <follow_path+0x4e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80048ae:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048b0:	e7ad      	b.n	800480e <follow_path+0x4e>
			if (res != FR_OK) break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <follow_path+0xfc>
				break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048ba:	bf00      	nop
		}
	}

	return res;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d06f      	beq.n	80049be <get_ldnumber+0xf6>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	e002      	b.n	80048ec <get_ldnumber+0x24>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d903      	bls.n	80048fc <get_ldnumber+0x34>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b3a      	cmp	r3, #58	; 0x3a
 80048fa:	d1f4      	bne.n	80048e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b3a      	cmp	r3, #58	; 0x3a
 8004902:	d159      	bne.n	80049b8 <get_ldnumber+0xf0>
			tp = *path;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0'; 
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	61fa      	str	r2, [r7, #28]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	3b30      	subs	r3, #48	; 0x30
 8004914:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b09      	cmp	r3, #9
 800491a:	d80f      	bhi.n	800493c <get_ldnumber+0x74>
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	429a      	cmp	r2, r3
 8004922:	d10b      	bne.n	800493c <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d844      	bhi.n	80049b4 <get_ldnumber+0xec>
					vol = (int)i;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	3301      	adds	r3, #1
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800493a:	e03b      	b.n	80049b4 <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3301      	adds	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
				do {
					sp = str[i]; tp = *path;
 8004946:	4a21      	ldr	r2, [pc, #132]	; (80049cc <get_ldnumber+0x104>)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	72bb      	strb	r3, [r7, #10]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	2b60      	cmp	r3, #96	; 0x60
 800496e:	d905      	bls.n	800497c <get_ldnumber+0xb4>
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	2b7a      	cmp	r3, #122	; 0x7a
 8004974:	d802      	bhi.n	800497c <get_ldnumber+0xb4>
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	3b20      	subs	r3, #32
 800497a:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 800497c:	7abb      	ldrb	r3, [r7, #10]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <get_ldnumber+0xc2>
 8004982:	7aba      	ldrb	r2, [r7, #10]
 8004984:	7afb      	ldrb	r3, [r7, #11]
 8004986:	429a      	cmp	r2, r3
 8004988:	d0e5      	beq.n	8004956 <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 800498a:	7abb      	ldrb	r3, [r7, #10]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <get_ldnumber+0xd0>
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	429a      	cmp	r2, r3
 8004996:	d005      	beq.n	80049a4 <get_ldnumber+0xdc>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3301      	adds	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d9d0      	bls.n	8004946 <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d804      	bhi.n	80049b4 <get_ldnumber+0xec>
					vol = (int)i;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	613b      	str	r3, [r7, #16]
					*path = tt;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e003      	b.n	80049c0 <get_ldnumber+0xf8>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <get_ldnumber+0x108>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	613b      	str	r3, [r7, #16]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
 80049be:	693b      	ldr	r3, [r7, #16]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3724      	adds	r7, #36	; 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	080187f8 	.word	0x080187f8
 80049d0:	200011e2 	.word	0x200011e2

080049d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	711a      	strb	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fe fef4 	bl	80037dc <move_window>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <check_fs+0x2a>
		return 3;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e04a      	b.n	8004a94 <check_fs+0xc0>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f203 2332 	addw	r3, r3, #562	; 0x232
 8004a04:	3301      	adds	r3, #1
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <check_fs+0xc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d001      	beq.n	8004a22 <check_fs+0x4e>
		return 2;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e038      	b.n	8004a94 <check_fs+0xc0>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	336a      	adds	r3, #106	; 0x6a
 8004a26:	3303      	adds	r3, #3
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	061a      	lsls	r2, r3, #24
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	336a      	adds	r3, #106	; 0x6a
 8004a30:	3302      	adds	r3, #2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	4313      	orrs	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	326a      	adds	r2, #106	; 0x6a
 8004a3c:	3201      	adds	r2, #1
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	0212      	lsls	r2, r2, #8
 8004a42:	4313      	orrs	r3, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <check_fs+0xcc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <check_fs+0x86>
		return 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e01c      	b.n	8004a94 <check_fs+0xc0>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3386      	adds	r3, #134	; 0x86
 8004a5e:	3303      	adds	r3, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	061a      	lsls	r2, r3, #24
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3386      	adds	r3, #134	; 0x86
 8004a68:	3302      	adds	r3, #2
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	041b      	lsls	r3, r3, #16
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	3286      	adds	r2, #134	; 0x86
 8004a74:	3201      	adds	r2, #1
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	0212      	lsls	r2, r2, #8
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <check_fs+0xcc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <check_fs+0xbe>
		return 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <check_fs+0xc0>

	return 1;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	ffffaa55 	.word	0xffffaa55
 8004aa0:	00544146 	.word	0x00544146

08004aa4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b096      	sub	sp, #88	; 0x58
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004ab8:	68b8      	ldr	r0, [r7, #8]
 8004aba:	f7ff ff05 	bl	80048c8 <get_ldnumber>
 8004abe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da01      	bge.n	8004aca <find_volume+0x26>
 8004ac6:	230b      	movs	r3, #11
 8004ac8:	e291      	b.n	8004fee <find_volume+0x54a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004aca:	4a9a      	ldr	r2, [pc, #616]	; (8004d34 <find_volume+0x290>)
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <find_volume+0x3a>
 8004ada:	230c      	movs	r3, #12
 8004adc:	e287      	b.n	8004fee <find_volume+0x54a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <find_volume+0x7e>
		stat = disk_status(fs->drv);
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fabf 	bl	8002074 <disk_status>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10c      	bne.n	8004b22 <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <find_volume+0x7a>
 8004b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 8004b1a:	230a      	movs	r3, #10
 8004b1c:	e267      	b.n	8004fee <find_volume+0x54a>
			return FR_OK;				/* The file system object is valid */
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e265      	b.n	8004fee <find_volume+0x54a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fd fa7b 	bl	8002030 <disk_initialize>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e24e      	b.n	8004fee <find_volume+0x54a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <find_volume+0xc2>
 8004b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8004b62:	230a      	movs	r3, #10
 8004b64:	e243      	b.n	8004fee <find_volume+0x54a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b6e:	f7ff ff31 	bl	80049d4 <check_fs>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004b78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d155      	bne.n	8004c2c <find_volume+0x188>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004b80:	2300      	movs	r3, #0
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40
 8004b84:	e02a      	b.n	8004bdc <find_volume+0x138>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004b94:	4413      	add	r3, r2
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <find_volume+0x124>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	330b      	adds	r3, #11
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	061a      	lsls	r2, r3, #24
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	330a      	adds	r3, #10
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	3209      	adds	r2, #9
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	0212      	lsls	r2, r2, #8
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	3208      	adds	r2, #8
 8004bc2:	7812      	ldrb	r2, [r2, #0]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	e000      	b.n	8004bca <find_volume+0x126>
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	3358      	adds	r3, #88	; 0x58
 8004bd0:	443b      	add	r3, r7
 8004bd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd8:	3301      	adds	r3, #1
 8004bda:	643b      	str	r3, [r7, #64]	; 0x40
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d9d1      	bls.n	8004b86 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004be2:	2300      	movs	r3, #0
 8004be4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <find_volume+0x14e>
 8004bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3358      	adds	r3, #88	; 0x58
 8004bf8:	443b      	add	r3, r7
 8004bfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <find_volume+0x16e>
 8004c06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c0a:	f7ff fee3 	bl	80049d4 <check_fs>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e000      	b.n	8004c14 <find_volume+0x170>
 8004c12:	2302      	movs	r3, #2
 8004c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004c18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <find_volume+0x188>
 8004c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c22:	3301      	adds	r3, #1
 8004c24:	643b      	str	r3, [r7, #64]	; 0x40
 8004c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d9e2      	bls.n	8004bf2 <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d101      	bne.n	8004c38 <find_volume+0x194>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e1da      	b.n	8004fee <find_volume+0x54a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <find_volume+0x1a0>
 8004c40:	230d      	movs	r3, #13
 8004c42:	e1d4      	b.n	8004fee <find_volume+0x54a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	b21a      	sxth	r2, r3
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c54:	b21b      	sxth	r3, r3
 8004c56:	4313      	orrs	r3, r2
 8004c58:	b21b      	sxth	r3, r3
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5e:	d001      	beq.n	8004c64 <find_volume+0x1c0>
		return FR_NO_FILESYSTEM;
 8004c60:	230d      	movs	r3, #13
 8004c62:	e1c4      	b.n	8004fee <find_volume+0x54a>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d112      	bne.n	8004caa <find_volume+0x206>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8004c8a:	061a      	lsls	r2, r3, #24
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4313      	orrs	r3, r2
 8004c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c98:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8004c9c:	0212      	lsls	r2, r2, #8
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca2:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cae:	61da      	str	r2, [r3, #28]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	78db      	ldrb	r3, [r3, #3]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d005      	beq.n	8004cce <find_volume+0x22a>
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d001      	beq.n	8004cce <find_volume+0x22a>
		return FR_NO_FILESYSTEM;
 8004cca:	230d      	movs	r3, #13
 8004ccc:	e18f      	b.n	8004fee <find_volume+0x54a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	789b      	ldrb	r3, [r3, #2]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <find_volume+0x25c>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <find_volume+0x260>
		return FR_NO_FILESYSTEM;
 8004d00:	230d      	movs	r3, #13
 8004d02:	e174      	b.n	8004fee <find_volume+0x54a>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	891b      	ldrh	r3, [r3, #8]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <find_volume+0x294>
		return FR_NO_FILESYSTEM;
 8004d2e:	230d      	movs	r3, #13
 8004d30:	e15d      	b.n	8004fee <find_volume+0x54a>
 8004d32:	bf00      	nop
 8004d34:	200011bc 	.word	0x200011bc

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	b21a      	sxth	r2, r3
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d112      	bne.n	8004d7e <find_volume+0x2da>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8004d5e:	061a      	lsls	r2, r3, #24
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6c:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004d70:	0212      	lsls	r2, r2, #8
 8004d72:	4313      	orrs	r3, r2
 8004d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d76:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	b21a      	sxth	r2, r3
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b21b      	sxth	r3, r3
 8004d94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004d96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <find_volume+0x2fc>
 8004d9c:	230d      	movs	r3, #13
 8004d9e:	e126      	b.n	8004fee <find_volume+0x54a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004da0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	4413      	add	r3, r2
 8004da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da8:	8912      	ldrh	r2, [r2, #8]
 8004daa:	0912      	lsrs	r2, r2, #4
 8004dac:	b292      	uxth	r2, r2
 8004dae:	4413      	add	r3, r2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d201      	bcs.n	8004dbe <find_volume+0x31a>
 8004dba:	230d      	movs	r3, #13
 8004dbc:	e117      	b.n	8004fee <find_volume+0x54a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc6:	7892      	ldrb	r2, [r2, #2]
 8004dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <find_volume+0x334>
 8004dd4:	230d      	movs	r3, #13
 8004dd6:	e10a      	b.n	8004fee <find_volume+0x54a>
	fmt = FS_FAT12;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d902      	bls.n	8004dee <find_volume+0x34a>
 8004de8:	2302      	movs	r3, #2
 8004dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <find_volume+0x35a>
 8004df8:	2303      	movs	r3, #3
 8004dfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	619a      	str	r2, [r3, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e0a:	621a      	str	r2, [r3, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004e0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	441a      	add	r2, r3
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 8004e16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	441a      	add	r2, r3
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 8004e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d11e      	bne.n	8004e66 <find_volume+0x3c2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	891b      	ldrh	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <find_volume+0x390>
 8004e30:	230d      	movs	r3, #13
 8004e32:	e0dc      	b.n	8004fee <find_volume+0x54a>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004e3a:	061a      	lsls	r2, r3, #24
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	4313      	orrs	r3, r2
 8004e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e48:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8004e4c:	0212      	lsls	r2, r2, #8
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e52:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004e56:	431a      	orrs	r2, r3
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	e01f      	b.n	8004ea6 <find_volume+0x402>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	891b      	ldrh	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <find_volume+0x3ce>
 8004e6e:	230d      	movs	r3, #13
 8004e70:	e0bd      	b.n	8004fee <find_volume+0x54a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	441a      	add	r2, r3
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d103      	bne.n	8004e8e <find_volume+0x3ea>
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	e00a      	b.n	8004ea4 <find_volume+0x400>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	085a      	lsrs	r2, r3, #1
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004eb0:	0a5b      	lsrs	r3, r3, #9
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d201      	bcs.n	8004eba <find_volume+0x416>
		return FR_NO_FILESYSTEM;
 8004eb6:	230d      	movs	r3, #13
 8004eb8:	e099      	b.n	8004fee <find_volume+0x54a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	611a      	str	r2, [r3, #16]
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	2280      	movs	r2, #128	; 0x80
 8004ece:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d178      	bne.n	8004fca <find_volume+0x526>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d16b      	bne.n	8004fca <find_volume+0x526>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004efa:	f7fe fc6f 	bl	80037dc <move_window>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d162      	bne.n	8004fca <find_volume+0x526>
	{
		fs->fsi_flag = 0;
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2200      	movs	r2, #0
 8004f08:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b21b      	sxth	r3, r3
 8004f20:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <find_volume+0x554>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d151      	bne.n	8004fca <find_volume+0x526>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004f2c:	061a      	lsls	r2, r3, #24
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	4313      	orrs	r3, r2
 8004f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f3a:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8004f3e:	0212      	lsls	r2, r2, #8
 8004f40:	4313      	orrs	r3, r2
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <find_volume+0x558>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d13c      	bne.n	8004fca <find_volume+0x526>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	4313      	orrs	r3, r2
 8004f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f64:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8004f68:	0212      	lsls	r2, r2, #8
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6e:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8004f72:	4313      	orrs	r3, r2
 8004f74:	4a22      	ldr	r2, [pc, #136]	; (8005000 <find_volume+0x55c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d127      	bne.n	8004fca <find_volume+0x526>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8004f80:	061a      	lsls	r2, r3, #24
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8e:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 8004f92:	0212      	lsls	r2, r2, #8
 8004f94:	4313      	orrs	r3, r2
 8004f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f98:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 8004fa8:	061a      	lsls	r2, r3, #24
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb6:	f892 2221 	ldrb.w	r2, [r2, #545]	; 0x221
 8004fba:	0212      	lsls	r2, r2, #8
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc0:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	60da      	str	r2, [r3, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004fd0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <find_volume+0x560>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <find_volume+0x560>)
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <find_volume+0x560>)
 8004fe0:	881a      	ldrh	r2, [r3, #0]
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2200      	movs	r2, #0
 8004fea:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3758      	adds	r7, #88	; 0x58
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	ffffaa55 	.word	0xffffaa55
 8004ffc:	41615252 	.word	0x41615252
 8005000:	61417272 	.word	0x61417272
 8005004:	200011e0 	.word	0x200011e0

08005008 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <validate+0x32>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <validate+0x32>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d006      	beq.n	800503a <validate+0x32>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	88da      	ldrh	r2, [r3, #6]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	889b      	ldrh	r3, [r3, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d001      	beq.n	800503e <validate+0x36>
		return FR_INVALID_OBJECT;
 800503a:	2309      	movs	r3, #9
 800503c:	e00d      	b.n	800505a <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd f815 	bl	8002074 <disk_status>
 800504a:	4603      	mov	r3, r0
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <validate+0x50>
		return FR_NOT_READY;
 8005054:	2303      	movs	r3, #3
 8005056:	e000      	b.n	800505a <validate+0x52>

	return FR_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005076:	f107 0310 	add.w	r3, r7, #16
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fc24 	bl	80048c8 <get_ldnumber>
 8005080:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	da01      	bge.n	800508c <f_mount+0x28>
 8005088:	230b      	movs	r3, #11
 800508a:	e028      	b.n	80050de <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <f_mount+0x84>)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005094:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	490d      	ldr	r1, [pc, #52]	; (80050e8 <f_mount+0x84>)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <f_mount+0x60>
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d001      	beq.n	80050c8 <f_mount+0x64>
 80050c4:	2300      	movs	r3, #0
 80050c6:	e00a      	b.n	80050de <f_mount+0x7a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80050c8:	f107 0108 	add.w	r1, r7, #8
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	2200      	movs	r2, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fce6 	bl	8004aa4 <find_volume>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200011bc 	.word	0x200011bc

080050ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b094      	sub	sp, #80	; 0x50
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <f_open+0x18>
 8005100:	2309      	movs	r3, #9
 8005102:	e12f      	b.n	8005364 <f_open+0x278>
	fp->fs = 0;			/* Clear file object */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	f107 0108 	add.w	r1, r7, #8
 800511e:	f107 0320 	add.w	r3, r7, #32
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fcbe 	bl	8004aa4 <find_volume>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800512e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005132:	2b00      	cmp	r3, #0
 8005134:	f040 8114 	bne.w	8005360 <f_open+0x274>
		INIT_BUF(dj);
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	f107 0320 	add.w	r3, r7, #32
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fb3a 	bl	80047c0 <follow_path>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005156:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <f_open+0x7e>
			if (!dir)	/* Default directory itself */
 800515e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <f_open+0x7e>
				res = FR_INVALID_NAME;
 8005164:	2306      	movs	r3, #6
 8005166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	f003 031c 	and.w	r3, r3, #28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 808f 	beq.w	8005294 <f_open+0x1a8>
			if (res != FR_OK) {					/* No file, create new */
 8005176:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800517a:	2b00      	cmp	r3, #0
 800517c:	d012      	beq.n	80051a4 <f_open+0xb8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800517e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <f_open+0xaa>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8005186:	f107 0320 	add.w	r3, r7, #32
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff f950 	bl	8004430 <dir_register>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	f043 0308 	orr.w	r3, r3, #8
 800519c:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a2:	e012      	b.n	80051ca <f_open+0xde>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80051a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a6:	330b      	adds	r3, #11
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 0311 	and.w	r3, r3, #17
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <f_open+0xce>
					res = FR_DENIED;
 80051b2:	2307      	movs	r3, #7
 80051b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80051b8:	e007      	b.n	80051ca <f_open+0xde>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <f_open+0xde>
						res = FR_EXIST;
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80051ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d17e      	bne.n	80052d0 <f_open+0x1e4>
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d079      	beq.n	80052d0 <f_open+0x1e4>
				dw = GET_FATTIME();				/* Created time */
 80051dc:	f7fc fff4 	bl	80021c8 <get_fattime>
 80051e0:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir + DIR_CrtTime, dw);
 80051e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e4:	330e      	adds	r3, #14
 80051e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	330f      	adds	r3, #15
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	0c1a      	lsrs	r2, r3, #16
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005202:	3310      	adds	r3, #16
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	0e1a      	lsrs	r2, r3, #24
 800520c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520e:	3311      	adds	r3, #17
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005216:	330b      	adds	r3, #11
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521e:	331c      	adds	r3, #28
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005226:	331d      	adds	r3, #29
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522e:	331e      	adds	r3, #30
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005236:	331f      	adds	r3, #31
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe ffff 	bl	8004244 <ld_clust>
 8005246:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);				/* cluster = 0 */
 8005248:	2100      	movs	r1, #0
 800524a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800524c:	f7ff f827 	bl	800429e <st_clust>
				dj.fs->wflag = 1;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	2201      	movs	r2, #1
 8005254:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d039      	beq.n	80052d0 <f_open+0x1e4>
					dw = dj.fs->winsect;
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fd6e 	bl	8003d48 <remove_chain>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 8005272:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005276:	2b00      	cmp	r3, #0
 8005278:	d12a      	bne.n	80052d0 <f_open+0x1e4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527e:	3a01      	subs	r2, #1
 8005280:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe faa8 	bl	80037dc <move_window>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005292:	e01d      	b.n	80052d0 <f_open+0x1e4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005298:	2b00      	cmp	r3, #0
 800529a:	d119      	bne.n	80052d0 <f_open+0x1e4>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	330b      	adds	r3, #11
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <f_open+0x1c6>
					res = FR_NO_FILE;
 80052aa:	2304      	movs	r3, #4
 80052ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80052b0:	e00e      	b.n	80052d0 <f_open+0x1e4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <f_open+0x1e4>
 80052bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052be:	330b      	adds	r3, #11
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <f_open+0x1e4>
						res = FR_DENIED;
 80052ca:	2307      	movs	r3, #7
 80052cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 80052d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10f      	bne.n	80052f8 <f_open+0x20c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <f_open+0x1fe>
				mode |= FA__WRITTEN;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f6:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80052f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d12f      	bne.n	8005360 <f_open+0x274>
			fp->flag = mode;					/* File access mode */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	79fa      	ldrb	r2, [r7, #7]
 8005304:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe ff97 	bl	8004244 <ld_clust>
 8005316:	4602      	mov	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	331f      	adds	r3, #31
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	061a      	lsls	r2, r3, #24
 8005324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005326:	331e      	adds	r3, #30
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	4313      	orrs	r3, r2
 800532e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005330:	321d      	adds	r2, #29
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	0212      	lsls	r2, r2, #8
 8005336:	4313      	orrs	r3, r2
 8005338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533a:	321c      	adds	r2, #28
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	431a      	orrs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	88da      	ldrh	r2, [r3, #6]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005360:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005364:	4618      	mov	r0, r3
 8005366:	3750      	adds	r7, #80	; 0x50
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08c      	sub	sp, #48	; 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fe3f 	bl	8005008 <validate>
 800538a:	4603      	mov	r3, r0
 800538c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <f_read+0x2c>
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	e11c      	b.n	80055d2 <f_read+0x266>
	if (fp->err)								/* Check error */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	79db      	ldrb	r3, [r3, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	79db      	ldrb	r3, [r3, #7]
 80053a4:	e115      	b.n	80055d2 <f_read+0x266>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	799b      	ldrb	r3, [r3, #6]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80053b2:	2307      	movs	r3, #7
 80053b4:	e10d      	b.n	80055d2 <f_read+0x266>
	remain = fp->fsize - fp->fptr;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f240 80fe 	bls.w	80055c8 <f_read+0x25c>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80053d0:	e0fa      	b.n	80055c8 <f_read+0x25c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 80c6 	bne.w	800556c <f_read+0x200>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	0a5b      	lsrs	r3, r3, #9
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	789b      	ldrb	r3, [r3, #2]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	4013      	ands	r3, r2
 80053f4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d124      	bne.n	8005446 <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540a:	e008      	b.n	800541e <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fe face 	bl	80039b8 <get_fat>
 800541c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d804      	bhi.n	800542e <f_read+0xc2>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2202      	movs	r2, #2
 8005428:	71da      	strb	r2, [r3, #7]
 800542a:	2302      	movs	r3, #2
 800542c:	e0d1      	b.n	80055d2 <f_read+0x266>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d104      	bne.n	8005440 <f_read+0xd4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	71da      	strb	r2, [r3, #7]
 800543c:	2301      	movs	r3, #1
 800543e:	e0c8      	b.n	80055d2 <f_read+0x266>
				fp->clust = clst;				/* Update current cluster */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005444:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe fa92 	bl	800397a <clust2sect>
 8005456:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <f_read+0xfc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2202      	movs	r2, #2
 8005462:	71da      	strb	r2, [r3, #7]
 8005464:	2302      	movs	r3, #2
 8005466:	e0b4      	b.n	80055d2 <f_read+0x266>
			sect += csect;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0a5b      	lsrs	r3, r3, #9
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d03d      	beq.n	80054f8 <f_read+0x18c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800547c:	7dfa      	ldrb	r2, [r7, #23]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	4413      	add	r3, r2
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	7892      	ldrb	r2, [r2, #2]
 8005488:	4293      	cmp	r3, r2
 800548a:	d906      	bls.n	800549a <f_read+0x12e>
					cc = fp->fs->csize - csect;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	789b      	ldrb	r3, [r3, #2]
 8005492:	461a      	mov	r2, r3
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	7858      	ldrb	r0, [r3, #1]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	6a39      	ldr	r1, [r7, #32]
 80054a6:	f7fc fe09 	bl	80020bc <disk_read>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <f_read+0x14e>
					ABORT(fp->fs, FR_DISK_ERR);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	71da      	strb	r2, [r3, #7]
 80054b6:	2301      	movs	r3, #1
 80054b8:	e08b      	b.n	80055d2 <f_read+0x266>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	799b      	ldrb	r3, [r3, #6]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <f_read+0x184>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d90d      	bls.n	80054f0 <f_read+0x184>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	18d0      	adds	r0, r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3324      	adds	r3, #36	; 0x24
 80054e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ea:	4619      	mov	r1, r3
 80054ec:	f7fe f8b6 	bl	800365c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	025b      	lsls	r3, r3, #9
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80054f6:	e053      	b.n	80055a0 <f_read+0x234>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d031      	beq.n	8005566 <f_read+0x1fa>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	799b      	ldrb	r3, [r3, #6]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d019      	beq.n	8005542 <f_read+0x1d6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	7858      	ldrb	r0, [r3, #1]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	2301      	movs	r3, #1
 8005520:	f7fc fdfa 	bl	8002118 <disk_write>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <f_read+0x1c8>
						ABORT(fp->fs, FR_DISK_ERR);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	71da      	strb	r2, [r3, #7]
 8005530:	2301      	movs	r3, #1
 8005532:	e04e      	b.n	80055d2 <f_read+0x266>
					fp->flag &= ~FA__DIRTY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	799b      	ldrb	r3, [r3, #6]
 8005538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	7858      	ldrb	r0, [r3, #1]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800554e:	2301      	movs	r3, #1
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	f7fc fdb3 	bl	80020bc <disk_read>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <f_read+0x1fa>
					ABORT(fp->fs, FR_DISK_ERR);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	71da      	strb	r2, [r3, #7]
 8005562:	2301      	movs	r3, #1
 8005564:	e035      	b.n	80055d2 <f_read+0x266>
			}
#endif
			fp->dsect = sect;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800557a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d901      	bls.n	8005586 <f_read+0x21a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	3320      	adds	r3, #32
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	3304      	adds	r3, #4
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	4619      	mov	r1, r3
 800559a:	6a38      	ldr	r0, [r7, #32]
 800559c:	f7fe f85e 	bl	800365c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80055a0:	6a3a      	ldr	r2, [r7, #32]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	4413      	add	r3, r2
 80055a6:	623b      	str	r3, [r7, #32]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	441a      	add	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	441a      	add	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f47f af01 	bne.w	80053d2 <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3730      	adds	r7, #48	; 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	; 0x28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fd08 	bl	8005008 <validate>
 80055f8:	4603      	mov	r3, r0
 80055fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <f_write+0x2c>
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	e151      	b.n	80058aa <f_write+0x2d0>
	if (fp->err)							/* Check error */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	79db      	ldrb	r3, [r3, #7]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	79db      	ldrb	r3, [r3, #7]
 8005612:	e14a      	b.n	80058aa <f_write+0x2d0>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	799b      	ldrb	r3, [r3, #6]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005620:	2307      	movs	r3, #7
 8005622:	e142      	b.n	80058aa <f_write+0x2d0>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	f080 8122 	bcs.w	800587a <f_write+0x2a0>
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800563a:	e11e      	b.n	800587a <f_write+0x2a0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 80e3 	bne.w	8005810 <f_write+0x236>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0a5b      	lsrs	r3, r3, #9
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	789b      	ldrb	r3, [r3, #2]
 8005658:	3b01      	subs	r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4013      	ands	r3, r2
 800565e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005660:	7dbb      	ldrb	r3, [r7, #22]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d139      	bne.n	80056da <f_write+0x100>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <f_write+0xb0>
					clst = fp->sclust;		/* Follow from the origin */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d110      	bne.n	800569c <f_write+0xc2>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fbb4 	bl	8003dee <create_chain>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24
 8005688:	e008      	b.n	800569c <f_write+0xc2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7fe fbaa 	bl	8003dee <create_chain>
 800569a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80f0 	beq.w	8005884 <f_write+0x2aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d104      	bne.n	80056b4 <f_write+0xda>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2202      	movs	r2, #2
 80056ae:	71da      	strb	r2, [r3, #7]
 80056b0:	2302      	movs	r3, #2
 80056b2:	e0fa      	b.n	80058aa <f_write+0x2d0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d104      	bne.n	80056c6 <f_write+0xec>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	71da      	strb	r2, [r3, #7]
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0f1      	b.n	80058aa <f_write+0x2d0>
				fp->clust = clst;			/* Update current cluster */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <f_write+0x100>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	799b      	ldrb	r3, [r3, #6]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <f_write+0x140>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	7858      	ldrb	r0, [r3, #1]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	2301      	movs	r3, #1
 80056f8:	f7fc fd0e 	bl	8002118 <disk_write>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <f_write+0x132>
					ABORT(fp->fs, FR_DISK_ERR);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	71da      	strb	r2, [r3, #7]
 8005708:	2301      	movs	r3, #1
 800570a:	e0ce      	b.n	80058aa <f_write+0x2d0>
				fp->flag &= ~FA__DIRTY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	799b      	ldrb	r3, [r3, #6]
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7fe f928 	bl	800397a <clust2sect>
 800572a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <f_write+0x162>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2202      	movs	r2, #2
 8005736:	71da      	strb	r2, [r3, #7]
 8005738:	2302      	movs	r3, #2
 800573a:	e0b6      	b.n	80058aa <f_write+0x2d0>
			sect += csect;
 800573c:	7dbb      	ldrb	r3, [r7, #22]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	0a5b      	lsrs	r3, r3, #9
 8005748:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d03f      	beq.n	80057d0 <f_write+0x1f6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005750:	7dba      	ldrb	r2, [r7, #22]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	7892      	ldrb	r2, [r2, #2]
 800575c:	4293      	cmp	r3, r2
 800575e:	d906      	bls.n	800576e <f_write+0x194>
					cc = fp->fs->csize - csect;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	789b      	ldrb	r3, [r3, #2]
 8005766:	461a      	mov	r2, r3
 8005768:	7dbb      	ldrb	r3, [r7, #22]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	7858      	ldrb	r0, [r3, #1]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	f7fc fccd 	bl	8002118 <disk_write>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <f_write+0x1b4>
					ABORT(fp->fs, FR_DISK_ERR);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	71da      	strb	r2, [r3, #7]
 800578a:	2301      	movs	r3, #1
 800578c:	e08d      	b.n	80058aa <f_write+0x2d0>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	429a      	cmp	r2, r3
 800579a:	d915      	bls.n	80057c8 <f_write+0x1ee>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	025b      	lsls	r3, r3, #9
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fd ff51 	bl	800365c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	799b      	ldrb	r3, [r3, #6]
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	025b      	lsls	r3, r3, #9
 80057cc:	623b      	str	r3, [r7, #32]
				continue;
 80057ce:	e040      	b.n	8005852 <f_write+0x278>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d017      	beq.n	800580a <f_write+0x230>
				if (fp->fptr < fp->fsize &&
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d211      	bcs.n	800580a <f_write+0x230>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	7858      	ldrb	r0, [r3, #1]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80057f2:	2301      	movs	r3, #1
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	f7fc fc61 	bl	80020bc <disk_read>
 80057fa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <f_write+0x230>
						ABORT(fp->fs, FR_DISK_ERR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	71da      	strb	r2, [r3, #7]
 8005806:	2301      	movs	r3, #1
 8005808:	e04f      	b.n	80058aa <f_write+0x2d0>
			}
#endif
			fp->dsect = sect;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800581c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d901      	bls.n	800582a <f_write+0x250>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	3320      	adds	r3, #32
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	3304      	adds	r3, #4
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd ff0c 	bl	800365c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	799b      	ldrb	r3, [r3, #6]
 8005848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	4413      	add	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	609a      	str	r2, [r3, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	441a      	add	r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f47f aedd 	bne.w	800563c <f_write+0x62>
 8005882:	e000      	b.n	8005886 <f_write+0x2ac>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005884:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d903      	bls.n	800589a <f_write+0x2c0>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	799b      	ldrb	r3, [r3, #6]
 800589e:	f043 0320 	orr.w	r3, r3, #32
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	; 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fba4 	bl	8005008 <validate>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 8096 	bne.w	80059f8 <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 808f 	beq.w	80059f8 <f_sync+0x146>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	799b      	ldrb	r3, [r3, #6]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <f_sync+0x62>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	7858      	ldrb	r0, [r3, #1]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	2301      	movs	r3, #1
 80058f8:	f7fc fc0e 	bl	8002118 <disk_write>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <f_sync+0x54>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005902:	2301      	movs	r3, #1
 8005904:	e079      	b.n	80059fa <f_sync+0x148>
				fp->flag &= ~FA__DIRTY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	799b      	ldrb	r3, [r3, #6]
 800590a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590e:	b2da      	uxtb	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7fd ff5c 	bl	80037dc <move_window>
 8005924:	4603      	mov	r3, r0
 8005926:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d164      	bne.n	80059f8 <f_sync+0x146>
				dir = fp->dir_ptr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	330b      	adds	r3, #11
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	330b      	adds	r3, #11
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	331c      	adds	r3, #28
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	b29b      	uxth	r3, r3
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	b29a      	uxth	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	331d      	adds	r3, #29
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0c1a      	lsrs	r2, r3, #16
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	331e      	adds	r3, #30
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	0e1a      	lsrs	r2, r3, #24
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	331f      	adds	r3, #31
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	4619      	mov	r1, r3
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f7fe fc89 	bl	800429e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800598c:	f7fc fc1c 	bl	80021c8 <get_fattime>
 8005990:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3316      	adds	r3, #22
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	0a1b      	lsrs	r3, r3, #8
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3317      	adds	r3, #23
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	0c1a      	lsrs	r2, r3, #16
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3318      	adds	r3, #24
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	0e1a      	lsrs	r2, r3, #24
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3319      	adds	r3, #25
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3312      	adds	r3, #18
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3313      	adds	r3, #19
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	799b      	ldrb	r3, [r3, #6]
 80059d8:	f023 0320 	bic.w	r3, r3, #32
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fd ff21 	bl	8003836 <sync_fs>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ff51 	bl	80058b2 <f_sync>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <f_close+0x2e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff faf4 	bl	8005008 <validate>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <f_close+0x2e>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b098      	sub	sp, #96	; 0x60
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	TCHAR *tp;
	FILINFO fno;
	DEFINE_NAMEBUF;


	*buff = 0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
	/* Get logical drive number */
	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
 8005a4c:	1d39      	adds	r1, r7, #4
 8005a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a52:	2200      	movs	r2, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f825 	bl	8004aa4 <find_volume>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005a60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 80e3 	bne.w	8005c30 <f_getcwd+0x1f4>
		INIT_BUF(dj);
 8005a6a:	f107 0308 	add.w	r3, r7, #8
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
		i = len;			/* Bottom of buffer (directory stack base) */
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	65bb      	str	r3, [r7, #88]	; 0x58
		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8005a7a:	e09d      	b.n	8005bb8 <f_getcwd+0x17c>
			res = dir_sdi(&dj, 1);			/* Get parent directory */
 8005a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fa46 	bl	8003f14 <dir_sdi>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8005a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8097 	bne.w	8005bc6 <f_getcwd+0x18a>
			res = dir_read(&dj, 0);
 8005a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fc6f 	bl	8004382 <dir_read>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8005aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f040 808b 	bne.w	8005bca <f_getcwd+0x18e>
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fbc2 	bl	8004244 <ld_clust>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
			res = dir_sdi(&dj, 0);
 8005ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fa22 	bl	8003f14 <dir_sdi>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8005ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d177      	bne.n	8005bce <f_getcwd+0x192>
			do {							/* Find the entry links to the child directory */
				res = dir_read(&dj, 0);
 8005ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fc4c 	bl	8004382 <dir_read>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res != FR_OK) break;
 8005af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d117      	bne.n	8005b28 <f_getcwd+0xec>
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fba0 	bl	8004244 <ld_clust>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <f_getcwd+0xf0>
				res = dir_next(&dj, 0);	
 8005b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fa7d 	bl	8004012 <dir_next>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			} while (res == FR_OK);
 8005b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0db      	beq.n	8005ade <f_getcwd+0xa2>
 8005b26:	e002      	b.n	8005b2e <f_getcwd+0xf2>
				if (res != FR_OK) break;
 8005b28:	bf00      	nop
 8005b2a:	e000      	b.n	8005b2e <f_getcwd+0xf2>
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
 8005b2c:	bf00      	nop
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 8005b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d102      	bne.n	8005b3c <f_getcwd+0x100>
 8005b36:	2302      	movs	r3, #2
 8005b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8005b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d146      	bne.n	8005bd2 <f_getcwd+0x196>
#if _USE_LFN
			fno.lfname = buff;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8005b44:	f107 0214 	add.w	r2, r7, #20
 8005b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fcd0 	bl	80044f4 <get_fileinfo>
			tp = fno.fname;
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	3309      	adds	r3, #9
 8005b5a:	653b      	str	r3, [r7, #80]	; 0x50
#if _USE_LFN
			if (*buff) tp = buff;
#endif
			for (n = 0; tp[n]; n++) ;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b60:	e002      	b.n	8005b68 <f_getcwd+0x12c>
 8005b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b64:	3301      	adds	r3, #1
 8005b66:	657b      	str	r3, [r7, #84]	; 0x54
 8005b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6c:	4413      	add	r3, r2
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f6      	bne.n	8005b62 <f_getcwd+0x126>
			if (i < n + 3) {
 8005b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b76:	3303      	adds	r3, #3
 8005b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d211      	bcs.n	8005ba2 <f_getcwd+0x166>
				res = FR_NOT_ENOUGH_CORE; break;
 8005b7e:	2311      	movs	r3, #17
 8005b80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b84:	e026      	b.n	8005bd4 <f_getcwd+0x198>
			}
			while (n) buff[--i] = tp[--n];
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	441a      	add	r2, r3
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	3b01      	subs	r3, #1
 8005b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9c:	440b      	add	r3, r1
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ee      	bne.n	8005b86 <f_getcwd+0x14a>
			buff[--i] = '/';
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bac:	3b01      	subs	r3, #1
 8005bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb2:	4413      	add	r3, r2
 8005bb4:	222f      	movs	r2, #47	; 0x2f
 8005bb6:	701a      	strb	r2, [r3, #0]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f47f af5c 	bne.w	8005a7c <f_getcwd+0x40>
 8005bc4:	e006      	b.n	8005bd4 <f_getcwd+0x198>
			if (res != FR_OK) break;
 8005bc6:	bf00      	nop
 8005bc8:	e004      	b.n	8005bd4 <f_getcwd+0x198>
			if (res != FR_OK) break;
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <f_getcwd+0x198>
			if (res != FR_OK) break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <f_getcwd+0x198>
			if (res != FR_OK) break;
 8005bd2:	bf00      	nop
		}
		tp = buff;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
		if (res == FR_OK) {
 8005bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d124      	bne.n	8005c2a <f_getcwd+0x1ee>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
 8005be0:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <f_getcwd+0x200>)
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	6539      	str	r1, [r7, #80]	; 0x50
 8005bea:	3230      	adds	r2, #48	; 0x30
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
			*tp++ = ':';
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	653a      	str	r2, [r7, #80]	; 0x50
 8005bf6:	223a      	movs	r2, #58	; 0x3a
 8005bf8:	701a      	strb	r2, [r3, #0]
#endif
			if (i == len) {					/* Root-directory */
 8005bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d105      	bne.n	8005c0e <f_getcwd+0x1d2>
				*tp++ = '/';
 8005c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	653a      	str	r2, [r7, #80]	; 0x50
 8005c08:	222f      	movs	r2, #47	; 0x2f
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e00d      	b.n	8005c2a <f_getcwd+0x1ee>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c16:	441a      	add	r2, r3
 8005c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	6539      	str	r1, [r7, #80]	; 0x50
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
				while (i < len);
 8005c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3f1      	bcc.n	8005c0e <f_getcwd+0x1d2>
			}
		}
		*tp = 0;
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8005c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3760      	adds	r7, #96	; 0x60
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	200011e2 	.word	0x200011e2

08005c40 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff f9dc 	bl	8005008 <validate>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <f_lseek+0x1e>
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	e11f      	b.n	8005e9e <f_lseek+0x25e>
	if (fp->err)						/* Check error */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	79db      	ldrb	r3, [r3, #7]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <f_lseek+0x2c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	79db      	ldrb	r3, [r3, #7]
 8005c6a:	e118      	b.n	8005e9e <f_lseek+0x25e>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d908      	bls.n	8005c88 <f_lseek+0x48>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	799b      	ldrb	r3, [r3, #6]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <f_lseek+0x48>
#endif
			) ofs = fp->fsize;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	609a      	str	r2, [r3, #8]
		if (ofs) {
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80ad 	beq.w	8005dfa <f_lseek+0x1ba>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	025b      	lsls	r3, r3, #9
 8005ca8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01b      	beq.n	8005ce8 <f_lseek+0xa8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1e5a      	subs	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1e59      	subs	r1, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d30f      	bcc.n	8005ce8 <f_lseek+0xa8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	425b      	negs	r3, r3
 8005cd0:	401a      	ands	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e023      	b.n	8005d30 <f_lseek+0xf0>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11a      	bne.n	8005d2a <f_lseek+0xea>
					clst = create_chain(fp->fs, 0);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe f877 	bl	8003dee <create_chain>
 8005d00:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d104      	bne.n	8005d12 <f_lseek+0xd2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	71da      	strb	r2, [r3, #7]
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e0c5      	b.n	8005e9e <f_lseek+0x25e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d104      	bne.n	8005d24 <f_lseek+0xe4>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	71da      	strb	r2, [r3, #7]
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0bc      	b.n	8005e9e <f_lseek+0x25e>
					fp->sclust = clst;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d061      	beq.n	8005dfa <f_lseek+0x1ba>
				while (ofs > bcs) {						/* Cluster following loop */
 8005d36:	e03d      	b.n	8005db4 <f_lseek+0x174>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	799b      	ldrb	r3, [r3, #6]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <f_lseek+0x11e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe f84f 	bl	8003dee <create_chain>
 8005d50:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <f_lseek+0x12c>
							ofs = bcs; break;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	e02e      	b.n	8005dbc <f_lseek+0x17c>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69f9      	ldr	r1, [r7, #28]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fd fe27 	bl	80039b8 <get_fat>
 8005d6a:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d104      	bne.n	8005d7e <f_lseek+0x13e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	71da      	strb	r2, [r3, #7]
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e08f      	b.n	8005e9e <f_lseek+0x25e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d905      	bls.n	8005d90 <f_lseek+0x150>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d304      	bcc.n	8005d9a <f_lseek+0x15a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	71da      	strb	r2, [r3, #7]
 8005d96:	2302      	movs	r3, #2
 8005d98:	e081      	b.n	8005e9e <f_lseek+0x25e>
					fp->clust = clst;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d8bd      	bhi.n	8005d38 <f_lseek+0xf8>
				}
				fp->fptr += ofs;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	441a      	add	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d013      	beq.n	8005dfa <f_lseek+0x1ba>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69f9      	ldr	r1, [r7, #28]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd fdce 	bl	800397a <clust2sect>
 8005dde:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <f_lseek+0x1b0>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	71da      	strb	r2, [r3, #7]
 8005dec:	2302      	movs	r3, #2
 8005dee:	e056      	b.n	8005e9e <f_lseek+0x25e>
					nsect += ofs / SS(fp->fs);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	0a5b      	lsrs	r3, r3, #9
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4413      	add	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d039      	beq.n	8005e7a <f_lseek+0x23a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d034      	beq.n	8005e7a <f_lseek+0x23a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	799b      	ldrb	r3, [r3, #6]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d019      	beq.n	8005e50 <f_lseek+0x210>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	7858      	ldrb	r0, [r3, #1]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f7fc f973 	bl	8002118 <disk_write>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <f_lseek+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	71da      	strb	r2, [r3, #7]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e02d      	b.n	8005e9e <f_lseek+0x25e>
				fp->flag &= ~FA__DIRTY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	799b      	ldrb	r3, [r3, #6]
 8005e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	f7fc f92c 	bl	80020bc <disk_read>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <f_lseek+0x234>
				ABORT(fp->fs, FR_DISK_ERR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	71da      	strb	r2, [r3, #7]
 8005e70:	2301      	movs	r3, #1
 8005e72:	e014      	b.n	8005e9e <f_lseek+0x25e>
#endif
			fp->dsect = nsect;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d90a      	bls.n	8005e9c <f_lseek+0x25c>
			fp->fsize = fp->fptr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	799b      	ldrb	r3, [r3, #6]
 8005e92:	f043 0320 	orr.w	r3, r3, #32
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b088      	sub	sp, #32
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <f_opendir+0x14>
 8005eb6:	2309      	movs	r3, #9
 8005eb8:	e04e      	b.n	8005f58 <f_opendir+0xb2>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f107 0318 	add.w	r3, r7, #24
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fdee 	bl	8004aa4 <find_volume>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d13b      	bne.n	8005f4a <f_opendir+0xa4>
		dp->fs = fs;
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f107 020c 	add.w	r2, r7, #12
 8005ede:	619a      	str	r2, [r3, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fe fc6b 	bl	80047c0 <follow_path>
 8005eea:	4603      	mov	r3, r0
 8005eec:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8005eee:	7ffb      	ldrb	r3, [r7, #31]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d125      	bne.n	8005f40 <f_opendir+0x9a>
			if (dp->dir) {						/* It is not the origin directory itself */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d014      	beq.n	8005f26 <f_opendir+0x80>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	330b      	adds	r3, #11
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <f_opendir+0x7c>
					dp->sclust = ld_clust(fs, dp->dir);
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7fe f995 	bl	8004244 <ld_clust>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	e001      	b.n	8005f26 <f_opendir+0x80>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8005f22:	2305      	movs	r3, #5
 8005f24:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <f_opendir+0x9a>
				dp->id = fs->id;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	88da      	ldrh	r2, [r3, #6]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005f34:	2100      	movs	r1, #0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fd ffec 	bl	8003f14 <dir_sdi>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	77fb      	strb	r3, [r7, #31]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005f40:	7ffb      	ldrb	r3, [r7, #31]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d101      	bne.n	8005f4a <f_opendir+0xa4>
 8005f46:	2305      	movs	r3, #5
 8005f48:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8005f4a:	7ffb      	ldrb	r3, [r7, #31]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <f_opendir+0xb0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff f84d 	bl	8005008 <validate>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <f_closedir+0x1e>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff f838 	bl	8005008 <validate>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d130      	bne.n	8006004 <f_readdir+0x7c>
		if (!fno) {
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fd ffb2 	bl	8003f14 <dir_sdi>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
 8005fb4:	e026      	b.n	8006004 <f_readdir+0x7c>
		} else {
			INIT_BUF(*dp);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	619a      	str	r2, [r3, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fe f9de 	bl	8004382 <dir_read>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d104      	bne.n	8005fda <f_readdir+0x52>
				dp->sect = 0;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	611a      	str	r2, [r3, #16]
				res = FR_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <f_readdir+0x7c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fe fa86 	bl	80044f4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe f811 	bl	8004012 <dir_next>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d104      	bne.n	8006004 <f_readdir+0x7c>
					dp->sect = 0;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	611a      	str	r2, [r3, #16]
					res = FR_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fff6 	bl	8005008 <validate>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10f      	bne.n	8006046 <f_truncate+0x38>
		if (fp->err) {						/* Check error */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	79db      	ldrb	r3, [r3, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <f_truncate+0x28>
			res = (FRESULT)fp->err;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	79db      	ldrb	r3, [r3, #7]
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	e007      	b.n	8006046 <f_truncate+0x38>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	799b      	ldrb	r3, [r3, #6]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <f_truncate+0x38>
				res = FR_DENIED;
 8006042:	2307      	movs	r3, #7
 8006044:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d17e      	bne.n	800614a <f_truncate+0x13c>
		if (fp->fsize > fp->fptr) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d972      	bls.n	800613e <f_truncate+0x130>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	799b      	ldrb	r3, [r3, #6]
 8006064:	f043 0320 	orr.w	r3, r3, #32
 8006068:	b2da      	uxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <f_truncate+0x84>
				res = remove_chain(fp->fs, fp->sclust);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fd fe61 	bl	8003d48 <remove_chain>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	611a      	str	r2, [r3, #16]
 8006090:	e034      	b.n	80060fc <f_truncate+0xee>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7fd fc8b 	bl	80039b8 <get_fat>
 80060a2:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d101      	bne.n	80060b4 <f_truncate+0xa6>
 80060b0:	2301      	movs	r3, #1
 80060b2:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <f_truncate+0xb0>
 80060ba:	2302      	movs	r3, #2
 80060bc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11b      	bne.n	80060fc <f_truncate+0xee>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d215      	bcs.n	80060fc <f_truncate+0xee>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80060dc:	4619      	mov	r1, r3
 80060de:	f7fd fd27 	bl	8003b30 <put_fat>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d107      	bne.n	80060fc <f_truncate+0xee>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fd fe28 	bl	8003d48 <remove_chain>
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11d      	bne.n	800613e <f_truncate+0x130>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	799b      	ldrb	r3, [r3, #6]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d017      	beq.n	800613e <f_truncate+0x130>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	7858      	ldrb	r0, [r3, #1]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	2301      	movs	r3, #1
 8006120:	f7fb fffa 	bl	8002118 <disk_write>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <f_truncate+0x122>
					res = FR_DISK_ERR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	e006      	b.n	800613e <f_truncate+0x130>
				else
					fp->flag &= ~FA__DIRTY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	799b      	ldrb	r3, [r3, #6]
 8006134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <f_truncate+0x13c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	71da      	strb	r2, [r3, #7]
	}

	LEAVE_FF(fp->fs, res);
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b098      	sub	sp, #96	; 0x60
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	65bb      	str	r3, [r7, #88]	; 0x58
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8006160:	1d39      	adds	r1, r7, #4
 8006162:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006166:	2201      	movs	r2, #1
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fc9b 	bl	8004aa4 <find_volume>
 800616e:	4603      	mov	r3, r0
 8006170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80a4 	bne.w	80062c6 <f_unlink+0x172>
		INIT_BUF(dj);
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	64fb      	str	r3, [r7, #76]	; 0x4c
		res = follow_path(&dj, path);		/* Follow the file path */
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fb17 	bl	80047c0 <follow_path>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8006198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <f_unlink+0x60>
 80061a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a2:	330b      	adds	r3, #11
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <f_unlink+0x60>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80061ae:	2306      	movs	r3, #6
 80061b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80061b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 8084 	bne.w	80062c6 <f_unlink+0x172>
			dir = dj.dir;
 80061be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c0:	657b      	str	r3, [r7, #84]	; 0x54
			if (!dir) {
 80061c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <f_unlink+0x7c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80061c8:	2306      	movs	r3, #6
 80061ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061ce:	e009      	b.n	80061e4 <f_unlink+0x90>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 80061d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d2:	330b      	adds	r3, #11
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <f_unlink+0x90>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80061de:	2307      	movs	r3, #7
 80061e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80061e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d146      	bne.n	800627a <f_unlink+0x126>
				dclst = ld_clust(dj.fs, dir);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe f827 	bl	8004244 <ld_clust>
 80061f6:	65b8      	str	r0, [r7, #88]	; 0x58
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 80061f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d03d      	beq.n	800627a <f_unlink+0x126>
 80061fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006200:	330b      	adds	r3, #11
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d036      	beq.n	800627a <f_unlink+0x126>
#if _FS_RPATH
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006212:	429a      	cmp	r2, r3
 8006214:	d103      	bne.n	800621e <f_unlink+0xca>
						res = FR_DENIED;
 8006216:	2307      	movs	r3, #7
 8006218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800621c:	e02d      	b.n	800627a <f_unlink+0x126>
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800621e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006222:	f107 0314 	add.w	r3, r7, #20
 8006226:	2220      	movs	r2, #32
 8006228:	4618      	mov	r0, r3
 800622a:	f7fd fa17 	bl	800365c <mem_cpy>
						sdj.sclust = dclst;
 800622e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006230:	61fb      	str	r3, [r7, #28]
						res = dir_sdi(&sdj, 2);
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	2102      	movs	r1, #2
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd fe6b 	bl	8003f14 <dir_sdi>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006248:	2b00      	cmp	r3, #0
 800624a:	d116      	bne.n	800627a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe f895 	bl	8004382 <dir_read>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800625e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <f_unlink+0x118>
 8006266:	2307      	movs	r3, #7
 8006268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800626c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006270:	2b04      	cmp	r3, #4
 8006272:	d102      	bne.n	800627a <f_unlink+0x126>
 8006274:	2300      	movs	r3, #0
 8006276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						}
					}
				}
			}
			if (res == FR_OK) {
 800627a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800627e:	2b00      	cmp	r3, #0
 8006280:	d121      	bne.n	80062c6 <f_unlink+0x172>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8006282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f904 	bl	8004494 <dir_remove>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8006292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <f_unlink+0x15c>
 800629a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <f_unlink+0x15c>
					res = remove_chain(dj.fs, dclst);
 80062a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd fd4f 	bl	8003d48 <remove_chain>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res == FR_OK) res = sync_fs(dj.fs);
 80062b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <f_unlink+0x172>
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd fabb 	bl	8003836 <sync_fs>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 80062c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3760      	adds	r7, #96	; 0x60
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
 80062e8:	615a      	str	r2, [r3, #20]
 80062ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80062ec:	4b1f      	ldr	r3, [pc, #124]	; (800636c <MX_FMC_Init+0x98>)
 80062ee:	4a20      	ldr	r2, [pc, #128]	; (8006370 <MX_FMC_Init+0x9c>)
 80062f0:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80062f2:	4b1e      	ldr	r3, [pc, #120]	; (800636c <MX_FMC_Init+0x98>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80062f8:	4b1c      	ldr	r3, [pc, #112]	; (800636c <MX_FMC_Init+0x98>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80062fe:	4b1b      	ldr	r3, [pc, #108]	; (800636c <MX_FMC_Init+0x98>)
 8006300:	2204      	movs	r2, #4
 8006302:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <MX_FMC_Init+0x98>)
 8006306:	2200      	movs	r2, #0
 8006308:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800630a:	4b18      	ldr	r3, [pc, #96]	; (800636c <MX_FMC_Init+0x98>)
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8006310:	4b16      	ldr	r3, [pc, #88]	; (800636c <MX_FMC_Init+0x98>)
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <MX_FMC_Init+0x98>)
 8006318:	2200      	movs	r2, #0
 800631a:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <MX_FMC_Init+0x98>)
 800631e:	2200      	movs	r2, #0
 8006320:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <MX_FMC_Init+0x98>)
 8006324:	2200      	movs	r2, #0
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006328:	4b10      	ldr	r3, [pc, #64]	; (800636c <MX_FMC_Init+0x98>)
 800632a:	2200      	movs	r2, #0
 800632c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800632e:	2310      	movs	r3, #16
 8006330:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8006332:	2310      	movs	r3, #16
 8006334:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8006336:	2310      	movs	r3, #16
 8006338:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800633a:	2310      	movs	r3, #16
 800633c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800633e:	2310      	movs	r3, #16
 8006340:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8006342:	2310      	movs	r3, #16
 8006344:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8006346:	2310      	movs	r3, #16
 8006348:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4807      	ldr	r0, [pc, #28]	; (800636c <MX_FMC_Init+0x98>)
 8006350:	f009 ffd0 	bl	80102f4 <HAL_SDRAM_Init>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 800635a:	2144      	movs	r1, #68	; 0x44
 800635c:	4805      	ldr	r0, [pc, #20]	; (8006374 <MX_FMC_Init+0xa0>)
 800635e:	f000 fdab 	bl	8006eb8 <_Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006362:	bf00      	nop
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200011e4 	.word	0x200011e4
 8006370:	a0000140 	.word	0xa0000140
 8006374:	08018084 	.word	0x08018084

08006378 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800638c:	4b3b      	ldr	r3, [pc, #236]	; (800647c <HAL_FMC_MspInit+0x104>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d16f      	bne.n	8006474 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8006394:	4b39      	ldr	r3, [pc, #228]	; (800647c <HAL_FMC_MspInit+0x104>)
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	4b38      	ldr	r3, [pc, #224]	; (8006480 <HAL_FMC_MspInit+0x108>)
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	4a37      	ldr	r2, [pc, #220]	; (8006480 <HAL_FMC_MspInit+0x108>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	6393      	str	r3, [r2, #56]	; 0x38
 80063aa:	4b35      	ldr	r3, [pc, #212]	; (8006480 <HAL_FMC_MspInit+0x108>)
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80063b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80063ba:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063bc:	2302      	movs	r3, #2
 80063be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c4:	2303      	movs	r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063c8:	230c      	movs	r3, #12
 80063ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	482c      	ldr	r0, [pc, #176]	; (8006484 <HAL_FMC_MspInit+0x10c>)
 80063d2:	f007 fe5f 	bl	800e094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80063d6:	2301      	movs	r3, #1
 80063d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063da:	2302      	movs	r3, #2
 80063dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e2:	2303      	movs	r3, #3
 80063e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80063e6:	230c      	movs	r3, #12
 80063e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4826      	ldr	r0, [pc, #152]	; (8006488 <HAL_FMC_MspInit+0x110>)
 80063f0:	f007 fe50 	bl	800e094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|SDCLK_Pin
 80063f4:	f248 1313 	movw	r3, #33043	; 0x8113
 80063f8:	607b      	str	r3, [r7, #4]
                          |SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fa:	2302      	movs	r3, #2
 80063fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006402:	2303      	movs	r3, #3
 8006404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006406:	230c      	movs	r3, #12
 8006408:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800640a:	1d3b      	adds	r3, r7, #4
 800640c:	4619      	mov	r1, r3
 800640e:	481f      	ldr	r0, [pc, #124]	; (800648c <HAL_FMC_MspInit+0x114>)
 8006410:	f007 fe40 	bl	800e094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8006414:	f64f 7382 	movw	r3, #65410	; 0xff82
 8006418:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641a:	2302      	movs	r3, #2
 800641c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006422:	2303      	movs	r3, #3
 8006424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006426:	230c      	movs	r3, #12
 8006428:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4818      	ldr	r0, [pc, #96]	; (8006490 <HAL_FMC_MspInit+0x118>)
 8006430:	f007 fe30 	bl	800e094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D15_Pin|D0_Pin|D1_Pin|GPIO_PIN_0
 8006434:	f24c 4303 	movw	r3, #50179	; 0xc403
 8006438:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643a:	2302      	movs	r3, #2
 800643c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006442:	2303      	movs	r3, #3
 8006444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006446:	230c      	movs	r3, #12
 8006448:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4811      	ldr	r0, [pc, #68]	; (8006494 <HAL_FMC_MspInit+0x11c>)
 8006450:	f007 fe20 	bl	800e094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006454:	2360      	movs	r3, #96	; 0x60
 8006456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006458:	2302      	movs	r3, #2
 800645a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006460:	2303      	movs	r3, #3
 8006462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006464:	230c      	movs	r3, #12
 8006466:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	4619      	mov	r1, r3
 800646c:	480a      	ldr	r0, [pc, #40]	; (8006498 <HAL_FMC_MspInit+0x120>)
 800646e:	f007 fe11 	bl	800e094 <HAL_GPIO_Init>
 8006472:	e000      	b.n	8006476 <HAL_FMC_MspInit+0xfe>
    return;
 8006474:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20001218 	.word	0x20001218
 8006480:	40023800 	.word	0x40023800
 8006484:	40021400 	.word	0x40021400
 8006488:	40020800 	.word	0x40020800
 800648c:	40021800 	.word	0x40021800
 8006490:	40021000 	.word	0x40021000
 8006494:	40020c00 	.word	0x40020c00
 8006498:	40020400 	.word	0x40020400

0800649c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80064a4:	f7ff ff68 	bl	8006378 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_OTG_FS_DM
     PD6   ------> LTDC_B2
*/
void MX_GPIO_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	609a      	str	r2, [r3, #8]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]
 80064ca:	4bb5      	ldr	r3, [pc, #724]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4ab4      	ldr	r2, [pc, #720]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064d0:	f043 0310 	orr.w	r3, r3, #16
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4bb2      	ldr	r3, [pc, #712]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	623b      	str	r3, [r7, #32]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	4bae      	ldr	r3, [pc, #696]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	4aad      	ldr	r2, [pc, #692]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064ec:	f043 0304 	orr.w	r3, r3, #4
 80064f0:	6313      	str	r3, [r2, #48]	; 0x30
 80064f2:	4bab      	ldr	r3, [pc, #684]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	4ba7      	ldr	r3, [pc, #668]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4aa6      	ldr	r2, [pc, #664]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006508:	f043 0320 	orr.w	r3, r3, #32
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4ba4      	ldr	r3, [pc, #656]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	4ba0      	ldr	r3, [pc, #640]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	4a9f      	ldr	r2, [pc, #636]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	6313      	str	r3, [r2, #48]	; 0x30
 800652a:	4b9d      	ldr	r3, [pc, #628]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	4b99      	ldr	r3, [pc, #612]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4a98      	ldr	r2, [pc, #608]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6313      	str	r3, [r2, #48]	; 0x30
 8006546:	4b96      	ldr	r3, [pc, #600]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	4b92      	ldr	r3, [pc, #584]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	4a91      	ldr	r2, [pc, #580]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	6313      	str	r3, [r2, #48]	; 0x30
 8006562:	4b8f      	ldr	r3, [pc, #572]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	4b8b      	ldr	r3, [pc, #556]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	4a8a      	ldr	r2, [pc, #552]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657c:	6313      	str	r3, [r2, #48]	; 0x30
 800657e:	4b88      	ldr	r3, [pc, #544]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	4b84      	ldr	r3, [pc, #528]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	4a83      	ldr	r2, [pc, #524]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	6313      	str	r3, [r2, #48]	; 0x30
 800659a:	4b81      	ldr	r3, [pc, #516]	; (80067a0 <MX_GPIO_Init+0x2f0>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SF3_CS_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin, GPIO_PIN_RESET);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2174      	movs	r1, #116	; 0x74
 80065aa:	487e      	ldr	r0, [pc, #504]	; (80067a4 <MX_GPIO_Init+0x2f4>)
 80065ac:	f007 ff36 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VS1053_RESET_GPIO_Port, VS1053_RESET_Pin, GPIO_PIN_SET);
 80065b0:	2201      	movs	r2, #1
 80065b2:	2108      	movs	r1, #8
 80065b4:	487b      	ldr	r0, [pc, #492]	; (80067a4 <MX_GPIO_Init+0x2f4>)
 80065b6:	f007 ff31 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COLUMN_4_Pin|SRAM_3_CS_Pin|ILI9341_CS_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80065ba:	2200      	movs	r2, #0
 80065bc:	f242 0116 	movw	r1, #8214	; 0x2016
 80065c0:	4879      	ldr	r0, [pc, #484]	; (80067a8 <MX_GPIO_Init+0x2f8>)
 80065c2:	f007 ff2b 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uSD_CS_Pin|KeyClick_SCK_Pin|HD44780_D6_Pin|HD44780_D5_Pin
 80065c6:	2201      	movs	r2, #1
 80065c8:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 80065cc:	4876      	ldr	r0, [pc, #472]	; (80067a8 <MX_GPIO_Init+0x2f8>)
 80065ce:	f007 ff25 	bl	800e41c <HAL_GPIO_WritePin>
                          |HD44780_D4_Pin|HD44780_E_Pin|ADS1256_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRAM_2_CS_Pin|SRAM_4_CS_Pin|HD44780_RS_Pin, GPIO_PIN_SET);
 80065d2:	2201      	movs	r2, #1
 80065d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80065d8:	4874      	ldr	r0, [pc, #464]	; (80067ac <MX_GPIO_Init+0x2fc>)
 80065da:	f007 ff1f 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	4872      	ldr	r0, [pc, #456]	; (80067ac <MX_GPIO_Init+0x2fc>)
 80065e4:	f007 ff1a 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SRAM_5_CS_Pin|SRAM_6_CS_Pin|SRAM_7_CS_Pin, GPIO_PIN_SET);
 80065e8:	2201      	movs	r2, #1
 80065ea:	f240 4103 	movw	r1, #1027	; 0x403
 80065ee:	4870      	ldr	r0, [pc, #448]	; (80067b0 <MX_GPIO_Init+0x300>)
 80065f0:	f007 ff14 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KeyClick_SHLD_GPIO_Port, KeyClick_SHLD_Pin, GPIO_PIN_RESET);
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065fa:	486d      	ldr	r0, [pc, #436]	; (80067b0 <MX_GPIO_Init+0x300>)
 80065fc:	f007 ff0e 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ILI9341_RST_Pin|ILI9341_WRX_Pin|DAC8552_CS_Pin, GPIO_PIN_RESET);
 8006600:	2200      	movs	r2, #0
 8006602:	f243 0120 	movw	r1, #12320	; 0x3020
 8006606:	486b      	ldr	r0, [pc, #428]	; (80067b4 <MX_GPIO_Init+0x304>)
 8006608:	f007 ff08 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SRAM_1_CS_Pin|SRAM_0_CS_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800660c:	2200      	movs	r2, #0
 800660e:	f246 010c 	movw	r1, #24588	; 0x600c
 8006612:	4869      	ldr	r0, [pc, #420]	; (80067b8 <MX_GPIO_Init+0x308>)
 8006614:	f007 ff02 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, GPIO_PIN_SET);
 8006618:	2201      	movs	r2, #1
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	4866      	ldr	r0, [pc, #408]	; (80067b8 <MX_GPIO_Init+0x308>)
 800661e:	f007 fefd 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADS1256_SYNC_Pin|ADS1256_RESET_Pin, GPIO_PIN_SET);
 8006622:	2201      	movs	r2, #1
 8006624:	2118      	movs	r1, #24
 8006626:	4863      	ldr	r0, [pc, #396]	; (80067b4 <MX_GPIO_Init+0x304>)
 8006628:	f007 fef8 	bl	800e41c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SF3_CS_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin;
 800662c:	2374      	movs	r3, #116	; 0x74
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006630:	2301      	movs	r3, #1
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006638:	2300      	movs	r3, #0
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800663c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006640:	4619      	mov	r1, r3
 8006642:	4858      	ldr	r0, [pc, #352]	; (80067a4 <MX_GPIO_Init+0x2f4>)
 8006644:	f007 fd26 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VS1053_RESET_Pin;
 8006648:	2308      	movs	r3, #8
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800664c:	2301      	movs	r3, #1
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006654:	2301      	movs	r3, #1
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VS1053_RESET_GPIO_Port, &GPIO_InitStruct);
 8006658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665c:	4619      	mov	r1, r3
 800665e:	4851      	ldr	r0, [pc, #324]	; (80067a4 <MX_GPIO_Init+0x2f4>)
 8006660:	f007 fd18 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COLUMN_4_Pin|SRAM_3_CS_Pin|ILI9341_CS_Pin|OTG_FS_PSO_Pin;
 8006664:	f242 0316 	movw	r3, #8214	; 0x2016
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800666a:	2301      	movs	r3, #1
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666e:	2300      	movs	r3, #0
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006672:	2300      	movs	r3, #0
 8006674:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800667a:	4619      	mov	r1, r3
 800667c:	484a      	ldr	r0, [pc, #296]	; (80067a8 <MX_GPIO_Init+0x2f8>)
 800667e:	f007 fd09 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Recording_Pin|AD_KBD_BUT_DOWN_Pin;
 8006682:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006688:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668e:	2300      	movs	r3, #0
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006696:	4619      	mov	r1, r3
 8006698:	4848      	ldr	r0, [pc, #288]	; (80067bc <MX_GPIO_Init+0x30c>)
 800669a:	f007 fcfb 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = uSD_CS_Pin|KeyClick_SCK_Pin|ADS1256_CS_Pin;
 800669e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066a4:	2301      	movs	r3, #1
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066ac:	2302      	movs	r3, #2
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b4:	4619      	mov	r1, r3
 80066b6:	483c      	ldr	r0, [pc, #240]	; (80067a8 <MX_GPIO_Init+0x2f8>)
 80066b8:	f007 fcec 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SRAM_2_CS_Pin|SRAM_4_CS_Pin;
 80066bc:	2348      	movs	r3, #72	; 0x48
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066c0:	2301      	movs	r3, #1
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066c8:	2302      	movs	r3, #2
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d0:	4619      	mov	r1, r3
 80066d2:	4836      	ldr	r0, [pc, #216]	; (80067ac <MX_GPIO_Init+0x2fc>)
 80066d4:	f007 fcde 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066dc:	2301      	movs	r3, #1
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e4:	2300      	movs	r3, #0
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4619      	mov	r1, r3
 80066ee:	482f      	ldr	r0, [pc, #188]	; (80067ac <MX_GPIO_Init+0x2fc>)
 80066f0:	f007 fcd0 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SRAM_5_CS_Pin|SRAM_6_CS_Pin|SRAM_7_CS_Pin;
 80066f4:	f240 4303 	movw	r3, #1027	; 0x403
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066fa:	2301      	movs	r3, #1
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006702:	2302      	movs	r3, #2
 8006704:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670a:	4619      	mov	r1, r3
 800670c:	4828      	ldr	r0, [pc, #160]	; (80067b0 <MX_GPIO_Init+0x300>)
 800670e:	f007 fcc1 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006712:	2304      	movs	r3, #4
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006716:	2300      	movs	r3, #0
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800671e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006722:	4619      	mov	r1, r3
 8006724:	4822      	ldr	r0, [pc, #136]	; (80067b0 <MX_GPIO_Init+0x300>)
 8006726:	f007 fcb5 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KeyClick_SHLD_Pin;
 800672a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006730:	2301      	movs	r3, #1
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006738:	2300      	movs	r3, #0
 800673a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(KeyClick_SHLD_GPIO_Port, &GPIO_InitStruct);
 800673c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006740:	4619      	mov	r1, r3
 8006742:	481b      	ldr	r0, [pc, #108]	; (80067b0 <MX_GPIO_Init+0x300>)
 8006744:	f007 fca6 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800674e:	2300      	movs	r3, #0
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006752:	2300      	movs	r3, #0
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675a:	4619      	mov	r1, r3
 800675c:	4815      	ldr	r0, [pc, #84]	; (80067b4 <MX_GPIO_Init+0x304>)
 800675e:	f007 fc99 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ILI9341_RST_Pin|ILI9341_WRX_Pin|DAC8552_CS_Pin;
 8006762:	f243 0320 	movw	r3, #12320	; 0x3020
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006768:	2301      	movs	r3, #1
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	2300      	movs	r3, #0
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006778:	4619      	mov	r1, r3
 800677a:	480e      	ldr	r0, [pc, #56]	; (80067b4 <MX_GPIO_Init+0x304>)
 800677c:	f007 fc8a 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SRAM_1_CS_Pin|SRAM_0_CS_Pin|LD3_Pin|LD4_Pin;
 8006780:	f246 030c 	movw	r3, #24588	; 0x600c
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006786:	2301      	movs	r3, #1
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678a:	2300      	movs	r3, #0
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678e:	2300      	movs	r3, #0
 8006790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006796:	4619      	mov	r1, r3
 8006798:	4807      	ldr	r0, [pc, #28]	; (80067b8 <MX_GPIO_Init+0x308>)
 800679a:	f007 fc7b 	bl	800e094 <HAL_GPIO_Init>
 800679e:	e00f      	b.n	80067c0 <MX_GPIO_Init+0x310>
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40021000 	.word	0x40021000
 80067a8:	40020800 	.word	0x40020800
 80067ac:	40020000 	.word	0x40020000
 80067b0:	40020400 	.word	0x40020400
 80067b4:	40020c00 	.word	0x40020c00
 80067b8:	40021800 	.word	0x40021800
 80067bc:	40021400 	.word	0x40021400

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = KeyClick_DATA_Pin|uSD_CD_Pin;
 80067c0:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067c6:	2300      	movs	r3, #0
 80067c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80067ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d2:	4619      	mov	r1, r3
 80067d4:	4876      	ldr	r0, [pc, #472]	; (80069b0 <MX_GPIO_Init+0x500>)
 80067d6:	f007 fc5d 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HD44780_D7_Pin;
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067de:	2301      	movs	r3, #1
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80067e6:	2301      	movs	r3, #1
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HD44780_D7_GPIO_Port, &GPIO_InitStruct);
 80067ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ee:	4619      	mov	r1, r3
 80067f0:	486f      	ldr	r0, [pc, #444]	; (80069b0 <MX_GPIO_Init+0x500>)
 80067f2:	f007 fc4f 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HD44780_D6_Pin|HD44780_D5_Pin|HD44780_D4_Pin|HD44780_E_Pin;
 80067f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067fc:	2301      	movs	r3, #1
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006800:	2300      	movs	r3, #0
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006804:	2301      	movs	r3, #1
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800680c:	4619      	mov	r1, r3
 800680e:	4869      	ldr	r0, [pc, #420]	; (80069b4 <MX_GPIO_Init+0x504>)
 8006810:	f007 fc40 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HD44780_RS_Pin;
 8006814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800681a:	2301      	movs	r3, #1
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006822:	2301      	movs	r3, #1
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HD44780_RS_GPIO_Port, &GPIO_InitStruct);
 8006826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800682a:	4619      	mov	r1, r3
 800682c:	4862      	ldr	r0, [pc, #392]	; (80069b8 <MX_GPIO_Init+0x508>)
 800682e:	f007 fc31 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006838:	2302      	movs	r3, #2
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683c:	2300      	movs	r3, #0
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006840:	2302      	movs	r3, #2
 8006842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006844:	230a      	movs	r3, #10
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684c:	4619      	mov	r1, r3
 800684e:	485a      	ldr	r0, [pc, #360]	; (80069b8 <MX_GPIO_Init+0x508>)
 8006850:	f007 fc20 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_SW_Pin;
 8006854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800685a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006860:	2300      	movs	r3, #0
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Joystick_SW_GPIO_Port, &GPIO_InitStruct);
 8006864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006868:	4619      	mov	r1, r3
 800686a:	4853      	ldr	r0, [pc, #332]	; (80069b8 <MX_GPIO_Init+0x508>)
 800686c:	f007 fc12 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS1256_DRDY_Pin;
 8006870:	2304      	movs	r3, #4
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800687a:	2301      	movs	r3, #1
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADS1256_DRDY_GPIO_Port, &GPIO_InitStruct);
 800687e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006882:	4619      	mov	r1, r3
 8006884:	484d      	ldr	r0, [pc, #308]	; (80069bc <MX_GPIO_Init+0x50c>)
 8006886:	f007 fc05 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ADS1256_SYNC_Pin|ADS1256_RESET_Pin;
 800688a:	2318      	movs	r3, #24
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800688e:	2301      	movs	r3, #1
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006892:	2300      	movs	r3, #0
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006896:	2302      	movs	r3, #2
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800689a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800689e:	4619      	mov	r1, r3
 80068a0:	4846      	ldr	r0, [pc, #280]	; (80069bc <MX_GPIO_Init+0x50c>)
 80068a2:	f007 fbf7 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068aa:	2302      	movs	r3, #2
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b2:	2300      	movs	r3, #0
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80068b6:	230e      	movs	r3, #14
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80068ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068be:	4619      	mov	r1, r3
 80068c0:	483e      	ldr	r0, [pc, #248]	; (80069bc <MX_GPIO_Init+0x50c>)
 80068c2:	f007 fbe7 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Overdubbing_Pin;
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80068ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Overdubbing_GPIO_Port, &GPIO_InitStruct);
 80068d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d8:	4619      	mov	r1, r3
 80068da:	4838      	ldr	r0, [pc, #224]	; (80069bc <MX_GPIO_Init+0x50c>)
 80068dc:	f007 fbda 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Playback_Pin;
 80068e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80068e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Playback_GPIO_Port, &GPIO_InitStruct);
 80068f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f4:	4619      	mov	r1, r3
 80068f6:	482e      	ldr	r0, [pc, #184]	; (80069b0 <MX_GPIO_Init+0x500>)
 80068f8:	f007 fbcc 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_3_Pin;
 80068fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006902:	2300      	movs	r3, #0
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006906:	2301      	movs	r3, #1
 8006908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW_3_GPIO_Port, &GPIO_InitStruct);
 800690a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690e:	4619      	mov	r1, r3
 8006910:	4827      	ldr	r0, [pc, #156]	; (80069b0 <MX_GPIO_Init+0x500>)
 8006912:	f007 fbbf 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_KBD_INT_Pin;
 8006916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800691c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006922:	2300      	movs	r3, #0
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AD_KBD_INT_GPIO_Port, &GPIO_InitStruct);
 8006926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692a:	4619      	mov	r1, r3
 800692c:	4820      	ldr	r0, [pc, #128]	; (80069b0 <MX_GPIO_Init+0x500>)
 800692e:	f007 fbb1 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToggleFunction_Pin;
 8006932:	2310      	movs	r3, #16
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006936:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693c:	2300      	movs	r3, #0
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ToggleFunction_GPIO_Port, &GPIO_InitStruct);
 8006940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006944:	4619      	mov	r1, r3
 8006946:	481e      	ldr	r0, [pc, #120]	; (80069c0 <MX_GPIO_Init+0x510>)
 8006948:	f007 fba4 	bl	800e094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin|KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin;
 800694c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006952:	2300      	movs	r3, #0
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006956:	2301      	movs	r3, #1
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695e:	4619      	mov	r1, r3
 8006960:	4817      	ldr	r0, [pc, #92]	; (80069c0 <MX_GPIO_Init+0x510>)
 8006962:	f007 fb97 	bl	800e094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 1);
 8006966:	2201      	movs	r2, #1
 8006968:	2100      	movs	r1, #0
 800696a:	2008      	movs	r0, #8
 800696c:	f006 fc67 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006970:	2008      	movs	r0, #8
 8006972:	f006 fc80 	bl	800d276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 3);
 8006976:	2203      	movs	r2, #3
 8006978:	2102      	movs	r1, #2
 800697a:	200a      	movs	r0, #10
 800697c:	f006 fc5f 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006980:	200a      	movs	r0, #10
 8006982:	f006 fc78 	bl	800d276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 3);
 8006986:	2203      	movs	r2, #3
 8006988:	2102      	movs	r1, #2
 800698a:	2017      	movs	r0, #23
 800698c:	f006 fc57 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006990:	2017      	movs	r0, #23
 8006992:	f006 fc70 	bl	800d276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8006996:	2201      	movs	r2, #1
 8006998:	2100      	movs	r1, #0
 800699a:	2028      	movs	r0, #40	; 0x28
 800699c:	f006 fc4f 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80069a0:	2028      	movs	r0, #40	; 0x28
 80069a2:	f006 fc68 	bl	800d276 <HAL_NVIC_EnableIRQ>

}
 80069a6:	bf00      	nop
 80069a8:	3738      	adds	r7, #56	; 0x38
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40021800 	.word	0x40021800
 80069b4:	40020800 	.word	0x40020800
 80069b8:	40020000 	.word	0x40020000
 80069bc:	40020c00 	.word	0x40020c00
 80069c0:	40020400 	.word	0x40020400

080069c4 <Read_Joystick_INT>:
#include "adc.h"
#include "stdlib.h"

static __IO JOYSTICK jstick;

static void Read_Joystick_INT(){
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0

	jstick.but = (HAL_GPIO_ReadPin(Joystick_SW_GPIO_Port,Joystick_SW_Pin) == GPIO_PIN_RESET);
 80069c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069cc:	480c      	ldr	r0, [pc, #48]	; (8006a00 <Read_Joystick_INT+0x3c>)
 80069ce:	f007 fd0d 	bl	800e3ec <HAL_GPIO_ReadPin>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <Read_Joystick_INT+0x40>)
 80069e2:	709a      	strb	r2, [r3, #2]
	jstick.xpos = (joystick_data[0] >> 3);
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <Read_Joystick_INT+0x44>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <Read_Joystick_INT+0x40>)
 80069ee:	701a      	strb	r2, [r3, #0]
	jstick.ypos = (joystick_data[1] >> 3);
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <Read_Joystick_INT+0x44>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b02      	ldr	r3, [pc, #8]	; (8006a04 <Read_Joystick_INT+0x40>)
 80069fa:	705a      	strb	r2, [r3, #1]
}
 80069fc:	bf00      	nop
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40020000 	.word	0x40020000
 8006a04:	2000121c 	.word	0x2000121c
 8006a08:	20001c40 	.word	0x20001c40

08006a0c <Read_Joystick>:

JOYSTICK Read_Joystick(){
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
	return jstick;
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <Read_Joystick+0x38>)
 8006a14:	1d3b      	adds	r3, r7, #4
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	8019      	strh	r1, [r3, #0]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	0c12      	lsrs	r2, r2, #16
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	793a      	ldrb	r2, [r7, #4]
 8006a26:	f362 0307 	bfi	r3, r2, #0, #8
 8006a2a:	797a      	ldrb	r2, [r7, #5]
 8006a2c:	f362 230f 	bfi	r3, r2, #8, #8
 8006a30:	79ba      	ldrb	r2, [r7, #6]
 8006a32:	f362 4317 	bfi	r3, r2, #16, #8
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000121c 	.word	0x2000121c

08006a48 <Update_Joystick>:

BOOL Movement_X(){
	return jstick.xpos != CENTER;
}

void Update_Joystick(){
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
	Read_Joystick_INT();
 8006a4c:	f7ff ffba 	bl	80069c4 <Read_Joystick_INT>
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <Active_Joystick>:

BOOL Active_Joystick(){
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
	return (jstick.xpos != CENTER || jstick.ypos != CENTER || jstick.but != FALSE);
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <Active_Joystick+0x34>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d109      	bne.n	8006a76 <Active_Joystick+0x22>
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <Active_Joystick+0x34>)
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d104      	bne.n	8006a76 <Active_Joystick+0x22>
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <Active_Joystick+0x34>)
 8006a6e:	789b      	ldrb	r3, [r3, #2]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <Active_Joystick+0x26>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <Active_Joystick+0x28>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	2000121c 	.word	0x2000121c

08006a8c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t data = 0,bytesWritten = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	2300      	movs	r3, #0
 8006a98:	61bb      	str	r3, [r7, #24]
	HAL_StatusTypeDef status;
	uint8_t at45db[20];


	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006a9a:	4b75      	ldr	r3, [pc, #468]	; (8006c70 <main+0x1e4>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4a74      	ldr	r2, [pc, #464]	; (8006c70 <main+0x1e4>)
 8006aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8006aa6:	4b73      	ldr	r3, [pc, #460]	; (8006c74 <main+0x1e8>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006aac:	4b71      	ldr	r3, [pc, #452]	; (8006c74 <main+0x1e8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a70      	ldr	r2, [pc, #448]	; (8006c74 <main+0x1e8>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ab8:	f005 fc0e 	bl	800c2d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  looper.Function = IDLE;
 8006abc:	4b6e      	ldr	r3, [pc, #440]	; (8006c78 <main+0x1ec>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	775a      	strb	r2, [r3, #29]
  looper.TwoChannels = FALSE;
 8006ac2:	4b6d      	ldr	r3, [pc, #436]	; (8006c78 <main+0x1ec>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	70da      	strb	r2, [r3, #3]
  looper.ch1.Active = TRUE;
 8006ac8:	4a6b      	ldr	r2, [pc, #428]	; (8006c78 <main+0x1ec>)
 8006aca:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	f882 3020 	strb.w	r3, [r2, #32]
  looper.ch1.Monitor = FALSE;
 8006ad6:	4a68      	ldr	r2, [pc, #416]	; (8006c78 <main+0x1ec>)
 8006ad8:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006adc:	f36f 0341 	bfc	r3, #1, #1
 8006ae0:	f882 3020 	strb.w	r3, [r2, #32]
  looper.ch2.Active = FALSE;
 8006ae4:	4a64      	ldr	r2, [pc, #400]	; (8006c78 <main+0x1ec>)
 8006ae6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006aea:	f36f 0300 	bfc	r3, #0, #1
 8006aee:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  looper.ch2.Monitor = FALSE;
 8006af2:	4a61      	ldr	r2, [pc, #388]	; (8006c78 <main+0x1ec>)
 8006af4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8006af8:	f36f 0341 	bfc	r3, #1, #1
 8006afc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  looper.timeIncrement = 0;
 8006b00:	4b5d      	ldr	r3, [pc, #372]	; (8006c78 <main+0x1ec>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
  looper.SampleBytes = 2;
 8006b06:	4b5c      	ldr	r3, [pc, #368]	; (8006c78 <main+0x1ec>)
 8006b08:	2202      	movs	r2, #2
 8006b0a:	611a      	str	r2, [r3, #16]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b0c:	f000 f8ca 	bl	8006ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b10:	f7ff fcce 	bl	80064b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006b14:	f7fb fc3e 	bl	8002394 <MX_DMA_Init>
  MX_TIM2_Init();
 8006b18:	f004 faec 	bl	800b0f4 <MX_TIM2_Init>
  MX_FMC_Init();
 8006b1c:	f7ff fbda 	bl	80062d4 <MX_FMC_Init>
  MX_TIM4_Init();
 8006b20:	f004 fb3c 	bl	800b19c <MX_TIM4_Init>
  MX_SPI3_Init();
 8006b24:	f002 fd2e 	bl	8009584 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8006b28:	f005 fb34 	bl	800c194 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8006b2c:	f7fa fcfa 	bl	8001524 <MX_ADC1_Init>
  MX_SPI5_Init();
 8006b30:	f002 fd62 	bl	80095f8 <MX_SPI5_Init>
  MX_DAC_Init();
 8006b34:	f7fb f9ce 	bl	8001ed4 <MX_DAC_Init>
  MX_TIM8_Init();
 8006b38:	f004 fb86 	bl	800b248 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8006b3c:	f00f f9f6 	bl	8015f2c <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8006b40:	f004 fbda 	bl	800b2f8 <MX_TIM9_Init>
  MX_ADC3_Init();
 8006b44:	f7fa fd42 	bl	80015cc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  sFLASH_Init();
 8006b48:	f002 feae 	bl	80098a8 <sFLASH_Init>
  my_spiffs_mount();
 8006b4c:	f000 f954 	bl	8006df8 <my_spiffs_mount>
  BSP_SDRAM_Init();
 8006b50:	f003 ff5c 	bl	800aa0c <BSP_SDRAM_Init>
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8006b54:	2008      	movs	r0, #8
 8006b56:	f006 fb9c 	bl	800d292 <HAL_NVIC_DisableIRQ>
  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
  TM_ILI9341_Init();
 8006b5a:	f004 fe5d 	bl	800b818 <TM_ILI9341_Init>
  //Rotate LCD for 90 degrees
  TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_1);
 8006b5e:	2002      	movs	r0, #2
 8006b60:	f005 f934 	bl	800bdcc <TM_ILI9341_Rotate>
  //FIll lcd with color
  TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8006b64:	f24a 2054 	movw	r0, #41556	; 0xa254
 8006b68:	f005 f872 	bl	800bc50 <TM_ILI9341_Fill>

  status = HAL_TIM_Base_Start_IT(&htim9);
 8006b6c:	4843      	ldr	r0, [pc, #268]	; (8006c7c <main+0x1f0>)
 8006b6e:	f00a fc8f 	bl	8011490 <HAL_TIM_Base_Start_IT>
 8006b72:	4603      	mov	r3, r0
 8006b74:	75fb      	strb	r3, [r7, #23]

  BSP_LED_Init(LED_GREEN);
 8006b76:	2000      	movs	r0, #0
 8006b78:	f003 fe6a 	bl	800a850 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f003 fe67 	bl	800a850 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8006b82:	2101      	movs	r1, #1
 8006b84:	2000      	movs	r0, #0
 8006b86:	f003 feeb 	bl	800a960 <BSP_PB_Init>

  status = HAL_TIM_Base_Start_IT(&htim4);
 8006b8a:	483d      	ldr	r0, [pc, #244]	; (8006c80 <main+0x1f4>)
 8006b8c:	f00a fc80 	bl	8011490 <HAL_TIM_Base_Start_IT>
 8006b90:	4603      	mov	r3, r0
 8006b92:	75fb      	strb	r3, [r7, #23]
  status = HAL_ADC_Start_IT(&hadc1);
 8006b94:	483b      	ldr	r0, [pc, #236]	; (8006c84 <main+0x1f8>)
 8006b96:	f005 fc79 	bl	800c48c <HAL_ADC_Start_IT>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]

  status = HAL_ADC_Start_DMA(&hadc3,joystick_data,2);
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	4939      	ldr	r1, [pc, #228]	; (8006c88 <main+0x1fc>)
 8006ba2:	483a      	ldr	r0, [pc, #232]	; (8006c8c <main+0x200>)
 8006ba4:	f005 fe60 	bl	800c868 <HAL_ADC_Start_DMA>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

  ADS1256_WriteCmd(CMD_RESET);
 8006bac:	20fe      	movs	r0, #254	; 0xfe
 8006bae:	f7fa ff21 	bl	80019f4 <ADS1256_WriteCmd>
  ADS1256_WriteCmd(CMD_SDATAC);
 8006bb2:	200f      	movs	r0, #15
 8006bb4:	f7fa ff1e 	bl	80019f4 <ADS1256_WriteCmd>
  data = ADS1256_ReadChipID();
 8006bb8:	f7fa ff38 	bl	8001a2c <ADS1256_ReadChipID>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	61fb      	str	r3, [r7, #28]


  ADS1256_CfgADC(ADS1256_GAIN_2, ADS1256_15000SPS);
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7fa fe5c 	bl	8001880 <ADS1256_CfgADC>
  ADS1256_SetDiffChannel(0);
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f7fa ff40 	bl	8001a4e <ADS1256_SetDiffChannel>
  ADS1256_WriteCmd(CMD_SELFCAL);
 8006bce:	20f0      	movs	r0, #240	; 0xf0
 8006bd0:	f7fa ff10 	bl	80019f4 <ADS1256_WriteCmd>
  ADS1256_WriteCmd(CMD_SELFOCAL);
 8006bd4:	20f1      	movs	r0, #241	; 0xf1
 8006bd6:	f7fa ff0d 	bl	80019f4 <ADS1256_WriteCmd>

  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006bda:	2008      	movs	r0, #8
 8006bdc:	f006 fb4b 	bl	800d276 <HAL_NVIC_EnableIRQ>
  ADS1256_WriteCmd(CMD_RDATAC);
 8006be0:	2003      	movs	r0, #3
 8006be2:	f7fa ff07 	bl	80019f4 <ADS1256_WriteCmd>
  //FATFS_UnLinkDriver(SD_Path);
  TM_KEYPAD_Init();
 8006be6:	f005 fa59 	bl	800c09c <TM_KEYPAD_Init>

  setupMidi();
 8006bea:	f002 fc1f 	bl	800942c <setupMidi>
  talkMIDI(0xB0, 0, 0x01); //Default bank GM1
 8006bee:	2201      	movs	r2, #1
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	20b0      	movs	r0, #176	; 0xb0
 8006bf4:	f002 fc62 	bl	80094bc <talkMIDI>

  TM_HD44780_Init(20, 4);
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	2014      	movs	r0, #20
 8006bfc:	f004 fc3a 	bl	800b474 <TM_HD44780_Init>
  TM_HD44780_Clear();
 8006c00:	f004 fc9e 	bl	800b540 <TM_HD44780_Clear>
  TM_HD44780_Puts(0,0,"Looper");
 8006c04:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <main+0x204>)
 8006c06:	2100      	movs	r1, #0
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f004 fca5 	bl	800b558 <TM_HD44780_Puts>

  InitSRAM();
 8006c0e:	f7fa fb39 	bl	8001284 <InitSRAM>
  menuInit();
 8006c12:	f000 ff15 	bl	8007a40 <menuInit>
  menuShow(0);
 8006c16:	2000      	movs	r0, #0
 8006c18:	f000 ffdc 	bl	8007bd4 <menuShow>

  // TODO: write initial rhythm header to SRAM
  SRAM_seekWrite(0,SRAM_SET);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	2000      	movs	r0, #0
 8006c20:	f7fa f916 	bl	8000e50 <SRAM_seekWrite>
  writeSRAM((unsigned char *)"\0\0\0\0\0\0\0\0\0\0\0\0",12);
 8006c24:	210c      	movs	r1, #12
 8006c26:	481b      	ldr	r0, [pc, #108]	; (8006c94 <main+0x208>)
 8006c28:	f7fa f9aa 	bl	8000f80 <writeSRAM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (TRUE)
  {
	  checkSD();
 8006c2c:	f000 fb34 	bl	8007298 <checkSD>
	  if(Skip_Read_Button == FALSE)
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <main+0x20c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <main+0x1b8>
		  Keypad_Button = TM_KEYPAD_Read();
 8006c38:	f005 fa48 	bl	800c0cc <TM_KEYPAD_Read>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <main+0x210>)
 8006c42:	701a      	strb	r2, [r3, #0]
	  Skip_Read_Button = FALSE;
 8006c44:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <main+0x20c>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
	  /* Keypad was pressed */
	  if (Keypad_Button != TM_KEYPAD_Button_NOPRESSED) {/* Keypad is pressed */
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <main+0x210>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2bff      	cmp	r3, #255	; 0xff
 8006c50:	d004      	beq.n	8006c5c <main+0x1d0>
		  menuShow(Keypad_Button);
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <main+0x210>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ffbc 	bl	8007bd4 <menuShow>

	  }// end of key pressed

	  SHOW_STATUS_LINE();
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <main+0x214>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d1e3      	bne.n	8006c2c <main+0x1a0>
 8006c64:	f001 f826 	bl	8007cb4 <menuShowStatus>
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <main+0x214>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
	  checkSD();
 8006c6e:	e7dd      	b.n	8006c2c <main+0x1a0>
 8006c70:	e000edf0 	.word	0xe000edf0
 8006c74:	e0001000 	.word	0xe0001000
 8006c78:	20001220 	.word	0x20001220
 8006c7c:	20002350 	.word	0x20002350
 8006c80:	200022c0 	.word	0x200022c0
 8006c84:	200003a4 	.word	0x200003a4
 8006c88:	20001c40 	.word	0x20001c40
 8006c8c:	200003ec 	.word	0x200003ec
 8006c90:	08018098 	.word	0x08018098
 8006c94:	080180a0 	.word	0x080180a0
 8006c98:	20001c3b 	.word	0x20001c3b
 8006c9c:	20001c39 	.word	0x20001c39
 8006ca0:	20001c3c 	.word	0x20001c3c

08006ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b094      	sub	sp, #80	; 0x50
 8006ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <SystemClock_Config+0xe0>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	4a34      	ldr	r2, [pc, #208]	; (8006d84 <SystemClock_Config+0xe0>)
 8006cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cba:	4b32      	ldr	r3, [pc, #200]	; (8006d84 <SystemClock_Config+0xe0>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <SystemClock_Config+0xe4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <SystemClock_Config+0xe4>)
 8006cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <SystemClock_Config+0xe4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cec:	2302      	movs	r3, #2
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006cf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006cf6:	2304      	movs	r3, #4
 8006cf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006cfa:	23a8      	movs	r3, #168	; 0xa8
 8006cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006d02:	2307      	movs	r3, #7
 8006d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d06:	f107 0320 	add.w	r3, r7, #32
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f008 fe5a 	bl	800f9c4 <HAL_RCC_OscConfig>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006d16:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006d1a:	481c      	ldr	r0, [pc, #112]	; (8006d8c <SystemClock_Config+0xe8>)
 8006d1c:	f000 f8cc 	bl	8006eb8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d20:	230f      	movs	r3, #15
 8006d22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d24:	2302      	movs	r3, #2
 8006d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	2105      	movs	r1, #5
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f009 f8b8 	bl	800feb4 <HAL_RCC_ClockConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006d4a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006d4e:	480f      	ldr	r0, [pc, #60]	; (8006d8c <SystemClock_Config+0xe8>)
 8006d50:	f000 f8b2 	bl	8006eb8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006d54:	f009 fa9a 	bl	801028c <HAL_RCC_GetHCLKFreq>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <SystemClock_Config+0xec>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	099b      	lsrs	r3, r3, #6
 8006d62:	4618      	mov	r0, r3
 8006d64:	f006 faa3 	bl	800d2ae <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006d68:	2004      	movs	r0, #4
 8006d6a:	f006 faad 	bl	800d2c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2100      	movs	r1, #0
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	f006 fa62 	bl	800d23e <HAL_NVIC_SetPriority>
}
 8006d7a:	bf00      	nop
 8006d7c:	3750      	adds	r7, #80	; 0x50
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40023800 	.word	0x40023800
 8006d88:	40007000 	.word	0x40007000
 8006d8c:	080180b0 	.word	0x080180b0
 8006d90:	10624dd3 	.word	0x10624dd3

08006d94 <my_spiffs_read>:

/* USER CODE BEGIN 4 */
static s32_t my_spiffs_read(u32_t addr, u32_t size, u8_t *dst) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
    sFLASH_ReadBuffer(dst,addr,size);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f002 ff13 	bl	8009bd4 <sFLASH_ReadBuffer>
    return SPIFFS_OK;
 8006dae:	2300      	movs	r3, #0
  }
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <my_spiffs_write>:

  static s32_t my_spiffs_write(u32_t addr, u32_t size, u8_t *src) {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
	sFLASH_WriteBuffer(src,addr,size);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f002 fe57 	bl	8009a80 <sFLASH_WriteBuffer>
    return SPIFFS_OK;
 8006dd2:	2300      	movs	r3, #0
  }
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <my_spiffs_erase>:

  static s32_t my_spiffs_erase(u32_t addr, u32_t size) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]

    return sFLASH_Erase(addr, size);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 fd6b 	bl	80098c4 <sFLASH_Erase>
 8006dee:	4603      	mov	r3, r0
  }
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <my_spiffs_mount>:

void my_spiffs_mount() {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	; 0x38
 8006dfc:	af04      	add	r7, sp, #16
    spiffs_config cfg;
    cfg.phys_size = N25Q256A_FLASH_SIZE; // use all spi flash
 8006dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e02:	613b      	str	r3, [r7, #16]
    cfg.phys_addr = 0; // start spiffs at start of spi flash
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
    cfg.phys_erase_block = N25Q256A_SECTOR_SIZE; // according to datasheet
 8006e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e0c:	61bb      	str	r3, [r7, #24]
    cfg.log_block_size = N25Q256A_SECTOR_SIZE; // let us not complicate things
 8006e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e12:	61fb      	str	r3, [r7, #28]
    cfg.log_page_size = N25Q256A_PAGE_SIZE; // as we said
 8006e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e18:	623b      	str	r3, [r7, #32]

    cfg.hal_read_f = my_spiffs_read;
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <my_spiffs_mount+0x60>)
 8006e1c:	607b      	str	r3, [r7, #4]
    cfg.hal_write_f = my_spiffs_write;
 8006e1e:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <my_spiffs_mount+0x64>)
 8006e20:	60bb      	str	r3, [r7, #8]
    cfg.hal_erase_f = my_spiffs_erase;
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <my_spiffs_mount+0x68>)
 8006e24:	60fb      	str	r3, [r7, #12]

    int res = SPIFFS_mount(&fs,
 8006e26:	1d39      	adds	r1, r7, #4
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8006e30:	9302      	str	r3, [sp, #8]
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <my_spiffs_mount+0x6c>)
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <my_spiffs_mount+0x70>)
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	; (8006e6c <my_spiffs_mount+0x74>)
 8006e3e:	480c      	ldr	r0, [pc, #48]	; (8006e70 <my_spiffs_mount+0x78>)
 8006e40:	f003 f9e2 	bl	800a208 <SPIFFS_mount>
 8006e44:	6278      	str	r0, [r7, #36]	; 0x24
      spiffs_fds,
      sizeof(spiffs_fds),
      spiffs_cache_buf,
      sizeof(spiffs_cache_buf),
      0);
    printf("mount res: %i\n", res);
 8006e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e48:	480a      	ldr	r0, [pc, #40]	; (8006e74 <my_spiffs_mount+0x7c>)
 8006e4a:	f00f fec7 	bl	8016bdc <iprintf>
  }
 8006e4e:	bf00      	nop
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	08006d95 	.word	0x08006d95
 8006e5c:	08006db9 	.word	0x08006db9
 8006e60:	08006ddd 	.word	0x08006ddd
 8006e64:	200017b8 	.word	0x200017b8
 8006e68:	20001738 	.word	0x20001738
 8006e6c:	20001538 	.word	0x20001538
 8006e70:	200014b8 	.word	0x200014b8
 8006e74:	080180c4 	.word	0x080180c4

08006e78 <set_function>:

	if(IS_BUT_DOWN(BUT_JOYSTICK) && HAL_GPIO_ReadPin(Joystick_SW_GPIO_Port,Joystick_SW_Pin) == GPIO_PIN_SET )
			BUT_UP(BUT_JOYSTICK);
}

void set_function(FUNCTION fun){
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
	if(looper.Function != fun){
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <set_function+0x34>)
 8006e84:	7f5b      	ldrb	r3, [r3, #29]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	79fa      	ldrb	r2, [r7, #7]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d005      	beq.n	8006e9a <set_function+0x22>
		looper.Function = fun;
 8006e8e:	4a07      	ldr	r2, [pc, #28]	; (8006eac <set_function+0x34>)
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	7753      	strb	r3, [r2, #29]
		show_status_line = TRUE;
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <set_function+0x38>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	701a      	strb	r2, [r3, #0]
	}
	saveFunction = fun;
 8006e9a:	4a06      	ldr	r2, [pc, #24]	; (8006eb4 <set_function+0x3c>)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	7013      	strb	r3, [r2, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20001220 	.word	0x20001220
 8006eb0:	20001c3c 	.word	0x20001c3c
 8006eb4:	20001c3a 	.word	0x20001c3a

08006eb8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8006ec2:	e7fe      	b.n	8006ec2 <_Error_Handler+0xa>

08006ec4 <HAL_DACEx_ConvCpltCallbackCh2>:
static UINT bytes_written;
__IO int16_t note;
extern uint32_t sdram_pointer;
extern TM_KEYPAD_Button_t Keypad_Button;

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac){
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	need_new_data = TRUE;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	701a      	strb	r2, [r3, #0]
	play_buffer = 0;
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_DACEx_ConvCpltCallbackCh2+0x24>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
	return;
 8006ed8:	bf00      	nop
}
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20001c49 	.word	0x20001c49
 8006ee8:	20001c48 	.word	0x20001c48

08006eec <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac){
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	need_new_data = TRUE;
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_DACEx_ConvHalfCpltCallbackCh2+0x20>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	701a      	strb	r2, [r3, #0]
	play_buffer = 1;
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x24>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	701a      	strb	r2, [r3, #0]
	return;
 8006f00:	bf00      	nop
}
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20001c49 	.word	0x20001c49
 8006f10:	20001c48 	.word	0x20001c48

08006f14 <SD_readSingleTrack>:


void SD_readSingleTrack(FIL *fp){
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	6078      	str	r0, [r7, #4]

	f_read(fp,(uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8006f1c:	4b53      	ldr	r3, [pc, #332]	; (800706c <SD_readSingleTrack+0x158>)
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	4953      	ldr	r1, [pc, #332]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fe fa22 	bl	800536c <f_read>
	f_read(fp,(uint8_t *)audio_buf + WORD_SIZE,WORD_SIZE,&bytes_read);
 8006f28:	4952      	ldr	r1, [pc, #328]	; (8007074 <SD_readSingleTrack+0x160>)
 8006f2a:	4b50      	ldr	r3, [pc, #320]	; (800706c <SD_readSingleTrack+0x158>)
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe fa1c 	bl	800536c <f_read>
	signed16_unsigned12(audio_buf,0,WORD_SIZE);
 8006f34:	2280      	movs	r2, #128	; 0x80
 8006f36:	2100      	movs	r1, #0
 8006f38:	484d      	ldr	r0, [pc, #308]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006f3a:	f7fa fe7d 	bl	8001c38 <signed16_unsigned12>
	play_buffer = 0;
 8006f3e:	4b4e      	ldr	r3, [pc, #312]	; (8007078 <SD_readSingleTrack+0x164>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
	word_count = 0;
 8006f44:	4b4d      	ldr	r3, [pc, #308]	; (800707c <SD_readSingleTrack+0x168>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
	need_new_data = FALSE;
 8006f4a:	4b4d      	ldr	r3, [pc, #308]	; (8007080 <SD_readSingleTrack+0x16c>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
	while(looper.Function != PLAY_SD)	// wait for function switch
 8006f50:	e000      	b.n	8006f54 <SD_readSingleTrack+0x40>
		 continue;
 8006f52:	bf00      	nop
	while(looper.Function != PLAY_SD)	// wait for function switch
 8006f54:	4b4b      	ldr	r3, [pc, #300]	; (8007084 <SD_readSingleTrack+0x170>)
 8006f56:	7f5b      	ldrb	r3, [r3, #29]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b06      	cmp	r3, #6
 8006f5c:	d1f9      	bne.n	8006f52 <SD_readSingleTrack+0x3e>


	HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8006f5e:	2110      	movs	r1, #16
 8006f60:	4849      	ldr	r0, [pc, #292]	; (8007088 <SD_readSingleTrack+0x174>)
 8006f62:	f006 f9ef 	bl	800d344 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_buf,WORD_SIZE,DAC_ALIGN_12B_R);
 8006f66:	2300      	movs	r3, #0
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	2380      	movs	r3, #128	; 0x80
 8006f6c:	4a40      	ldr	r2, [pc, #256]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006f6e:	2110      	movs	r1, #16
 8006f70:	4845      	ldr	r0, [pc, #276]	; (8007088 <SD_readSingleTrack+0x174>)
 8006f72:	f006 fa57 	bl	800d424 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim8);
 8006f76:	4845      	ldr	r0, [pc, #276]	; (800708c <SD_readSingleTrack+0x178>)
 8006f78:	f00a fa8a 	bl	8011490 <HAL_TIM_Base_Start_IT>

	while(looper.Function == PLAY_SD){
 8006f7c:	e06a      	b.n	8007054 <SD_readSingleTrack+0x140>
		 while(need_new_data == FALSE){
			 if(looper.Function != PLAY_SD){
 8006f7e:	4b41      	ldr	r3, [pc, #260]	; (8007084 <SD_readSingleTrack+0x170>)
 8006f80:	7f5b      	ldrb	r3, [r3, #29]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d00b      	beq.n	8006fa0 <SD_readSingleTrack+0x8c>
				 HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8006f88:	2110      	movs	r1, #16
 8006f8a:	483f      	ldr	r0, [pc, #252]	; (8007088 <SD_readSingleTrack+0x174>)
 8006f8c:	f006 fb18 	bl	800d5c0 <HAL_DAC_Stop_DMA>
				 HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 8006f90:	2110      	movs	r1, #16
 8006f92:	483d      	ldr	r0, [pc, #244]	; (8007088 <SD_readSingleTrack+0x174>)
 8006f94:	f006 fa28 	bl	800d3e8 <HAL_DAC_Stop>
				 HAL_TIM_Base_Stop_IT(&htim8);
 8006f98:	483c      	ldr	r0, [pc, #240]	; (800708c <SD_readSingleTrack+0x178>)
 8006f9a:	f00a fae9 	bl	8011570 <HAL_TIM_Base_Stop_IT>
				 return;
 8006f9e:	e061      	b.n	8007064 <SD_readSingleTrack+0x150>
		 while(need_new_data == FALSE){
 8006fa0:	4b37      	ldr	r3, [pc, #220]	; (8007080 <SD_readSingleTrack+0x16c>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0e9      	beq.n	8006f7e <SD_readSingleTrack+0x6a>
			 }
		 }

		need_new_data = FALSE;
 8006faa:	4b35      	ldr	r3, [pc, #212]	; (8007080 <SD_readSingleTrack+0x16c>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
		if(play_buffer == 0)	//play_buffer indicates which buffer is now empty
 8006fb0:	4b31      	ldr	r3, [pc, #196]	; (8007078 <SD_readSingleTrack+0x164>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <SD_readSingleTrack+0xbe>
	    {
	   		f_read(fp, (uint8_t *)audio_buf + WORD_SIZE, WORD_SIZE,&bytes_read);
 8006fba:	492e      	ldr	r1, [pc, #184]	; (8007074 <SD_readSingleTrack+0x160>)
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	; (800706c <SD_readSingleTrack+0x158>)
 8006fbe:	2280      	movs	r2, #128	; 0x80
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7fe f9d3 	bl	800536c <f_read>
	   		signed16_unsigned12(audio_buf,WORD_HALF_SIZE,WORD_SIZE);
 8006fc6:	2280      	movs	r2, #128	; 0x80
 8006fc8:	2140      	movs	r1, #64	; 0x40
 8006fca:	4829      	ldr	r0, [pc, #164]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006fcc:	f7fa fe34 	bl	8001c38 <signed16_unsigned12>
 8006fd0:	e00a      	b.n	8006fe8 <SD_readSingleTrack+0xd4>
	    }
	     else
	     {
	    	 f_read(fp, (uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8006fd2:	4b26      	ldr	r3, [pc, #152]	; (800706c <SD_readSingleTrack+0x158>)
 8006fd4:	2280      	movs	r2, #128	; 0x80
 8006fd6:	4926      	ldr	r1, [pc, #152]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fe f9c7 	bl	800536c <f_read>
	    	 signed16_unsigned12(audio_buf,0,WORD_HALF_SIZE);
 8006fde:	2240      	movs	r2, #64	; 0x40
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4823      	ldr	r0, [pc, #140]	; (8007070 <SD_readSingleTrack+0x15c>)
 8006fe4:	f7fa fe28 	bl	8001c38 <signed16_unsigned12>
	     }	     	//new_buffer_ready flag tells the ISR that the buffer has been filled.
	     //If file_read returns 0 or -1 file is over. Find the next file!
	      if(bytes_read == 0)
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <SD_readSingleTrack+0x158>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d131      	bne.n	8007054 <SD_readSingleTrack+0x140>
	      {
	    	HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	4825      	ldr	r0, [pc, #148]	; (8007088 <SD_readSingleTrack+0x174>)
 8006ff4:	f006 fae4 	bl	800d5c0 <HAL_DAC_Stop_DMA>
	    	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 8006ff8:	2110      	movs	r1, #16
 8006ffa:	4823      	ldr	r0, [pc, #140]	; (8007088 <SD_readSingleTrack+0x174>)
 8006ffc:	f006 f9f4 	bl	800d3e8 <HAL_DAC_Stop>
	    	//HAL_TIM_Base_Stop(&htim8);
	    	f_lseek(fp,SEEK_SET);
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fe fe1c 	bl	8005c40 <f_lseek>
	    	f_read(fp,(uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8007008:	4b18      	ldr	r3, [pc, #96]	; (800706c <SD_readSingleTrack+0x158>)
 800700a:	2280      	movs	r2, #128	; 0x80
 800700c:	4918      	ldr	r1, [pc, #96]	; (8007070 <SD_readSingleTrack+0x15c>)
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fe f9ac 	bl	800536c <f_read>
	    	f_read(fp,(uint8_t *)audio_buf + WORD_SIZE,WORD_SIZE,&bytes_read);
 8007014:	4917      	ldr	r1, [pc, #92]	; (8007074 <SD_readSingleTrack+0x160>)
 8007016:	4b15      	ldr	r3, [pc, #84]	; (800706c <SD_readSingleTrack+0x158>)
 8007018:	2280      	movs	r2, #128	; 0x80
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe f9a6 	bl	800536c <f_read>
	    	signed16_unsigned12(audio_buf,0,WORD_SIZE);
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	2100      	movs	r1, #0
 8007024:	4812      	ldr	r0, [pc, #72]	; (8007070 <SD_readSingleTrack+0x15c>)
 8007026:	f7fa fe07 	bl	8001c38 <signed16_unsigned12>
	        need_new_data = FALSE;
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <SD_readSingleTrack+0x16c>)
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
	        word_count = 0;
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <SD_readSingleTrack+0x168>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
	        play_buffer = 0;
 8007036:	4b10      	ldr	r3, [pc, #64]	; (8007078 <SD_readSingleTrack+0x164>)
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
	        //HAL_TIM_Base_Start(&htim8);
	        HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 800703c:	2110      	movs	r1, #16
 800703e:	4812      	ldr	r0, [pc, #72]	; (8007088 <SD_readSingleTrack+0x174>)
 8007040:	f006 f980 	bl	800d344 <HAL_DAC_Start>
	        HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_buf,WORD_SIZE,DAC_ALIGN_12B_R);
 8007044:	2300      	movs	r3, #0
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <SD_readSingleTrack+0x15c>)
 800704c:	2110      	movs	r1, #16
 800704e:	480e      	ldr	r0, [pc, #56]	; (8007088 <SD_readSingleTrack+0x174>)
 8007050:	f006 f9e8 	bl	800d424 <HAL_DAC_Start_DMA>
	while(looper.Function == PLAY_SD){
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <SD_readSingleTrack+0x170>)
 8007056:	7f5b      	ldrb	r3, [r3, #29]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b06      	cmp	r3, #6
 800705c:	d0a0      	beq.n	8006fa0 <SD_readSingleTrack+0x8c>

	      }

	}
	HAL_TIM_Base_Stop_IT(&htim8);
 800705e:	480b      	ldr	r0, [pc, #44]	; (800708c <SD_readSingleTrack+0x178>)
 8007060:	f00a fa86 	bl	8011570 <HAL_TIM_Base_Stop_IT>

}
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20001d54 	.word	0x20001d54
 8007070:	20001c50 	.word	0x20001c50
 8007074:	20001cd0 	.word	0x20001cd0
 8007078:	20001c48 	.word	0x20001c48
 800707c:	20001c4c 	.word	0x20001c4c
 8007080:	20001c49 	.word	0x20001c49
 8007084:	20001220 	.word	0x20001220
 8007088:	200004d4 	.word	0x200004d4
 800708c:	20002308 	.word	0x20002308

08007090 <SD_ReadAudio>:

uint32_t SD_ReadAudio(uint32_t start,FIL *fp){
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	; 0x28
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	uint8_t *_buf;
	uint32_t samples = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
	uint32_t total_bytes_read = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
	uint32_t skip = 0,progress = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
	DWORD size_bytes = fp->fsize;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	613b      	str	r3, [r7, #16]
	fil = fp;
 80070b0:	4a46      	ldr	r2, [pc, #280]	; (80071cc <SD_ReadAudio+0x13c>)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6013      	str	r3, [r2, #0]
	_buf = (uint8_t *)malloc(8192);
 80070b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80070ba:	f00f fc89 	bl	80169d0 <malloc>
 80070be:	4603      	mov	r3, r0
 80070c0:	60bb      	str	r3, [r7, #8]
	bytes_read = 0;
 80070c2:	4b43      	ldr	r3, [pc, #268]	; (80071d0 <SD_ReadAudio+0x140>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
	sdram_pointer = start * 2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <SD_ReadAudio+0x144>)
 80070ce:	6013      	str	r3, [r2, #0]
	if((size_bytes + sdram_pointer) > SDRAM_SIZE)
 80070d0:	4b40      	ldr	r3, [pc, #256]	; (80071d4 <SD_ReadAudio+0x144>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070dc:	d902      	bls.n	80070e4 <SD_ReadAudio+0x54>
		size_bytes = SDRAM_SIZE;
 80070de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070e2:	613b      	str	r3, [r7, #16]

	while(1){
		f_read(fp,(uint8_t *)_buf,8192,&bytes_read);
 80070e4:	4b3a      	ldr	r3, [pc, #232]	; (80071d0 <SD_ReadAudio+0x140>)
 80070e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	6838      	ldr	r0, [r7, #0]
 80070ee:	f7fe f93d 	bl	800536c <f_read>
		BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t*)_buf,bytes_read / 2);
 80070f2:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <SD_ReadAudio+0x144>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 80070fa:	4b35      	ldr	r3, [pc, #212]	; (80071d0 <SD_ReadAudio+0x140>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	461a      	mov	r2, r3
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	f003 fd42 	bl	800ab8c <BSP_SDRAM_WriteData16b>
		samples += (bytes_read / looper.SampleBytes);
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <SD_ReadAudio+0x140>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b32      	ldr	r3, [pc, #200]	; (80071d8 <SD_ReadAudio+0x148>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	61fb      	str	r3, [r7, #28]
		total_bytes_read += bytes_read;
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <SD_ReadAudio+0x140>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4413      	add	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
		progress = (uint32_t)(((float)total_bytes_read / (float)size_bytes) * 256.00);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800713c:	ee16 0a90 	vmov	r0, s13
 8007140:	f7f9 fa12 	bl	8000568 <__aeabi_f2d>
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	4b24      	ldr	r3, [pc, #144]	; (80071dc <SD_ReadAudio+0x14c>)
 800714a:	f7f9 fa65 	bl	8000618 <__aeabi_dmul>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4610      	mov	r0, r2
 8007154:	4619      	mov	r1, r3
 8007156:	f7f9 fc71 	bl	8000a3c <__aeabi_d2uiz>
 800715a:	4603      	mov	r3, r0
 800715c:	60fb      	str	r3, [r7, #12]
		TM_ILI9341_DrawFilledRectangle(10 + skip,120,10 + progress,130,ILI9341_COLOR_YELLOW);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	b29b      	uxth	r3, r3
 8007162:	330a      	adds	r3, #10
 8007164:	b298      	uxth	r0, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	b29b      	uxth	r3, r3
 800716a:	330a      	adds	r3, #10
 800716c:	b29a      	uxth	r2, r3
 800716e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	2382      	movs	r3, #130	; 0x82
 8007176:	2178      	movs	r1, #120	; 0x78
 8007178:	f004 ff58 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
		skip = progress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	617b      	str	r3, [r7, #20]
		sdram_pointer += bytes_read;
 8007180:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <SD_ReadAudio+0x144>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <SD_ReadAudio+0x140>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4413      	add	r3, r2
 800718a:	4a12      	ldr	r2, [pc, #72]	; (80071d4 <SD_ReadAudio+0x144>)
 800718c:	6013      	str	r3, [r2, #0]
		if(f_eof(fp))
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	429a      	cmp	r2, r3
 8007198:	d000      	beq.n	800719c <SD_ReadAudio+0x10c>
		f_read(fp,(uint8_t *)_buf,8192,&bytes_read);
 800719a:	e7a3      	b.n	80070e4 <SD_ReadAudio+0x54>
			break;
 800719c:	bf00      	nop
	}
	TM_ILI9341_DrawFilledRectangle(10 + skip,120,10 + progress,130,ILI9341_COLOR_YELLOW);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	330a      	adds	r3, #10
 80071a4:	b298      	uxth	r0, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	330a      	adds	r3, #10
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2382      	movs	r3, #130	; 0x82
 80071b6:	2178      	movs	r1, #120	; 0x78
 80071b8:	f004 ff38 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
	free(_buf);
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f00f fc0f 	bl	80169e0 <free>
	return samples;
 80071c2:	69fb      	ldr	r3, [r7, #28]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20001d50 	.word	0x20001d50
 80071d0:	20001d54 	.word	0x20001d54
 80071d4:	200004bc 	.word	0x200004bc
 80071d8:	20001220 	.word	0x20001220
 80071dc:	40700000 	.word	0x40700000

080071e0 <SD_WriteAudio>:


void SD_WriteAudio(uint32_t start,uint32_t end,FIL *fp){
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
	uint8_t *_buf;
	uint32_t bytesRemaining = (end - start) * 2;
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
	_buf = (uint8_t *)malloc(8192);
 80071f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80071fa:	f00f fbe9 	bl	80169d0 <malloc>
 80071fe:	4603      	mov	r3, r0
 8007200:	613b      	str	r3, [r7, #16]
	bytes_written = 0;
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <SD_WriteAudio+0xb0>)
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
	sdram_pointer = start * 2;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4a21      	ldr	r2, [pc, #132]	; (8007294 <SD_WriteAudio+0xb4>)
 800720e:	6013      	str	r3, [r2, #0]
	f_truncate(fp);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fe fefc 	bl	800600e <f_truncate>
	while(bytesRemaining > 0){
 8007216:	e031      	b.n	800727c <SD_WriteAudio+0x9c>
		if(bytesRemaining >= 8192){
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721e:	d311      	bcc.n	8007244 <SD_WriteAudio+0x64>
			BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t *) _buf, 4096);
 8007220:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <SD_WriteAudio+0xb4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8007228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800722c:	6939      	ldr	r1, [r7, #16]
 800722e:	4618      	mov	r0, r3
 8007230:	f003 fc9a 	bl	800ab68 <BSP_SDRAM_ReadData16b>
			f_write(fp,_buf,8192,&bytes_written);
 8007234:	4b16      	ldr	r3, [pc, #88]	; (8007290 <SD_WriteAudio+0xb0>)
 8007236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800723a:	6939      	ldr	r1, [r7, #16]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fe f9cc 	bl	80055da <f_write>
 8007242:	e00f      	b.n	8007264 <SD_WriteAudio+0x84>
		}
		else{
			BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t *) _buf, bytesRemaining / 2);
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <SD_WriteAudio+0xb4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	461a      	mov	r2, r3
 8007252:	6939      	ldr	r1, [r7, #16]
 8007254:	f003 fc88 	bl	800ab68 <BSP_SDRAM_ReadData16b>
			f_write(fp,_buf,bytesRemaining,&bytes_written);
 8007258:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <SD_WriteAudio+0xb0>)
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	6939      	ldr	r1, [r7, #16]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fe f9bb 	bl	80055da <f_write>
		}
		bytesRemaining -= bytes_written;
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <SD_WriteAudio+0xb0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]
		sdram_pointer += bytes_written;
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <SD_WriteAudio+0xb4>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <SD_WriteAudio+0xb0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4413      	add	r3, r2
 8007278:	4a06      	ldr	r2, [pc, #24]	; (8007294 <SD_WriteAudio+0xb4>)
 800727a:	6013      	str	r3, [r2, #0]
	while(bytesRemaining > 0){
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1ca      	bne.n	8007218 <SD_WriteAudio+0x38>
	}


	free(_buf);
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f00f fbac 	bl	80169e0 <free>

}
 8007288:	bf00      	nop
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20001d58 	.word	0x20001d58
 8007294:	200004bc 	.word	0x200004bc

08007298 <checkSD>:

void checkSD(){
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(uSD_CD_GPIO_Port,uSD_CD_Pin) == GPIO_PIN_RESET){
 800729c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072a0:	4819      	ldr	r0, [pc, #100]	; (8007308 <checkSD+0x70>)
 80072a2:	f007 f8a3 	bl	800e3ec <HAL_GPIO_ReadPin>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11a      	bne.n	80072e2 <checkSD+0x4a>
		  if(fs_mounted == FALSE){
 80072ac:	4b17      	ldr	r3, [pc, #92]	; (800730c <checkSD+0x74>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d127      	bne.n	8007304 <checkSD+0x6c>
			  if (f_mount(&FatFs, "", 1) != FR_OK){
 80072b4:	2201      	movs	r2, #1
 80072b6:	4916      	ldr	r1, [pc, #88]	; (8007310 <checkSD+0x78>)
 80072b8:	4816      	ldr	r0, [pc, #88]	; (8007314 <checkSD+0x7c>)
 80072ba:	f7fd fed3 	bl	8005064 <f_mount>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <checkSD+0x38>
				  TM_HD44780_Puts(0,1,"SD card error   ");//
 80072c4:	4a14      	ldr	r2, [pc, #80]	; (8007318 <checkSD+0x80>)
 80072c6:	2101      	movs	r1, #1
 80072c8:	2000      	movs	r0, #0
 80072ca:	f004 f945 	bl	800b558 <TM_HD44780_Puts>
		  if(fs_mounted == TRUE){
			  f_mount(0, "", 1);
			  fs_mounted = FALSE;
		  }
	  }
}
 80072ce:	e019      	b.n	8007304 <checkSD+0x6c>
				fs_mounted = TRUE;
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <checkSD+0x74>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
				TM_HD44780_Puts(0,1,"SD card ready  ");
 80072d6:	4a11      	ldr	r2, [pc, #68]	; (800731c <checkSD+0x84>)
 80072d8:	2101      	movs	r1, #1
 80072da:	2000      	movs	r0, #0
 80072dc:	f004 f93c 	bl	800b558 <TM_HD44780_Puts>
}
 80072e0:	e010      	b.n	8007304 <checkSD+0x6c>
		  TM_HD44780_Puts(0,1,"SD card removed");
 80072e2:	4a0f      	ldr	r2, [pc, #60]	; (8007320 <checkSD+0x88>)
 80072e4:	2101      	movs	r1, #1
 80072e6:	2000      	movs	r0, #0
 80072e8:	f004 f936 	bl	800b558 <TM_HD44780_Puts>
		  if(fs_mounted == TRUE){
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <checkSD+0x74>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d107      	bne.n	8007304 <checkSD+0x6c>
			  f_mount(0, "", 1);
 80072f4:	2201      	movs	r2, #1
 80072f6:	4906      	ldr	r1, [pc, #24]	; (8007310 <checkSD+0x78>)
 80072f8:	2000      	movs	r0, #0
 80072fa:	f7fd feb3 	bl	8005064 <f_mount>
			  fs_mounted = FALSE;
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <checkSD+0x74>)
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40021800 	.word	0x40021800
 800730c:	20001c38 	.word	0x20001c38
 8007310:	080180d4 	.word	0x080180d4
 8007314:	20001284 	.word	0x20001284
 8007318:	080180d8 	.word	0x080180d8
 800731c:	080180ec 	.word	0x080180ec
 8007320:	080180fc 	.word	0x080180fc

08007324 <SRAM_download_rhythm>:

uint32_t SRAM_download_rhythm(void){
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af02      	add	r7, sp, #8
	BOOL header_received = FALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	71fb      	strb	r3, [r7, #7]
	uint32_t bytes_total = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	603b      	str	r3, [r7, #0]
	bytes_written = 0;
 8007332:	4b53      	ldr	r3, [pc, #332]	; (8007480 <SRAM_download_rhythm+0x15c>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
	UserWritePtr = 0;
 8007338:	4b52      	ldr	r3, [pc, #328]	; (8007484 <SRAM_download_rhythm+0x160>)
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
	UserReadPtr = 0;
 800733e:	4b52      	ldr	r3, [pc, #328]	; (8007488 <SRAM_download_rhythm+0x164>)
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Puts(0, 1, "Download ready ");
 8007344:	4a51      	ldr	r2, [pc, #324]	; (800748c <SRAM_download_rhythm+0x168>)
 8007346:	2101      	movs	r1, #1
 8007348:	2000      	movs	r0, #0
 800734a:	f004 f905 	bl	800b558 <TM_HD44780_Puts>
	SRAM_seekWrite(0, SRAM_SET);
 800734e:	2100      	movs	r1, #0
 8007350:	2000      	movs	r0, #0
 8007352:	f7f9 fd7d 	bl	8000e50 <SRAM_seekWrite>
	BSP_LED_On(LED_GREEN);
 8007356:	2000      	movs	r0, #0
 8007358:	f003 face 	bl	800a8f8 <BSP_LED_On>
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_0) {
 800735c:	e057      	b.n	800740e <SRAM_download_rhythm+0xea>
		if (usbRecv == TRUE) {
 800735e:	4b4c      	ldr	r3, [pc, #304]	; (8007490 <SRAM_download_rhythm+0x16c>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d152      	bne.n	800740e <SRAM_download_rhythm+0xea>
			if(header_received == FALSE){
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <SRAM_download_rhythm+0x5e>
				bytes_total = *((uint32_t *)&UserWorkBufferHS[0]);	// read first int: number of bytes
 800736e:	4b49      	ldr	r3, [pc, #292]	; (8007494 <SRAM_download_rhythm+0x170>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	603b      	str	r3, [r7, #0]
				header_received = TRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	71fb      	strb	r3, [r7, #7]
				TM_HD44780_Puts(0, 1, "Download started");
 8007378:	4a47      	ldr	r2, [pc, #284]	; (8007498 <SRAM_download_rhythm+0x174>)
 800737a:	2101      	movs	r1, #1
 800737c:	2000      	movs	r0, #0
 800737e:	f004 f8eb 	bl	800b558 <TM_HD44780_Puts>
			}

			usbRecv = FALSE;
 8007382:	4b43      	ldr	r3, [pc, #268]	; (8007490 <SRAM_download_rhythm+0x16c>)
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
			if(strncmp((char *)&UserWorkBufferHS[UserReadPtr],"STOP",4) == 0)
 8007388:	4b3f      	ldr	r3, [pc, #252]	; (8007488 <SRAM_download_rhythm+0x164>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	4b41      	ldr	r3, [pc, #260]	; (8007494 <SRAM_download_rhythm+0x170>)
 8007390:	4413      	add	r3, r2
 8007392:	2204      	movs	r2, #4
 8007394:	4941      	ldr	r1, [pc, #260]	; (800749c <SRAM_download_rhythm+0x178>)
 8007396:	4618      	mov	r0, r3
 8007398:	f00f fc7f 	bl	8016c9a <strncmp>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d040      	beq.n	8007424 <SRAM_download_rhythm+0x100>
				break;
			writeSRAM(&UserWorkBufferHS[UserReadPtr], usbBytes);
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <SRAM_download_rhythm+0x164>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	4b3a      	ldr	r3, [pc, #232]	; (8007494 <SRAM_download_rhythm+0x170>)
 80073aa:	4413      	add	r3, r2
 80073ac:	4a3c      	ldr	r2, [pc, #240]	; (80074a0 <SRAM_download_rhythm+0x17c>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 fde4 	bl	8000f80 <writeSRAM>
			bytes_written += usbBytes;
 80073b8:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <SRAM_download_rhythm+0x17c>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b30      	ldr	r3, [pc, #192]	; (8007480 <SRAM_download_rhythm+0x15c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4413      	add	r3, r2
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <SRAM_download_rhythm+0x15c>)
 80073c4:	6013      	str	r3, [r2, #0]
			sprintf(lcdline,"%u/%u",(unsigned int)bytes_written,(unsigned int)bytes_total);
 80073c6:	4b2e      	ldr	r3, [pc, #184]	; (8007480 <SRAM_download_rhythm+0x15c>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	4935      	ldr	r1, [pc, #212]	; (80074a4 <SRAM_download_rhythm+0x180>)
 80073ce:	4836      	ldr	r0, [pc, #216]	; (80074a8 <SRAM_download_rhythm+0x184>)
 80073d0:	f00f fc2c 	bl	8016c2c <siprintf>
			TM_ILI9341_Puts(10, 80, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 80073d4:	f240 531d 	movw	r3, #1309	; 0x51d
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	2300      	movs	r3, #0
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4b33      	ldr	r3, [pc, #204]	; (80074ac <SRAM_download_rhythm+0x188>)
 80073e0:	4a31      	ldr	r2, [pc, #196]	; (80074a8 <SRAM_download_rhythm+0x184>)
 80073e2:	2150      	movs	r1, #80	; 0x50
 80073e4:	200a      	movs	r0, #10
 80073e6:	f004 fd37 	bl	800be58 <TM_ILI9341_Puts>
			if(bytes_written >= bytes_total)
 80073ea:	4b25      	ldr	r3, [pc, #148]	; (8007480 <SRAM_download_rhythm+0x15c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d919      	bls.n	8007428 <SRAM_download_rhythm+0x104>
				break;
			UserReadPtr += 64;
 80073f4:	4b24      	ldr	r3, [pc, #144]	; (8007488 <SRAM_download_rhythm+0x164>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	3340      	adds	r3, #64	; 0x40
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	4b22      	ldr	r3, [pc, #136]	; (8007488 <SRAM_download_rhythm+0x164>)
 80073fe:	701a      	strb	r2, [r3, #0]
			if (UserReadPtr == 128)
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <SRAM_download_rhythm+0x164>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b80      	cmp	r3, #128	; 0x80
 8007406:	d102      	bne.n	800740e <SRAM_download_rhythm+0xea>
				UserReadPtr = 0;
 8007408:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <SRAM_download_rhythm+0x164>)
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_0) {
 800740e:	f004 fe5d 	bl	800c0cc <TM_KEYPAD_Read>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <SRAM_download_rhythm+0x18c>)
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <SRAM_download_rhythm+0x18c>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d19d      	bne.n	800735e <SRAM_download_rhythm+0x3a>
 8007422:	e002      	b.n	800742a <SRAM_download_rhythm+0x106>
				break;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <SRAM_download_rhythm+0x106>
				break;
 8007428:	bf00      	nop

		}
	}

	BSP_LED_Off(LED_GREEN);
 800742a:	2000      	movs	r0, #0
 800742c:	f003 fa7e 	bl	800a92c <BSP_LED_Off>
	utoa(bytes_written, lcdline, 10);
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <SRAM_download_rhythm+0x15c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	220a      	movs	r2, #10
 8007436:	491c      	ldr	r1, [pc, #112]	; (80074a8 <SRAM_download_rhythm+0x184>)
 8007438:	4618      	mov	r0, r3
 800743a:	f00f fc85 	bl	8016d48 <utoa>
	if(bytes_written == bytes_total)
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <SRAM_download_rhythm+0x15c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d105      	bne.n	8007454 <SRAM_download_rhythm+0x130>
		TM_HD44780_Puts(0, 1, "Download OK     ");
 8007448:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <SRAM_download_rhythm+0x190>)
 800744a:	2101      	movs	r1, #1
 800744c:	2000      	movs	r0, #0
 800744e:	f004 f883 	bl	800b558 <TM_HD44780_Puts>
 8007452:	e004      	b.n	800745e <SRAM_download_rhythm+0x13a>
	else
		TM_HD44780_Puts(0, 1, "Download error  ");
 8007454:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <SRAM_download_rhythm+0x194>)
 8007456:	2101      	movs	r1, #1
 8007458:	2000      	movs	r0, #0
 800745a:	f004 f87d 	bl	800b558 <TM_HD44780_Puts>

	if(bytes_total != 0 && bytes_written != bytes_total)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <SRAM_download_rhythm+0x14e>
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <SRAM_download_rhythm+0x15c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d001      	beq.n	8007472 <SRAM_download_rhythm+0x14e>
		return 0;
 800746e:	2300      	movs	r3, #0
 8007470:	e001      	b.n	8007476 <SRAM_download_rhythm+0x152>
	else
		return bytes_written;
 8007472:	4b03      	ldr	r3, [pc, #12]	; (8007480 <SRAM_download_rhythm+0x15c>)
 8007474:	681b      	ldr	r3, [r3, #0]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001d58 	.word	0x20001d58
 8007484:	200028dd 	.word	0x200028dd
 8007488:	200028dc 	.word	0x200028dc
 800748c:	0801810c 	.word	0x0801810c
 8007490:	200028d4 	.word	0x200028d4
 8007494:	200027d4 	.word	0x200027d4
 8007498:	0801811c 	.word	0x0801811c
 800749c:	08018130 	.word	0x08018130
 80074a0:	200028d8 	.word	0x200028d8
 80074a4:	08018138 	.word	0x08018138
 80074a8:	20001264 	.word	0x20001264
 80074ac:	200001e0 	.word	0x200001e0
 80074b0:	20001c39 	.word	0x20001c39
 80074b4:	08018140 	.word	0x08018140
 80074b8:	08018154 	.word	0x08018154

080074bc <readLoopFromSD>:

void readLoopFromSD(uint32_t n,char *filename){
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80074c8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80074cc:	6018      	str	r0, [r3, #0]
 80074ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80074d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80074d6:	6019      	str	r1, [r3, #0]

	FIL fil;
	if(filename[0] == '\0')
 80074d8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80074dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d04b      	beq.n	8007580 <readLoopFromSD+0xc4>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 80074e8:	2001      	movs	r0, #1
 80074ea:	f003 fa05 	bl	800a8f8 <BSP_LED_On>

	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 80074ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80074f2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80074f6:	f107 000c 	add.w	r0, r7, #12
 80074fa:	2211      	movs	r2, #17
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	f7fd fdf5 	bl	80050ec <f_open>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d137      	bne.n	8007578 <readLoopFromSD+0xbc>
		pattern_audio_map[n + 1].sample_position = pattern_audio_map[n].sample_position + SD_ReadAudio(pattern_audio_map[n].sample_position,&fil);
 8007508:	4920      	ldr	r1, [pc, #128]	; (800758c <readLoopFromSD+0xd0>)
 800750a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800750e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	3304      	adds	r3, #4
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	491a      	ldr	r1, [pc, #104]	; (800758c <readLoopFromSD+0xd0>)
 8007524:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007528:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3304      	adds	r3, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f107 020c 	add.w	r2, r7, #12
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fda4 	bl	8007090 <SD_ReadAudio>
 8007548:	4601      	mov	r1, r0
 800754a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800754e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	4421      	add	r1, r4
 8007558:	480c      	ldr	r0, [pc, #48]	; (800758c <readLoopFromSD+0xd0>)
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4403      	add	r3, r0
 8007564:	3304      	adds	r3, #4
 8007566:	6019      	str	r1, [r3, #0]
		f_close(&fil);
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fa48 	bl	8005a02 <f_close>
		BSP_LED_Off(LED_GREEN);
 8007572:	2000      	movs	r0, #0
 8007574:	f003 f9da 	bl	800a92c <BSP_LED_Off>
		//Unmount drive, don't forget this!

	}

	BSP_LED_Off(LED_RED);
 8007578:	2001      	movs	r0, #1
 800757a:	f003 f9d7 	bl	800a92c <BSP_LED_Off>

	return;
 800757e:	e000      	b.n	8007582 <readLoopFromSD+0xc6>
		return;
 8007580:	bf00      	nop

}
 8007582:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}
 800758a:	bf00      	nop
 800758c:	20000560 	.word	0x20000560

08007590 <readRhythmFromSD>:

void readRhythmFromSD(char *filename){
 8007590:	b580      	push	{r7, lr}
 8007592:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8007596:	af00      	add	r7, sp, #0
 8007598:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800759c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80075a0:	6018      	str	r0, [r3, #0]

	FIL fil;
	if(filename[0] == '\0')
 80075a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80075a6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d03b      	beq.n	800762a <readRhythmFromSD+0x9a>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 80075b2:	2001      	movs	r0, #1
 80075b4:	f003 f9a0 	bl	800a8f8 <BSP_LED_On>
	SRAM_seekWrite(0,SRAM_SET);
 80075b8:	2100      	movs	r1, #0
 80075ba:	2000      	movs	r0, #0
 80075bc:	f7f9 fc48 	bl	8000e50 <SRAM_seekWrite>
	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 80075c0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80075c4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80075c8:	f107 000c 	add.w	r0, r7, #12
 80075cc:	2211      	movs	r2, #17
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	f7fd fd8c 	bl	80050ec <f_open>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d123      	bne.n	8007622 <readRhythmFromSD+0x92>
		while(1){
			f_read(&fil,(uint8_t *)audio_buf,BYTE_SIZE,&bytes_read);
 80075da:	f107 000c 	add.w	r0, r7, #12
 80075de:	4b15      	ldr	r3, [pc, #84]	; (8007634 <readRhythmFromSD+0xa4>)
 80075e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075e4:	4914      	ldr	r1, [pc, #80]	; (8007638 <readRhythmFromSD+0xa8>)
 80075e6:	f7fd fec1 	bl	800536c <f_read>
			writeSRAM((unsigned char *)audio_buf,bytes_read);
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <readRhythmFromSD+0xa4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	4811      	ldr	r0, [pc, #68]	; (8007638 <readRhythmFromSD+0xa8>)
 80075f2:	f7f9 fcc5 	bl	8000f80 <writeSRAM>
			if(f_eof(&fil))
 80075f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80075fa:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007604:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	429a      	cmp	r2, r3
 800760c:	d000      	beq.n	8007610 <readRhythmFromSD+0x80>
			f_read(&fil,(uint8_t *)audio_buf,BYTE_SIZE,&bytes_read);
 800760e:	e7e4      	b.n	80075da <readRhythmFromSD+0x4a>
				break;
 8007610:	bf00      	nop
		}
		f_close(&fil);
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe f9f3 	bl	8005a02 <f_close>
		BSP_LED_Off(LED_GREEN);
 800761c:	2000      	movs	r0, #0
 800761e:	f003 f985 	bl	800a92c <BSP_LED_Off>
		//Unmount drive, don't forget this!

	}

	BSP_LED_Off(LED_RED);
 8007622:	2001      	movs	r0, #1
 8007624:	f003 f982 	bl	800a92c <BSP_LED_Off>

	return;
 8007628:	e000      	b.n	800762c <readRhythmFromSD+0x9c>
		return;
 800762a:	bf00      	nop

}
 800762c:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20001d54 	.word	0x20001d54
 8007638:	20001c50 	.word	0x20001c50

0800763c <writeSRAMtoSD>:

void writeSRAMtoSD(uint32_t bts,char *filename){
 800763c:	b580      	push	{r7, lr}
 800763e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8007642:	af00      	add	r7, sp, #0
 8007644:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007648:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800764c:	6018      	str	r0, [r3, #0]
 800764e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007652:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007656:	6019      	str	r1, [r3, #0]
	FIL fil;
	bytes_written = 0;
 8007658:	4b38      	ldr	r3, [pc, #224]	; (800773c <writeSRAMtoSD+0x100>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
	if(filename[0] == '\0')
 800765e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007662:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d060      	beq.n	8007730 <writeSRAMtoSD+0xf4>
		return;

	if(f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 800766e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007672:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007676:	f107 000c 	add.w	r0, r7, #12
 800767a:	2212      	movs	r2, #18
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	f7fd fd35 	bl	80050ec <f_open>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d154      	bne.n	8007732 <writeSRAMtoSD+0xf6>
		BSP_LED_On(LED_RED);
 8007688:	2001      	movs	r0, #1
 800768a:	f003 f935 	bl	800a8f8 <BSP_LED_On>
		BSP_LED_On(LED_GREEN);
 800768e:	2000      	movs	r0, #0
 8007690:	f003 f932 	bl	800a8f8 <BSP_LED_On>
		SRAM_seekRead(0,SRAM_SET);
 8007694:	2100      	movs	r1, #0
 8007696:	2000      	movs	r0, #0
 8007698:	f7f9 fbae 	bl	8000df8 <SRAM_seekRead>
		while(bts > 0){
 800769c:	e035      	b.n	800770a <writeSRAMtoSD+0xce>
			if(bts > BYTE_SIZE){
 800769e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80076a2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ac:	d90d      	bls.n	80076ca <writeSRAMtoSD+0x8e>
				readSRAM((unsigned char *)audio_buf,BYTE_SIZE);
 80076ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076b2:	4823      	ldr	r0, [pc, #140]	; (8007740 <writeSRAMtoSD+0x104>)
 80076b4:	f7f9 fcfa 	bl	80010ac <readSRAM>
				f_write(&fil,audio_buf,BYTE_SIZE,&bytes_written);
 80076b8:	f107 000c 	add.w	r0, r7, #12
 80076bc:	4b1f      	ldr	r3, [pc, #124]	; (800773c <writeSRAMtoSD+0x100>)
 80076be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c2:	491f      	ldr	r1, [pc, #124]	; (8007740 <writeSRAMtoSD+0x104>)
 80076c4:	f7fd ff89 	bl	80055da <f_write>
 80076c8:	e012      	b.n	80076f0 <writeSRAMtoSD+0xb4>
			}
			else{
				readSRAM((unsigned char *)audio_buf,bts);
 80076ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80076ce:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	481a      	ldr	r0, [pc, #104]	; (8007740 <writeSRAMtoSD+0x104>)
 80076d6:	f7f9 fce9 	bl	80010ac <readSRAM>
				f_write(&fil,audio_buf,bts,&bytes_written);
 80076da:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80076de:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80076e2:	f107 000c 	add.w	r0, r7, #12
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <writeSRAMtoSD+0x100>)
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	4915      	ldr	r1, [pc, #84]	; (8007740 <writeSRAMtoSD+0x104>)
 80076ec:	f7fd ff75 	bl	80055da <f_write>
			}

			bts -= bytes_written;
 80076f0:	4b12      	ldr	r3, [pc, #72]	; (800773c <writeSRAMtoSD+0x100>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80076f8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80076fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007700:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8007704:	6809      	ldr	r1, [r1, #0]
 8007706:	1a8a      	subs	r2, r1, r2
 8007708:	601a      	str	r2, [r3, #0]
		while(bts > 0){
 800770a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800770e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1c2      	bne.n	800769e <writeSRAMtoSD+0x62>
		}

		f_close(&fil);
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe f970 	bl	8005a02 <f_close>
		BSP_LED_Off(LED_GREEN);
 8007722:	2000      	movs	r0, #0
 8007724:	f003 f902 	bl	800a92c <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8007728:	2001      	movs	r0, #1
 800772a:	f003 f8ff 	bl	800a92c <BSP_LED_Off>
 800772e:	e000      	b.n	8007732 <writeSRAMtoSD+0xf6>
		return;
 8007730:	bf00      	nop
	}
}
 8007732:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20001d58 	.word	0x20001d58
 8007740:	20001c50 	.word	0x20001c50

08007744 <saveAllLoopsToSD>:

void saveAllLoopsToSD(char *filename){
 8007744:	b580      	push	{r7, lr}
 8007746:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800774a:	af00      	add	r7, sp, #0
 800774c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007750:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007754:	6018      	str	r0, [r3, #0]
	FIL fil;
		if(filename[0] == '\0')
 8007756:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800775a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d035      	beq.n	80077d2 <saveAllLoopsToSD+0x8e>
			return;
		//Mounted OK, turn on RED LED
		BSP_LED_On(LED_RED);
 8007766:	2001      	movs	r0, #1
 8007768:	f003 f8c6 	bl	800a8f8 <BSP_LED_On>
		if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 800776c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007770:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007774:	f107 000c 	add.w	r0, r7, #12
 8007778:	2212      	movs	r2, #18
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	f7fd fcb6 	bl	80050ec <f_open>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d127      	bne.n	80077d6 <saveAllLoopsToSD+0x92>
			SD_WriteAudio(pattern_audio_map[looper.StartPattern].sample_position,pattern_audio_map[looper.EndPattern + 1].sample_position,&fil);
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <saveAllLoopsToSD+0x9c>)
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	4916      	ldr	r1, [pc, #88]	; (80077e4 <saveAllLoopsToSD+0xa0>)
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3304      	adds	r3, #4
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <saveAllLoopsToSD+0x9c>)
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	4910      	ldr	r1, [pc, #64]	; (80077e4 <saveAllLoopsToSD+0xa0>)
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	3304      	adds	r3, #4
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f107 020c 	add.w	r2, r7, #12
 80077b4:	4619      	mov	r1, r3
 80077b6:	f7ff fd13 	bl	80071e0 <SD_WriteAudio>
			f_close(&fil);
 80077ba:	f107 030c 	add.w	r3, r7, #12
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe f91f 	bl	8005a02 <f_close>
			BSP_LED_Off(LED_GREEN);
 80077c4:	2000      	movs	r0, #0
 80077c6:	f003 f8b1 	bl	800a92c <BSP_LED_Off>
			BSP_LED_Off(LED_RED);
 80077ca:	2001      	movs	r0, #1
 80077cc:	f003 f8ae 	bl	800a92c <BSP_LED_Off>
		}

		return;
 80077d0:	e001      	b.n	80077d6 <saveAllLoopsToSD+0x92>
			return;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <saveAllLoopsToSD+0x94>
		return;
 80077d6:	bf00      	nop

}
 80077d8:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20001220 	.word	0x20001220
 80077e4:	20000560 	.word	0x20000560

080077e8 <saveLoopToSD>:

void saveLoopToSD(uint32_t n,char *filename){
 80077e8:	b580      	push	{r7, lr}
 80077ea:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80077f4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80077f8:	6018      	str	r0, [r3, #0]
 80077fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80077fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007802:	6019      	str	r1, [r3, #0]
	FIL fil;
	if(filename[0] == '\0')
 8007804:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007808:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03b      	beq.n	800788c <saveLoopToSD+0xa4>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 8007814:	2001      	movs	r0, #1
 8007816:	f003 f86f 	bl	800a8f8 <BSP_LED_On>
	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 800781a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800781e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007822:	f107 000c 	add.w	r0, r7, #12
 8007826:	2212      	movs	r2, #18
 8007828:	6819      	ldr	r1, [r3, #0]
 800782a:	f7fd fc5f 	bl	80050ec <f_open>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d12d      	bne.n	8007890 <saveLoopToSD+0xa8>
		SD_WriteAudio(pattern_audio_map[n].sample_position,pattern_audio_map[n + 1].sample_position,&fil);
 8007834:	4919      	ldr	r1, [pc, #100]	; (800789c <saveLoopToSD+0xb4>)
 8007836:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800783a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3304      	adds	r3, #4
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8007852:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	4910      	ldr	r1, [pc, #64]	; (800789c <saveLoopToSD+0xb4>)
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	3304      	adds	r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f107 020c 	add.w	r2, r7, #12
 800786e:	4619      	mov	r1, r3
 8007870:	f7ff fcb6 	bl	80071e0 <SD_WriteAudio>
		f_close(&fil);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe f8c2 	bl	8005a02 <f_close>
		BSP_LED_Off(LED_GREEN);
 800787e:	2000      	movs	r0, #0
 8007880:	f003 f854 	bl	800a92c <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8007884:	2001      	movs	r0, #1
 8007886:	f003 f851 	bl	800a92c <BSP_LED_Off>
	}

	return;
 800788a:	e001      	b.n	8007890 <saveLoopToSD+0xa8>
		return;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <saveLoopToSD+0xaa>
	return;
 8007890:	bf00      	nop
}
 8007892:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000560 	.word	0x20000560

080078a0 <menuShowOptions>:
static char filename[13];
static menuNodeType menu_nodes[TOTAL_MENU_NODES];
static uint8_t current_node_index;	// current option
extern TM_KEYPAD_Button_t Keypad_Button;

void menuShowOptions(){
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
	TM_KEYPAD_Button_t option_index;
	NODE_TYPE node_index;
	uint16_t offset = 10;
 80078a6:	230a      	movs	r3, #10
 80078a8:	81bb      	strh	r3, [r7, #12]
	char *tit;

	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 80078aa:	f24a 2054 	movw	r0, #41556	; 0xa254
 80078ae:	f004 f9cf 	bl	800bc50 <TM_ILI9341_Fill>

	for(option_index = TM_KEYPAD_Button_0; option_index < MAX_NUM_OPTS; option_index++){
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	e045      	b.n	8007944 <menuShowOptions+0xa4>
		node_index = menu_nodes[current_node_index].options[option_index];
 80078b8:	4b26      	ldr	r3, [pc, #152]	; (8007954 <menuShowOptions+0xb4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	7bfa      	ldrb	r2, [r7, #15]
 80078c0:	4925      	ldr	r1, [pc, #148]	; (8007958 <menuShowOptions+0xb8>)
 80078c2:	4603      	mov	r3, r0
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	1a1b      	subs	r3, r3, r0
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
		if(node_index == NODE_EMPTY)
 80078d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d02e      	beq.n	800793c <menuShowOptions+0x9c>
			continue;
		if(option_index == TM_KEYPAD_Button_0)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <menuShowOptions+0x4a>
			tit = "Go back";
 80078e4:	4b1d      	ldr	r3, [pc, #116]	; (800795c <menuShowOptions+0xbc>)
 80078e6:	60bb      	str	r3, [r7, #8]
 80078e8:	e009      	b.n	80078fe <menuShowOptions+0x5e>
		else
			tit = menu_nodes[node_index].title;
 80078ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80078ee:	491a      	ldr	r1, [pc, #104]	; (8007958 <menuShowOptions+0xb8>)
 80078f0:	4613      	mov	r3, r2
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60bb      	str	r3, [r7, #8]

		sprintf(lcdline,"[%c] %s",TM_KEYPAD_GetChar(option_index),tit);
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	4618      	mov	r0, r3
 8007902:	f004 fbd3 	bl	800c0ac <TM_KEYPAD_GetChar>
 8007906:	4603      	mov	r3, r0
 8007908:	461a      	mov	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4914      	ldr	r1, [pc, #80]	; (8007960 <menuShowOptions+0xc0>)
 800790e:	4815      	ldr	r0, [pc, #84]	; (8007964 <menuShowOptions+0xc4>)
 8007910:	f00f f98c 	bl	8016c2c <siprintf>
		TM_ILI9341_Puts(option_index == TM_KEYPAD_Button_0?10:30, offset, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <menuShowOptions+0x7e>
 800791a:	200a      	movs	r0, #10
 800791c:	e000      	b.n	8007920 <menuShowOptions+0x80>
 800791e:	201e      	movs	r0, #30
 8007920:	89b9      	ldrh	r1, [r7, #12]
 8007922:	f240 531d 	movw	r3, #1309	; 0x51d
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	2300      	movs	r3, #0
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <menuShowOptions+0xc8>)
 800792e:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <menuShowOptions+0xc4>)
 8007930:	f004 fa92 	bl	800be58 <TM_ILI9341_Puts>
		offset += 20;
 8007934:	89bb      	ldrh	r3, [r7, #12]
 8007936:	3314      	adds	r3, #20
 8007938:	81bb      	strh	r3, [r7, #12]
 800793a:	e000      	b.n	800793e <menuShowOptions+0x9e>
			continue;
 800793c:	bf00      	nop
	for(option_index = TM_KEYPAD_Button_0; option_index < MAX_NUM_OPTS; option_index++){
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	3301      	adds	r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b0f      	cmp	r3, #15
 8007948:	d9b6      	bls.n	80078b8 <menuShowOptions+0x18>
	}

}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20001f9c 	.word	0x20001f9c
 8007958:	20001d6c 	.word	0x20001d6c
 800795c:	08018168 	.word	0x08018168
 8007960:	08018170 	.word	0x08018170
 8007964:	20001264 	.word	0x20001264
 8007968:	200001e0 	.word	0x200001e0

0800796c <initParentNode>:
/**
 * which node,number of options,title,return node
 */
static void initParentNode(uint8_t node_index,char * tit,void (*fun)()){
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	73fb      	strb	r3, [r7, #15]
	if(node_index >= TOTAL_MENU_NODES)
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b13      	cmp	r3, #19
 800797e:	d81f      	bhi.n	80079c0 <initParentNode+0x54>
		return;
	menu_nodes[node_index].title = tit;
 8007980:	7bfa      	ldrb	r2, [r7, #15]
 8007982:	4912      	ldr	r1, [pc, #72]	; (80079cc <initParentNode+0x60>)
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	601a      	str	r2, [r3, #0]
	menu_nodes[node_index].options[TM_KEYPAD_Button_0] = node_index;	// return to itself by default
 8007992:	7bfa      	ldrb	r2, [r7, #15]
 8007994:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8007998:	490c      	ldr	r1, [pc, #48]	; (80079cc <initParentNode+0x60>)
 800799a:	4613      	mov	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	3304      	adds	r3, #4
 80079a6:	4602      	mov	r2, r0
 80079a8:	701a      	strb	r2, [r3, #0]
	menu_nodes[node_index].callback = fun;
 80079aa:	7bfa      	ldrb	r2, [r7, #15]
 80079ac:	4907      	ldr	r1, [pc, #28]	; (80079cc <initParentNode+0x60>)
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3318      	adds	r3, #24
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	e000      	b.n	80079c2 <initParentNode+0x56>
		return;
 80079c0:	bf00      	nop
}
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20001d6c 	.word	0x20001d6c

080079d0 <connectChildNode>:

/**
 * parent node,which parent option,child node
 */
void connectChildNode(uint8_t parent,uint8_t opt_key,uint8_t child){
 80079d0:	b490      	push	{r4, r7}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	71fb      	strb	r3, [r7, #7]
 80079da:	460b      	mov	r3, r1
 80079dc:	71bb      	strb	r3, [r7, #6]
 80079de:	4613      	mov	r3, r2
 80079e0:	717b      	strb	r3, [r7, #5]
	if(child >= TOTAL_MENU_NODES)
 80079e2:	797b      	ldrb	r3, [r7, #5]
 80079e4:	2b13      	cmp	r3, #19
 80079e6:	d820      	bhi.n	8007a2a <connectChildNode+0x5a>
		return;
	if(opt_key == TM_KEYPAD_Button_0)	// option "0" will be connected to par_node later
 80079e8:	79bb      	ldrb	r3, [r7, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01f      	beq.n	8007a2e <connectChildNode+0x5e>
		return;
	if(opt_key > TM_KEYPAD_Button_D)
 80079ee:	79bb      	ldrb	r3, [r7, #6]
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d81e      	bhi.n	8007a32 <connectChildNode+0x62>
		return;
	menu_nodes[child].options[TM_KEYPAD_Button_0] = parent;
 80079f4:	797a      	ldrb	r2, [r7, #5]
 80079f6:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80079fa:	4910      	ldr	r1, [pc, #64]	; (8007a3c <connectChildNode+0x6c>)
 80079fc:	4613      	mov	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	3304      	adds	r3, #4
 8007a08:	4602      	mov	r2, r0
 8007a0a:	701a      	strb	r2, [r3, #0]
	menu_nodes[parent].options[opt_key] = child;
 8007a0c:	79fa      	ldrb	r2, [r7, #7]
 8007a0e:	79b9      	ldrb	r1, [r7, #6]
 8007a10:	f997 4005 	ldrsb.w	r4, [r7, #5]
 8007a14:	4809      	ldr	r0, [pc, #36]	; (8007a3c <connectChildNode+0x6c>)
 8007a16:	4613      	mov	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4403      	add	r3, r0
 8007a20:	440b      	add	r3, r1
 8007a22:	3304      	adds	r3, #4
 8007a24:	4622      	mov	r2, r4
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	e004      	b.n	8007a34 <connectChildNode+0x64>
		return;
 8007a2a:	bf00      	nop
 8007a2c:	e002      	b.n	8007a34 <connectChildNode+0x64>
		return;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <connectChildNode+0x64>
		return;
 8007a32:	bf00      	nop

}
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc90      	pop	{r4, r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	20001d6c 	.word	0x20001d6c

08007a40 <menuInit>:

void setCurrentMenuNode(uint8_t node){
	current_node_index = node;
}

void menuInit(){
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
	menuInitMsg();
 8007a44:	f001 fc9e 	bl	8009384 <menuInitMsg>
	menuInitFunctions();
 8007a48:	f001 fc70 	bl	800932c <menuInitFunctions>
	memset(menu_nodes,(int)NODE_EMPTY,sizeof(menu_nodes));
 8007a4c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8007a50:	f04f 31ff 	mov.w	r1, #4294967295
 8007a54:	4850      	ldr	r0, [pc, #320]	; (8007b98 <menuInit+0x158>)
 8007a56:	f00e ffd9 	bl	8016a0c <memset>
	current_node_index = MAIN_MENU;
 8007a5a:	4b50      	ldr	r3, [pc, #320]	; (8007b9c <menuInit+0x15c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]

	// top 3 nodes: AUDIO RHYTHM AUDIO+RHYTHM
	initParentNode(MAIN_MENU,messages[MAIN],NULL);
 8007a60:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <menuInit+0x160>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2200      	movs	r2, #0
 8007a66:	4619      	mov	r1, r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7ff ff7f 	bl	800796c <initParentNode>
		initParentNode(AUDIO_NODE,"Audio",audio_only);									// [AUDIO]
 8007a6e:	4a4d      	ldr	r2, [pc, #308]	; (8007ba4 <menuInit+0x164>)
 8007a70:	494d      	ldr	r1, [pc, #308]	; (8007ba8 <menuInit+0x168>)
 8007a72:	2001      	movs	r0, #1
 8007a74:	f7ff ff7a 	bl	800796c <initParentNode>
			initParentNode(RECORD_SELECT_LOOPS_NODE,messages[REC_SEL_LOOPS],select_loops);
 8007a78:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <menuInit+0x160>)
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	4a4b      	ldr	r2, [pc, #300]	; (8007bac <menuInit+0x16c>)
 8007a7e:	4619      	mov	r1, r3
 8007a80:	2006      	movs	r0, #6
 8007a82:	f7ff ff73 	bl	800796c <initParentNode>
		initParentNode(RHYTHM_NODE,messages[AUDIO_RHYTHM],audio_rhythm);				// [AUDIO AND RHYTHM]
 8007a86:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <menuInit+0x160>)
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	4a49      	ldr	r2, [pc, #292]	; (8007bb0 <menuInit+0x170>)
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	2002      	movs	r0, #2
 8007a90:	f7ff ff6c 	bl	800796c <initParentNode>
			initParentNode(DOWNLOAD_RHYTHM_NODE,messages[DOWNL_RTH],download_rhythm);		// [DOWNLOAD RHYTHM
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <menuInit+0x160>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4a46      	ldr	r2, [pc, #280]	; (8007bb4 <menuInit+0x174>)
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	2007      	movs	r0, #7
 8007a9e:	f7ff ff65 	bl	800796c <initParentNode>

				initParentNode(SELECT_BARS_NODE,"Select bars",select_bars);						// [SELECT BARS]
 8007aa2:	4a45      	ldr	r2, [pc, #276]	; (8007bb8 <menuInit+0x178>)
 8007aa4:	4945      	ldr	r1, [pc, #276]	; (8007bbc <menuInit+0x17c>)
 8007aa6:	200e      	movs	r0, #14
 8007aa8:	f7ff ff60 	bl	800796c <initParentNode>
					initParentNode(MOVE_BAR_BACK_START_NODE,messages[ONE_BAR_BACK_START],NULL);		// [MOVE BAR BACK]
 8007aac:	4b3c      	ldr	r3, [pc, #240]	; (8007ba0 <menuInit+0x160>)
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	2009      	movs	r0, #9
 8007ab6:	f7ff ff59 	bl	800796c <initParentNode>
					initParentNode(MOVE_BAR_FORW_START_NODE,messages[ONE_BAR_FORW_START],NULL);		// [MOVE BAR FORW]
 8007aba:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <menuInit+0x160>)
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	200a      	movs	r0, #10
 8007ac4:	f7ff ff52 	bl	800796c <initParentNode>
					initParentNode(START_RHYTHM_NODE,messages[START_RHYTHM],NULL);					// [START RHYTHM]
 8007ac8:	4b35      	ldr	r3, [pc, #212]	; (8007ba0 <menuInit+0x160>)
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	2200      	movs	r2, #0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	200b      	movs	r0, #11
 8007ad2:	f7ff ff4b 	bl	800796c <initParentNode>
					initParentNode(MOVE_BAR_BACK_END_NODE,messages[ONE_BAR_BACK_END],NULL);			// [MOVE BAR BACK]
 8007ad6:	4b32      	ldr	r3, [pc, #200]	; (8007ba0 <menuInit+0x160>)
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2200      	movs	r2, #0
 8007adc:	4619      	mov	r1, r3
 8007ade:	200c      	movs	r0, #12
 8007ae0:	f7ff ff44 	bl	800796c <initParentNode>
					initParentNode(MOVE_BAR_FORW_END_NODE,messages[ONE_BAR_FORW_END],NULL);			// [MOVE BAR FORW]
 8007ae4:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <menuInit+0x160>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4619      	mov	r1, r3
 8007aec:	200d      	movs	r0, #13
 8007aee:	f7ff ff3d 	bl	800796c <initParentNode>
					initParentNode(SAVE_ALL_LOOPS_NODE,"Save all loops",NULL);
 8007af2:	2200      	movs	r2, #0
 8007af4:	4932      	ldr	r1, [pc, #200]	; (8007bc0 <menuInit+0x180>)
 8007af6:	2010      	movs	r0, #16
 8007af8:	f7ff ff38 	bl	800796c <initParentNode>
				initParentNode(RECORD_DRUMS,"Record rhythm",record_rhythm);
 8007afc:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <menuInit+0x184>)
 8007afe:	4932      	ldr	r1, [pc, #200]	; (8007bc8 <menuInit+0x188>)
 8007b00:	2011      	movs	r0, #17
 8007b02:	f7ff ff33 	bl	800796c <initParentNode>
				initParentNode(LOAD_RHYTHM_FROM_SD,"Select rhythm",select_rhythm);
 8007b06:	4a31      	ldr	r2, [pc, #196]	; (8007bcc <menuInit+0x18c>)
 8007b08:	4931      	ldr	r1, [pc, #196]	; (8007bd0 <menuInit+0x190>)
 8007b0a:	200f      	movs	r0, #15
 8007b0c:	f7ff ff2e 	bl	800796c <initParentNode>
		connectChildNode(MAIN_MENU,TM_KEYPAD_Button_1,AUDIO_NODE);
 8007b10:	2201      	movs	r2, #1
 8007b12:	2101      	movs	r1, #1
 8007b14:	2000      	movs	r0, #0
 8007b16:	f7ff ff5b 	bl	80079d0 <connectChildNode>

			connectChildNode(AUDIO_NODE,TM_KEYPAD_Button_1,RECORD_SELECT_LOOPS_NODE);
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f7ff ff56 	bl	80079d0 <connectChildNode>
		connectChildNode(MAIN_MENU,TM_KEYPAD_Button_2,RHYTHM_NODE);
 8007b24:	2202      	movs	r2, #2
 8007b26:	2102      	movs	r1, #2
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f7ff ff51 	bl	80079d0 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_1,DOWNLOAD_RHYTHM_NODE);
 8007b2e:	2207      	movs	r2, #7
 8007b30:	2101      	movs	r1, #1
 8007b32:	2002      	movs	r0, #2
 8007b34:	f7ff ff4c 	bl	80079d0 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_2,LOAD_RHYTHM_FROM_SD);
 8007b38:	220f      	movs	r2, #15
 8007b3a:	2102      	movs	r1, #2
 8007b3c:	2002      	movs	r0, #2
 8007b3e:	f7ff ff47 	bl	80079d0 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_3,SELECT_BARS_NODE);
 8007b42:	220e      	movs	r2, #14
 8007b44:	2103      	movs	r1, #3
 8007b46:	2002      	movs	r0, #2
 8007b48:	f7ff ff42 	bl	80079d0 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_4,RECORD_DRUMS);
 8007b4c:	2211      	movs	r2, #17
 8007b4e:	2104      	movs	r1, #4
 8007b50:	2002      	movs	r0, #2
 8007b52:	f7ff ff3d 	bl	80079d0 <connectChildNode>

				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_1,MOVE_BAR_BACK_START_NODE);
 8007b56:	2209      	movs	r2, #9
 8007b58:	2101      	movs	r1, #1
 8007b5a:	200e      	movs	r0, #14
 8007b5c:	f7ff ff38 	bl	80079d0 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_2,MOVE_BAR_FORW_START_NODE);
 8007b60:	220a      	movs	r2, #10
 8007b62:	2102      	movs	r1, #2
 8007b64:	200e      	movs	r0, #14
 8007b66:	f7ff ff33 	bl	80079d0 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_3,START_RHYTHM_NODE);
 8007b6a:	220b      	movs	r2, #11
 8007b6c:	2103      	movs	r1, #3
 8007b6e:	200e      	movs	r0, #14
 8007b70:	f7ff ff2e 	bl	80079d0 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_4,MOVE_BAR_BACK_END_NODE);
 8007b74:	220c      	movs	r2, #12
 8007b76:	2104      	movs	r1, #4
 8007b78:	200e      	movs	r0, #14
 8007b7a:	f7ff ff29 	bl	80079d0 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_5,MOVE_BAR_FORW_END_NODE);
 8007b7e:	220d      	movs	r2, #13
 8007b80:	2105      	movs	r1, #5
 8007b82:	200e      	movs	r0, #14
 8007b84:	f7ff ff24 	bl	80079d0 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_6,SAVE_ALL_LOOPS_NODE);
 8007b88:	2210      	movs	r2, #16
 8007b8a:	2106      	movs	r1, #6
 8007b8c:	200e      	movs	r0, #14
 8007b8e:	f7ff ff1f 	bl	80079d0 <connectChildNode>

}
 8007b92:	bf00      	nop
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20001d6c 	.word	0x20001d6c
 8007b9c:	20001f9c 	.word	0x20001f9c
 8007ba0:	20001fb0 	.word	0x20001fb0
 8007ba4:	080082d7 	.word	0x080082d7
 8007ba8:	08018178 	.word	0x08018178
 8007bac:	08008d61 	.word	0x08008d61
 8007bb0:	080082c9 	.word	0x080082c9
 8007bb4:	08008c19 	.word	0x08008c19
 8007bb8:	080090fd 	.word	0x080090fd
 8007bbc:	08018180 	.word	0x08018180
 8007bc0:	0801818c 	.word	0x0801818c
 8007bc4:	080091d9 	.word	0x080091d9
 8007bc8:	0801819c 	.word	0x0801819c
 8007bcc:	08008cdd 	.word	0x08008cdd
 8007bd0:	080181ac 	.word	0x080181ac

08007bd4 <menuShow>:

void menuShow(TM_KEYPAD_Button_t opt_key){
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]

	if(opt_key > TM_KEYPAD_Button_D)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b0f      	cmp	r3, #15
 8007be2:	d857      	bhi.n	8007c94 <menuShow+0xc0>
		return;
	if(menu_nodes[current_node_index].options[opt_key] == NODE_EMPTY)
 8007be4:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <menuShow+0xd0>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	79fa      	ldrb	r2, [r7, #7]
 8007bec:	492e      	ldr	r1, [pc, #184]	; (8007ca8 <menuShow+0xd4>)
 8007bee:	4603      	mov	r3, r0
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	1a1b      	subs	r3, r3, r0
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d048      	beq.n	8007c98 <menuShow+0xc4>
		return;

	current_node_index = menu_nodes[current_node_index].options[opt_key];
 8007c06:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <menuShow+0xd0>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	79fa      	ldrb	r2, [r7, #7]
 8007c0e:	4926      	ldr	r1, [pc, #152]	; (8007ca8 <menuShow+0xd4>)
 8007c10:	4603      	mov	r3, r0
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a1b      	subs	r3, r3, r0
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	4b1f      	ldr	r3, [pc, #124]	; (8007ca4 <menuShow+0xd0>)
 8007c26:	701a      	strb	r2, [r3, #0]
	sprintf(lcdline,"%s",menu_nodes[current_node_index].title);
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <menuShow+0xd0>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <menuShow+0xd4>)
 8007c30:	460b      	mov	r3, r1
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	1a5b      	subs	r3, r3, r1
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	491b      	ldr	r1, [pc, #108]	; (8007cac <menuShow+0xd8>)
 8007c40:	481b      	ldr	r0, [pc, #108]	; (8007cb0 <menuShow+0xdc>)
 8007c42:	f00e fff3 	bl	8016c2c <siprintf>
	TM_HD44780_Clear();
 8007c46:	f003 fc7b 	bl	800b540 <TM_HD44780_Clear>
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8007c4a:	f24a 2054 	movw	r0, #41556	; 0xa254
 8007c4e:	f003 ffff 	bl	800bc50 <TM_ILI9341_Fill>
	TM_HD44780_Puts(0,0,lcdline);
 8007c52:	4a17      	ldr	r2, [pc, #92]	; (8007cb0 <menuShow+0xdc>)
 8007c54:	2100      	movs	r1, #0
 8007c56:	2000      	movs	r0, #0
 8007c58:	f003 fc7e 	bl	800b558 <TM_HD44780_Puts>

	menuShowOptions();
 8007c5c:	f7ff fe20 	bl	80078a0 <menuShowOptions>

	// execute function handler
	if(menu_nodes[current_node_index].callback != NULL)
 8007c60:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <menuShow+0xd0>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	4a10      	ldr	r2, [pc, #64]	; (8007ca8 <menuShow+0xd4>)
 8007c68:	460b      	mov	r3, r1
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	1a5b      	subs	r3, r3, r1
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	3318      	adds	r3, #24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d010      	beq.n	8007c9c <menuShow+0xc8>
		menu_nodes[current_node_index].callback();
 8007c7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <menuShow+0xd0>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <menuShow+0xd4>)
 8007c82:	460b      	mov	r3, r1
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	1a5b      	subs	r3, r3, r1
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3318      	adds	r3, #24
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4798      	blx	r3

	return;
 8007c92:	e003      	b.n	8007c9c <menuShow+0xc8>
		return;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <menuShow+0xca>
		return;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <menuShow+0xca>
	return;
 8007c9c:	bf00      	nop
}
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20001f9c 	.word	0x20001f9c
 8007ca8:	20001d6c 	.word	0x20001d6c
 8007cac:	080181bc 	.word	0x080181bc
 8007cb0:	20001264 	.word	0x20001264

08007cb4 <menuShowStatus>:

void menuShowStatus(){
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af00      	add	r7, sp, #0
	char *channelLabel = "";
 8007cba:	4b4b      	ldr	r3, [pc, #300]	; (8007de8 <menuShowStatus+0x134>)
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24

	char tmp[31];
	if(looper.TwoChannels == TRUE){
 8007cbe:	4b4b      	ldr	r3, [pc, #300]	; (8007dec <menuShowStatus+0x138>)
 8007cc0:	78db      	ldrb	r3, [r3, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d115      	bne.n	8007cf4 <menuShowStatus+0x40>
		if(looper.ch1.Active == TRUE)
 8007cc8:	4b48      	ldr	r3, [pc, #288]	; (8007dec <menuShowStatus+0x138>)
 8007cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d102      	bne.n	8007cde <menuShowStatus+0x2a>
			channelLabel = " [A]B";
 8007cd8:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <menuShowStatus+0x13c>)
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
 8007cdc:	e01f      	b.n	8007d1e <menuShowStatus+0x6a>
		else if(looper.ch2.Active == TRUE)
 8007cde:	4b43      	ldr	r3, [pc, #268]	; (8007dec <menuShowStatus+0x138>)
 8007ce0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ce4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d117      	bne.n	8007d1e <menuShowStatus+0x6a>
			channelLabel = " A[B]";
 8007cee:	4b41      	ldr	r3, [pc, #260]	; (8007df4 <menuShowStatus+0x140>)
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf2:	e014      	b.n	8007d1e <menuShowStatus+0x6a>
	}
	else{
		if(looper.ch1.Active == TRUE)
 8007cf4:	4b3d      	ldr	r3, [pc, #244]	; (8007dec <menuShowStatus+0x138>)
 8007cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cfa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d102      	bne.n	8007d0a <menuShowStatus+0x56>
			channelLabel = " [A] ";
 8007d04:	4b3c      	ldr	r3, [pc, #240]	; (8007df8 <menuShowStatus+0x144>)
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
 8007d08:	e009      	b.n	8007d1e <menuShowStatus+0x6a>
		else if(looper.ch2.Active == TRUE)
 8007d0a:	4b38      	ldr	r3, [pc, #224]	; (8007dec <menuShowStatus+0x138>)
 8007d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <menuShowStatus+0x6a>
			channelLabel = " [B] ";
 8007d1a:	4b38      	ldr	r3, [pc, #224]	; (8007dfc <menuShowStatus+0x148>)
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	// display action
	if(looper.Recording == FALSE && looper.Playback == FALSE)
 8007d1e:	4b33      	ldr	r3, [pc, #204]	; (8007dec <menuShowStatus+0x138>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <menuShowStatus+0x8a>
 8007d28:	4b30      	ldr	r3, [pc, #192]	; (8007dec <menuShowStatus+0x138>)
 8007d2a:	785b      	ldrb	r3, [r3, #1]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <menuShowStatus+0x8a>
		sprintf(tmp,"Stopped   ");
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	4932      	ldr	r1, [pc, #200]	; (8007e00 <menuShowStatus+0x14c>)
 8007d36:	4618      	mov	r0, r3
 8007d38:	f00e ff78 	bl	8016c2c <siprintf>
 8007d3c:	e014      	b.n	8007d68 <menuShowStatus+0xb4>
	else if(looper.Recording == TRUE)
 8007d3e:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <menuShowStatus+0x138>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d105      	bne.n	8007d54 <menuShowStatus+0xa0>
		sprintf(tmp,"Recording ");
 8007d48:	1d3b      	adds	r3, r7, #4
 8007d4a:	492e      	ldr	r1, [pc, #184]	; (8007e04 <menuShowStatus+0x150>)
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f00e ff6d 	bl	8016c2c <siprintf>
 8007d52:	e009      	b.n	8007d68 <menuShowStatus+0xb4>
	else if(looper.Playback == TRUE)
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <menuShowStatus+0x138>)
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d104      	bne.n	8007d68 <menuShowStatus+0xb4>
		sprintf(tmp,"Playback  ");
 8007d5e:	1d3b      	adds	r3, r7, #4
 8007d60:	4929      	ldr	r1, [pc, #164]	; (8007e08 <menuShowStatus+0x154>)
 8007d62:	4618      	mov	r0, r3
 8007d64:	f00e ff62 	bl	8016c2c <siprintf>
	// display channel(s)
	sprintf(tmp + strlen(tmp),channelLabel);
 8007d68:	1d3b      	adds	r3, r7, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f8 fa40 	bl	80001f0 <strlen>
 8007d70:	4602      	mov	r2, r0
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	4413      	add	r3, r2
 8007d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f00e ff57 	bl	8016c2c <siprintf>

	if(looper.ch1.Overdub == TRUE || looper.ch2.Overdub == TRUE)
 8007d7e:	4b1b      	ldr	r3, [pc, #108]	; (8007dec <menuShowStatus+0x138>)
 8007d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d007      	beq.n	8007d9e <menuShowStatus+0xea>
 8007d8e:	4b17      	ldr	r3, [pc, #92]	; (8007dec <menuShowStatus+0x138>)
 8007d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d10a      	bne.n	8007db4 <menuShowStatus+0x100>
		sprintf(tmp + strlen(tmp),"Overdub");
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f8 fa25 	bl	80001f0 <strlen>
 8007da6:	4602      	mov	r2, r0
 8007da8:	1d3b      	adds	r3, r7, #4
 8007daa:	4413      	add	r3, r2
 8007dac:	4917      	ldr	r1, [pc, #92]	; (8007e0c <menuShowStatus+0x158>)
 8007dae:	4618      	mov	r0, r3
 8007db0:	f00e ff3c 	bl	8016c2c <siprintf>

	menuStatusLine(tmp);
 8007db4:	1d3b      	adds	r3, r7, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f830 	bl	8007e1c <menuStatusLine>

	// display current function
	sprintf(lcdline,"%-16s",functions[looper.Function]);
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <menuShowStatus+0x138>)
 8007dbe:	7f5b      	ldrb	r3, [r3, #29]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <menuShowStatus+0x15c>)
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4911      	ldr	r1, [pc, #68]	; (8007e14 <menuShowStatus+0x160>)
 8007dce:	4812      	ldr	r0, [pc, #72]	; (8007e18 <menuShowStatus+0x164>)
 8007dd0:	f00e ff2c 	bl	8016c2c <siprintf>
	TM_HD44780_Puts(0,1,lcdline);
 8007dd4:	4a10      	ldr	r2, [pc, #64]	; (8007e18 <menuShowStatus+0x164>)
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f003 fbbd 	bl	800b558 <TM_HD44780_Puts>
}
 8007dde:	bf00      	nop
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	080181c0 	.word	0x080181c0
 8007dec:	20001220 	.word	0x20001220
 8007df0:	080181c4 	.word	0x080181c4
 8007df4:	080181cc 	.word	0x080181cc
 8007df8:	080181d4 	.word	0x080181d4
 8007dfc:	080181dc 	.word	0x080181dc
 8007e00:	080181e4 	.word	0x080181e4
 8007e04:	080181f0 	.word	0x080181f0
 8007e08:	080181fc 	.word	0x080181fc
 8007e0c:	08018208 	.word	0x08018208
 8007e10:	20002028 	.word	0x20002028
 8007e14:	08018210 	.word	0x08018210
 8007e18:	20001264 	.word	0x20001264

08007e1c <menuStatusLine>:


// write short message text at the bottom
void menuStatusLine(char *text){
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	6078      	str	r0, [r7, #4]
	sprintf(lcdline,"%-29s",text);
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	4909      	ldr	r1, [pc, #36]	; (8007e4c <menuStatusLine+0x30>)
 8007e28:	4809      	ldr	r0, [pc, #36]	; (8007e50 <menuStatusLine+0x34>)
 8007e2a:	f00e feff 	bl	8016c2c <siprintf>
	TM_ILI9341_Puts(0, 221,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <menuStatusLine+0x38>)
 8007e3a:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <menuStatusLine+0x34>)
 8007e3c:	21dd      	movs	r1, #221	; 0xdd
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f004 f80a 	bl	800be58 <TM_ILI9341_Puts>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	08018218 	.word	0x08018218
 8007e50:	20001264 	.word	0x20001264
 8007e54:	200001e0 	.word	0x200001e0

08007e58 <menuClearLines>:


void menuClearLines(uint8_t lines,...){
 8007e58:	b40f      	push	{r0, r1, r2, r3}
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af02      	add	r7, sp, #8

	uint8_t i;
	int line;
	va_list ap;
	va_start(ap, lines);
 8007e60:	f107 031c 	add.w	r3, r7, #28
 8007e64:	607b      	str	r3, [r7, #4]
	for(i = 0;lines > 0 && i < lines; i++){
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
 8007e6a:	e021      	b.n	8007eb0 <menuClearLines+0x58>
		line = va_arg(ap,int);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60bb      	str	r3, [r7, #8]
		TM_ILI9341_DrawFilledRectangle(10,line * 20 + 10,320,line * 20 + 30,ILI9341_COLOR_MAGENTA);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	0092      	lsls	r2, r2, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	330a      	adds	r3, #10
 8007e86:	b299      	uxth	r1, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	331e      	adds	r3, #30
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f24a 2254 	movw	r2, #41556	; 0xa254
 8007e9e:	9200      	str	r2, [sp, #0]
 8007ea0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f004 f8c1 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
	for(i = 0;lines > 0 && i < lines; i++){
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	3301      	adds	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
 8007eb0:	7e3b      	ldrb	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <menuClearLines+0x66>
 8007eb6:	7bfa      	ldrb	r2, [r7, #15]
 8007eb8:	7e3b      	ldrb	r3, [r7, #24]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d3d6      	bcc.n	8007e6c <menuClearLines+0x14>
	}

	va_end(ap);
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec8:	b004      	add	sp, #16
 8007eca:	4770      	bx	lr

08007ecc <menuTextBox>:
		 TM_ILI9341_Puts(10, offset,line, &TM_Font_7x10, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
	}
	va_end(ap);
}

void menuTextBox(uint8_t lines,uint8_t xoff,uint8_t yoff,...){
 8007ecc:	b40c      	push	{r2, r3}
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af02      	add	r7, sp, #8
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	71fb      	strb	r3, [r7, #7]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	char *line;
	va_list ap;

	va_start(ap, yoff);
 8007ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ee2:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < lines; i++,yoff += 12) {
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	75fb      	strb	r3, [r7, #23]
 8007ee8:	e01b      	b.n	8007f22 <menuTextBox+0x56>
		 line = va_arg(ap, char *);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	60fa      	str	r2, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	613b      	str	r3, [r7, #16]
		 TM_ILI9341_Puts(xoff,yoff,line, &TM_Font_7x10, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8007ef4:	79bb      	ldrb	r3, [r7, #6]
 8007ef6:	b298      	uxth	r0, r3
 8007ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007efc:	b299      	uxth	r1, r3
 8007efe:	f240 531d 	movw	r3, #1309	; 0x51d
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <menuTextBox+0x70>)
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	f003 ffa3 	bl	800be58 <TM_ILI9341_Puts>
	for(i = 0; i < lines; i++,yoff += 12) {
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	3301      	adds	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	f887 3020 	strb.w	r3, [r7, #32]
 8007f22:	7dfa      	ldrb	r2, [r7, #23]
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d3df      	bcc.n	8007eea <menuTextBox+0x1e>
	}
	va_end(ap);

}
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f36:	b002      	add	sp, #8
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	200001d8 	.word	0x200001d8

08007f40 <menuMultiLine>:

void menuMultiLine(uint8_t lines,uint8_t offset,...){
 8007f40:	b40e      	push	{r1, r2, r3}
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b089      	sub	sp, #36	; 0x24
 8007f46:	af02      	add	r7, sp, #8
 8007f48:	4603      	mov	r3, r0
 8007f4a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	char *line;
	va_list ap;

	va_start(ap, offset);
 8007f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f50:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < lines; i++,offset += 20) {
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]
 8007f56:	e01a      	b.n	8007f8e <menuMultiLine+0x4e>
	     line = va_arg(ap, char *);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1d1a      	adds	r2, r3, #4
 8007f5c:	60fa      	str	r2, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	613b      	str	r3, [r7, #16]
	     TM_ILI9341_Puts(10, offset,line, &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8007f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f66:	b299      	uxth	r1, r3
 8007f68:	f240 531d 	movw	r3, #1309	; 0x51d
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <menuMultiLine+0x68>)
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	200a      	movs	r0, #10
 8007f7a:	f003 ff6d 	bl	800be58 <TM_ILI9341_Puts>
	for(i = 0; i < lines; i++,offset += 20) {
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	3301      	adds	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
 8007f84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f88:	3314      	adds	r3, #20
 8007f8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d3e0      	bcc.n	8007f58 <menuMultiLine+0x18>
	}
	va_end(ap);
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fa2:	b003      	add	sp, #12
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	200001e0 	.word	0x200001e0

08007fac <menuWaitReturn>:

void menuWaitReturn(){
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
	while((Keypad_Button = TM_KEYPAD_Read() != TM_KEYPAD_Button_0))
 8007fb0:	e000      	b.n	8007fb4 <menuWaitReturn+0x8>
		continue;
 8007fb2:	bf00      	nop
	while((Keypad_Button = TM_KEYPAD_Read() != TM_KEYPAD_Button_0))
 8007fb4:	f004 f88a 	bl	800c0cc <TM_KEYPAD_Read>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bf14      	ite	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	2300      	moveq	r3, #0
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <menuWaitReturn+0x2c>)
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <menuWaitReturn+0x2c>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1ef      	bne.n	8007fb2 <menuWaitReturn+0x6>
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20001c39 	.word	0x20001c39

08007fdc <forwardBar>:
		sprintf(lcdline,"Play: %02u:%02u:%02u sec.",(unsigned int)(seconds / 60),(unsigned int)seconds,(unsigned int)cs);
		TM_ILI9341_Puts(10, 10, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
	}

}
static inline void forwardBar(BOOL start,uint32_t numOfPatterns){
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
	if(start == TRUE){
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d10b      	bne.n	8008006 <forwardBar+0x2a>
		if(looper.StartPattern < looper.EndPattern)
 8007fee:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <forwardBar+0x4c>)
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <forwardBar+0x4c>)
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d210      	bcs.n	800801c <forwardBar+0x40>
			looper.StartPattern++;
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <forwardBar+0x4c>)
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	3301      	adds	r3, #1
 8008000:	4a09      	ldr	r2, [pc, #36]	; (8008028 <forwardBar+0x4c>)
 8008002:	6153      	str	r3, [r2, #20]
		}
		else if(looper.EndPattern < (numOfPatterns - 1))
			looper.EndPattern++;

}
 8008004:	e00a      	b.n	800801c <forwardBar+0x40>
		else if(looper.EndPattern < (numOfPatterns - 1))
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <forwardBar+0x4c>)
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	3b01      	subs	r3, #1
 800800e:	429a      	cmp	r2, r3
 8008010:	d204      	bcs.n	800801c <forwardBar+0x40>
			looper.EndPattern++;
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <forwardBar+0x4c>)
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	3301      	adds	r3, #1
 8008018:	4a03      	ldr	r2, [pc, #12]	; (8008028 <forwardBar+0x4c>)
 800801a:	6193      	str	r3, [r2, #24]
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	20001220 	.word	0x20001220

0800802c <backwardBar>:


static inline void backwardBar(BOOL start){
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
	if(start == TRUE){
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d109      	bne.n	8008050 <backwardBar+0x24>
		if(looper.StartPattern > 0)
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <backwardBar+0x48>)
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <backwardBar+0x3a>
			looper.StartPattern--;
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <backwardBar+0x48>)
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	3b01      	subs	r3, #1
 800804a:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <backwardBar+0x48>)
 800804c:	6153      	str	r3, [r2, #20]
		}
	else if(looper.EndPattern > looper.StartPattern)
		looper.EndPattern--;
}
 800804e:	e00a      	b.n	8008066 <backwardBar+0x3a>
	else if(looper.EndPattern > looper.StartPattern)
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <backwardBar+0x48>)
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	4b07      	ldr	r3, [pc, #28]	; (8008074 <backwardBar+0x48>)
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	429a      	cmp	r2, r3
 800805a:	d904      	bls.n	8008066 <backwardBar+0x3a>
		looper.EndPattern--;
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <backwardBar+0x48>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	3b01      	subs	r3, #1
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <backwardBar+0x48>)
 8008064:	6193      	str	r3, [r2, #24]
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20001220 	.word	0x20001220

08008078 <drumMenuInput>:

void drumMenuInput(uint32_t numOfPatterns,BOOL *play){
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af02      	add	r7, sp, #8
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	BOOL input = TRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	73fb      	strb	r3, [r7, #15]
	BOOL startBar = TRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	73bb      	strb	r3, [r7, #14]
	BOOL overdub = FALSE;
 800808a:	2300      	movs	r3, #0
 800808c:	737b      	strb	r3, [r7, #13]
	while (TRUE){
		set_function(AUDIO_DRUMS);
 800808e:	2002      	movs	r0, #2
 8008090:	f7fe fef2 	bl	8006e78 <set_function>
		if((GET_ACTIVE_CHANNEL)->Overdub != overdub){
 8008094:	4b81      	ldr	r3, [pc, #516]	; (800829c <drumMenuInput+0x224>)
 8008096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800809a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <drumMenuInput+0x30>
 80080a4:	4b7e      	ldr	r3, [pc, #504]	; (80082a0 <drumMenuInput+0x228>)
 80080a6:	e000      	b.n	80080aa <drumMenuInput+0x32>
 80080a8:	4b7e      	ldr	r3, [pc, #504]	; (80082a4 <drumMenuInput+0x22c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	7b7b      	ldrb	r3, [r7, #13]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d011      	beq.n	80080de <drumMenuInput+0x66>
			overdub = (GET_ACTIVE_CHANNEL)->Overdub;
 80080ba:	4b78      	ldr	r3, [pc, #480]	; (800829c <drumMenuInput+0x224>)
 80080bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <drumMenuInput+0x56>
 80080ca:	4b75      	ldr	r3, [pc, #468]	; (80082a0 <drumMenuInput+0x228>)
 80080cc:	e000      	b.n	80080d0 <drumMenuInput+0x58>
 80080ce:	4b75      	ldr	r3, [pc, #468]	; (80082a4 <drumMenuInput+0x22c>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	737b      	strb	r3, [r7, #13]
			menuShowStatus();
 80080da:	f7ff fdeb 	bl	8007cb4 <menuShowStatus>
		}

		Keypad_Button = TM_KEYPAD_Read();
 80080de:	f003 fff5 	bl	800c0cc <TM_KEYPAD_Read>
 80080e2:	4603      	mov	r3, r0
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b70      	ldr	r3, [pc, #448]	; (80082a8 <drumMenuInput+0x230>)
 80080e8:	701a      	strb	r2, [r3, #0]
		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 80080ea:	4b6f      	ldr	r3, [pc, #444]	; (80082a8 <drumMenuInput+0x230>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2bff      	cmp	r3, #255	; 0xff
 80080f0:	d06b      	beq.n	80081ca <drumMenuInput+0x152>
				input = TRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	73fb      	strb	r3, [r7, #15]
				switch(Keypad_Button){
 80080f6:	4b6c      	ldr	r3, [pc, #432]	; (80082a8 <drumMenuInput+0x230>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b0d      	cmp	r3, #13
 80080fc:	d874      	bhi.n	80081e8 <drumMenuInput+0x170>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <drumMenuInput+0x8c>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	0800813d 	.word	0x0800813d
 8008108:	08008145 	.word	0x08008145
 800810c:	08008153 	.word	0x08008153
 8008110:	08008163 	.word	0x08008163
 8008114:	0800816b 	.word	0x0800816b
 8008118:	08008179 	.word	0x08008179
 800811c:	08008189 	.word	0x08008189
 8008120:	080081e9 	.word	0x080081e9
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081e9 	.word	0x080081e9
 800812c:	080081e9 	.word	0x080081e9
 8008130:	080081e9 	.word	0x080081e9
 8008134:	080081b7 	.word	0x080081b7
 8008138:	080081b7 	.word	0x080081b7

					case TM_KEYPAD_Button_0:	*play = FALSE; return;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	e0a8      	b.n	8008296 <drumMenuInput+0x21e>
					case TM_KEYPAD_Button_1:	startBar = TRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	73bb      	strb	r3, [r7, #14]
												backwardBar(startBar);
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff ff6e 	bl	800802c <backwardBar>
												break;
 8008150:	e04a      	b.n	80081e8 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_2:	startBar = TRUE;
 8008152:	2301      	movs	r3, #1
 8008154:	73bb      	strb	r3, [r7, #14]
												forwardBar(startBar,numOfPatterns);
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff ff3e 	bl	8007fdc <forwardBar>
												break;
 8008160:	e042      	b.n	80081e8 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_3:	*play = TRUE;  return;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	e095      	b.n	8008296 <drumMenuInput+0x21e>
					case TM_KEYPAD_Button_4:	startBar = FALSE;
 800816a:	2300      	movs	r3, #0
 800816c:	73bb      	strb	r3, [r7, #14]
												backwardBar(startBar);
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff ff5b 	bl	800802c <backwardBar>
												break;
 8008176:	e037      	b.n	80081e8 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_5:	startBar = FALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]
												forwardBar(startBar,numOfPatterns); break;
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ff2b 	bl	8007fdc <forwardBar>
 8008186:	e02f      	b.n	80081e8 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_6:	if(looper.Playback == TRUE || looper.Recording == TRUE || looper.SamplesWritten == 0)
 8008188:	4b44      	ldr	r3, [pc, #272]	; (800829c <drumMenuInput+0x224>)
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	d029      	beq.n	80081e6 <drumMenuInput+0x16e>
 8008192:	4b42      	ldr	r3, [pc, #264]	; (800829c <drumMenuInput+0x224>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d024      	beq.n	80081e6 <drumMenuInput+0x16e>
 800819c:	4b3f      	ldr	r3, [pc, #252]	; (800829c <drumMenuInput+0x224>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d020      	beq.n	80081e6 <drumMenuInput+0x16e>
													break;
												get_string(filename);
 80081a4:	4841      	ldr	r0, [pc, #260]	; (80082ac <drumMenuInput+0x234>)
 80081a6:	f000 fb85 	bl	80088b4 <get_string>
												saveAllLoopsToSD(filename);
 80081aa:	4840      	ldr	r0, [pc, #256]	; (80082ac <drumMenuInput+0x234>)
 80081ac:	f7ff faca 	bl	8007744 <saveAllLoopsToSD>
												menuShowOptions();
 80081b0:	f7ff fb76 	bl	80078a0 <menuShowOptions>
												break;
 80081b4:	e018      	b.n	80081e8 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_A:
					case TM_KEYPAD_Button_B:
												select_channel(Keypad_Button);
 80081b6:	4b3c      	ldr	r3, [pc, #240]	; (80082a8 <drumMenuInput+0x230>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 ff1e 	bl	8008ffc <select_channel>
												menuShowOptions();
 80081c0:	f7ff fb6e 	bl	80078a0 <menuShowOptions>
												menuShowStatus();
 80081c4:	f7ff fd76 	bl	8007cb4 <menuShowStatus>
 80081c8:	e00e      	b.n	80081e8 <drumMenuInput+0x170>

				}

			}
			else if(looper.Recording == TRUE || looper.Playback == TRUE){
 80081ca:	4b34      	ldr	r3, [pc, #208]	; (800829c <drumMenuInput+0x224>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d004      	beq.n	80081de <drumMenuInput+0x166>
 80081d4:	4b31      	ldr	r3, [pc, #196]	; (800829c <drumMenuInput+0x224>)
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d104      	bne.n	80081e8 <drumMenuInput+0x170>
				*play = TRUE;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2201      	movs	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
				break;
 80081e4:	e057      	b.n	8008296 <drumMenuInput+0x21e>
			}
 80081e6:	bf00      	nop
			}

			if(input == TRUE){
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	f47f af4f 	bne.w	800808e <drumMenuInput+0x16>
				if(startBar == TRUE){
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d126      	bne.n	8008244 <drumMenuInput+0x1cc>
					sprintf(lcdline,"*Start: %-4u",(unsigned int)(looper.StartPattern + 1));
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <drumMenuInput+0x224>)
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	3301      	adds	r3, #1
 80081fc:	461a      	mov	r2, r3
 80081fe:	492c      	ldr	r1, [pc, #176]	; (80082b0 <drumMenuInput+0x238>)
 8008200:	482c      	ldr	r0, [pc, #176]	; (80082b4 <drumMenuInput+0x23c>)
 8008202:	f00e fd13 	bl	8016c2c <siprintf>
					TM_ILI9341_Puts(10, 170, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008206:	f240 531d 	movw	r3, #1309	; 0x51d
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	2300      	movs	r3, #0
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4b29      	ldr	r3, [pc, #164]	; (80082b8 <drumMenuInput+0x240>)
 8008212:	4a28      	ldr	r2, [pc, #160]	; (80082b4 <drumMenuInput+0x23c>)
 8008214:	21aa      	movs	r1, #170	; 0xaa
 8008216:	200a      	movs	r0, #10
 8008218:	f003 fe1e 	bl	800be58 <TM_ILI9341_Puts>
					sprintf(lcdline," End: %-4u",(unsigned int)(looper.EndPattern + 1));
 800821c:	4b1f      	ldr	r3, [pc, #124]	; (800829c <drumMenuInput+0x224>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	3301      	adds	r3, #1
 8008222:	461a      	mov	r2, r3
 8008224:	4925      	ldr	r1, [pc, #148]	; (80082bc <drumMenuInput+0x244>)
 8008226:	4823      	ldr	r0, [pc, #140]	; (80082b4 <drumMenuInput+0x23c>)
 8008228:	f00e fd00 	bl	8016c2c <siprintf>
					TM_ILI9341_Puts(10, 190, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800822c:	f240 531d 	movw	r3, #1309	; 0x51d
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	2300      	movs	r3, #0
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <drumMenuInput+0x240>)
 8008238:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <drumMenuInput+0x23c>)
 800823a:	21be      	movs	r1, #190	; 0xbe
 800823c:	200a      	movs	r0, #10
 800823e:	f003 fe0b 	bl	800be58 <TM_ILI9341_Puts>
 8008242:	e025      	b.n	8008290 <drumMenuInput+0x218>
				}
				else{
					sprintf(lcdline," Start: %-4u",(unsigned int)(looper.StartPattern + 1));
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <drumMenuInput+0x224>)
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	3301      	adds	r3, #1
 800824a:	461a      	mov	r2, r3
 800824c:	491c      	ldr	r1, [pc, #112]	; (80082c0 <drumMenuInput+0x248>)
 800824e:	4819      	ldr	r0, [pc, #100]	; (80082b4 <drumMenuInput+0x23c>)
 8008250:	f00e fcec 	bl	8016c2c <siprintf>
					TM_ILI9341_Puts(10, 170, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008254:	f240 531d 	movw	r3, #1309	; 0x51d
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	2300      	movs	r3, #0
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <drumMenuInput+0x240>)
 8008260:	4a14      	ldr	r2, [pc, #80]	; (80082b4 <drumMenuInput+0x23c>)
 8008262:	21aa      	movs	r1, #170	; 0xaa
 8008264:	200a      	movs	r0, #10
 8008266:	f003 fdf7 	bl	800be58 <TM_ILI9341_Puts>
					sprintf(lcdline,"*End: %-4u",(unsigned int)(looper.EndPattern + 1));
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <drumMenuInput+0x224>)
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	3301      	adds	r3, #1
 8008270:	461a      	mov	r2, r3
 8008272:	4914      	ldr	r1, [pc, #80]	; (80082c4 <drumMenuInput+0x24c>)
 8008274:	480f      	ldr	r0, [pc, #60]	; (80082b4 <drumMenuInput+0x23c>)
 8008276:	f00e fcd9 	bl	8016c2c <siprintf>
					TM_ILI9341_Puts(10, 190, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800827a:	f240 531d 	movw	r3, #1309	; 0x51d
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <drumMenuInput+0x240>)
 8008286:	4a0b      	ldr	r2, [pc, #44]	; (80082b4 <drumMenuInput+0x23c>)
 8008288:	21be      	movs	r1, #190	; 0xbe
 800828a:	200a      	movs	r0, #10
 800828c:	f003 fde4 	bl	800be58 <TM_ILI9341_Puts>

				}

				input = FALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
		set_function(AUDIO_DRUMS);
 8008294:	e6fb      	b.n	800808e <drumMenuInput+0x16>

			//HAL_Delay(100);
		}


}
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20001220 	.word	0x20001220
 80082a0:	20001240 	.word	0x20001240
 80082a4:	20001250 	.word	0x20001250
 80082a8:	20001c39 	.word	0x20001c39
 80082ac:	20001d5c 	.word	0x20001d5c
 80082b0:	08018258 	.word	0x08018258
 80082b4:	20001264 	.word	0x20001264
 80082b8:	200001e0 	.word	0x200001e0
 80082bc:	08018268 	.word	0x08018268
 80082c0:	08018274 	.word	0x08018274
 80082c4:	08018284 	.word	0x08018284

080082c8 <audio_rhythm>:
extern TM_KEYPAD_Button_t Keypad_Button;
extern BOOL Skip_Read_Button;

static char filename[13];

void audio_rhythm(){
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
	//looper.Function = AUDIO_DRUMS;

}
 80082cc:	bf00      	nop
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <audio_only>:

void audio_only(){
 80082d6:	b480      	push	{r7}
 80082d8:	af00      	add	r7, sp, #0
	//looper.Function = AUDIO_ONLY;

}
 80082da:	bf00      	nop
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <highlight_on>:

void audio_drums(void){
	//looper.Function = AUDIO_DRUMS;
}

static void highlight_on(FileEntry *current){
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	6078      	str	r0, [r7, #4]
	TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082f0:	461a      	mov	r2, r3
 80082f2:	0092      	lsls	r2, r2, #2
 80082f4:	441a      	add	r2, r3
 80082f6:	0052      	lsls	r2, r2, #1
 80082f8:	4413      	add	r3, r2
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	330a      	adds	r3, #10
 80082fe:	b299      	uxth	r1, r3
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4b04      	ldr	r3, [pc, #16]	; (8008320 <highlight_on+0x3c>)
 8008310:	200a      	movs	r0, #10
 8008312:	f003 fda1 	bl	800be58 <TM_ILI9341_Puts>
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	200001d8 	.word	0x200001d8

08008324 <highlight_off>:

static void highlight_off(FileEntry *current){
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af02      	add	r7, sp, #8
 800832a:	6078      	str	r0, [r7, #4]
	TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008330:	461a      	mov	r2, r3
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	441a      	add	r2, r3
 8008336:	0052      	lsls	r2, r2, #1
 8008338:	4413      	add	r3, r2
 800833a:	b29b      	uxth	r3, r3
 800833c:	330a      	adds	r3, #10
 800833e:	b299      	uxth	r1, r3
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4b04      	ldr	r3, [pc, #16]	; (8008360 <highlight_off+0x3c>)
 8008350:	200a      	movs	r0, #10
 8008352:	f003 fd81 	bl	800be58 <TM_ILI9341_Puts>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200001d8 	.word	0x200001d8

08008364 <display_list_desc>:

static void display_list_desc(FileEntry *head,uint16_t size){
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
	FileEntry *current = head;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8008374:	f24a 2054 	movw	r0, #41556	; 0xa254
 8008378:	f003 fc6a 	bl	800bc50 <TM_ILI9341_Fill>
	current = head;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]
	do{
		if(current->list_pos == (size - 1))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008384:	461a      	mov	r2, r3
 8008386:	887b      	ldrh	r3, [r7, #2]
 8008388:	3b01      	subs	r3, #1
 800838a:	429a      	cmp	r2, r3
 800838c:	d115      	bne.n	80083ba <display_list_desc+0x56>
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008392:	461a      	mov	r2, r3
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	441a      	add	r2, r3
 8008398:	0052      	lsls	r2, r2, #1
 800839a:	4413      	add	r3, r2
 800839c:	b29b      	uxth	r3, r3
 800839e:	330a      	adds	r3, #10
 80083a0:	b299      	uxth	r1, r3
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4b15      	ldr	r3, [pc, #84]	; (8008408 <display_list_desc+0xa4>)
 80083b2:	200a      	movs	r0, #10
 80083b4:	f003 fd50 	bl	800be58 <TM_ILI9341_Puts>
 80083b8:	e014      	b.n	80083e4 <display_list_desc+0x80>
		else
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083be:	461a      	mov	r2, r3
 80083c0:	0092      	lsls	r2, r2, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	0052      	lsls	r2, r2, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	330a      	adds	r3, #10
 80083cc:	b299      	uxth	r1, r3
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	f24a 2354 	movw	r3, #41556	; 0xa254
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <display_list_desc+0xa4>)
 80083de:	200a      	movs	r0, #10
 80083e0:	f003 fd3a 	bl	800be58 <TM_ILI9341_Puts>

		current = current->prev;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	60fb      	str	r3, [r7, #12]
	}
	while(current != NULL && current->list_pos != (size - 1));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d006      	beq.n	80083fe <display_list_desc+0x9a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083f4:	461a      	mov	r2, r3
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d1c0      	bne.n	8008380 <display_list_desc+0x1c>

}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	200001d8 	.word	0x200001d8

0800840c <display_list_asc>:

static void display_list_asc(FileEntry *head,uint16_t size){
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	807b      	strh	r3, [r7, #2]
	FileEntry *current = head;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60fb      	str	r3, [r7, #12]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 800841c:	f24a 2054 	movw	r0, #41556	; 0xa254
 8008420:	f003 fc16 	bl	800bc50 <TM_ILI9341_Fill>
	current = head;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60fb      	str	r3, [r7, #12]
	do{
		if(current->list_pos == 0)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d115      	bne.n	800845c <display_list_asc+0x50>
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008434:	461a      	mov	r2, r3
 8008436:	0092      	lsls	r2, r2, #2
 8008438:	441a      	add	r2, r3
 800843a:	0052      	lsls	r2, r2, #1
 800843c:	4413      	add	r3, r2
 800843e:	b29b      	uxth	r3, r3
 8008440:	330a      	adds	r3, #10
 8008442:	b299      	uxth	r1, r3
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <display_list_asc+0x98>)
 8008454:	200a      	movs	r0, #10
 8008456:	f003 fcff 	bl	800be58 <TM_ILI9341_Puts>
 800845a:	e014      	b.n	8008486 <display_list_asc+0x7a>
		else
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008460:	461a      	mov	r2, r3
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	441a      	add	r2, r3
 8008466:	0052      	lsls	r2, r2, #1
 8008468:	4413      	add	r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	330a      	adds	r3, #10
 800846e:	b299      	uxth	r1, r3
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <display_list_asc+0x98>)
 8008480:	200a      	movs	r0, #10
 8008482:	f003 fce9 	bl	800be58 <TM_ILI9341_Puts>
		current = current->next;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	60fb      	str	r3, [r7, #12]
	}
	while(current != NULL && current->list_pos != 0);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <display_list_asc+0x8e>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1c6      	bne.n	8008428 <display_list_asc+0x1c>

}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200001d8 	.word	0x200001d8

080084a8 <get_file_sd>:


BOOL get_file_sd(char *outstr){
 80084a8:	b580      	push	{r7, lr}
 80084aa:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 80084ae:	af02      	add	r7, sp, #8
 80084b0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80084b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80084b8:	6018      	str	r0, [r3, #0]
	uint32_t idx = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	uint32_t list_size = 10;
 80084c0:	230a      	movs	r3, #10
 80084c2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	KeyDir keydir = KEY_NONE;
 80084c6:	2304      	movs	r3, #4
 80084c8:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
	TCHAR path[8];
	FILINFO fno;
	DIR dir;
	FIL fil;
	FileEntry *current, *head, *node, *tail;
	current = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	head = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	BOOL delete = FALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
	FRESULT res = f_getcwd(path,8);
 80084de:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80084e2:	2108      	movs	r1, #8
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd faa9 	bl	8005a3c <f_getcwd>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283


	f_opendir(&dir,path);
 80084f0:	f507 721d 	add.w	r2, r7, #628	; 0x274
 80084f4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80084f8:	4611      	mov	r1, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd fcd3 	bl	8005ea6 <f_opendir>
	if(res != FR_OK){
 8008500:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8008504:	2b00      	cmp	r3, #0
 8008506:	d06e      	beq.n	80085e6 <get_file_sd+0x13e>
			TM_ILI9341_Puts(10, 10, "Error reading SD card", &TM_Font_7x10,	ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 8008508:	f24a 2354 	movw	r3, #41556	; 0xa254
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4bbd      	ldr	r3, [pc, #756]	; (800880c <get_file_sd+0x364>)
 8008516:	4abe      	ldr	r2, [pc, #760]	; (8008810 <get_file_sd+0x368>)
 8008518:	210a      	movs	r1, #10
 800851a:	200a      	movs	r0, #10
 800851c:	f003 fc9c 	bl	800be58 <TM_ILI9341_Puts>
			return FALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	e1ba      	b.n	800889a <get_file_sd+0x3f2>
	}

	while((res = f_readdir(&dir, &fno)) == FR_OK && fno.fname[0] != 0){
		if((fno.fattrib & AM_DIR) || (fno.fsize == 0))	// directory
 8008524:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b00      	cmp	r3, #0
 800852e:	d15a      	bne.n	80085e6 <get_file_sd+0x13e>
 8008530:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d100      	bne.n	800853a <get_file_sd+0x92>
			continue;
 8008538:	e055      	b.n	80085e6 <get_file_sd+0x13e>
		 node = (FileEntry *)malloc(sizeof(FileEntry));
 800853a:	2030      	movs	r0, #48	; 0x30
 800853c:	f00e fa48 	bl	80169d0 <malloc>
 8008540:	4603      	mov	r3, r0
 8008542:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
		 strcpy(node->filename,fno.fname);
 8008546:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800854a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800854e:	3309      	adds	r3, #9
 8008550:	4619      	mov	r1, r3
 8008552:	4610      	mov	r0, r2
 8008554:	f00e fb99 	bl	8016c8a <strcpy>
		 node->number = idx++;
 8008558:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8008568:	845a      	strh	r2, [r3, #34]	; 0x22
		 node->list_pos = node->number % list_size;
 800856a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800856e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008570:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8008574:	fbb3 f2f2 	udiv	r2, r3, r2
 8008578:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 800857c:	fb01 f202 	mul.w	r2, r1, r2
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8008588:	849a      	strh	r2, [r3, #36]	; 0x24
		 node->next = node->prev = NULL;
 800858a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800858e:	2200      	movs	r2, #0
 8008590:	629a      	str	r2, [r3, #40]	; 0x28
 8008592:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8008596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008598:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800859c:	62da      	str	r2, [r3, #44]	; 0x2c
		 if(head == NULL){
 800859e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <get_file_sd+0x118>
			current = head = tail = node;
 80085a6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80085aa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80085ae:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80085b2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80085b6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80085ba:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80085be:	e012      	b.n	80085e6 <get_file_sd+0x13e>
		 }
		 else{
			 current = current->next = node;
 80085c0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80085c4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80085ca:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
			 current->prev = tail;
 80085d4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80085d8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80085dc:	629a      	str	r2, [r3, #40]	; 0x28
			 tail = current;
 80085de:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80085e2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	while((res = f_readdir(&dir, &fno)) == FR_OK && fno.fname[0] != 0){
 80085e6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80085ea:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fcc9 	bl	8005f88 <f_readdir>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 80085fc:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <get_file_sd+0x164>
 8008604:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 8008608:	2b00      	cmp	r3, #0
 800860a:	d18b      	bne.n	8008524 <get_file_sd+0x7c>
		 }
	}

	f_closedir(&dir);
 800860c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8008610:	4618      	mov	r0, r3
 8008612:	f7fd fca5 	bl	8005f60 <f_closedir>
	if(head == NULL){
 8008616:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <get_file_sd+0x192>
		TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 800861e:	f24a 2054 	movw	r0, #41556	; 0xa254
 8008622:	f003 fb15 	bl	800bc50 <TM_ILI9341_Fill>
		menuMultiLine(2,10,"No files","Press [0] key");
 8008626:	4b7b      	ldr	r3, [pc, #492]	; (8008814 <get_file_sd+0x36c>)
 8008628:	4a7b      	ldr	r2, [pc, #492]	; (8008818 <get_file_sd+0x370>)
 800862a:	210a      	movs	r1, #10
 800862c:	2002      	movs	r0, #2
 800862e:	f7ff fc87 	bl	8007f40 <menuMultiLine>
		menuWaitReturn();
 8008632:	f7ff fcbb 	bl	8007fac <menuWaitReturn>
		return FALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	e12f      	b.n	800889a <get_file_sd+0x3f2>
	}

	current = head;
 800863a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800863e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	display_list_asc(current,list_size);
 8008642:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008646:	b29b      	uxth	r3, r3
 8008648:	4619      	mov	r1, r3
 800864a:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800864e:	f7ff fedd 	bl	800840c <display_list_asc>
	menuMultiLine(3,180,"[2]Up [8]Down [5]Select","[3]Listen [U]ser button stop","[6]Delete [0]Cancel");
 8008652:	4b72      	ldr	r3, [pc, #456]	; (800881c <get_file_sd+0x374>)
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4b72      	ldr	r3, [pc, #456]	; (8008820 <get_file_sd+0x378>)
 8008658:	4a72      	ldr	r2, [pc, #456]	; (8008824 <get_file_sd+0x37c>)
 800865a:	21b4      	movs	r1, #180	; 0xb4
 800865c:	2003      	movs	r0, #3
 800865e:	f7ff fc6f 	bl	8007f40 <menuMultiLine>

	// read keys and display file list and cursor
	while ((Keypad_Button = TM_KEYPAD_Read())) {
 8008662:	e0f9      	b.n	8008858 <get_file_sd+0x3b0>
		switch (Keypad_Button) {
 8008664:	4b70      	ldr	r3, [pc, #448]	; (8008828 <get_file_sd+0x380>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b08      	cmp	r3, #8
 800866a:	f200 8097 	bhi.w	800879c <get_file_sd+0x2f4>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <get_file_sd+0x1cc>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	08008871 	.word	0x08008871
 8008678:	0800879d 	.word	0x0800879d
 800867c:	08008699 	.word	0x08008699
 8008680:	080086b5 	.word	0x080086b5
 8008684:	0800879d 	.word	0x0800879d
 8008688:	08008745 	.word	0x08008745
 800868c:	0800875b 	.word	0x0800875b
 8008690:	0800879d 	.word	0x0800879d
 8008694:	08008773 	.word	0x08008773
			case TM_KEYPAD_Button_2:	keydir = KEY_UP;
 8008698:	2300      	movs	r3, #0
 800869a:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
										if(current->prev != NULL)
 800869e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d072      	beq.n	800878e <get_file_sd+0x2e6>
											current = current->prev;
 80086a8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
										break;
 80086b2:	e06c      	b.n	800878e <get_file_sd+0x2e6>
			case TM_KEYPAD_Button_3:	if(looper.Function == AUDIO_ONLY){
 80086b4:	4b5d      	ldr	r3, [pc, #372]	; (800882c <get_file_sd+0x384>)
 80086b6:	7f5b      	ldrb	r3, [r3, #29]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d115      	bne.n	80086ea <get_file_sd+0x242>
											f_open(&fil,current->filename,FA_OPEN_ALWAYS | FA_READ);
 80086be:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 80086c2:	f107 0318 	add.w	r3, r7, #24
 80086c6:	2211      	movs	r2, #17
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fc fd0f 	bl	80050ec <f_open>
											looper.Function = PLAY_SD;
 80086ce:	4b57      	ldr	r3, [pc, #348]	; (800882c <get_file_sd+0x384>)
 80086d0:	2206      	movs	r2, #6
 80086d2:	775a      	strb	r2, [r3, #29]
											SD_readSingleTrack(&fil);
 80086d4:	f107 0318 	add.w	r3, r7, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fc1b 	bl	8006f14 <SD_readSingleTrack>
											f_close(&fil);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fd f98d 	bl	8005a02 <f_close>
											looper.StartPattern = 0;
											looper.EndPattern = (numOfPatterns > 4?3:(numOfPatterns - 1));
											drumLoop();
											looper.Function = AUDIO_DRUMS;
										}
										break;
 80086e8:	e053      	b.n	8008792 <get_file_sd+0x2ea>
										else if(looper.Function == AUDIO_DRUMS){
 80086ea:	4b50      	ldr	r3, [pc, #320]	; (800882c <get_file_sd+0x384>)
 80086ec:	7f5b      	ldrb	r3, [r3, #29]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d14e      	bne.n	8008792 <get_file_sd+0x2ea>
											readRhythmFromSD(current->filename);
 80086f4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ff49 	bl	8007590 <readRhythmFromSD>
											memset(pattern_audio_map,0,sizeof(pattern_audio_map));
 80086fe:	f640 126c 	movw	r2, #2412	; 0x96c
 8008702:	2100      	movs	r1, #0
 8008704:	484a      	ldr	r0, [pc, #296]	; (8008830 <get_file_sd+0x388>)
 8008706:	f00e f981 	bl	8016a0c <memset>
											readDrums(&numOfPatterns,&numOfBytes,&maxResolution);
 800870a:	f107 020c 	add.w	r2, r7, #12
 800870e:	f107 0110 	add.w	r1, r7, #16
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f7fa fa20 	bl	8002b5c <readDrums>
											looper.StartPattern = 0;
 800871c:	4b43      	ldr	r3, [pc, #268]	; (800882c <get_file_sd+0x384>)
 800871e:	2200      	movs	r2, #0
 8008720:	615a      	str	r2, [r3, #20]
											looper.EndPattern = (numOfPatterns > 4?3:(numOfPatterns - 1));
 8008722:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8008726:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b04      	cmp	r3, #4
 800872e:	bf28      	it	cs
 8008730:	2304      	movcs	r3, #4
 8008732:	3b01      	subs	r3, #1
 8008734:	4a3d      	ldr	r2, [pc, #244]	; (800882c <get_file_sd+0x384>)
 8008736:	6193      	str	r3, [r2, #24]
											drumLoop();
 8008738:	f7f9 fece 	bl	80024d8 <drumLoop>
											looper.Function = AUDIO_DRUMS;
 800873c:	4b3b      	ldr	r3, [pc, #236]	; (800882c <get_file_sd+0x384>)
 800873e:	2202      	movs	r2, #2
 8008740:	775a      	strb	r2, [r3, #29]
										break;
 8008742:	e026      	b.n	8008792 <get_file_sd+0x2ea>
			case TM_KEYPAD_Button_5:	strcpy(outstr,current->filename);
 8008744:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8008748:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800874c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8008750:	4611      	mov	r1, r2
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	f00e fa99 	bl	8016c8a <strcpy>
										goto end_get_file;
 8008758:	e08b      	b.n	8008872 <get_file_sd+0x3ca>
			case TM_KEYPAD_Button_6:	if(f_unlink(current->filename) == FR_OK){
 800875a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd fcf8 	bl	8006154 <f_unlink>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d115      	bne.n	8008796 <get_file_sd+0x2ee>
											delete = TRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
											goto end_get_file;
 8008770:	e07f      	b.n	8008872 <get_file_sd+0x3ca>
										}
										break;
			case TM_KEYPAD_Button_8:	keydir = KEY_DOWN;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
										if(current->next != NULL)
 8008778:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00b      	beq.n	800879a <get_file_sd+0x2f2>
											current = current->next;
 8008782:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
										break;
 800878c:	e005      	b.n	800879a <get_file_sd+0x2f2>
										break;
 800878e:	bf00      	nop
 8008790:	e004      	b.n	800879c <get_file_sd+0x2f4>
										break;
 8008792:	bf00      	nop
 8008794:	e002      	b.n	800879c <get_file_sd+0x2f4>
										break;
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <get_file_sd+0x2f4>
										break;
 800879a:	bf00      	nop
			case TM_KEYPAD_Button_0:	goto end_get_file;

		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 800879c:	4b22      	ldr	r3, [pc, #136]	; (8008828 <get_file_sd+0x380>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2bff      	cmp	r3, #255	; 0xff
 80087a2:	d059      	beq.n	8008858 <get_file_sd+0x3b0>
			if(keydir == KEY_DOWN){
 80087a4:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d118      	bne.n	80087de <get_file_sd+0x336>
				if(current->list_pos == 0)
 80087ac:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80087b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d108      	bne.n	80087c8 <get_file_sd+0x320>
					display_list_asc(current,list_size);
 80087b6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 80087c2:	f7ff fe23 	bl	800840c <display_list_asc>
 80087c6:	e03f      	b.n	8008848 <get_file_sd+0x3a0>
				else{
					highlight_on(current);
 80087c8:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 80087cc:	f7ff fd8a 	bl	80082e4 <highlight_on>
					highlight_off(current->prev);
 80087d0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fda4 	bl	8008324 <highlight_off>
 80087dc:	e034      	b.n	8008848 <get_file_sd+0x3a0>
				}
			}
			else if(keydir == KEY_UP){
 80087de:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d130      	bne.n	8008848 <get_file_sd+0x3a0>
				if(current->list_pos == (list_size - 1))
 80087e6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80087ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087ec:	461a      	mov	r2, r3
 80087ee:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80087f2:	3b01      	subs	r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d11d      	bne.n	8008834 <get_file_sd+0x38c>
					display_list_desc(current,list_size);
 80087f8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4619      	mov	r1, r3
 8008800:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8008804:	f7ff fdae 	bl	8008364 <display_list_desc>
 8008808:	e01e      	b.n	8008848 <get_file_sd+0x3a0>
 800880a:	bf00      	nop
 800880c:	200001d8 	.word	0x200001d8
 8008810:	08018290 	.word	0x08018290
 8008814:	080182a8 	.word	0x080182a8
 8008818:	080182b8 	.word	0x080182b8
 800881c:	080182fc 	.word	0x080182fc
 8008820:	080182c4 	.word	0x080182c4
 8008824:	080182e4 	.word	0x080182e4
 8008828:	20001c39 	.word	0x20001c39
 800882c:	20001220 	.word	0x20001220
 8008830:	20000560 	.word	0x20000560
				else{
					highlight_on(current);
 8008834:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8008838:	f7ff fd54 	bl	80082e4 <highlight_on>
					highlight_off(current->next);
 800883c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fd6e 	bl	8008324 <highlight_off>
				}
			}

			menuMultiLine(3,180,"[2]Up [8]Down [5]Select","[3]Listen [U]ser button stop","[6]Delete [0]Cancel");
 8008848:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <get_file_sd+0x3fc>)
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <get_file_sd+0x400>)
 800884e:	4a17      	ldr	r2, [pc, #92]	; (80088ac <get_file_sd+0x404>)
 8008850:	21b4      	movs	r1, #180	; 0xb4
 8008852:	2003      	movs	r0, #3
 8008854:	f7ff fb74 	bl	8007f40 <menuMultiLine>
	while ((Keypad_Button = TM_KEYPAD_Read())) {
 8008858:	f003 fc38 	bl	800c0cc <TM_KEYPAD_Read>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	4b13      	ldr	r3, [pc, #76]	; (80088b0 <get_file_sd+0x408>)
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <get_file_sd+0x408>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f47f aefb 	bne.w	8008664 <get_file_sd+0x1bc>
		}
	}	// end of while


	end_get_file:
 800886e:	e000      	b.n	8008872 <get_file_sd+0x3ca>
			case TM_KEYPAD_Button_0:	goto end_get_file;
 8008870:	bf00      	nop
	// free linked list memory
	for(current = head; current;current=current->next)
 8008872:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008876:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800887a:	e008      	b.n	800888e <get_file_sd+0x3e6>
		free(current);
 800887c:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8008880:	f00e f8ae 	bl	80169e0 <free>
	for(current = head; current;current=current->next)
 8008884:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800888e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f2      	bne.n	800887c <get_file_sd+0x3d4>

	return delete;
 8008896:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
}
 800889a:	4618      	mov	r0, r3
 800889c:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	080182fc 	.word	0x080182fc
 80088a8:	080182c4 	.word	0x080182c4
 80088ac:	080182e4 	.word	0x080182e4
 80088b0:	20001c39 	.word	0x20001c39

080088b4 <get_string>:


void get_string(char *outstr) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
	uint8_t nameIndex = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
	TM_KEYPAD_Button_t tmpKey = TM_KEYPAD_Button_NOPRESSED;
 80088c0:	23ff      	movs	r3, #255	; 0xff
 80088c2:	73bb      	strb	r3, [r7, #14]
	uint8_t charIndex = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	737b      	strb	r3, [r7, #13]
	BOOL keyChar = FALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	733b      	strb	r3, [r7, #12]
	BOOL keyBack = FALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	72fb      	strb	r3, [r7, #11]
	BOOL keyForw = FALSE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	72bb      	strb	r3, [r7, #10]
	BOOL keyDel = FALSE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	727b      	strb	r3, [r7, #9]

	// array indexed by TM_KEYPAD_Button_t
	static char* keychars[10] = { "0", "1._", "2ABCabc", "3DEFdef", "4GHIghi",
			"5JKLjkl", "6MNOmno", "7PRSprs", "8TUVtuv", "9WXYZwxyz" };
	memset(outstr, '\0', 26);
 80088d8:	221a      	movs	r2, #26
 80088da:	2100      	movs	r1, #0
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f00e f895 	bl	8016a0c <memset>
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 80088e2:	f24a 2054 	movw	r0, #41556	; 0xa254
 80088e6:	f003 f9b3 	bl	800bc50 <TM_ILI9341_Fill>
	TM_ILI9341_Puts(10, 10, "Type filename and/or press [#]", &TM_Font_7x10,
 80088ea:	f24a 2354 	movw	r3, #41556	; 0xa254
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4baf      	ldr	r3, [pc, #700]	; (8008bb4 <get_string+0x300>)
 80088f8:	4aaf      	ldr	r2, [pc, #700]	; (8008bb8 <get_string+0x304>)
 80088fa:	210a      	movs	r1, #10
 80088fc:	200a      	movs	r0, #10
 80088fe:	f003 faab 	bl	800be58 <TM_ILI9341_Puts>
			ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
	while (TM_KEYPAD_Read() == TM_KEYPAD_Button_4)
 8008902:	e000      	b.n	8008906 <get_string+0x52>
		continue;
 8008904:	bf00      	nop
	while (TM_KEYPAD_Read() == TM_KEYPAD_Button_4)
 8008906:	f003 fbe1 	bl	800c0cc <TM_KEYPAD_Read>
 800890a:	4603      	mov	r3, r0
 800890c:	2b04      	cmp	r3, #4
 800890e:	d0f9      	beq.n	8008904 <get_string+0x50>
	TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ', &TM_Font_11x18,
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	b29b      	uxth	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	441a      	add	r2, r3
 800891a:	0052      	lsls	r2, r2, #1
 800891c:	4413      	add	r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	330a      	adds	r3, #10
 8008922:	b298      	uxth	r0, r3
 8008924:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4ba3      	ldr	r3, [pc, #652]	; (8008bbc <get_string+0x308>)
 8008930:	2220      	movs	r2, #32
 8008932:	211e      	movs	r1, #30
 8008934:	f003 fae8 	bl	800bf08 <TM_ILI9341_Putc>
			ILI9341_COLOR_BLACK, ILI9341_COLOR_YELLOW);
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_HASH) {
 8008938:	e15a      	b.n	8008bf0 <get_string+0x33c>
		switch (Keypad_Button) {
 800893a:	4ba1      	ldr	r3, [pc, #644]	; (8008bc0 <get_string+0x30c>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b0e      	cmp	r3, #14
 8008940:	d856      	bhi.n	80089f0 <get_string+0x13c>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <get_string+0x94>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008985 	.word	0x08008985
 800894c:	08008985 	.word	0x08008985
 8008950:	08008985 	.word	0x08008985
 8008954:	08008985 	.word	0x08008985
 8008958:	08008985 	.word	0x08008985
 800895c:	08008985 	.word	0x08008985
 8008960:	08008985 	.word	0x08008985
 8008964:	08008985 	.word	0x08008985
 8008968:	08008985 	.word	0x08008985
 800896c:	08008985 	.word	0x08008985
 8008970:	080089f1 	.word	0x080089f1
 8008974:	080089f1 	.word	0x080089f1
 8008978:	080089df 	.word	0x080089df
 800897c:	080089e5 	.word	0x080089e5
 8008980:	080089eb 	.word	0x080089eb
			case TM_KEYPAD_Button_5:
			case TM_KEYPAD_Button_6:
			case TM_KEYPAD_Button_7:
			case TM_KEYPAD_Button_8:
			case TM_KEYPAD_Button_9:
				keyChar = TRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	733b      	strb	r3, [r7, #12]
				if (Keypad_Button != tmpKey) {
 8008988:	4b8d      	ldr	r3, [pc, #564]	; (8008bc0 <get_string+0x30c>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	7bba      	ldrb	r2, [r7, #14]
 800898e:	429a      	cmp	r2, r3
 8008990:	d005      	beq.n	800899e <get_string+0xea>
					tmpKey = Keypad_Button;
 8008992:	4b8b      	ldr	r3, [pc, #556]	; (8008bc0 <get_string+0x30c>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	73bb      	strb	r3, [r7, #14]
					charIndex = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	737b      	strb	r3, [r7, #13]
 800899c:	e011      	b.n	80089c2 <get_string+0x10e>
				} else if (keychars[Keypad_Button][charIndex + 1] != '\0')
 800899e:	4b88      	ldr	r3, [pc, #544]	; (8008bc0 <get_string+0x30c>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	4b87      	ldr	r3, [pc, #540]	; (8008bc4 <get_string+0x310>)
 80089a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089aa:	7b7b      	ldrb	r3, [r7, #13]
 80089ac:	3301      	adds	r3, #1
 80089ae:	4413      	add	r3, r2
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <get_string+0x10a>
					charIndex++;
 80089b6:	7b7b      	ldrb	r3, [r7, #13]
 80089b8:	3301      	adds	r3, #1
 80089ba:	737b      	strb	r3, [r7, #13]
 80089bc:	e001      	b.n	80089c2 <get_string+0x10e>
				else
					charIndex = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	737b      	strb	r3, [r7, #13]

				outstr[nameIndex] = keychars[Keypad_Button][charIndex];
 80089c2:	4b7f      	ldr	r3, [pc, #508]	; (8008bc0 <get_string+0x30c>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b7e      	ldr	r3, [pc, #504]	; (8008bc4 <get_string+0x310>)
 80089ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089ce:	7b7b      	ldrb	r3, [r7, #13]
 80089d0:	441a      	add	r2, r3
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	440b      	add	r3, r1
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
				break;
 80089dc:	e008      	b.n	80089f0 <get_string+0x13c>
			case TM_KEYPAD_Button_A:
				keyForw = TRUE;
 80089de:	2301      	movs	r3, #1
 80089e0:	72bb      	strb	r3, [r7, #10]
				break;
 80089e2:	e005      	b.n	80089f0 <get_string+0x13c>
			case TM_KEYPAD_Button_B:
				keyBack = TRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	72fb      	strb	r3, [r7, #11]
				break;
 80089e8:	e002      	b.n	80089f0 <get_string+0x13c>
			case TM_KEYPAD_Button_C:
				keyDel = TRUE;
 80089ea:	2301      	movs	r3, #1
 80089ec:	727b      	strb	r3, [r7, #9]
				break;
 80089ee:	bf00      	nop
		}
		if (Keypad_Button != TM_KEYPAD_Button_NOPRESSED) {
 80089f0:	4b73      	ldr	r3, [pc, #460]	; (8008bc0 <get_string+0x30c>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2bff      	cmp	r3, #255	; 0xff
 80089f6:	f000 80fb 	beq.w	8008bf0 <get_string+0x33c>
			TM_ILI9341_Puts(10, 30, outstr, &TM_Font_11x18,
 80089fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4b6d      	ldr	r3, [pc, #436]	; (8008bbc <get_string+0x308>)
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	211e      	movs	r1, #30
 8008a0a:	200a      	movs	r0, #10
 8008a0c:	f003 fa24 	bl	800be58 <TM_ILI9341_Puts>
					ILI9341_COLOR_BLACK, ILI9341_COLOR_CYAN);
			if (keyChar == TRUE) {
 8008a10:	7b3b      	ldrb	r3, [r7, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d119      	bne.n	8008a4a <get_string+0x196>
				keyChar = FALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	733b      	strb	r3, [r7, #12]
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	441a      	add	r2, r3
 8008a24:	0052      	lsls	r2, r2, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	330a      	adds	r3, #10
 8008a2c:	b298      	uxth	r0, r3
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	4413      	add	r3, r2
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4b5e      	ldr	r3, [pc, #376]	; (8008bbc <get_string+0x308>)
 8008a42:	211e      	movs	r1, #30
 8008a44:	f003 fa60 	bl	800bf08 <TM_ILI9341_Putc>
 8008a48:	e096      	b.n	8008b78 <get_string+0x2c4>
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			} else if (keyForw == TRUE) {
 8008a4a:	7abb      	ldrb	r3, [r7, #10]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d123      	bne.n	8008a98 <get_string+0x1e4>
				keyForw = FALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	72bb      	strb	r3, [r7, #10]
				if (nameIndex < 11 && outstr[nameIndex] != '\0')
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	2b0a      	cmp	r3, #10
 8008a58:	d809      	bhi.n	8008a6e <get_string+0x1ba>
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	4413      	add	r3, r2
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <get_string+0x1ba>
					nameIndex++;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
 8008a6c:	e084      	b.n	8008b78 <get_string+0x2c4>
				else
					TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ',
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	0092      	lsls	r2, r2, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	0052      	lsls	r2, r2, #1
 8008a7a:	4413      	add	r3, r2
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	330a      	adds	r3, #10
 8008a80:	b298      	uxth	r0, r3
 8008a82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4b4b      	ldr	r3, [pc, #300]	; (8008bbc <get_string+0x308>)
 8008a8e:	2220      	movs	r2, #32
 8008a90:	211e      	movs	r1, #30
 8008a92:	f003 fa39 	bl	800bf08 <TM_ILI9341_Putc>
 8008a96:	e06f      	b.n	8008b78 <get_string+0x2c4>
							&TM_Font_11x18, ILI9341_COLOR_BLACK,
							ILI9341_COLOR_YELLOW);
			} else if (keyBack == TRUE) {
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d13a      	bne.n	8008b14 <get_string+0x260>
				keyBack = FALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	72fb      	strb	r3, [r7, #11]
				if (outstr[nameIndex] == '\0')
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d114      	bne.n	8008ad8 <get_string+0x224>
					TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ',
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	0092      	lsls	r2, r2, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	0052      	lsls	r2, r2, #1
 8008aba:	4413      	add	r3, r2
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	330a      	adds	r3, #10
 8008ac0:	b298      	uxth	r0, r3
 8008ac2:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4b3b      	ldr	r3, [pc, #236]	; (8008bbc <get_string+0x308>)
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	211e      	movs	r1, #30
 8008ad4:	f003 fa18 	bl	800bf08 <TM_ILI9341_Putc>
							&TM_Font_11x18, ILI9341_COLOR_MAGENTA,
							ILI9341_COLOR_MAGENTA);

				if (nameIndex > 0)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <get_string+0x230>
					nameIndex--;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]

				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	0092      	lsls	r2, r2, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	0052      	lsls	r2, r2, #1
 8008af0:	4413      	add	r3, r2
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	330a      	adds	r3, #10
 8008af6:	b298      	uxth	r0, r3
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	2300      	movs	r3, #0
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	4b2c      	ldr	r3, [pc, #176]	; (8008bbc <get_string+0x308>)
 8008b0c:	211e      	movs	r1, #30
 8008b0e:	f003 f9fb 	bl	800bf08 <TM_ILI9341_Putc>
 8008b12:	e031      	b.n	8008b78 <get_string+0x2c4>
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			} else if (keyDel == TRUE) {
 8008b14:	7a7b      	ldrb	r3, [r7, #9]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d12e      	bne.n	8008b78 <get_string+0x2c4>
				keyDel = FALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	727b      	strb	r3, [r7, #9]
				strcpy(outstr + nameIndex, outstr + nameIndex + 1);
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	18d0      	adds	r0, r2, r3
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	3301      	adds	r3, #1
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f00e f8ac 	bl	8016c8a <strcpy>
				TM_ILI9341_Puts(10, 30, outstr, &TM_Font_11x18,
 8008b32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <get_string+0x308>)
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	211e      	movs	r1, #30
 8008b42:	200a      	movs	r0, #10
 8008b44:	f003 f988 	bl	800be58 <TM_ILI9341_Puts>
						ILI9341_COLOR_BLACK, ILI9341_COLOR_CYAN);
				TM_ILI9341_Putc(10 + (strlen(outstr) * 11), 30, ' ',
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7f7 fb51 	bl	80001f0 <strlen>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	0092      	lsls	r2, r2, #2
 8008b56:	441a      	add	r2, r3
 8008b58:	0052      	lsls	r2, r2, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	330a      	adds	r3, #10
 8008b60:	b298      	uxth	r0, r3
 8008b62:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <get_string+0x308>)
 8008b70:	2220      	movs	r2, #32
 8008b72:	211e      	movs	r1, #30
 8008b74:	f003 f9c8 	bl	800bf08 <TM_ILI9341_Putc>
						&TM_Font_11x18, ILI9341_COLOR_MAGENTA,
						ILI9341_COLOR_MAGENTA);
			}

			if (outstr[nameIndex] != '\0')
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d021      	beq.n	8008bc8 <get_string+0x314>
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	0052      	lsls	r2, r2, #1
 8008b90:	4413      	add	r3, r2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	330a      	adds	r3, #10
 8008b96:	b298      	uxth	r0, r3
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <get_string+0x308>)
 8008bac:	211e      	movs	r1, #30
 8008bae:	f003 f9ab 	bl	800bf08 <TM_ILI9341_Putc>
 8008bb2:	e01d      	b.n	8008bf0 <get_string+0x33c>
 8008bb4:	200001d8 	.word	0x200001d8
 8008bb8:	08018310 	.word	0x08018310
 8008bbc:	200001e0 	.word	0x200001e0
 8008bc0:	20001c39 	.word	0x20001c39
 8008bc4:	200001a0 	.word	0x200001a0
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			else
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ', &TM_Font_11x18,
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	441a      	add	r2, r3
 8008bd2:	0052      	lsls	r2, r2, #1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	330a      	adds	r3, #10
 8008bda:	b298      	uxth	r0, r3
 8008bdc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <get_string+0x35c>)
 8008be8:	2220      	movs	r2, #32
 8008bea:	211e      	movs	r1, #30
 8008bec:	f003 f98c 	bl	800bf08 <TM_ILI9341_Putc>
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_HASH) {
 8008bf0:	f003 fa6c 	bl	800c0cc <TM_KEYPAD_Read>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <get_string+0x360>)
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <get_string+0x360>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b0b      	cmp	r3, #11
 8008c02:	f47f ae9a 	bne.w	800893a <get_string+0x86>
						ILI9341_COLOR_BLACK, ILI9341_COLOR_YELLOW);
		}
	}
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200001e0 	.word	0x200001e0
 8008c14:	20001c39 	.word	0x20001c39

08008c18 <download_rhythm>:
void saveAllLoops()
{

}

void download_rhythm() {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af02      	add	r7, sp, #8
	looper.Function = DOWNLOAD_SRAM;
 8008c1e:	4b27      	ldr	r3, [pc, #156]	; (8008cbc <download_rhythm+0xa4>)
 8008c20:	2204      	movs	r2, #4
 8008c22:	775a      	strb	r2, [r3, #29]
	uint32_t bytes_written = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	607b      	str	r3, [r7, #4]

	while(TRUE){
		begin_download:
			filename[0] = '\0';
 8008c28:	4b25      	ldr	r3, [pc, #148]	; (8008cc0 <download_rhythm+0xa8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
			menuMultiLine(2,110,"Press [Send via USB] button","in Rhythm application.");
 8008c2e:	4b25      	ldr	r3, [pc, #148]	; (8008cc4 <download_rhythm+0xac>)
 8008c30:	4a25      	ldr	r2, [pc, #148]	; (8008cc8 <download_rhythm+0xb0>)
 8008c32:	216e      	movs	r1, #110	; 0x6e
 8008c34:	2002      	movs	r0, #2
 8008c36:	f7ff f983 	bl	8007f40 <menuMultiLine>
			if((bytes_written = SRAM_download_rhythm()) > 0){
 8008c3a:	f7fe fb73 	bl	8007324 <SRAM_download_rhythm>
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d02d      	beq.n	8008ca2 <download_rhythm+0x8a>
				TM_ILI9341_DrawFilledRectangle(10,110,320,150,ILI9341_COLOR_MAGENTA);
 8008c46:	f24a 2354 	movw	r3, #41556	; 0xa254
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2396      	movs	r3, #150	; 0x96
 8008c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008c52:	216e      	movs	r1, #110	; 0x6e
 8008c54:	200a      	movs	r0, #10
 8008c56:	f003 f9e9 	bl	800c02c <TM_ILI9341_DrawFilledRectangle>
				menuMultiLine(2,110,"[1] Save rhythm to SD card","[2] Repeat download");
 8008c5a:	4b1c      	ldr	r3, [pc, #112]	; (8008ccc <download_rhythm+0xb4>)
 8008c5c:	4a1c      	ldr	r2, [pc, #112]	; (8008cd0 <download_rhythm+0xb8>)
 8008c5e:	216e      	movs	r1, #110	; 0x6e
 8008c60:	2002      	movs	r0, #2
 8008c62:	f7ff f96d 	bl	8007f40 <menuMultiLine>
				while(TRUE){
					filename[0] = '\0';
 8008c66:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <download_rhythm+0xa8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
					Keypad_Button = TM_KEYPAD_Read();
 8008c6c:	f003 fa2e 	bl	800c0cc <TM_KEYPAD_Read>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	4b17      	ldr	r3, [pc, #92]	; (8008cd4 <download_rhythm+0xbc>)
 8008c76:	701a      	strb	r2, [r3, #0]

					switch(Keypad_Button){
 8008c78:	4b16      	ldr	r3, [pc, #88]	; (8008cd4 <download_rhythm+0xbc>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d0d3      	beq.n	8008c28 <download_rhythm+0x10>
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	dcf0      	bgt.n	8008c66 <download_rhythm+0x4e>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <download_rhythm+0x8e>
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d109      	bne.n	8008ca0 <download_rhythm+0x88>
						case TM_KEYPAD_Button_0:	goto end_download;
						case TM_KEYPAD_Button_1:	get_string(filename);
 8008c8c:	480c      	ldr	r0, [pc, #48]	; (8008cc0 <download_rhythm+0xa8>)
 8008c8e:	f7ff fe11 	bl	80088b4 <get_string>
													writeSRAMtoSD(bytes_written,filename);
 8008c92:	490b      	ldr	r1, [pc, #44]	; (8008cc0 <download_rhythm+0xa8>)
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7fe fcd1 	bl	800763c <writeSRAMtoSD>
													menuShowOptions();
 8008c9a:	f7fe fe01 	bl	80078a0 <menuShowOptions>
													goto end_download;
 8008c9e:	e003      	b.n	8008ca8 <download_rhythm+0x90>
					filename[0] = '\0';
 8008ca0:	e7e1      	b.n	8008c66 <download_rhythm+0x4e>
						case TM_KEYPAD_Button_2:	goto begin_download;
					}
				}

			}
			else goto end_download;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <download_rhythm+0x90>
						case TM_KEYPAD_Button_0:	goto end_download;
 8008ca6:	bf00      	nop


	}

	end_download:
	looper.Function = IDLE;
 8008ca8:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <download_rhythm+0xa4>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	775a      	strb	r2, [r3, #29]
	Skip_Read_Button = TRUE;
 8008cae:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <download_rhythm+0xc0>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20001220 	.word	0x20001220
 8008cc0:	20001fa0 	.word	0x20001fa0
 8008cc4:	08018330 	.word	0x08018330
 8008cc8:	08018348 	.word	0x08018348
 8008ccc:	08018364 	.word	0x08018364
 8008cd0:	08018378 	.word	0x08018378
 8008cd4:	20001c39 	.word	0x20001c39
 8008cd8:	20001c3b 	.word	0x20001c3b

08008cdc <select_rhythm>:

void select_rhythm(){
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
	set_function(IDLE);
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f7fe f8c9 	bl	8006e78 <set_function>
	menuMultiLine(1,30,"[1] Select file");
 8008ce6:	4a1a      	ldr	r2, [pc, #104]	; (8008d50 <select_rhythm+0x74>)
 8008ce8:	211e      	movs	r1, #30
 8008cea:	2001      	movs	r0, #1
 8008cec:	f7ff f928 	bl	8007f40 <menuMultiLine>
	while(TRUE){
			filename[0] = '\0';
 8008cf0:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <select_rhythm+0x78>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
			Keypad_Button = TM_KEYPAD_Read();
 8008cf6:	f003 f9e9 	bl	800c0cc <TM_KEYPAD_Read>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <select_rhythm+0x7c>)
 8008d00:	701a      	strb	r2, [r3, #0]
			checkSD();
 8008d02:	f7fe fac9 	bl	8007298 <checkSD>
			switch(Keypad_Button){
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <select_rhythm+0x7c>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d019      	beq.n	8008d42 <select_rhythm+0x66>
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d10d      	bne.n	8008d2e <select_rhythm+0x52>
				case TM_KEYPAD_Button_0: 	goto end_select_loop;
				case TM_KEYPAD_Button_1:	while(get_file_sd(filename) == TRUE)
 8008d12:	e000      	b.n	8008d16 <select_rhythm+0x3a>
												continue;
 8008d14:	bf00      	nop
				case TM_KEYPAD_Button_1:	while(get_file_sd(filename) == TRUE)
 8008d16:	480f      	ldr	r0, [pc, #60]	; (8008d54 <select_rhythm+0x78>)
 8008d18:	f7ff fbc6 	bl	80084a8 <get_file_sd>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d0f8      	beq.n	8008d14 <select_rhythm+0x38>
											readRhythmFromSD(filename);
 8008d22:	480c      	ldr	r0, [pc, #48]	; (8008d54 <select_rhythm+0x78>)
 8008d24:	f7fe fc34 	bl	8007590 <readRhythmFromSD>
											menuShowOptions();
 8008d28:	f7fe fdba 	bl	80078a0 <menuShowOptions>
											break;
 8008d2c:	bf00      	nop
			}
			if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <select_rhythm+0x7c>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2bff      	cmp	r3, #255	; 0xff
 8008d34:	d0dc      	beq.n	8008cf0 <select_rhythm+0x14>
				menuMultiLine(1,30,"[1] Select file");
 8008d36:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <select_rhythm+0x74>)
 8008d38:	211e      	movs	r1, #30
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f7ff f900 	bl	8007f40 <menuMultiLine>
			filename[0] = '\0';
 8008d40:	e7d6      	b.n	8008cf0 <select_rhythm+0x14>
				case TM_KEYPAD_Button_0: 	goto end_select_loop;
 8008d42:	bf00      	nop
			}

	}

	end_select_loop:
	Skip_Read_Button = TRUE;
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <select_rhythm+0x80>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08018394 	.word	0x08018394
 8008d54:	20001fa0 	.word	0x20001fa0
 8008d58:	20001c39 	.word	0x20001c39
 8008d5c:	20001c3b 	.word	0x20001c3b

08008d60 <select_loops>:

void select_loops(){
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af06      	add	r7, sp, #24

	looper.StartPattern = 0;
 8008d66:	4b96      	ldr	r3, [pc, #600]	; (8008fc0 <select_loops+0x260>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	615a      	str	r2, [r3, #20]
	looper.EndPattern = 0;
 8008d6c:	4b94      	ldr	r3, [pc, #592]	; (8008fc0 <select_loops+0x260>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	619a      	str	r2, [r3, #24]

	while(TM_KEYPAD_Read() != TM_KEYPAD_Button_NOPRESSED)
 8008d72:	e000      	b.n	8008d76 <select_loops+0x16>
		continue;
 8008d74:	bf00      	nop
	while(TM_KEYPAD_Read() != TM_KEYPAD_Button_NOPRESSED)
 8008d76:	f003 f9a9 	bl	800c0cc <TM_KEYPAD_Read>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2bff      	cmp	r3, #255	; 0xff
 8008d7e:	d1f9      	bne.n	8008d74 <select_loops+0x14>
	show_status_line = TRUE;
 8008d80:	4b90      	ldr	r3, [pc, #576]	; (8008fc4 <select_loops+0x264>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]
	SHOW_STATUS_LINE();
 8008d86:	4b8f      	ldr	r3, [pc, #572]	; (8008fc4 <select_loops+0x264>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d104      	bne.n	8008d98 <select_loops+0x38>
 8008d8e:	f7fe ff91 	bl	8007cb4 <menuShowStatus>
 8008d92:	4b8c      	ldr	r3, [pc, #560]	; (8008fc4 <select_loops+0x264>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]

	menuMultiLine(7,30,"[1] Skip loop backward","[2] Skip loop forward","[3] Pause/Resume loop","[4] Save current loop","[5] Read loop from SD","[6] Save all loops","[AB] Select channels");
 8008d98:	4b8b      	ldr	r3, [pc, #556]	; (8008fc8 <select_loops+0x268>)
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	4b8b      	ldr	r3, [pc, #556]	; (8008fcc <select_loops+0x26c>)
 8008d9e:	9303      	str	r3, [sp, #12]
 8008da0:	4b8b      	ldr	r3, [pc, #556]	; (8008fd0 <select_loops+0x270>)
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	4b8b      	ldr	r3, [pc, #556]	; (8008fd4 <select_loops+0x274>)
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	4b8b      	ldr	r3, [pc, #556]	; (8008fd8 <select_loops+0x278>)
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4b8b      	ldr	r3, [pc, #556]	; (8008fdc <select_loops+0x27c>)
 8008dae:	4a8c      	ldr	r2, [pc, #560]	; (8008fe0 <select_loops+0x280>)
 8008db0:	211e      	movs	r1, #30
 8008db2:	2007      	movs	r0, #7
 8008db4:	f7ff f8c4 	bl	8007f40 <menuMultiLine>
	sprintf(lcdline, "Current loop: %u", (unsigned int)(looper.StartPattern + 1));
 8008db8:	4b81      	ldr	r3, [pc, #516]	; (8008fc0 <select_loops+0x260>)
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4988      	ldr	r1, [pc, #544]	; (8008fe4 <select_loops+0x284>)
 8008dc2:	4889      	ldr	r0, [pc, #548]	; (8008fe8 <select_loops+0x288>)
 8008dc4:	f00d ff32 	bl	8016c2c <siprintf>
	menuMultiLine(1,200,lcdline);
 8008dc8:	4a87      	ldr	r2, [pc, #540]	; (8008fe8 <select_loops+0x288>)
 8008dca:	21c8      	movs	r1, #200	; 0xc8
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f7ff f8b7 	bl	8007f40 <menuMultiLine>

	while(TRUE){
		filename[0] = '\0';
 8008dd2:	4b86      	ldr	r3, [pc, #536]	; (8008fec <select_loops+0x28c>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
		set_function(AUDIO_ONLY);
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7fe f84d 	bl	8006e78 <set_function>
		Keypad_Button = TM_KEYPAD_Read();
 8008dde:	f003 f975 	bl	800c0cc <TM_KEYPAD_Read>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b82      	ldr	r3, [pc, #520]	; (8008ff0 <select_loops+0x290>)
 8008de8:	701a      	strb	r2, [r3, #0]
		checkSD();
 8008dea:	f7fe fa55 	bl	8007298 <checkSD>

		switch(Keypad_Button){
 8008dee:	4b80      	ldr	r3, [pc, #512]	; (8008ff0 <select_loops+0x290>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b0d      	cmp	r3, #13
 8008df4:	f200 80ac 	bhi.w	8008f50 <select_loops+0x1f0>
 8008df8:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <select_loops+0xa0>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008faf 	.word	0x08008faf
 8008e04:	08008e39 	.word	0x08008e39
 8008e08:	08008e79 	.word	0x08008e79
 8008e0c:	08008ec7 	.word	0x08008ec7
 8008e10:	08008ecd 	.word	0x08008ecd
 8008e14:	08008f01 	.word	0x08008f01
 8008e18:	08008f51 	.word	0x08008f51
 8008e1c:	08008f51 	.word	0x08008f51
 8008e20:	08008f51 	.word	0x08008f51
 8008e24:	08008f51 	.word	0x08008f51
 8008e28:	08008f51 	.word	0x08008f51
 8008e2c:	08008f51 	.word	0x08008f51
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008ebb 	.word	0x08008ebb
			case TM_KEYPAD_Button_0: goto end_select_loop;
			case TM_KEYPAD_Button_1:
				 looper.StartLooper = FALSE;
 8008e38:	4b61      	ldr	r3, [pc, #388]	; (8008fc0 <select_loops+0x260>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	709a      	strb	r2, [r3, #2]
				 looper.Playback = FALSE;
 8008e3e:	4b60      	ldr	r3, [pc, #384]	; (8008fc0 <select_loops+0x260>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	705a      	strb	r2, [r3, #1]
				 looper.Recording = FALSE;
 8008e44:	4b5e      	ldr	r3, [pc, #376]	; (8008fc0 <select_loops+0x260>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
				 if(pattern_audio_map[looper.StartPattern].sample_position > 0){
 8008e4a:	4b5d      	ldr	r3, [pc, #372]	; (8008fc0 <select_loops+0x260>)
 8008e4c:	695a      	ldr	r2, [r3, #20]
 8008e4e:	4969      	ldr	r1, [pc, #420]	; (8008ff4 <select_loops+0x294>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d071      	beq.n	8008f46 <select_loops+0x1e6>
					 looper.StartPattern--;
 8008e62:	4b57      	ldr	r3, [pc, #348]	; (8008fc0 <select_loops+0x260>)
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	4a55      	ldr	r2, [pc, #340]	; (8008fc0 <select_loops+0x260>)
 8008e6a:	6153      	str	r3, [r2, #20]
					 looper.EndPattern--;
 8008e6c:	4b54      	ldr	r3, [pc, #336]	; (8008fc0 <select_loops+0x260>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	4a53      	ldr	r2, [pc, #332]	; (8008fc0 <select_loops+0x260>)
 8008e74:	6193      	str	r3, [r2, #24]
				 }

				 break;
 8008e76:	e066      	b.n	8008f46 <select_loops+0x1e6>
			case TM_KEYPAD_Button_2:
				looper.StartLooper = FALSE;
 8008e78:	4b51      	ldr	r3, [pc, #324]	; (8008fc0 <select_loops+0x260>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	709a      	strb	r2, [r3, #2]
				looper.Playback = FALSE;
 8008e7e:	4b50      	ldr	r3, [pc, #320]	; (8008fc0 <select_loops+0x260>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	705a      	strb	r2, [r3, #1]
				looper.Recording = FALSE;
 8008e84:	4b4e      	ldr	r3, [pc, #312]	; (8008fc0 <select_loops+0x260>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
				if(pattern_audio_map[looper.EndPattern + 1].sample_position > 0){
 8008e8a:	4b4d      	ldr	r3, [pc, #308]	; (8008fc0 <select_loops+0x260>)
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	4958      	ldr	r1, [pc, #352]	; (8008ff4 <select_loops+0x294>)
 8008e92:	4613      	mov	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d052      	beq.n	8008f4a <select_loops+0x1ea>
					 looper.StartPattern++;
 8008ea4:	4b46      	ldr	r3, [pc, #280]	; (8008fc0 <select_loops+0x260>)
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	4a45      	ldr	r2, [pc, #276]	; (8008fc0 <select_loops+0x260>)
 8008eac:	6153      	str	r3, [r2, #20]
					 looper.EndPattern++;
 8008eae:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <select_loops+0x260>)
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a42      	ldr	r2, [pc, #264]	; (8008fc0 <select_loops+0x260>)
 8008eb6:	6193      	str	r3, [r2, #24]
				 }

				break;
 8008eb8:	e047      	b.n	8008f4a <select_loops+0x1ea>
			case TM_KEYPAD_Button_A:
			case TM_KEYPAD_Button_B:	select_channel(Keypad_Button);
 8008eba:	4b4d      	ldr	r3, [pc, #308]	; (8008ff0 <select_loops+0x290>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f89c 	bl	8008ffc <select_channel>
										break;
 8008ec4:	e044      	b.n	8008f50 <select_loops+0x1f0>

			case TM_KEYPAD_Button_3:	pauseLoop();
 8008ec6:	f7f8 ff97 	bl	8001df8 <pauseLoop>
										break;
 8008eca:	e041      	b.n	8008f50 <select_loops+0x1f0>
			case TM_KEYPAD_Button_4:	if(looper.Playback == TRUE || looper.Recording == TRUE || looper.SamplesWritten == 0)
 8008ecc:	4b3c      	ldr	r3, [pc, #240]	; (8008fc0 <select_loops+0x260>)
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d03b      	beq.n	8008f4e <select_loops+0x1ee>
 8008ed6:	4b3a      	ldr	r3, [pc, #232]	; (8008fc0 <select_loops+0x260>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d036      	beq.n	8008f4e <select_loops+0x1ee>
 8008ee0:	4b37      	ldr	r3, [pc, #220]	; (8008fc0 <select_loops+0x260>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d032      	beq.n	8008f4e <select_loops+0x1ee>
											break;
										get_string(filename);
 8008ee8:	4840      	ldr	r0, [pc, #256]	; (8008fec <select_loops+0x28c>)
 8008eea:	f7ff fce3 	bl	80088b4 <get_string>
										saveLoopToSD(looper.StartPattern,filename);
 8008eee:	4b34      	ldr	r3, [pc, #208]	; (8008fc0 <select_loops+0x260>)
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	493e      	ldr	r1, [pc, #248]	; (8008fec <select_loops+0x28c>)
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fc77 	bl	80077e8 <saveLoopToSD>
										menuShowOptions();
 8008efa:	f7fe fcd1 	bl	80078a0 <menuShowOptions>
										break;
 8008efe:	e027      	b.n	8008f50 <select_loops+0x1f0>
			case TM_KEYPAD_Button_5:	if(looper.Playback == TRUE || looper.Recording == TRUE)
 8008f00:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <select_loops+0x260>)
 8008f02:	785b      	ldrb	r3, [r3, #1]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d021      	beq.n	8008f4e <select_loops+0x1ee>
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <select_loops+0x260>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d01c      	beq.n	8008f4e <select_loops+0x1ee>
											break;
										while(get_file_sd(filename) == TRUE)
 8008f14:	e000      	b.n	8008f18 <select_loops+0x1b8>
											continue;
 8008f16:	bf00      	nop
										while(get_file_sd(filename) == TRUE)
 8008f18:	4834      	ldr	r0, [pc, #208]	; (8008fec <select_loops+0x28c>)
 8008f1a:	f7ff fac5 	bl	80084a8 <get_file_sd>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d0f8      	beq.n	8008f16 <select_loops+0x1b6>
										readLoopFromSD(looper.StartPattern,filename);
 8008f24:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <select_loops+0x260>)
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	4930      	ldr	r1, [pc, #192]	; (8008fec <select_loops+0x28c>)
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fac6 	bl	80074bc <readLoopFromSD>
										setStartEndPatterns(looper.StartPattern,looper.EndPattern);
 8008f30:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <select_loops+0x260>)
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <select_loops+0x260>)
 8008f36:	6992      	ldr	r2, [r2, #24]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f8 fe14 	bl	8001b68 <setStartEndPatterns>
										menuShowOptions();
 8008f40:	f7fe fcae 	bl	80078a0 <menuShowOptions>
										break;
 8008f44:	e004      	b.n	8008f50 <select_loops+0x1f0>
				 break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <select_loops+0x1f0>
				break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <select_loops+0x1f0>

		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8008f4e:	bf00      	nop
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <select_loops+0x290>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2bff      	cmp	r3, #255	; 0xff
 8008f56:	d01f      	beq.n	8008f98 <select_loops+0x238>
			menuMultiLine(7,30,"[1] Skip loop backward","[2] Skip loop forward","[3] Pause/Resume loop","[4] Save current loop","[5] Read loop from SD","[6] Save all loops","[AB] Select channels");
 8008f58:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <select_loops+0x268>)
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <select_loops+0x26c>)
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	4b1b      	ldr	r3, [pc, #108]	; (8008fd0 <select_loops+0x270>)
 8008f62:	9302      	str	r3, [sp, #8]
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <select_loops+0x274>)
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <select_loops+0x278>)
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <select_loops+0x27c>)
 8008f6e:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <select_loops+0x280>)
 8008f70:	211e      	movs	r1, #30
 8008f72:	2007      	movs	r0, #7
 8008f74:	f7fe ffe4 	bl	8007f40 <menuMultiLine>
			sprintf(lcdline, "Current loop: %u", (unsigned int)(looper.StartPattern + 1));
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <select_loops+0x260>)
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4918      	ldr	r1, [pc, #96]	; (8008fe4 <select_loops+0x284>)
 8008f82:	4819      	ldr	r0, [pc, #100]	; (8008fe8 <select_loops+0x288>)
 8008f84:	f00d fe52 	bl	8016c2c <siprintf>
			menuMultiLine(1,200,lcdline);
 8008f88:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <select_loops+0x288>)
 8008f8a:	21c8      	movs	r1, #200	; 0xc8
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f7fe ffd7 	bl	8007f40 <menuMultiLine>
			show_status_line = TRUE;
 8008f92:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <select_loops+0x264>)
 8008f94:	2201      	movs	r2, #1
 8008f96:	701a      	strb	r2, [r3, #0]
		}


		SHOW_STATUS_LINE();
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <select_loops+0x264>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f47f af18 	bne.w	8008dd2 <select_loops+0x72>
 8008fa2:	f7fe fe87 	bl	8007cb4 <menuShowStatus>
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <select_loops+0x264>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]
		filename[0] = '\0';
 8008fac:	e711      	b.n	8008dd2 <select_loops+0x72>
			case TM_KEYPAD_Button_0: goto end_select_loop;
 8008fae:	bf00      	nop

	}


	end_select_loop:
	stopAll();
 8008fb0:	f7f8 ff64 	bl	8001e7c <stopAll>
	Skip_Read_Button = TRUE;
 8008fb4:	4b10      	ldr	r3, [pc, #64]	; (8008ff8 <select_loops+0x298>)
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20001220 	.word	0x20001220
 8008fc4:	20001c3c 	.word	0x20001c3c
 8008fc8:	080183d4 	.word	0x080183d4
 8008fcc:	080183ec 	.word	0x080183ec
 8008fd0:	08018400 	.word	0x08018400
 8008fd4:	08018418 	.word	0x08018418
 8008fd8:	08018430 	.word	0x08018430
 8008fdc:	080183a4 	.word	0x080183a4
 8008fe0:	080183bc 	.word	0x080183bc
 8008fe4:	08018448 	.word	0x08018448
 8008fe8:	20001264 	.word	0x20001264
 8008fec:	20001fa0 	.word	0x20001fa0
 8008ff0:	20001c39 	.word	0x20001c39
 8008ff4:	20000560 	.word	0x20000560
 8008ff8:	20001c3b 	.word	0x20001c3b

08008ffc <select_channel>:


void select_channel(TM_KEYPAD_Button_t key){
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	71fb      	strb	r3, [r7, #7]
	if(looper.Playback == TRUE || looper.Recording == TRUE)
 8009006:	4b3c      	ldr	r3, [pc, #240]	; (80090f8 <select_channel+0xfc>)
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	d004      	beq.n	800901a <select_channel+0x1e>
 8009010:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <select_channel+0xfc>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <select_channel+0x22>
		pauseLoop();
 800901a:	f7f8 feed 	bl	8001df8 <pauseLoop>
	switch(key){
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	2b0c      	cmp	r3, #12
 8009022:	d002      	beq.n	800902a <select_channel+0x2e>
 8009024:	2b0d      	cmp	r3, #13
 8009026:	d030      	beq.n	800908a <select_channel+0x8e>
					 toggleActiveBothChannels(FALSE);
			}
			break;
		}

}
 8009028:	e062      	b.n	80090f0 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_2){
 800902a:	4b33      	ldr	r3, [pc, #204]	; (80090f8 <select_channel+0xfc>)
 800902c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009030:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <select_channel+0x54>
 800903a:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <select_channel+0xfc>)
 800903c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b01      	cmp	r3, #1
 8009048:	d102      	bne.n	8009050 <select_channel+0x54>
				setActiveChannelOne();
 800904a:	f7f8 fe1f 	bl	8001c8c <setActiveChannelOne>
				break;
 800904e:	e04f      	b.n	80090f0 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_1){
 8009050:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <select_channel+0xfc>)
 8009052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009056:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	d144      	bne.n	80090ea <select_channel+0xee>
 8009060:	4b25      	ldr	r3, [pc, #148]	; (80090f8 <select_channel+0xfc>)
 8009062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009066:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d13c      	bne.n	80090ea <select_channel+0xee>
				 if(looper.TwoChannels == FALSE)
 8009070:	4b21      	ldr	r3, [pc, #132]	; (80090f8 <select_channel+0xfc>)
 8009072:	78db      	ldrb	r3, [r3, #3]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <select_channel+0x86>
					 toggleActiveBothChannels(TRUE);
 800907a:	2001      	movs	r0, #1
 800907c:	f7f8 fe84 	bl	8001d88 <toggleActiveBothChannels>
			break;
 8009080:	e033      	b.n	80090ea <select_channel+0xee>
					 toggleActiveBothChannels(FALSE);
 8009082:	2000      	movs	r0, #0
 8009084:	f7f8 fe80 	bl	8001d88 <toggleActiveBothChannels>
			break;
 8009088:	e02f      	b.n	80090ea <select_channel+0xee>
			if(ACTIVE_CHANNEL_1){
 800908a:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <select_channel+0xfc>)
 800908c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009090:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b01      	cmp	r3, #1
 8009098:	d10a      	bne.n	80090b0 <select_channel+0xb4>
 800909a:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <select_channel+0xfc>)
 800909c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <select_channel+0xb4>
				setActiveChannelTwo();
 80090aa:	f7f8 fe11 	bl	8001cd0 <setActiveChannelTwo>
				break;
 80090ae:	e01f      	b.n	80090f0 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_2){
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <select_channel+0xfc>)
 80090b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d116      	bne.n	80090ee <select_channel+0xf2>
 80090c0:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <select_channel+0xfc>)
 80090c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10e      	bne.n	80090ee <select_channel+0xf2>
				 if(looper.TwoChannels == FALSE)
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <select_channel+0xfc>)
 80090d2:	78db      	ldrb	r3, [r3, #3]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <select_channel+0xe6>
					 toggleActiveBothChannels(TRUE);
 80090da:	2001      	movs	r0, #1
 80090dc:	f7f8 fe54 	bl	8001d88 <toggleActiveBothChannels>
			break;
 80090e0:	e005      	b.n	80090ee <select_channel+0xf2>
					 toggleActiveBothChannels(FALSE);
 80090e2:	2000      	movs	r0, #0
 80090e4:	f7f8 fe50 	bl	8001d88 <toggleActiveBothChannels>
			break;
 80090e8:	e001      	b.n	80090ee <select_channel+0xf2>
			break;
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <select_channel+0xf4>
			break;
 80090ee:	bf00      	nop
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20001220 	.word	0x20001220

080090fc <select_bars>:


void select_bars() {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
	uint32_t numOfPatterns;
	uint32_t numOfBytes;
	uint32_t maxResolution;
	BOOL play = FALSE;
 8009102:	2300      	movs	r3, #0
 8009104:	70fb      	strb	r3, [r7, #3]
	//looper.startPattern = 0;
	sdram_pointer = 0;
 8009106:	4b2d      	ldr	r3, [pc, #180]	; (80091bc <select_bars+0xc0>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]
	//map = (uint32_t (*)[])
	memset(pattern_audio_map,0,sizeof(pattern_audio_map));
 800910c:	f640 126c 	movw	r2, #2412	; 0x96c
 8009110:	2100      	movs	r1, #0
 8009112:	482b      	ldr	r0, [pc, #172]	; (80091c0 <select_bars+0xc4>)
 8009114:	f00d fc7a 	bl	8016a0c <memset>
	readDrums(&numOfPatterns,&numOfBytes,&maxResolution);
 8009118:	1d3a      	adds	r2, r7, #4
 800911a:	f107 0108 	add.w	r1, r7, #8
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4618      	mov	r0, r3
 8009124:	f7f9 fd1a 	bl	8002b5c <readDrums>
	// restore previous values of start/end bars
	getStartEndPatterns(&looper.StartPattern,&looper.EndPattern);
 8009128:	4926      	ldr	r1, [pc, #152]	; (80091c4 <select_bars+0xc8>)
 800912a:	4827      	ldr	r0, [pc, #156]	; (80091c8 <select_bars+0xcc>)
 800912c:	f7f8 fd04 	bl	8001b38 <getStartEndPatterns>
	//looper.endPattern = numOfPatterns - 1;

	if(numOfPatterns == 0){
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <select_bars+0x4e>
		menuMultiLine(1,130,messages[NO_PATTS]);
 8009136:	4b25      	ldr	r3, [pc, #148]	; (80091cc <select_bars+0xd0>)
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	461a      	mov	r2, r3
 800913c:	2182      	movs	r1, #130	; 0x82
 800913e:	2001      	movs	r0, #1
 8009140:	f7fe fefe 	bl	8007f40 <menuMultiLine>
		menuWaitReturn();
 8009144:	f7fe ff32 	bl	8007fac <menuWaitReturn>
		goto end_play_rhythm;
 8009148:	e02e      	b.n	80091a8 <select_bars+0xac>
	}
	if(numOfPatterns > MAX_PATTERNS){
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2bc8      	cmp	r3, #200	; 0xc8
 800914e:	d909      	bls.n	8009164 <select_bars+0x68>
		menuMultiLine(1,150,messages[TOO_MANY_PATTS]);
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <select_bars+0xd0>)
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	461a      	mov	r2, r3
 8009156:	2196      	movs	r1, #150	; 0x96
 8009158:	2001      	movs	r0, #1
 800915a:	f7fe fef1 	bl	8007f40 <menuMultiLine>
		menuWaitReturn();
 800915e:	f7fe ff25 	bl	8007fac <menuWaitReturn>
		goto end_play_rhythm;
 8009162:	e021      	b.n	80091a8 <select_bars+0xac>
	}
	if(maxResolution > MAX_SUBBEATS){
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b30      	cmp	r3, #48	; 0x30
 8009168:	d909      	bls.n	800917e <select_bars+0x82>
		menuMultiLine(1,150,messages[TOO_MANY_SUBB]);
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <select_bars+0xd0>)
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	461a      	mov	r2, r3
 8009170:	2196      	movs	r1, #150	; 0x96
 8009172:	2001      	movs	r0, #1
 8009174:	f7fe fee4 	bl	8007f40 <menuMultiLine>
		menuWaitReturn();
 8009178:	f7fe ff18 	bl	8007fac <menuWaitReturn>
		goto end_play_rhythm;
 800917c:	e014      	b.n	80091a8 <select_bars+0xac>
	}

	do{
		looper.DrumState = DRUMS_READY;
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <select_bars+0xd4>)
 8009180:	2202      	movs	r2, #2
 8009182:	771a      	strb	r2, [r3, #28]
		// return star and end patterns and use them as parameters to drum loop
		// waits until play == TRUE (button "3" or joystick)
		menuShowStatus();
 8009184:	f7fe fd96 	bl	8007cb4 <menuShowStatus>
		drumMenuInput(numOfPatterns,&play);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	1cfa      	adds	r2, r7, #3
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ff72 	bl	8008078 <drumMenuInput>
		if(play == FALSE)
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d005      	beq.n	80091a6 <select_bars+0xaa>
			goto end_play_rhythm;
		drumLoop();
 800919a:	f7f9 f99d 	bl	80024d8 <drumLoop>
		// end playing on pressing user button or joystick


	}while(play != FALSE);
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1ec      	bne.n	800917e <select_bars+0x82>

	end_play_rhythm:
 80091a4:	e000      	b.n	80091a8 <select_bars+0xac>
			goto end_play_rhythm;
 80091a6:	bf00      	nop
	//free(map);
	looper.DrumState = DRUMS_STOPPED;
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <select_bars+0xd4>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	771a      	strb	r2, [r3, #28]
	Skip_Read_Button = TRUE;
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <select_bars+0xd8>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	200004bc 	.word	0x200004bc
 80091c0:	20000560 	.word	0x20000560
 80091c4:	20001238 	.word	0x20001238
 80091c8:	20001234 	.word	0x20001234
 80091cc:	20001fb0 	.word	0x20001fb0
 80091d0:	20001220 	.word	0x20001220
 80091d4:	20001c3b 	.word	0x20001c3b

080091d8 <record_rhythm>:

void record_rhythm(){
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08a      	sub	sp, #40	; 0x28
 80091dc:	af06      	add	r7, sp, #24
	uint32_t beats,division,beattime;

	menuMultiLine(7,30,"[1] Preview sounds",
 80091de:	4b47      	ldr	r3, [pc, #284]	; (80092fc <record_rhythm+0x124>)
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	4b47      	ldr	r3, [pc, #284]	; (8009300 <record_rhythm+0x128>)
 80091e4:	9303      	str	r3, [sp, #12]
 80091e6:	4b47      	ldr	r3, [pc, #284]	; (8009304 <record_rhythm+0x12c>)
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	4b47      	ldr	r3, [pc, #284]	; (8009308 <record_rhythm+0x130>)
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	4b47      	ldr	r3, [pc, #284]	; (800930c <record_rhythm+0x134>)
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	4b47      	ldr	r3, [pc, #284]	; (8009310 <record_rhythm+0x138>)
 80091f4:	4a47      	ldr	r2, [pc, #284]	; (8009314 <record_rhythm+0x13c>)
 80091f6:	211e      	movs	r1, #30
 80091f8:	2007      	movs	r0, #7
 80091fa:	f7fe fea1 	bl	8007f40 <menuMultiLine>
						"[3] Play current",
						"[4] Clear current",
						"[5] Save as first",
						"[6] Save as next",
						"[7] Set parameters");
	getRhythmParams(&beats,&division,&beattime);
 80091fe:	1d3a      	adds	r2, r7, #4
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	f107 030c 	add.w	r3, r7, #12
 8009208:	4618      	mov	r0, r3
 800920a:	f7f9 f909 	bl	8002420 <getRhythmParams>
	sprintf(lcdline,"Beats:%2u Subbeats:%2u Time:%3u",(unsigned int)beats,(unsigned int)division,(unsigned int)beattime);
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	460b      	mov	r3, r1
 8009218:	493f      	ldr	r1, [pc, #252]	; (8009318 <record_rhythm+0x140>)
 800921a:	4840      	ldr	r0, [pc, #256]	; (800931c <record_rhythm+0x144>)
 800921c:	f00d fd06 	bl	8016c2c <siprintf>
	menuStatusLine(lcdline);
 8009220:	483e      	ldr	r0, [pc, #248]	; (800931c <record_rhythm+0x144>)
 8009222:	f7fe fdfb 	bl	8007e1c <menuStatusLine>

	while(TRUE){
		Keypad_Button = TM_KEYPAD_Read();
 8009226:	f002 ff51 	bl	800c0cc <TM_KEYPAD_Read>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
 800922e:	4b3c      	ldr	r3, [pc, #240]	; (8009320 <record_rhythm+0x148>)
 8009230:	701a      	strb	r2, [r3, #0]
		looper.DrumState = DRUMS_PAUSED;
 8009232:	4b3c      	ldr	r3, [pc, #240]	; (8009324 <record_rhythm+0x14c>)
 8009234:	2203      	movs	r2, #3
 8009236:	771a      	strb	r2, [r3, #28]
		switch(Keypad_Button){
 8009238:	4b39      	ldr	r3, [pc, #228]	; (8009320 <record_rhythm+0x148>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b07      	cmp	r3, #7
 800923e:	d82a      	bhi.n	8009296 <record_rhythm+0xbe>
 8009240:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <record_rhythm+0x70>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	080092f3 	.word	0x080092f3
 800924c:	08009269 	.word	0x08009269
 8009250:	0800926f 	.word	0x0800926f
 8009254:	08009275 	.word	0x08009275
 8009258:	0800927b 	.word	0x0800927b
 800925c:	08009281 	.word	0x08009281
 8009260:	08009289 	.word	0x08009289
 8009264:	08009291 	.word	0x08009291
			case TM_KEYPAD_Button_0:	return;
			case TM_KEYPAD_Button_1:	preview_drums();
 8009268:	f7f9 fe5a 	bl	8002f20 <preview_drums>
										break;
 800926c:	e013      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_2:	record_drums();
 800926e:	f7fa f939 	bl	80034e4 <record_drums>
										break;
 8009272:	e010      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_3:	play_drums();
 8009274:	f7fa f822 	bl	80032bc <play_drums>
										break;
 8009278:	e00d      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_4:	clear_drums();
 800927a:	f7f9 fe37 	bl	8002eec <clear_drums>
										break;
 800927e:	e00a      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_5:	save_first(drumBuffA);
 8009280:	4829      	ldr	r0, [pc, #164]	; (8009328 <record_rhythm+0x150>)
 8009282:	f7f9 fbdd 	bl	8002a40 <save_first>
										break;
 8009286:	e006      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_6:	save_next(drumBuffA);
 8009288:	4827      	ldr	r0, [pc, #156]	; (8009328 <record_rhythm+0x150>)
 800928a:	f7f9 fc11 	bl	8002ab0 <save_next>
										break;
 800928e:	e002      	b.n	8009296 <record_rhythm+0xbe>
			case TM_KEYPAD_Button_7:	select_rhythm_params();
 8009290:	f7f9 fb6a 	bl	8002968 <select_rhythm_params>
										break;
 8009294:	bf00      	nop


		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8009296:	4b22      	ldr	r3, [pc, #136]	; (8009320 <record_rhythm+0x148>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2bff      	cmp	r3, #255	; 0xff
 800929c:	d0c3      	beq.n	8009226 <record_rhythm+0x4e>
			menuClearLines(2,3,5);
 800929e:	2205      	movs	r2, #5
 80092a0:	2103      	movs	r1, #3
 80092a2:	2002      	movs	r0, #2
 80092a4:	f7fe fdd8 	bl	8007e58 <menuClearLines>
			menuMultiLine(7,30,"[1] Preview sounds",
 80092a8:	4b14      	ldr	r3, [pc, #80]	; (80092fc <record_rhythm+0x124>)
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	4b14      	ldr	r3, [pc, #80]	; (8009300 <record_rhythm+0x128>)
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	4b14      	ldr	r3, [pc, #80]	; (8009304 <record_rhythm+0x12c>)
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	4b14      	ldr	r3, [pc, #80]	; (8009308 <record_rhythm+0x130>)
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	4b14      	ldr	r3, [pc, #80]	; (800930c <record_rhythm+0x134>)
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	4b14      	ldr	r3, [pc, #80]	; (8009310 <record_rhythm+0x138>)
 80092be:	4a15      	ldr	r2, [pc, #84]	; (8009314 <record_rhythm+0x13c>)
 80092c0:	211e      	movs	r1, #30
 80092c2:	2007      	movs	r0, #7
 80092c4:	f7fe fe3c 	bl	8007f40 <menuMultiLine>
								"[3] Play current",
								"[4] Clear current",
								"[5] Save as first",
								"[6] Save as next",
								"[7] Set parameters");
			getRhythmParams(&beats,&division,&beattime);
 80092c8:	1d3a      	adds	r2, r7, #4
 80092ca:	f107 0108 	add.w	r1, r7, #8
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f9 f8a4 	bl	8002420 <getRhythmParams>
			sprintf(lcdline,"Beats:%2u Subbeats:%2u Time:%3u",(unsigned int)beats,(unsigned int)division,(unsigned int)beattime);
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	460b      	mov	r3, r1
 80092e2:	490d      	ldr	r1, [pc, #52]	; (8009318 <record_rhythm+0x140>)
 80092e4:	480d      	ldr	r0, [pc, #52]	; (800931c <record_rhythm+0x144>)
 80092e6:	f00d fca1 	bl	8016c2c <siprintf>
			menuStatusLine(lcdline);
 80092ea:	480c      	ldr	r0, [pc, #48]	; (800931c <record_rhythm+0x144>)
 80092ec:	f7fe fd96 	bl	8007e1c <menuStatusLine>
		Keypad_Button = TM_KEYPAD_Read();
 80092f0:	e799      	b.n	8009226 <record_rhythm+0x4e>
			case TM_KEYPAD_Button_0:	return;
 80092f2:	bf00      	nop
		}


	}

}
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	08018484 	.word	0x08018484
 8009300:	08018498 	.word	0x08018498
 8009304:	080184ac 	.word	0x080184ac
 8009308:	080184c0 	.word	0x080184c0
 800930c:	080184d4 	.word	0x080184d4
 8009310:	0801845c 	.word	0x0801845c
 8009314:	08018470 	.word	0x08018470
 8009318:	080184e8 	.word	0x080184e8
 800931c:	20001264 	.word	0x20001264
 8009320:	20001c39 	.word	0x20001c39
 8009324:	20001220 	.word	0x20001220
 8009328:	20000ecc 	.word	0x20000ecc

0800932c <menuInitFunctions>:
#include "menu.h"

char *messages[30];
char *functions[7];

void menuInitFunctions(){
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
	functions[IDLE] = "Idle";
 8009330:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <menuInitFunctions+0x38>)
 8009332:	4a0d      	ldr	r2, [pc, #52]	; (8009368 <menuInitFunctions+0x3c>)
 8009334:	601a      	str	r2, [r3, #0]
	functions[AUDIO_ONLY] = "Audio only";
 8009336:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <menuInitFunctions+0x38>)
 8009338:	4a0c      	ldr	r2, [pc, #48]	; (800936c <menuInitFunctions+0x40>)
 800933a:	605a      	str	r2, [r3, #4]
	functions[AUDIO_DRUMS] = "Audio drums";
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <menuInitFunctions+0x38>)
 800933e:	4a0c      	ldr	r2, [pc, #48]	; (8009370 <menuInitFunctions+0x44>)
 8009340:	609a      	str	r2, [r3, #8]
	functions[DRUMS_ONLY] = "Drums only";
 8009342:	4b08      	ldr	r3, [pc, #32]	; (8009364 <menuInitFunctions+0x38>)
 8009344:	4a0b      	ldr	r2, [pc, #44]	; (8009374 <menuInitFunctions+0x48>)
 8009346:	60da      	str	r2, [r3, #12]
	functions[DOWNLOAD_SRAM] = "Download SRAM";
 8009348:	4b06      	ldr	r3, [pc, #24]	; (8009364 <menuInitFunctions+0x38>)
 800934a:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <menuInitFunctions+0x4c>)
 800934c:	611a      	str	r2, [r3, #16]
	functions[PLAY_SONG] = "Play Song";
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <menuInitFunctions+0x38>)
 8009350:	4a0a      	ldr	r2, [pc, #40]	; (800937c <menuInitFunctions+0x50>)
 8009352:	615a      	str	r2, [r3, #20]
	functions[PLAY_SD] = "Play SD";
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <menuInitFunctions+0x38>)
 8009356:	4a0a      	ldr	r2, [pc, #40]	; (8009380 <menuInitFunctions+0x54>)
 8009358:	619a      	str	r2, [r3, #24]

}
 800935a:	bf00      	nop
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20002028 	.word	0x20002028
 8009368:	08018554 	.word	0x08018554
 800936c:	0801855c 	.word	0x0801855c
 8009370:	08018568 	.word	0x08018568
 8009374:	08018574 	.word	0x08018574
 8009378:	08018580 	.word	0x08018580
 800937c:	08018590 	.word	0x08018590
 8009380:	0801859c 	.word	0x0801859c

08009384 <menuInitMsg>:

void menuInitMsg(){
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0

	messages[MAIN] = "Main looper menu";
 8009388:	4b18      	ldr	r3, [pc, #96]	; (80093ec <menuInitMsg+0x68>)
 800938a:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <menuInitMsg+0x6c>)
 800938c:	601a      	str	r2, [r3, #0]
	messages[BACK] = "Go back";
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <menuInitMsg+0x68>)
 8009390:	4a18      	ldr	r2, [pc, #96]	; (80093f4 <menuInitMsg+0x70>)
 8009392:	605a      	str	r2, [r3, #4]
	messages[DOWNL_RTH] = "Download rhythm";
 8009394:	4b15      	ldr	r3, [pc, #84]	; (80093ec <menuInitMsg+0x68>)
 8009396:	4a18      	ldr	r2, [pc, #96]	; (80093f8 <menuInitMsg+0x74>)
 8009398:	609a      	str	r2, [r3, #8]
	messages[PLAY_RTH] = "Play/Record rhythm";
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <menuInitMsg+0x68>)
 800939c:	4a17      	ldr	r2, [pc, #92]	; (80093fc <menuInitMsg+0x78>)
 800939e:	60da      	str	r2, [r3, #12]
	messages[ONE_BAR_BACK_START] = "Move start back";
 80093a0:	4b12      	ldr	r3, [pc, #72]	; (80093ec <menuInitMsg+0x68>)
 80093a2:	4a17      	ldr	r2, [pc, #92]	; (8009400 <menuInitMsg+0x7c>)
 80093a4:	611a      	str	r2, [r3, #16]
	messages[ONE_BAR_FORW_START] = "Move start forward";
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <menuInitMsg+0x68>)
 80093a8:	4a16      	ldr	r2, [pc, #88]	; (8009404 <menuInitMsg+0x80>)
 80093aa:	615a      	str	r2, [r3, #20]
	messages[ONE_BAR_BACK_END] = "Move end back";
 80093ac:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <menuInitMsg+0x68>)
 80093ae:	4a16      	ldr	r2, [pc, #88]	; (8009408 <menuInitMsg+0x84>)
 80093b0:	619a      	str	r2, [r3, #24]
	messages[ONE_BAR_FORW_END] = "Move end forward";
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <menuInitMsg+0x68>)
 80093b4:	4a15      	ldr	r2, [pc, #84]	; (800940c <menuInitMsg+0x88>)
 80093b6:	61da      	str	r2, [r3, #28]
	messages[START_RHYTHM] = "Start rhythm";
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <menuInitMsg+0x68>)
 80093ba:	4a15      	ldr	r2, [pc, #84]	; (8009410 <menuInitMsg+0x8c>)
 80093bc:	621a      	str	r2, [r3, #32]
	messages[NO_PATTS] = "No patterns found!";
 80093be:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <menuInitMsg+0x68>)
 80093c0:	4a14      	ldr	r2, [pc, #80]	; (8009414 <menuInitMsg+0x90>)
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24
	messages[TOO_MANY_PATTS] = "Too many patterns!";
 80093c4:	4b09      	ldr	r3, [pc, #36]	; (80093ec <menuInitMsg+0x68>)
 80093c6:	4a14      	ldr	r2, [pc, #80]	; (8009418 <menuInitMsg+0x94>)
 80093c8:	629a      	str	r2, [r3, #40]	; 0x28
	messages[TOO_MANY_SUBB] = "Too many subbeats!";
 80093ca:	4b08      	ldr	r3, [pc, #32]	; (80093ec <menuInitMsg+0x68>)
 80093cc:	4a13      	ldr	r2, [pc, #76]	; (800941c <menuInitMsg+0x98>)
 80093ce:	62da      	str	r2, [r3, #44]	; 0x2c
	messages[CHANNEL_SELECT] = "Select channel";
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <menuInitMsg+0x68>)
 80093d2:	4a13      	ldr	r2, [pc, #76]	; (8009420 <menuInitMsg+0x9c>)
 80093d4:	631a      	str	r2, [r3, #48]	; 0x30
	messages[AUDIO_RHYTHM] = "Audio and rhythm";
 80093d6:	4b05      	ldr	r3, [pc, #20]	; (80093ec <menuInitMsg+0x68>)
 80093d8:	4a12      	ldr	r2, [pc, #72]	; (8009424 <menuInitMsg+0xa0>)
 80093da:	635a      	str	r2, [r3, #52]	; 0x34
	messages[REC_SEL_LOOPS] = "Select loop";
 80093dc:	4b03      	ldr	r3, [pc, #12]	; (80093ec <menuInitMsg+0x68>)
 80093de:	4a12      	ldr	r2, [pc, #72]	; (8009428 <menuInitMsg+0xa4>)
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80093e2:	bf00      	nop
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	20001fb0 	.word	0x20001fb0
 80093f0:	080185a4 	.word	0x080185a4
 80093f4:	080185b8 	.word	0x080185b8
 80093f8:	080185c0 	.word	0x080185c0
 80093fc:	080185d0 	.word	0x080185d0
 8009400:	080185e4 	.word	0x080185e4
 8009404:	080185f4 	.word	0x080185f4
 8009408:	08018608 	.word	0x08018608
 800940c:	08018618 	.word	0x08018618
 8009410:	0801862c 	.word	0x0801862c
 8009414:	0801863c 	.word	0x0801863c
 8009418:	08018650 	.word	0x08018650
 800941c:	08018664 	.word	0x08018664
 8009420:	08018678 	.word	0x08018678
 8009424:	08018688 	.word	0x08018688
 8009428:	0801869c 	.word	0x0801869c

0800942c <setupMidi>:

uint16_t beats_per_minute	= 60;			// 1s = 1 quarter
uint16_t millis_per_beat = 60000 / 60;
extern uint8_t UserRxBufferHS[];

void setupMidi(){
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
	//Reset the VS1053
	  VS1053_LOW();
 8009430:	2200      	movs	r2, #0
 8009432:	2108      	movs	r1, #8
 8009434:	480a      	ldr	r0, [pc, #40]	; (8009460 <setupMidi+0x34>)
 8009436:	f004 fff1 	bl	800e41c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800943a:	2064      	movs	r0, #100	; 0x64
 800943c:	f002 ffbe 	bl	800c3bc <HAL_Delay>
	  VS1053_HIGH();
 8009440:	2201      	movs	r2, #1
 8009442:	2108      	movs	r1, #8
 8009444:	4806      	ldr	r0, [pc, #24]	; (8009460 <setupMidi+0x34>)
 8009446:	f004 ffe9 	bl	800e41c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800944a:	2064      	movs	r0, #100	; 0x64
 800944c:	f002 ffb6 	bl	800c3bc <HAL_Delay>
	  talkMIDI(0xB0, 0x07, 120); //0xB0 is channel message, set channel volume to near max (127)
 8009450:	2278      	movs	r2, #120	; 0x78
 8009452:	2107      	movs	r1, #7
 8009454:	20b0      	movs	r0, #176	; 0xb0
 8009456:	f000 f831 	bl	80094bc <talkMIDI>

}
 800945a:	bf00      	nop
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40021000 	.word	0x40021000

08009464 <noteOn>:

void noteOn(byte channel, byte note, byte attack_velocity) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
 800946e:	460b      	mov	r3, r1
 8009470:	71bb      	strb	r3, [r7, #6]
 8009472:	4613      	mov	r3, r2
 8009474:	717b      	strb	r3, [r7, #5]
  talkMIDI( (0x90 | channel), note, attack_velocity);
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800947c:	b2db      	uxtb	r3, r3
 800947e:	797a      	ldrb	r2, [r7, #5]
 8009480:	79b9      	ldrb	r1, [r7, #6]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f81a 	bl	80094bc <talkMIDI>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <noteOff>:

//Send a MIDI note-off message.  Like releasing a piano key
void noteOff(byte channel, byte note, byte release_velocity) {
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
 800949a:	460b      	mov	r3, r1
 800949c:	71bb      	strb	r3, [r7, #6]
 800949e:	4613      	mov	r3, r2
 80094a0:	717b      	strb	r3, [r7, #5]
  talkMIDI( (0x80 | channel), note, release_velocity);
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	797a      	ldrb	r2, [r7, #5]
 80094ac:	79b9      	ldrb	r1, [r7, #6]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 f804 	bl	80094bc <talkMIDI>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <talkMIDI>:

//Plays a MIDI note. Doesn't check to see that cmd is greater than 127, or that data values are less than 127
void talkMIDI(byte cmd, byte data1, byte data2) {
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	71fb      	strb	r3, [r7, #7]
 80094c6:	460b      	mov	r3, r1
 80094c8:	71bb      	strb	r3, [r7, #6]
 80094ca:	4613      	mov	r3, r2
 80094cc:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(&huart1,&cmd,1,100);
 80094ce:	1df9      	adds	r1, r7, #7
 80094d0:	2364      	movs	r3, #100	; 0x64
 80094d2:	2201      	movs	r2, #1
 80094d4:	480b      	ldr	r0, [pc, #44]	; (8009504 <talkMIDI+0x48>)
 80094d6:	f008 fcb5 	bl	8011e44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&data1,1,100);
 80094da:	1db9      	adds	r1, r7, #6
 80094dc:	2364      	movs	r3, #100	; 0x64
 80094de:	2201      	movs	r2, #1
 80094e0:	4808      	ldr	r0, [pc, #32]	; (8009504 <talkMIDI+0x48>)
 80094e2:	f008 fcaf 	bl	8011e44 <HAL_UART_Transmit>

  //Some commands only have one data byte. All cmds less than 0xBn have 2 data bytes
  //(sort of: http://253.ccarh.org/handout/midiprotocol/)
  if( (cmd & 0xF0) <= 0xB0)
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094ec:	2bb0      	cmp	r3, #176	; 0xb0
 80094ee:	dc05      	bgt.n	80094fc <talkMIDI+0x40>
	  HAL_UART_Transmit(&huart1,&data2,1,100);
 80094f0:	1d79      	adds	r1, r7, #5
 80094f2:	2364      	movs	r3, #100	; 0x64
 80094f4:	2201      	movs	r2, #1
 80094f6:	4803      	ldr	r0, [pc, #12]	; (8009504 <talkMIDI+0x48>)
 80094f8:	f008 fca4 	bl	8011e44 <HAL_UART_Transmit>

}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	200023ac 	.word	0x200023ac

08009508 <playPercussion>:

void playPercussion(byte onoff,byte instrument){
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	460a      	mov	r2, r1
 8009512:	71fb      	strb	r3, [r7, #7]
 8009514:	4613      	mov	r3, r2
 8009516:	71bb      	strb	r3, [r7, #6]
	if(onoff == NOTEON)
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d106      	bne.n	800952c <playPercussion+0x24>
		noteOn(9, instrument, 60);
 800951e:	79bb      	ldrb	r3, [r7, #6]
 8009520:	223c      	movs	r2, #60	; 0x3c
 8009522:	4619      	mov	r1, r3
 8009524:	2009      	movs	r0, #9
 8009526:	f7ff ff9d 	bl	8009464 <noteOn>
	else
		//Turn off the note with a given off/release velocity
		noteOff(9, instrument, 60);
}
 800952a:	e005      	b.n	8009538 <playPercussion+0x30>
		noteOff(9, instrument, 60);
 800952c:	79bb      	ldrb	r3, [r7, #6]
 800952e:	223c      	movs	r2, #60	; 0x3c
 8009530:	4619      	mov	r1, r3
 8009532:	2009      	movs	r0, #9
 8009534:	f7ff ffac 	bl	8009490 <noteOff>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <playBass>:


void playBass(byte onoff,byte tone){
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	460a      	mov	r2, r1
 800954a:	71fb      	strb	r3, [r7, #7]
 800954c:	4613      	mov	r3, r2
 800954e:	71bb      	strb	r3, [r7, #6]
	talkMIDI(0xC0,34,0);
 8009550:	2200      	movs	r2, #0
 8009552:	2122      	movs	r1, #34	; 0x22
 8009554:	20c0      	movs	r0, #192	; 0xc0
 8009556:	f7ff ffb1 	bl	80094bc <talkMIDI>
	if(onoff == NOTEON)
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <playBass+0x2e>
			noteOn(0,tone,60);
 8009560:	79bb      	ldrb	r3, [r7, #6]
 8009562:	223c      	movs	r2, #60	; 0x3c
 8009564:	4619      	mov	r1, r3
 8009566:	2000      	movs	r0, #0
 8009568:	f7ff ff7c 	bl	8009464 <noteOn>
		else
			//Turn off the note with a given off/release velocity
			noteOff(0,tone,60);
}
 800956c:	e005      	b.n	800957a <playBass+0x3a>
			noteOff(0,tone,60);
 800956e:	79bb      	ldrb	r3, [r7, #6]
 8009570:	223c      	movs	r2, #60	; 0x3c
 8009572:	4619      	mov	r1, r3
 8009574:	2000      	movs	r0, #0
 8009576:	f7ff ff8b 	bl	8009490 <noteOff>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009588:	4b18      	ldr	r3, [pc, #96]	; (80095ec <MX_SPI3_Init+0x68>)
 800958a:	4a19      	ldr	r2, [pc, #100]	; (80095f0 <MX_SPI3_Init+0x6c>)
 800958c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800958e:	4b17      	ldr	r3, [pc, #92]	; (80095ec <MX_SPI3_Init+0x68>)
 8009590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009594:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <MX_SPI3_Init+0x68>)
 8009598:	2200      	movs	r2, #0
 800959a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800959c:	4b13      	ldr	r3, [pc, #76]	; (80095ec <MX_SPI3_Init+0x68>)
 800959e:	2200      	movs	r2, #0
 80095a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <MX_SPI3_Init+0x68>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <MX_SPI3_Init+0x68>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80095ae:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <MX_SPI3_Init+0x68>)
 80095b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <MX_SPI3_Init+0x68>)
 80095b8:	2208      	movs	r2, #8
 80095ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <MX_SPI3_Init+0x68>)
 80095be:	2200      	movs	r2, #0
 80095c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <MX_SPI3_Init+0x68>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <MX_SPI3_Init+0x68>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <MX_SPI3_Init+0x68>)
 80095d0:	220a      	movs	r2, #10
 80095d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80095d4:	4805      	ldr	r0, [pc, #20]	; (80095ec <MX_SPI3_Init+0x68>)
 80095d6:	f007 f80d 	bl	80105f4 <HAL_SPI_Init>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80095e0:	2139      	movs	r1, #57	; 0x39
 80095e2:	4804      	ldr	r0, [pc, #16]	; (80095f4 <MX_SPI3_Init+0x70>)
 80095e4:	f7fd fc68 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80095e8:	bf00      	nop
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20002044 	.word	0x20002044
 80095f0:	40003c00 	.word	0x40003c00
 80095f4:	080186a8 	.word	0x080186a8

080095f8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80095fc:	4b18      	ldr	r3, [pc, #96]	; (8009660 <MX_SPI5_Init+0x68>)
 80095fe:	4a19      	ldr	r2, [pc, #100]	; (8009664 <MX_SPI5_Init+0x6c>)
 8009600:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8009602:	4b17      	ldr	r3, [pc, #92]	; (8009660 <MX_SPI5_Init+0x68>)
 8009604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009608:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800960a:	4b15      	ldr	r3, [pc, #84]	; (8009660 <MX_SPI5_Init+0x68>)
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009610:	4b13      	ldr	r3, [pc, #76]	; (8009660 <MX_SPI5_Init+0x68>)
 8009612:	2200      	movs	r2, #0
 8009614:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009616:	4b12      	ldr	r3, [pc, #72]	; (8009660 <MX_SPI5_Init+0x68>)
 8009618:	2200      	movs	r2, #0
 800961a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <MX_SPI5_Init+0x68>)
 800961e:	2200      	movs	r2, #0
 8009620:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <MX_SPI5_Init+0x68>)
 8009624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009628:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <MX_SPI5_Init+0x68>)
 800962c:	2210      	movs	r2, #16
 800962e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <MX_SPI5_Init+0x68>)
 8009632:	2200      	movs	r2, #0
 8009634:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8009636:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <MX_SPI5_Init+0x68>)
 8009638:	2200      	movs	r2, #0
 800963a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <MX_SPI5_Init+0x68>)
 800963e:	2200      	movs	r2, #0
 8009640:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009642:	4b07      	ldr	r3, [pc, #28]	; (8009660 <MX_SPI5_Init+0x68>)
 8009644:	220a      	movs	r2, #10
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009648:	4805      	ldr	r0, [pc, #20]	; (8009660 <MX_SPI5_Init+0x68>)
 800964a:	f006 ffd3 	bl	80105f4 <HAL_SPI_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8009654:	2159      	movs	r1, #89	; 0x59
 8009656:	4804      	ldr	r0, [pc, #16]	; (8009668 <MX_SPI5_Init+0x70>)
 8009658:	f7fd fc2e 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800965c:	bf00      	nop
 800965e:	bd80      	pop	{r7, pc}
 8009660:	2000209c 	.word	0x2000209c
 8009664:	40015000 	.word	0x40015000
 8009668:	080186a8 	.word	0x080186a8

0800966c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08c      	sub	sp, #48	; 0x30
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009674:	f107 031c 	add.w	r3, r7, #28
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	605a      	str	r2, [r3, #4]
 800967e:	609a      	str	r2, [r3, #8]
 8009680:	60da      	str	r2, [r3, #12]
 8009682:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a7c      	ldr	r2, [pc, #496]	; (800987c <HAL_SPI_MspInit+0x210>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d14b      	bne.n	8009726 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800968e:	2300      	movs	r3, #0
 8009690:	61bb      	str	r3, [r7, #24]
 8009692:	4b7b      	ldr	r3, [pc, #492]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	4a7a      	ldr	r2, [pc, #488]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800969c:	6413      	str	r3, [r2, #64]	; 0x40
 800969e:	4b78      	ldr	r3, [pc, #480]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	4b74      	ldr	r3, [pc, #464]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b2:	4a73      	ldr	r2, [pc, #460]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096b4:	f043 0304 	orr.w	r3, r3, #4
 80096b8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ba:	4b71      	ldr	r3, [pc, #452]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	4b6d      	ldr	r3, [pc, #436]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	4a6c      	ldr	r2, [pc, #432]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096d0:	f043 0302 	orr.w	r3, r3, #2
 80096d4:	6313      	str	r3, [r2, #48]	; 0x30
 80096d6:	4b6a      	ldr	r3, [pc, #424]	; (8009880 <HAL_SPI_MspInit+0x214>)
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = ADS1256_MISO_Pin|ADS1256_MOSI_Pin;
 80096e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e8:	2302      	movs	r3, #2
 80096ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096f0:	2303      	movs	r3, #3
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80096f4:	2306      	movs	r3, #6
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096f8:	f107 031c 	add.w	r3, r7, #28
 80096fc:	4619      	mov	r1, r3
 80096fe:	4861      	ldr	r0, [pc, #388]	; (8009884 <HAL_SPI_MspInit+0x218>)
 8009700:	f004 fcc8 	bl	800e094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADS1256_SCK_Pin;
 8009704:	2308      	movs	r3, #8
 8009706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009708:	2302      	movs	r3, #2
 800970a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970c:	2300      	movs	r3, #0
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009710:	2303      	movs	r3, #3
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009714:	2306      	movs	r3, #6
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ADS1256_SCK_GPIO_Port, &GPIO_InitStruct);
 8009718:	f107 031c 	add.w	r3, r7, #28
 800971c:	4619      	mov	r1, r3
 800971e:	485a      	ldr	r0, [pc, #360]	; (8009888 <HAL_SPI_MspInit+0x21c>)
 8009720:	f004 fcb8 	bl	800e094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009724:	e0a6      	b.n	8009874 <HAL_SPI_MspInit+0x208>
  else if(spiHandle->Instance==SPI5)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a58      	ldr	r2, [pc, #352]	; (800988c <HAL_SPI_MspInit+0x220>)
 800972c:	4293      	cmp	r3, r2
 800972e:	f040 80a1 	bne.w	8009874 <HAL_SPI_MspInit+0x208>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	4b52      	ldr	r3, [pc, #328]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973a:	4a51      	ldr	r2, [pc, #324]	; (8009880 <HAL_SPI_MspInit+0x214>)
 800973c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009740:	6453      	str	r3, [r2, #68]	; 0x44
 8009742:	4b4f      	ldr	r3, [pc, #316]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800974e:	2300      	movs	r3, #0
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	4b4b      	ldr	r3, [pc, #300]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	4a4a      	ldr	r2, [pc, #296]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009758:	f043 0320 	orr.w	r3, r3, #32
 800975c:	6313      	str	r3, [r2, #48]	; 0x30
 800975e:	4b48      	ldr	r3, [pc, #288]	; (8009880 <HAL_SPI_MspInit+0x214>)
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800976a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800976e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009770:	2302      	movs	r3, #2
 8009772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009774:	2300      	movs	r3, #0
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009778:	2302      	movs	r3, #2
 800977a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800977c:	2305      	movs	r3, #5
 800977e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009780:	f107 031c 	add.w	r3, r7, #28
 8009784:	4619      	mov	r1, r3
 8009786:	4842      	ldr	r0, [pc, #264]	; (8009890 <HAL_SPI_MspInit+0x224>)
 8009788:	f004 fc84 	bl	800e094 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800978c:	4b41      	ldr	r3, [pc, #260]	; (8009894 <HAL_SPI_MspInit+0x228>)
 800978e:	4a42      	ldr	r2, [pc, #264]	; (8009898 <HAL_SPI_MspInit+0x22c>)
 8009790:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8009792:	4b40      	ldr	r3, [pc, #256]	; (8009894 <HAL_SPI_MspInit+0x228>)
 8009794:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009798:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800979a:	4b3e      	ldr	r3, [pc, #248]	; (8009894 <HAL_SPI_MspInit+0x228>)
 800979c:	2200      	movs	r2, #0
 800979e:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097a0:	4b3c      	ldr	r3, [pc, #240]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80097a6:	4b3b      	ldr	r3, [pc, #236]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097ac:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80097ae:	4b39      	ldr	r3, [pc, #228]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097b4:	4b37      	ldr	r3, [pc, #220]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80097ba:	4b36      	ldr	r3, [pc, #216]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097bc:	2200      	movs	r2, #0
 80097be:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80097c0:	4b34      	ldr	r3, [pc, #208]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80097c6:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097ca:	2204      	movs	r2, #4
 80097cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80097ce:	4b31      	ldr	r3, [pc, #196]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80097d4:	4b2f      	ldr	r3, [pc, #188]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80097da:	4b2e      	ldr	r3, [pc, #184]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097dc:	2200      	movs	r2, #0
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80097e0:	482c      	ldr	r0, [pc, #176]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097e2:	f004 f819 	bl	800d818 <HAL_DMA_Init>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 80097ec:	21ac      	movs	r1, #172	; 0xac
 80097ee:	482b      	ldr	r0, [pc, #172]	; (800989c <HAL_SPI_MspInit+0x230>)
 80097f0:	f7fd fb62 	bl	8006eb8 <_Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a27      	ldr	r2, [pc, #156]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80097fa:	4a26      	ldr	r2, [pc, #152]	; (8009894 <HAL_SPI_MspInit+0x228>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8009800:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009802:	4a28      	ldr	r2, [pc, #160]	; (80098a4 <HAL_SPI_MspInit+0x238>)
 8009804:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8009806:	4b26      	ldr	r3, [pc, #152]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009808:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800980c:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009810:	2240      	movs	r2, #64	; 0x40
 8009812:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009814:	4b22      	ldr	r3, [pc, #136]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009816:	2200      	movs	r2, #0
 8009818:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800981a:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 800981c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009820:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009822:	4b1f      	ldr	r3, [pc, #124]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009824:	2200      	movs	r2, #0
 8009826:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009828:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 800982a:	2200      	movs	r2, #0
 800982c:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800982e:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009830:	2200      	movs	r2, #0
 8009832:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800983a:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800983c:	4b18      	ldr	r3, [pc, #96]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 800983e:	2204      	movs	r2, #4
 8009840:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009844:	2200      	movs	r2, #0
 8009846:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 800984a:	2200      	movs	r2, #0
 800984c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009850:	2200      	movs	r2, #0
 8009852:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8009854:	4812      	ldr	r0, [pc, #72]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009856:	f003 ffdf 	bl	800d818 <HAL_DMA_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <HAL_SPI_MspInit+0x1fc>
      Error_Handler();
 8009860:	21c1      	movs	r1, #193	; 0xc1
 8009862:	480e      	ldr	r0, [pc, #56]	; (800989c <HAL_SPI_MspInit+0x230>)
 8009864:	f7fd fb28 	bl	8006eb8 <_Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a0d      	ldr	r2, [pc, #52]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 800986c:	649a      	str	r2, [r3, #72]	; 0x48
 800986e:	4a0c      	ldr	r2, [pc, #48]	; (80098a0 <HAL_SPI_MspInit+0x234>)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009874:	bf00      	nop
 8009876:	3730      	adds	r7, #48	; 0x30
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	40003c00 	.word	0x40003c00
 8009880:	40023800 	.word	0x40023800
 8009884:	40020800 	.word	0x40020800
 8009888:	40020400 	.word	0x40020400
 800988c:	40015000 	.word	0x40015000
 8009890:	40021400 	.word	0x40021400
 8009894:	200020f4 	.word	0x200020f4
 8009898:	40026458 	.word	0x40026458
 800989c:	080186a8 	.word	0x080186a8
 80098a0:	20002154 	.word	0x20002154
 80098a4:	40026470 	.word	0x40026470

080098a8 <sFLASH_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  sFLASH_LowLevel_Init();
 80098ac:	f000 fa1a 	bl	8009ce4 <sFLASH_LowLevel_Init>
    
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80098b0:	2201      	movs	r2, #1
 80098b2:	2104      	movs	r1, #4
 80098b4:	4802      	ldr	r0, [pc, #8]	; (80098c0 <sFLASH_Init+0x18>)
 80098b6:	f004 fdb1 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< SPI configuration */

}
 80098ba:	bf00      	nop
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	40021000 	.word	0x40021000

080098c4 <sFLASH_Erase>:
	 * @param offset Flash offset to start erasing
	 * @param bytes Number of bytes to erase
	 *
	 * @return 0, or non-zero if any error.
**/
uint32_t sFLASH_Erase(uint32_t offset, uint32_t bytes){
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]

		int rv = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
		/* Invalid input */
		if (offset + bytes > N25Q256A_FLASH_SIZE)
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	4413      	add	r3, r2
 80098d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098dc:	d901      	bls.n	80098e2 <sFLASH_Erase+0x1e>
			return 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	e033      	b.n	800994a <sFLASH_Erase+0x86>
		/* Not aligned to subsector (4kb) */
		if (offset % N25Q256A_SUBSECTOR_SIZE || bytes % N25Q256A_SUBSECTOR_SIZE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <sFLASH_Erase+0x32>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <sFLASH_Erase+0x36>
			return 1;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e027      	b.n	800994a <sFLASH_Erase+0x86>
		/* Largest unit is sector (64kb) */
		if (offset % N25Q256A_SECTOR_SIZE == 0) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d11c      	bne.n	800993c <sFLASH_Erase+0x78>
			while (bytes != (bytes % (64 * 1024))) {
 8009902:	e00a      	b.n	800991a <sFLASH_Erase+0x56>
				sFLASH_EraseSector(offset);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f825 	bl	8009954 <sFLASH_EraseSector>
				//if (rv)
				//	return rv;
				bytes -= N25Q256A_SECTOR_SIZE;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8009910:	603b      	str	r3, [r7, #0]
				offset += N25Q256A_SECTOR_SIZE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009918:	607b      	str	r3, [r7, #4]
			while (bytes != (bytes % (64 * 1024))) {
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	429a      	cmp	r2, r3
 8009922:	d1ef      	bne.n	8009904 <sFLASH_Erase+0x40>
				 */
				//watchdog_reload();
			}
		}
		/* Largest unit is sector (4kb) */
		while (bytes != (bytes % N25Q256A_SUBSECTOR_SIZE)) {
 8009924:	e00a      	b.n	800993c <sFLASH_Erase+0x78>
			sFLASH_EraseSubSector(offset);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f840 	bl	80099ac <sFLASH_EraseSubSector>
			//if (rv)
			//	return rv;
			bytes -= N25Q256A_SUBSECTOR_SIZE;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8009932:	603b      	str	r3, [r7, #0]
			offset += N25Q256A_SUBSECTOR_SIZE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993a:	607b      	str	r3, [r7, #4]
		while (bytes != (bytes % N25Q256A_SUBSECTOR_SIZE)) {
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	429a      	cmp	r2, r3
 8009946:	d1ee      	bne.n	8009926 <sFLASH_Erase+0x62>
		}
		return rv;
 8009948:	68fb      	ldr	r3, [r7, #12]



}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 800995c:	f000 f98c 	bl	8009c78 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8009960:	2200      	movs	r2, #0
 8009962:	2104      	movs	r1, #4
 8009964:	4810      	ldr	r0, [pc, #64]	; (80099a8 <sFLASH_EraseSector+0x54>)
 8009966:	f004 fd59 	bl	800e41c <HAL_GPIO_WritePin>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 800996a:	20d8      	movs	r0, #216	; 0xd8
 800996c:	f000 f96e 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	0c1b      	lsrs	r3, r3, #16
 8009974:	b2db      	uxtb	r3, r3
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f968 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	b2db      	uxtb	r3, r3
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f962 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f95d 	bl	8009c4c <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009992:	2201      	movs	r2, #1
 8009994:	2104      	movs	r1, #4
 8009996:	4804      	ldr	r0, [pc, #16]	; (80099a8 <sFLASH_EraseSector+0x54>)
 8009998:	f004 fd40 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800999c:	f000 f980 	bl	8009ca0 <sFLASH_WaitForWriteEnd>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	40021000 	.word	0x40021000

080099ac <sFLASH_EraseSubSector>:
/**
  * @brief  Erases the specified FLASH subsector.
  * @param  SectorAddr: address of the subsector to erase.
  * @retval None
  */
void sFLASH_EraseSubSector(uint32_t SubSectorAddr){
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	/*!< Send write enable instruction */
	  sFLASH_WriteEnable();
 80099b4:	f000 f960 	bl	8009c78 <sFLASH_WriteEnable>

	  /*!< Sector Erase */
	  /*!< Select the FLASH: Chip Select low */
	  sFLASH_CS_LOW();
 80099b8:	2200      	movs	r2, #0
 80099ba:	2104      	movs	r1, #4
 80099bc:	4810      	ldr	r0, [pc, #64]	; (8009a00 <sFLASH_EraseSubSector+0x54>)
 80099be:	f004 fd2d 	bl	800e41c <HAL_GPIO_WritePin>
	  /*!< Send Sector Erase instruction */
	  sFLASH_SendByte(sFLASH_CMD_SUBSE);
 80099c2:	2020      	movs	r0, #32
 80099c4:	f000 f942 	bl	8009c4c <sFLASH_SendByte>
	  /*!< Send SectorAddr high nibble address byte */
	  sFLASH_SendByte((SubSectorAddr & 0xFF0000) >> 16);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f93c 	bl	8009c4c <sFLASH_SendByte>
	  /*!< Send SectorAddr medium nibble address byte */
	  sFLASH_SendByte((SubSectorAddr & 0xFF00) >> 8);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	0a1b      	lsrs	r3, r3, #8
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f936 	bl	8009c4c <sFLASH_SendByte>
	  /*!< Send SectorAddr low nibble address byte */
	  sFLASH_SendByte(SubSectorAddr & 0xFF);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f931 	bl	8009c4c <sFLASH_SendByte>
	  /*!< Deselect the FLASH: Chip Select high */
	  sFLASH_CS_HIGH();
 80099ea:	2201      	movs	r2, #1
 80099ec:	2104      	movs	r1, #4
 80099ee:	4804      	ldr	r0, [pc, #16]	; (8009a00 <sFLASH_EraseSubSector+0x54>)
 80099f0:	f004 fd14 	bl	800e41c <HAL_GPIO_WritePin>

	  /*!< Wait the end of Flash writing */
	  sFLASH_WaitForWriteEnd();
 80099f4:	f000 f954 	bl	8009ca0 <sFLASH_WaitForWriteEnd>



}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	40021000 	.word	0x40021000

08009a04 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8009a12:	f000 f931 	bl	8009c78 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8009a16:	2200      	movs	r2, #0
 8009a18:	2104      	movs	r1, #4
 8009a1a:	4818      	ldr	r0, [pc, #96]	; (8009a7c <sFLASH_WritePage+0x78>)
 8009a1c:	f004 fcfe 	bl	800e41c <HAL_GPIO_WritePin>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8009a20:	2002      	movs	r0, #2
 8009a22:	f000 f913 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f90d 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	0a1b      	lsrs	r3, r3, #8
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 f907 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f902 	bl	8009c4c <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8009a48:	e007      	b.n	8009a5a <sFLASH_WritePage+0x56>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f8fc 	bl	8009c4c <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8009a5a:	88fb      	ldrh	r3, [r7, #6]
 8009a5c:	1e5a      	subs	r2, r3, #1
 8009a5e:	80fa      	strh	r2, [r7, #6]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1f2      	bne.n	8009a4a <sFLASH_WritePage+0x46>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009a64:	2201      	movs	r2, #1
 8009a66:	2104      	movs	r1, #4
 8009a68:	4804      	ldr	r0, [pc, #16]	; (8009a7c <sFLASH_WritePage+0x78>)
 8009a6a:	f004 fcd7 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8009a6e:	f000 f917 	bl	8009ca0 <sFLASH_WaitForWriteEnd>
}
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	40021000 	.word	0x40021000

08009a80 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
 8009a92:	2300      	movs	r3, #0
 8009a94:	75bb      	strb	r3, [r7, #22]
 8009a96:	2300      	movs	r3, #0
 8009a98:	757b      	strb	r3, [r7, #21]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	753b      	strb	r3, [r7, #20]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8009aa6:	7d7b      	ldrb	r3, [r7, #21]
 8009aa8:	425b      	negs	r3, r3
 8009aaa:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8009aac:	88fb      	ldrh	r3, [r7, #6]
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8009ab4:	88fb      	ldrh	r3, [r7, #6]
 8009ab6:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8009ab8:	7d7b      	ldrb	r3, [r7, #21]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d124      	bne.n	8009b08 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d114      	bne.n	8009aee <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8009ac4:	88fb      	ldrh	r3, [r7, #6]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff ff9a 	bl	8009a04 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8009ad0:	e07b      	b.n	8009bca <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8009ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff ff93 	bl	8009a04 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009ae4:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009aec:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	1e5a      	subs	r2, r3, #1
 8009af2:	75fa      	strb	r2, [r7, #23]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1ec      	bne.n	8009ad2 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8009af8:	7dbb      	ldrb	r3, [r7, #22]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff ff7f 	bl	8009a04 <sFLASH_WritePage>
}
 8009b06:	e060      	b.n	8009bca <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d125      	bne.n	8009b5a <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8009b0e:	7dba      	ldrb	r2, [r7, #22]
 8009b10:	7d3b      	ldrb	r3, [r7, #20]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d91a      	bls.n	8009b4c <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8009b16:	7dba      	ldrb	r2, [r7, #22]
 8009b18:	7d3b      	ldrb	r3, [r7, #20]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8009b1e:	7d3b      	ldrb	r3, [r7, #20]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff ff6c 	bl	8009a04 <sFLASH_WritePage>
        WriteAddr +=  count;
 8009b2c:	7d3b      	ldrb	r3, [r7, #20]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	4413      	add	r3, r2
 8009b32:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8009b34:	7d3b      	ldrb	r3, [r7, #20]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8009b3c:	7cfb      	ldrb	r3, [r7, #19]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f7ff ff5d 	bl	8009a04 <sFLASH_WritePage>
}
 8009b4a:	e03e      	b.n	8009bca <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8009b4c:	88fb      	ldrh	r3, [r7, #6]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	68b9      	ldr	r1, [r7, #8]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ff56 	bl	8009a04 <sFLASH_WritePage>
}
 8009b58:	e037      	b.n	8009bca <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8009b5a:	7d3b      	ldrb	r3, [r7, #20]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	88fa      	ldrh	r2, [r7, #6]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8009b6c:	88fb      	ldrh	r3, [r7, #6]
 8009b6e:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8009b70:	7d3b      	ldrb	r3, [r7, #20]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff ff43 	bl	8009a04 <sFLASH_WritePage>
      WriteAddr +=  count;
 8009b7e:	7d3b      	ldrb	r3, [r7, #20]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	4413      	add	r3, r2
 8009b84:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8009b86:	7d3b      	ldrb	r3, [r7, #20]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8009b8e:	e00d      	b.n	8009bac <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8009b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff ff34 	bl	8009a04 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009ba2:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009baa:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	1e5a      	subs	r2, r3, #1
 8009bb0:	75fa      	strb	r2, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1ec      	bne.n	8009b90 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8009bb6:	7dbb      	ldrb	r3, [r7, #22]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8009bbc:	7dbb      	ldrb	r3, [r7, #22]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff ff1d 	bl	8009a04 <sFLASH_WritePage>
}
 8009bca:	bf00      	nop
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8009be2:	2200      	movs	r2, #0
 8009be4:	2104      	movs	r1, #4
 8009be6:	4818      	ldr	r0, [pc, #96]	; (8009c48 <sFLASH_ReadBuffer+0x74>)
 8009be8:	f004 fc18 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8009bec:	2003      	movs	r0, #3
 8009bee:	f000 f82d 	bl	8009c4c <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f827 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	0a1b      	lsrs	r3, r3, #8
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f821 	bl	8009c4c <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f81c 	bl	8009c4c <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8009c14:	e009      	b.n	8009c2a <sFLASH_ReadBuffer+0x56>
  {
    /*!< Read a byte from the FLASH */
    *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 8009c16:	20ff      	movs	r0, #255	; 0xff
 8009c18:	f000 f818 	bl	8009c4c <sFLASH_SendByte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	1e5a      	subs	r2, r3, #1
 8009c2e:	80fa      	strh	r2, [r7, #6]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f0      	bne.n	8009c16 <sFLASH_ReadBuffer+0x42>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009c34:	2201      	movs	r2, #1
 8009c36:	2104      	movs	r1, #4
 8009c38:	4803      	ldr	r0, [pc, #12]	; (8009c48 <sFLASH_ReadBuffer+0x74>)
 8009c3a:	f004 fbef 	bl	800e41c <HAL_GPIO_WritePin>
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	40021000 	.word	0x40021000

08009c4c <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
uint8_t sFLASH_SendByte(uint8_t byte)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
	uint8_t recv;
  HAL_SPI_TransmitReceive(&hspi5,&byte,&recv,1,100);
 8009c56:	f107 020f 	add.w	r2, r7, #15
 8009c5a:	1df9      	adds	r1, r7, #7
 8009c5c:	2364      	movs	r3, #100	; 0x64
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2301      	movs	r3, #1
 8009c62:	4804      	ldr	r0, [pc, #16]	; (8009c74 <sFLASH_SendByte+0x28>)
 8009c64:	f006 ff9c 	bl	8010ba0 <HAL_SPI_TransmitReceive>
  /*!< Return the byte read from the SPI bus */
  return recv;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000209c 	.word	0x2000209c

08009c78 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2104      	movs	r1, #4
 8009c80:	4806      	ldr	r0, [pc, #24]	; (8009c9c <sFLASH_WriteEnable+0x24>)
 8009c82:	f004 fbcb 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8009c86:	2006      	movs	r0, #6
 8009c88:	f7ff ffe0 	bl	8009c4c <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4802      	ldr	r0, [pc, #8]	; (8009c9c <sFLASH_WriteEnable+0x24>)
 8009c92:	f004 fbc3 	bl	800e41c <HAL_GPIO_WritePin>
}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40021000 	.word	0x40021000

08009ca0 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8009caa:	2200      	movs	r2, #0
 8009cac:	2104      	movs	r1, #4
 8009cae:	480c      	ldr	r0, [pc, #48]	; (8009ce0 <sFLASH_WaitForWriteEnd+0x40>)
 8009cb0:	f004 fbb4 	bl	800e41c <HAL_GPIO_WritePin>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8009cb4:	2005      	movs	r0, #5
 8009cb6:	f7ff ffc9 	bl	8009c4c <sFLASH_SendByte>
  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 8009cba:	20ff      	movs	r0, #255	; 0xff
 8009cbc:	f7ff ffc6 	bl	8009c4c <sFLASH_SendByte>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1f5      	bne.n	8009cba <sFLASH_WaitForWriteEnd+0x1a>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009cce:	2201      	movs	r2, #1
 8009cd0:	2104      	movs	r1, #4
 8009cd2:	4803      	ldr	r0, [pc, #12]	; (8009ce0 <sFLASH_WaitForWriteEnd+0x40>)
 8009cd4:	f004 fba2 	bl	800e41c <HAL_GPIO_WritePin>
}
 8009cd8:	bf00      	nop
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	40021000 	.word	0x40021000

08009ce4 <sFLASH_LowLevel_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_Init(void)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <spiffs_cache_page_get>:
#include "spiffs_nucleus.h"

#if SPIFFS_CACHE

// returns cached page for give page index, or null if no such cached page
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	807b      	strh	r3, [r7, #2]
  spiffs_cache *cache = spiffs_get_cache(fs);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d02:	613b      	str	r3, [r7, #16]
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <spiffs_cache_page_get+0x24>
 8009d12:	2300      	movs	r3, #0
 8009d14:	e02f      	b.n	8009d76 <spiffs_cache_page_get+0x84>
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e025      	b.n	8009d68 <spiffs_cache_page_get+0x76>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	3314      	adds	r3, #20
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	fb01 f303 	mul.w	r3, r1, r3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
    if ((cache->cpage_use_map & (1<<i)) &&
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2101      	movs	r1, #1
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	fa01 f202 	lsl.w	r2, r1, r2
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00f      	beq.n	8009d62 <spiffs_cache_page_get+0x70>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	b25b      	sxtb	r3, r3
    if ((cache->cpage_use_map & (1<<i)) &&
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db0a      	blt.n	8009d62 <spiffs_cache_page_get+0x70>
        cp->pix == pix ) {
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	891b      	ldrh	r3, [r3, #8]
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8009d50:	887a      	ldrh	r2, [r7, #2]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d105      	bne.n	8009d62 <spiffs_cache_page_get+0x70>
      //SPIFFS_CACHE_DBG("CACHE_GET: have cache page "_SPIPRIi" for "_SPIPRIpg"\n", i, pix);
      cp->last_access = cache->last_access;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	605a      	str	r2, [r3, #4]
      return cp;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	e009      	b.n	8009d76 <spiffs_cache_page_get+0x84>
  for (i = 0; i < cache->cpage_count; i++) {
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	dbd3      	blt.n	8009d1c <spiffs_cache_page_get+0x2a>
    }
  }
  //SPIFFS_CACHE_DBG("CACHE_GET: no cache for "_SPIPRIpg"\n", pix);
  return 0;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <spiffs_cache_page_free>:

// frees cached page
static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back) {
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	71fb      	strb	r3, [r7, #7]
  s32_t res = SPIFFS_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]
  spiffs_cache *cache = spiffs_get_cache(fs);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d98:	61bb      	str	r3, [r7, #24]
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	691a      	ldr	r2, [r3, #16]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	3314      	adds	r3, #20
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	fb01 f303 	mul.w	r3, r1, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]
  if (cache->cpage_use_map & (1<<ix)) {
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	2101      	movs	r1, #1
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	fa01 f202 	lsl.w	r2, r1, r2
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d036      	beq.n	8009e2e <spiffs_cache_page_free+0xac>
    if (write_back &&
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d026      	beq.n	8009e14 <spiffs_cache_page_free+0x92>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b25b      	sxtb	r3, r3
    if (write_back &&
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	db21      	blt.n	8009e14 <spiffs_cache_page_free+0x92>
        (cp->flags & SPIFFS_CACHE_FLAG_DIRTY)) {
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 0301 	and.w	r3, r3, #1
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01b      	beq.n	8009e14 <spiffs_cache_page_free+0x92>
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	3314      	adds	r3, #20
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	3314      	adds	r3, #20
 8009dee:	4413      	add	r3, r2
 8009df0:	613b      	str	r3, [r7, #16]
      SPIFFS_CACHE_DBG("CACHE_FREE: write cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	6911      	ldr	r1, [r2, #16]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	8912      	ldrh	r2, [r2, #8]
 8009dfe:	4610      	mov	r0, r2
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	69d2      	ldr	r2, [r2, #28]
 8009e04:	fb00 f202 	mul.w	r2, r0, r2
 8009e08:	1888      	adds	r0, r1, r2
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	69d1      	ldr	r1, [r2, #28]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4798      	blx	r3
 8009e12:	61f8      	str	r0, [r7, #28]
    } else
#endif
    {
      SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
    }
    cache->cpage_use_map &= ~(1 << ix);
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8009e20:	43d2      	mvns	r2, r2
 8009e22:	401a      	ands	r2, r3
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	609a      	str	r2, [r3, #8]
    cp->flags = 0;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
  }

  return res;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3720      	adds	r7, #32
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <spiffs_cache_page_remove_oldest>:

// removes the oldest accessed cached page
static s32_t spiffs_cache_page_remove_oldest(spiffs *fs, u8_t flag_mask, u8_t flags) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
 8009e44:	4613      	mov	r3, r2
 8009e46:	70bb      	strb	r3, [r7, #2]
  s32_t res = SPIFFS_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61fb      	str	r3, [r7, #28]
  spiffs_cache *cache = spiffs_get_cache(fs);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e50:	60fb      	str	r3, [r7, #12]

  if ((cache->cpage_use_map & cache->cpage_use_mask) != cache->cpage_use_mask) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	401a      	ands	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d001      	beq.n	8009e68 <spiffs_cache_page_remove_oldest+0x30>
    // at least one free cpage
    return SPIFFS_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e03c      	b.n	8009ee2 <spiffs_cache_page_remove_oldest+0xaa>
  }

  // all busy, scan thru all to find the cpage which has oldest access
  int i;
  int cand_ix = -1;
 8009e68:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6c:	617b      	str	r3, [r7, #20]
  u32_t oldest_val = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	613b      	str	r3, [r7, #16]
  for (i = 0; i < cache->cpage_count; i++) {
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	e024      	b.n	8009ec2 <spiffs_cache_page_remove_oldest+0x8a>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	691a      	ldr	r2, [r3, #16]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	3314      	adds	r3, #20
 8009e82:	69b9      	ldr	r1, [r7, #24]
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	4413      	add	r3, r2
 8009e8a:	60bb      	str	r3, [r7, #8]
    if ((cache->last_access - cp->last_access) > oldest_val &&
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d20f      	bcs.n	8009ebc <spiffs_cache_page_remove_oldest+0x84>
        (cp->flags & flag_mask) == flags) {
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	781a      	ldrb	r2, [r3, #0]
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	b2db      	uxtb	r3, r3
    if ((cache->last_access - cp->last_access) > oldest_val &&
 8009ea6:	78ba      	ldrb	r2, [r7, #2]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d107      	bne.n	8009ebc <spiffs_cache_page_remove_oldest+0x84>
      oldest_val = cache->last_access - cp->last_access;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	613b      	str	r3, [r7, #16]
      cand_ix = i;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	617b      	str	r3, [r7, #20]
  for (i = 0; i < cache->cpage_count; i++) {
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	dbd4      	blt.n	8009e78 <spiffs_cache_page_remove_oldest+0x40>
    }
  }

  if (cand_ix >= 0) {
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db05      	blt.n	8009ee0 <spiffs_cache_page_remove_oldest+0xa8>
    res = spiffs_cache_page_free(fs, cand_ix, 1);
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	6979      	ldr	r1, [r7, #20]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff ff52 	bl	8009d82 <spiffs_cache_page_free>
 8009ede:	61f8      	str	r0, [r7, #28]
  }

  return res;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <spiffs_cache_page_allocate>:

// allocates a new cached page and returns it, or null if all cache pages are busy
static spiffs_cache_page *spiffs_cache_page_allocate(spiffs *fs) {
 8009eea:	b480      	push	{r7}
 8009eec:	b087      	sub	sp, #28
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  spiffs_cache *cache = spiffs_get_cache(fs);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef6:	613b      	str	r3, [r7, #16]
  if (cache->cpage_use_map == 0xffffffff) {
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d101      	bne.n	8009f06 <spiffs_cache_page_allocate+0x1c>
    // out of cache memory
    return 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e02e      	b.n	8009f64 <spiffs_cache_page_allocate+0x7a>
  }
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e024      	b.n	8009f56 <spiffs_cache_page_allocate+0x6c>
    if ((cache->cpage_use_map & (1<<i)) == 0) {
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2101      	movs	r1, #1
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	fa01 f202 	lsl.w	r2, r1, r2
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d118      	bne.n	8009f50 <spiffs_cache_page_allocate+0x66>
      spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	691a      	ldr	r2, [r3, #16]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	3314      	adds	r3, #20
 8009f28:	6979      	ldr	r1, [r7, #20]
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]
      cache->cpage_use_map |= (1<<i);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	2101      	movs	r1, #1
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	609a      	str	r2, [r3, #8]
      cp->last_access = cache->last_access;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	605a      	str	r2, [r3, #4]
      //SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi"\n", i);
      return cp;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	e009      	b.n	8009f64 <spiffs_cache_page_allocate+0x7a>
  for (i = 0; i < cache->cpage_count; i++) {
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	3301      	adds	r3, #1
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	dbd4      	blt.n	8009f0c <spiffs_cache_page_allocate+0x22>
    }
  }
  // out of cache entries
  return 0;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <spiffs_phys_rd>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *dst) {
 8009f70:	b5b0      	push	{r4, r5, r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	72fb      	strb	r3, [r7, #11]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	813b      	strh	r3, [r7, #8]
  (void)fh;
  s32_t res = SPIFFS_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  spiffs_cache *cache = spiffs_get_cache(fs);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff fea6 	bl	8009cf2 <spiffs_cache_page_get>
 8009fa6:	6278      	str	r0, [r7, #36]	; 0x24
  cache->last_access++;
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	605a      	str	r2, [r3, #4]
  if (cp) {
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d028      	beq.n	800a00a <spiffs_phys_rd+0x9a>
    // we've already got one, you see
#if SPIFFS_CACHE_STATS
    fs->cache_hits++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	665a      	str	r2, [r3, #100]	; 0x64
#endif
    cp->last_access = cache->last_access;
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	605a      	str	r2, [r3, #4]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	691a      	ldr	r2, [r3, #16]
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	3314      	adds	r3, #20
 8009fda:	fb01 f303 	mul.w	r3, r1, r3
 8009fde:	3314      	adds	r3, #20
 8009fe0:	4413      	add	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	69d2      	ldr	r2, [r2, #28]
 8009ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ff4:	fb01 f202 	mul.w	r2, r1, r2
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a000:	4619      	mov	r1, r3
 800a002:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a004:	f00c fcf4 	bl	80169f0 <memcpy>
 800a008:	e07d      	b.n	800a106 <spiffs_phys_rd+0x196>
  } else {
    if ((op & SPIFFS_OP_TYPE_MASK) == SPIFFS_OP_T_OBJ_LU2) {
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	2b01      	cmp	r3, #1
 800a012:	d107      	bne.n	800a024 <spiffs_phys_rd+0xb4>
      // for second layer lookup functions, we do not cache in order to prevent shredding
      return SPIFFS_HAL_READ(fs, addr, len, dst);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a01a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	4603      	mov	r3, r0
 800a022:	e071      	b.n	800a108 <spiffs_phys_rd+0x198>
    }
#if SPIFFS_CACHE_STATS
    fs->cache_misses++;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	669a      	str	r2, [r3, #104]	; 0x68
#endif
    // this operation will always free one cache page (unless all already free),
    // the result code stems from the write operation of the possibly freed cache page
    res = spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
 800a02e:	2200      	movs	r2, #0
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7ff ff00 	bl	8009e38 <spiffs_cache_page_remove_oldest>
 800a038:	62f8      	str	r0, [r7, #44]	; 0x2c

    cp = spiffs_cache_page_allocate(fs);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff ff55 	bl	8009eea <spiffs_cache_page_allocate>
 800a040:	6278      	str	r0, [r7, #36]	; 0x24
    if (cp) {
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d052      	beq.n	800a0ee <spiffs_phys_rd+0x17e>
      cp->flags = SPIFFS_CACHE_FLAG_WRTHRU;
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	2202      	movs	r2, #2
 800a04c:	701a      	strb	r2, [r3, #0]
      cp->pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	1ad2      	subs	r2, r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05e:	b29a      	uxth	r2, r3
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	811a      	strh	r2, [r3, #8]
      SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi" for pix "_SPIPRIpg "\n", cp->ix, cp->pix);

      s32_t res2 = SPIFFS_HAL_READ(fs,
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681c      	ldr	r4, [r3, #0]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	69d2      	ldr	r2, [r2, #28]
 800a074:	fbb3 f1f2 	udiv	r1, r3, r2
 800a078:	fb01 f202 	mul.w	r2, r1, r2
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	1ad0      	subs	r0, r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	69d9      	ldr	r1, [r3, #28]
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	691a      	ldr	r2, [r3, #16]
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	785b      	ldrb	r3, [r3, #1]
 800a08e:	461d      	mov	r5, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	3314      	adds	r3, #20
 800a096:	fb05 f303 	mul.w	r3, r5, r3
 800a09a:	3314      	adds	r3, #20
 800a09c:	4413      	add	r3, r2
 800a09e:	461a      	mov	r2, r3
 800a0a0:	47a0      	blx	r4
 800a0a2:	61f8      	str	r0, [r7, #28]
          addr - SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr),
          SPIFFS_CFG_LOG_PAGE_SZ(fs),
          spiffs_get_cache_page(fs, cache, cp->ix));
      if (res2 != SPIFFS_OK) {
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <spiffs_phys_rd+0x13e>
        // honor read failure before possible write failure (bad idea?)
        res = res2;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	3314      	adds	r3, #20
 800a0be:	fb01 f303 	mul.w	r3, r1, r3
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	4413      	add	r3, r2
 800a0c6:	61bb      	str	r3, [r7, #24]
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	69d2      	ldr	r2, [r2, #28]
 800a0d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0d8:	fb01 f202 	mul.w	r2, r1, r2
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a0e8:	f00c fc82 	bl	80169f0 <memcpy>
 800a0ec:	e00b      	b.n	800a106 <spiffs_phys_rd+0x196>
    } else {
      // this will never happen, last resort for sake of symmetry
      s32_t res2 = SPIFFS_HAL_READ(fs, addr, len, dst);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	6238      	str	r0, [r7, #32]
      if (res2 != SPIFFS_OK) {
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <spiffs_phys_rd+0x196>
        // honor read failure before possible write failure (bad idea?)
        res = res2;
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }
  }
  return res;
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3730      	adds	r7, #48	; 0x30
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bdb0      	pop	{r4, r5, r7, pc}

0800a110 <spiffs_cache_init>:
}

#endif

// initializes the cache
void spiffs_cache_init(spiffs *fs) {
 800a110:	b580      	push	{r7, lr}
 800a112:	b08c      	sub	sp, #48	; 0x30
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  if (fs->cache == 0) return;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d06d      	beq.n	800a1fc <spiffs_cache_init+0xec>
  u32_t sz = fs->cache_size;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t cache_mask = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
  int i;
  int cache_entries =
      (sz - sizeof(spiffs_cache)) / (SPIFFS_CACHE_PAGE_SIZE(fs));
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	f1a3 0214 	sub.w	r2, r3, #20
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	3314      	adds	r3, #20
 800a136:	fbb2 f3f3 	udiv	r3, r2, r3
  int cache_entries =
 800a13a:	623b      	str	r3, [r7, #32]
  if (cache_entries <= 0) return;
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dd5e      	ble.n	800a200 <spiffs_cache_init+0xf0>

  for (i = 0; i < cache_entries; i++) {
 800a142:	2300      	movs	r3, #0
 800a144:	62bb      	str	r3, [r7, #40]	; 0x28
 800a146:	e009      	b.n	800a15c <spiffs_cache_init+0x4c>
    cache_mask <<= 1;
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
    cache_mask |= 1;
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0; i < cache_entries; i++) {
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	3301      	adds	r3, #1
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	429a      	cmp	r2, r3
 800a162:	dbf1      	blt.n	800a148 <spiffs_cache_init+0x38>
  }

  spiffs_cache cache;
  memset(&cache, 0, sizeof(spiffs_cache));
 800a164:	f107 0308 	add.w	r3, r7, #8
 800a168:	2214      	movs	r2, #20
 800a16a:	2100      	movs	r1, #0
 800a16c:	4618      	mov	r0, r3
 800a16e:	f00c fc4d 	bl	8016a0c <memset>
  cache.cpage_count = cache_entries;
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	723b      	strb	r3, [r7, #8]
  cache.cpages = (u8_t *)((u8_t *)fs->cache + sizeof(spiffs_cache));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17c:	3314      	adds	r3, #20
 800a17e:	61bb      	str	r3, [r7, #24]

  cache.cpage_use_map = 0xffffffff;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	613b      	str	r3, [r7, #16]
  cache.cpage_use_mask = cache_mask;
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	617b      	str	r3, [r7, #20]
  _SPIFFS_MEMCPY(fs->cache, &cache, sizeof(spiffs_cache));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a18e:	f107 0108 	add.w	r1, r7, #8
 800a192:	2214      	movs	r2, #20
 800a194:	4618      	mov	r0, r3
 800a196:	f00c fc2b 	bl	80169f0 <memcpy>

  spiffs_cache *c = spiffs_get_cache(fs);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19e:	61fb      	str	r3, [r7, #28]

  memset(c->cpages, 0, c->cpage_count * SPIFFS_CACHE_PAGE_SIZE(fs));
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	6918      	ldr	r0, [r3, #16]
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	f00c fc28 	bl	8016a0c <memset>

  c->cpage_use_map &= ~(c->cpage_use_mask);
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	401a      	ands	r2, r3
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	609a      	str	r2, [r3, #8]
  for (i = 0; i < cache.cpage_count; i++) {
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1d0:	e00e      	b.n	800a1f0 <spiffs_cache_init+0xe0>
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	691a      	ldr	r2, [r3, #16]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	3314      	adds	r3, #20
 800a1dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	4413      	add	r3, r2
 800a1e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < cache.cpage_count; i++) {
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1f0:	7a3b      	ldrb	r3, [r7, #8]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	dbeb      	blt.n	800a1d2 <spiffs_cache_init+0xc2>
 800a1fa:	e002      	b.n	800a202 <spiffs_cache_init+0xf2>
  if (fs->cache == 0) return;
 800a1fc:	bf00      	nop
 800a1fe:	e000      	b.n	800a202 <spiffs_cache_init+0xf2>
  if (cache_entries <= 0) return;
 800a200:	bf00      	nop
  }
}
 800a202:	3730      	adds	r7, #48	; 0x30
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <SPIFFS_mount>:
#endif // SPIFFS_USE_MAGIC && SPIFFS_USE_MAGIC_LENGTH && SPIFFS_SINGLETON==0

s32_t SPIFFS_mount(spiffs *fs, spiffs_config *config, u8_t *work,
    u8_t *fd_space, u32_t fd_space_size,
    void *cache, u32_t cache_size,
    spiffs_check_callback check_cb_f) {
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
                 SPIFFS_CFG_PHYS_ERASE_SZ(fs),
                 SPIFFS_CFG_PHYS_ADDR(fs),
                 fd_space_size, cache_size);
  void *user_data;
  SPIFFS_LOCK(fs);
  user_data = fs->user_data;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a21a:	61fb      	str	r3, [r7, #28]
  memset(fs, 0, sizeof(spiffs));
 800a21c:	2280      	movs	r2, #128	; 0x80
 800a21e:	2100      	movs	r1, #0
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f00c fbf3 	bl	8016a0c <memset>
  _SPIFFS_MEMCPY(&fs->cfg, config, sizeof(spiffs_config));
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f00c fbdf 	bl	80169f0 <memcpy>
  fs->user_data = user_data;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	679a      	str	r2, [r3, #120]	; 0x78
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	fbb2 f2f3 	udiv	r2, r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	621a      	str	r2, [r3, #32]
  fs->work = &work[0];
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	635a      	str	r2, [r3, #52]	; 0x34
  memset(fd_space, 0, fd_space_size);
 800a25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a25c:	2100      	movs	r1, #0
 800a25e:	6838      	ldr	r0, [r7, #0]
 800a260:	f00c fbd4 	bl	8016a0c <memset>
  // align fd_space pointer to pointer size byte boundary
  u8_t ptr_size = sizeof(void*);
 800a264:	2304      	movs	r3, #4
 800a266:	76fb      	strb	r3, [r7, #27]
  u8_t addr_lsb = ((u8_t)(intptr_t)fd_space) & (ptr_size-1);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	b25a      	sxtb	r2, r3
 800a26c:	7efb      	ldrb	r3, [r7, #27]
 800a26e:	3b01      	subs	r3, #1
 800a270:	b2db      	uxtb	r3, r3
 800a272:	b25b      	sxtb	r3, r3
 800a274:	4013      	ands	r3, r2
 800a276:	b25b      	sxtb	r3, r3
 800a278:	76bb      	strb	r3, [r7, #26]
  if (addr_lsb) {
 800a27a:	7ebb      	ldrb	r3, [r7, #26]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00d      	beq.n	800a29c <SPIFFS_mount+0x94>
    fd_space += (ptr_size-addr_lsb);
 800a280:	7efa      	ldrb	r2, [r7, #27]
 800a282:	7ebb      	ldrb	r3, [r7, #26]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	461a      	mov	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	4413      	add	r3, r2
 800a28c:	603b      	str	r3, [r7, #0]
    fd_space_size -= (ptr_size-addr_lsb);
 800a28e:	7efa      	ldrb	r2, [r7, #27]
 800a290:	7ebb      	ldrb	r3, [r7, #26]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	461a      	mov	r2, r3
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	1a9b      	subs	r3, r3, r2
 800a29a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  fs->fd_space = fd_space;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	63da      	str	r2, [r3, #60]	; 0x3c
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	4a2d      	ldr	r2, [pc, #180]	; (800a35c <SPIFFS_mount+0x154>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	095a      	lsrs	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40

  // align cache pointer to 4 byte boundary
  addr_lsb = ((u8_t)(intptr_t)cache) & (ptr_size-1);
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	b25a      	sxtb	r2, r3
 800a2b4:	7efb      	ldrb	r3, [r7, #27]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b25b      	sxtb	r3, r3
 800a2bc:	4013      	ands	r3, r2
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	76bb      	strb	r3, [r7, #26]
  if (addr_lsb) {
 800a2c2:	7ebb      	ldrb	r3, [r7, #26]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d011      	beq.n	800a2ec <SPIFFS_mount+0xe4>
    u8_t *cache_8 = (u8_t *)cache;
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	617b      	str	r3, [r7, #20]
    cache_8 += (ptr_size-addr_lsb);
 800a2cc:	7efa      	ldrb	r2, [r7, #27]
 800a2ce:	7ebb      	ldrb	r3, [r7, #26]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]
    cache = cache_8;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    cache_size -= (ptr_size-addr_lsb);
 800a2de:	7efa      	ldrb	r2, [r7, #27]
 800a2e0:	7ebb      	ldrb	r3, [r7, #26]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	633b      	str	r3, [r7, #48]	; 0x30
  }
  if (cache_size & (ptr_size-1)) {
 800a2ec:	7efb      	ldrb	r3, [r7, #27]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <SPIFFS_mount+0xfe>
    cache_size -= (cache_size & (ptr_size-1));
 800a2fa:	7efb      	ldrb	r3, [r7, #27]
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	4013      	ands	r3, r2
 800a304:	633b      	str	r3, [r7, #48]	; 0x30
  }

#if SPIFFS_CACHE
  fs->cache = cache;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30a:	65da      	str	r2, [r3, #92]	; 0x5c
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	429a      	cmp	r2, r3
 800a316:	bf28      	it	cs
 800a318:	461a      	movcs	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	661a      	str	r2, [r3, #96]	; 0x60
  spiffs_cache_init(fs);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fef6 	bl	800a110 <spiffs_cache_init>
#if SPIFFS_USE_MAGIC
  res = SPIFFS_CHECK_MAGIC_POSSIBLE(fs) ? SPIFFS_OK : SPIFFS_ERR_MAGIC_NOT_POSSIBLE;
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
#endif

  fs->config_magic = SPIFFS_CONFIG_MAGIC;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4a0e      	ldr	r2, [pc, #56]	; (800a360 <SPIFFS_mount+0x158>)
 800a328:	67da      	str	r2, [r3, #124]	; 0x7c

  res = spiffs_obj_lu_scan(fs);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f9e2 	bl	800a6f4 <spiffs_obj_lu_scan>
 800a330:	6138      	str	r0, [r7, #16]
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	da04      	bge.n	800a342 <SPIFFS_mount+0x13a>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	645a      	str	r2, [r3, #68]	; 0x44
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	e007      	b.n	800a352 <SPIFFS_mount+0x14a>
  SPIFFS_DBG("object header index entries: "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_HDR_IX_LEN(fs));
  SPIFFS_DBG("object index entries:        "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_IX_LEN(fs));
  SPIFFS_DBG("available file descriptors:  "_SPIPRIi"\n", (u32_t)fs->fd_count);
  SPIFFS_DBG("free blocks:                 "_SPIPRIi"\n", (u32_t)fs->free_blocks);

  fs->check_cb_f = check_cb_f;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a346:	66da      	str	r2, [r3, #108]	; 0x6c

  fs->mounted = 1;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  SPIFFS_UNLOCK(fs);

  return 0;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	aaaaaaab 	.word	0xaaaaaaab
 800a360:	20090315 	.word	0x20090315

0800a364 <spiffs_obj_lu_find_entry_visitor>:
    spiffs_obj_id obj_id,
    spiffs_visitor_f v,
    const void *user_const_p,
    void *user_var_p,
    spiffs_block_ix *block_ix,
    int *lu_entry) {
 800a364:	b590      	push	{r4, r7, lr}
 800a366:	b091      	sub	sp, #68	; 0x44
 800a368:	af02      	add	r7, sp, #8
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	607a      	str	r2, [r7, #4]
 800a36e:	461a      	mov	r2, r3
 800a370:	460b      	mov	r3, r1
 800a372:	817b      	strh	r3, [r7, #10]
 800a374:	4613      	mov	r3, r2
 800a376:	727b      	strb	r3, [r7, #9]
  s32_t res = SPIFFS_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	637b      	str	r3, [r7, #52]	; 0x34
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6999      	ldr	r1, [r3, #24]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	fbb1 f1f3 	udiv	r1, r1, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6998      	ldr	r0, [r3, #24]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	fbb0 f3f3 	udiv	r3, r0, r3
 800a398:	0058      	lsls	r0, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	d30b      	bcc.n	800a3ba <spiffs_obj_lu_find_entry_visitor+0x56>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6998      	ldr	r0, [r3, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3ae:	0058      	lsls	r0, r3, #1
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3b8:	e000      	b.n	800a3bc <spiffs_obj_lu_find_entry_visitor+0x58>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	1acb      	subs	r3, r1, r3
 800a3be:	fb02 f303 	mul.w	r3, r2, r3
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
  spiffs_block_ix cur_block = starting_block;
 800a3c4:	897b      	ldrh	r3, [r7, #10]
 800a3c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  u32_t cur_block_addr = starting_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800a3c8:	897b      	ldrh	r3, [r7, #10]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	6992      	ldr	r2, [r2, #24]
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28

  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d8:	61fb      	str	r3, [r7, #28]
  int cur_entry = starting_lu_entry;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	61bb      	str	r3, [r7, #24]

  // wrap initial
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6999      	ldr	r1, [r3, #24]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3fe:	0059      	lsls	r1, r3, #1
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	4299      	cmp	r1, r3
 800a406:	d30b      	bcc.n	800a420 <spiffs_obj_lu_find_entry_visitor+0xbc>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6999      	ldr	r1, [r3, #24]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	fbb1 f3f3 	udiv	r3, r1, r3
 800a414:	0059      	lsls	r1, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a41e:	e000      	b.n	800a422 <spiffs_obj_lu_find_entry_visitor+0xbe>
 800a420:	2301      	movs	r3, #1
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	461a      	mov	r2, r3
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	4293      	cmp	r3, r2
 800a42a:	f2c0 811d 	blt.w	800a668 <spiffs_obj_lu_find_entry_visitor+0x304>
    cur_entry = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
    cur_block++;
 800a432:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a434:	3301      	adds	r3, #1
 800a436:	85fb      	strh	r3, [r7, #46]	; 0x2e
    cur_block_addr = cur_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800a438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	6992      	ldr	r2, [r2, #24]
 800a43e:	fb02 f303 	mul.w	r3, r2, r3
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
    if (cur_block >= fs->block_count) {
 800a444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	f0c0 810c 	bcc.w	800a668 <spiffs_obj_lu_find_entry_visitor+0x304>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 800a450:	7a7b      	ldrb	r3, [r7, #9]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <spiffs_obj_lu_find_entry_visitor+0xfa>
        return SPIFFS_VIS_END;
 800a45a:	4b8c      	ldr	r3, [pc, #560]	; (800a68c <spiffs_obj_lu_find_entry_visitor+0x328>)
 800a45c:	e111      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>
      } else {
        // block wrap
        cur_block = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	85fb      	strh	r3, [r7, #46]	; 0x2e
        cur_block_addr = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  }

  // check each block
  while (res == SPIFFS_OK && entry_count > 0) {
 800a466:	e0ff      	b.n	800a668 <spiffs_obj_lu_find_entry_visitor+0x304>
    int obj_lookup_page = cur_entry / entries_per_page;
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a470:	623b      	str	r3, [r7, #32]
    // check each object lookup page
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 800a472:	e0bf      	b.n	800a5f4 <spiffs_obj_lu_find_entry_visitor+0x290>
      int entry_offset = obj_lookup_page * entries_per_page;
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	fb02 f303 	mul.w	r3, r2, r3
 800a47c:	617b      	str	r3, [r7, #20]
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	6a39      	ldr	r1, [r7, #32]
 800a488:	fb01 f303 	mul.w	r3, r1, r3
 800a48c:	441a      	add	r2, r3
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	18d1      	adds	r1, r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a49a:	9201      	str	r2, [sp, #4]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2114      	movs	r1, #20
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fd63 	bl	8009f70 <spiffs_phys_rd>
 800a4aa:	6378      	str	r0, [r7, #52]	; 0x34
          0, cur_block_addr + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
      // check each entry
      while (res == SPIFFS_OK &&
 800a4ac:	e072      	b.n	800a594 <spiffs_obj_lu_find_entry_visitor+0x230>
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
      {
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
 800a4ae:	7a7b      	ldrb	r3, [r7, #9]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00a      	beq.n	800a4ce <spiffs_obj_lu_find_entry_visitor+0x16a>
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	69fa      	ldr	r2, [r7, #28]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d15c      	bne.n	800a588 <spiffs_obj_lu_find_entry_visitor+0x224>
          if (block_ix) *block_ix = cur_block;
 800a4ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <spiffs_obj_lu_find_entry_visitor+0x176>
 800a4d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4d8:	801a      	strh	r2, [r3, #0]
          if (lu_entry) *lu_entry = cur_entry;
 800a4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <spiffs_obj_lu_find_entry_visitor+0x182>
 800a4e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e4:	601a      	str	r2, [r3, #0]
          if (v) {
 800a4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d04b      	beq.n	800a584 <spiffs_obj_lu_find_entry_visitor+0x220>
            res = v(
                fs,
                (flags & SPIFFS_VIS_CHECK_PH) ? obj_id : obj_lu_buf[cur_entry-entry_offset],
 800a4ec:	7a7b      	ldrb	r3, [r7, #9]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
            res = v(
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d107      	bne.n	800a506 <spiffs_obj_lu_find_entry_visitor+0x1a2>
                (flags & SPIFFS_VIS_CHECK_PH) ? obj_id : obj_lu_buf[cur_entry-entry_offset],
 800a4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	4413      	add	r3, r2
            res = v(
 800a502:	8819      	ldrh	r1, [r3, #0]
 800a504:	e001      	b.n	800a50a <spiffs_obj_lu_find_entry_visitor+0x1a6>
 800a506:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800a50a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	47a0      	blx	r4
 800a51c:	6378      	str	r0, [r7, #52]	; 0x34
                cur_block,
                cur_entry,
                user_const_p,
                user_var_p);
            if (res == SPIFFS_VIS_COUNTINUE || res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	4a5b      	ldr	r2, [pc, #364]	; (800a690 <spiffs_obj_lu_find_entry_visitor+0x32c>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d003      	beq.n	800a52e <spiffs_obj_lu_find_entry_visitor+0x1ca>
 800a526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a528:	4a5a      	ldr	r2, [pc, #360]	; (800a694 <spiffs_obj_lu_find_entry_visitor+0x330>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d128      	bne.n	800a580 <spiffs_obj_lu_find_entry_visitor+0x21c>
              if (res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 800a52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a530:	4a58      	ldr	r2, [pc, #352]	; (800a694 <spiffs_obj_lu_find_entry_visitor+0x330>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d11b      	bne.n	800a56e <spiffs_obj_lu_find_entry_visitor+0x20a>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	6a39      	ldr	r1, [r7, #32]
 800a540:	fb01 f303 	mul.w	r3, r1, r3
 800a544:	441a      	add	r2, r3
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	18d1      	adds	r1, r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a552:	9201      	str	r2, [sp, #4]
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	460b      	mov	r3, r1
 800a558:	2200      	movs	r2, #0
 800a55a:	2114      	movs	r1, #20
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff fd07 	bl	8009f70 <spiffs_phys_rd>
 800a562:	6378      	str	r0, [r7, #52]	; 0x34
                    0, cur_block_addr + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
                SPIFFS_CHECK_RES(res);
 800a564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a566:	2b00      	cmp	r3, #0
 800a568:	da01      	bge.n	800a56e <spiffs_obj_lu_find_entry_visitor+0x20a>
 800a56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56c:	e089      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>
              }
              res = SPIFFS_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
              cur_entry++;
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	3301      	adds	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
              entry_count--;
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	3b01      	subs	r3, #1
 800a57c:	633b      	str	r3, [r7, #48]	; 0x30
              continue;
 800a57e:	e009      	b.n	800a594 <spiffs_obj_lu_find_entry_visitor+0x230>
            } else {
              return res;
 800a580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a582:	e07e      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>
            }
          } else {
            return SPIFFS_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e07c      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>
          }
        }
        entry_count--;
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	3b01      	subs	r3, #1
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30
        cur_entry++;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	3301      	adds	r3, #1
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
      while (res == SPIFFS_OK &&
 800a594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a596:	2b00      	cmp	r3, #0
 800a598:	d129      	bne.n	800a5ee <spiffs_obj_lu_find_entry_visitor+0x28a>
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
 800a59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	1ad3      	subs	r3, r2, r3
      while (res == SPIFFS_OK &&
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	dd23      	ble.n	800a5ee <spiffs_obj_lu_find_entry_visitor+0x28a>
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	699a      	ldr	r2, [r3, #24]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6999      	ldr	r1, [r3, #24]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5be:	0059      	lsls	r1, r3, #1
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	4299      	cmp	r1, r3
 800a5c6:	d30b      	bcc.n	800a5e0 <spiffs_obj_lu_find_entry_visitor+0x27c>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6999      	ldr	r1, [r3, #24]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5d4:	0059      	lsls	r1, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5de:	e000      	b.n	800a5e2 <spiffs_obj_lu_find_entry_visitor+0x27e>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	461a      	mov	r2, r3
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	f6ff af60 	blt.w	800a4ae <spiffs_obj_lu_find_entry_visitor+0x14a>
      } // per entry
      obj_lookup_page++;
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	623b      	str	r3, [r7, #32]
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d11c      	bne.n	800a634 <spiffs_obj_lu_find_entry_visitor+0x2d0>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	005a      	lsls	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	69db      	ldr	r3, [r3, #28]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d30c      	bcc.n	800a62a <spiffs_obj_lu_find_entry_visitor+0x2c6>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	005a      	lsls	r2, r3, #1
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	fbb2 f3f3 	udiv	r3, r2, r3
 800a626:	461a      	mov	r2, r3
 800a628:	e000      	b.n	800a62c <spiffs_obj_lu_find_entry_visitor+0x2c8>
 800a62a:	2201      	movs	r2, #1
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	429a      	cmp	r2, r3
 800a630:	f73f af20 	bgt.w	800a474 <spiffs_obj_lu_find_entry_visitor+0x110>
    } // per object lookup page
    cur_entry = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
    cur_block++;
 800a638:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a63a:	3301      	adds	r3, #1
 800a63c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a644:	4413      	add	r3, r2
 800a646:	62bb      	str	r3, [r7, #40]	; 0x28
    if (cur_block >= fs->block_count) {
 800a648:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d30a      	bcc.n	800a668 <spiffs_obj_lu_find_entry_visitor+0x304>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 800a652:	7a7b      	ldrb	r3, [r7, #9]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <spiffs_obj_lu_find_entry_visitor+0x2fc>
        return SPIFFS_VIS_END;
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <spiffs_obj_lu_find_entry_visitor+0x328>)
 800a65e:	e010      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>
      } else {
        // block wrap
        cur_block = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	85fb      	strh	r3, [r7, #46]	; 0x2e
        cur_block_addr = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28
  while (res == SPIFFS_OK && entry_count > 0) {
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d103      	bne.n	800a676 <spiffs_obj_lu_find_entry_visitor+0x312>
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	2b00      	cmp	r3, #0
 800a672:	f73f aef9 	bgt.w	800a468 <spiffs_obj_lu_find_entry_visitor+0x104>
      }
    }
  } // per block

  SPIFFS_CHECK_RES(res);
 800a676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da01      	bge.n	800a680 <spiffs_obj_lu_find_entry_visitor+0x31c>
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	e000      	b.n	800a682 <spiffs_obj_lu_find_entry_visitor+0x31e>

  return SPIFFS_VIS_END;
 800a680:	4b02      	ldr	r3, [pc, #8]	; (800a68c <spiffs_obj_lu_find_entry_visitor+0x328>)
}
 800a682:	4618      	mov	r0, r3
 800a684:	373c      	adds	r7, #60	; 0x3c
 800a686:	46bd      	mov	sp, r7
 800a688:	bd90      	pop	{r4, r7, pc}
 800a68a:	bf00      	nop
 800a68c:	ffffd8a8 	.word	0xffffd8a8
 800a690:	ffffd8aa 	.word	0xffffd8aa
 800a694:	ffffd8a9 	.word	0xffffd8a9

0800a698 <spiffs_obj_lu_scan_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	607b      	str	r3, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	817b      	strh	r3, [r7, #10]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	813b      	strh	r3, [r7, #8]
  (void)bix;
  (void)user_const_p;
  (void)user_var_p;
  if (obj_id == SPIFFS_OBJ_ID_FREE) {
 800a6aa:	897b      	ldrh	r3, [r7, #10]
 800a6ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d108      	bne.n	800a6c6 <spiffs_obj_lu_scan_v+0x2e>
    if (ix_entry == 0) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d113      	bne.n	800a6e2 <spiffs_obj_lu_scan_v+0x4a>
      fs->free_blocks++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	649a      	str	r2, [r3, #72]	; 0x48
 800a6c4:	e00d      	b.n	800a6e2 <spiffs_obj_lu_scan_v+0x4a>
      // todo optimize further, return SPIFFS_NEXT_BLOCK
    }
  } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 800a6c6:	897b      	ldrh	r3, [r7, #10]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d105      	bne.n	800a6d8 <spiffs_obj_lu_scan_v+0x40>
    fs->stats_p_deleted++;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	651a      	str	r2, [r3, #80]	; 0x50
 800a6d6:	e004      	b.n	800a6e2 <spiffs_obj_lu_scan_v+0x4a>
  } else {
    fs->stats_p_allocated++;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return SPIFFS_VIS_COUNTINUE;
 800a6e2:	4b03      	ldr	r3, [pc, #12]	; (800a6f0 <spiffs_obj_lu_scan_v+0x58>)
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	ffffd8aa 	.word	0xffffd8aa

0800a6f4 <spiffs_obj_lu_scan>:

// Scans thru all obj lu and counts free, deleted and used pages
// Find the maximum block erase count
// Checks magic if enabled
s32_t spiffs_obj_lu_scan(
    spiffs *fs) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08e      	sub	sp, #56	; 0x38
 800a6f8:	af06      	add	r7, sp, #24
 800a6fa:	6078      	str	r0, [r7, #4]
  spiffs_block_ix unerased_bix = (spiffs_block_ix)-1;
#endif

  // find out erase count
  // if enabled, check magic
  bix = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	82bb      	strh	r3, [r7, #20]
  spiffs_obj_id erase_count_final;
  spiffs_obj_id erase_count_min = SPIFFS_OBJ_ID_FREE;
 800a700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a704:	833b      	strh	r3, [r7, #24]
  spiffs_obj_id erase_count_max = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	82fb      	strh	r3, [r7, #22]
  while (bix < fs->block_count) {
 800a70a:	e04c      	b.n	800a7a6 <spiffs_obj_lu_scan+0xb2>
        SPIFFS_CHECK_RES(SPIFFS_ERR_NOT_A_FS);
      }
    }
#endif
    spiffs_obj_id erase_count;
    res = _spiffs_rd(fs,
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691a      	ldr	r2, [r3, #16]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6999      	ldr	r1, [r3, #24]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	fbb1 f3f3 	udiv	r3, r1, r3
 800a71c:	0059      	lsls	r1, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	4299      	cmp	r1, r3
 800a724:	d30b      	bcc.n	800a73e <spiffs_obj_lu_scan+0x4a>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6999      	ldr	r1, [r3, #24]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a732:	0059      	lsls	r1, r3, #1
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	fbb1 f3f3 	udiv	r3, r1, r3
 800a73c:	e000      	b.n	800a740 <spiffs_obj_lu_scan+0x4c>
 800a73e:	2301      	movs	r3, #1
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	69c9      	ldr	r1, [r1, #28]
 800a744:	fb03 f101 	mul.w	r1, r3, r1
 800a748:	8abb      	ldrh	r3, [r7, #20]
 800a74a:	4618      	mov	r0, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	fb00 f303 	mul.w	r3, r0, r3
 800a754:	440b      	add	r3, r1
 800a756:	4413      	add	r3, r2
 800a758:	1e9a      	subs	r2, r3, #2
 800a75a:	f107 030e 	add.w	r3, r7, #14
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	2302      	movs	r3, #2
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	2200      	movs	r2, #0
 800a768:	2115      	movs	r1, #21
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fc00 	bl	8009f70 <spiffs_phys_rd>
 800a770:	61f8      	str	r0, [r7, #28]
        SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
        0, SPIFFS_ERASE_COUNT_PADDR(fs, bix) ,
        sizeof(spiffs_obj_id), (u8_t *)&erase_count);
    SPIFFS_CHECK_RES(res);
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da01      	bge.n	800a77c <spiffs_obj_lu_scan+0x88>
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	e060      	b.n	800a83e <spiffs_obj_lu_scan+0x14a>
    if (erase_count != SPIFFS_OBJ_ID_FREE) {
 800a77c:	89fb      	ldrh	r3, [r7, #14]
 800a77e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a782:	4293      	cmp	r3, r2
 800a784:	d00b      	beq.n	800a79e <spiffs_obj_lu_scan+0xaa>
      erase_count_min = MIN(erase_count_min, erase_count);
 800a786:	89fb      	ldrh	r3, [r7, #14]
 800a788:	8b3a      	ldrh	r2, [r7, #24]
 800a78a:	4293      	cmp	r3, r2
 800a78c:	bf28      	it	cs
 800a78e:	4613      	movcs	r3, r2
 800a790:	833b      	strh	r3, [r7, #24]
      erase_count_max = MAX(erase_count_max, erase_count);
 800a792:	89fb      	ldrh	r3, [r7, #14]
 800a794:	8afa      	ldrh	r2, [r7, #22]
 800a796:	4293      	cmp	r3, r2
 800a798:	bf38      	it	cc
 800a79a:	4613      	movcc	r3, r2
 800a79c:	82fb      	strh	r3, [r7, #22]
    }
    bix++;
 800a79e:	8abb      	ldrh	r3, [r7, #20]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	82bb      	strh	r3, [r7, #20]
  while (bix < fs->block_count) {
 800a7a6:	8abb      	ldrh	r3, [r7, #20]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d3ac      	bcc.n	800a70c <spiffs_obj_lu_scan+0x18>
  }

  if (erase_count_min == 0 && erase_count_max == SPIFFS_OBJ_ID_FREE) {
 800a7b2:	8b3b      	ldrh	r3, [r7, #24]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d107      	bne.n	800a7c8 <spiffs_obj_lu_scan+0xd4>
 800a7b8:	8afb      	ldrh	r3, [r7, #22]
 800a7ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d102      	bne.n	800a7c8 <spiffs_obj_lu_scan+0xd4>
    // clean system, set counter to zero
    erase_count_final = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	837b      	strh	r3, [r7, #26]
 800a7c6:	e00c      	b.n	800a7e2 <spiffs_obj_lu_scan+0xee>
  } else if (erase_count_max - erase_count_min > (SPIFFS_OBJ_ID_FREE)/2) {
 800a7c8:	8afa      	ldrh	r2, [r7, #22]
 800a7ca:	8b3b      	ldrh	r3, [r7, #24]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7d2:	db03      	blt.n	800a7dc <spiffs_obj_lu_scan+0xe8>
    // wrap, take min
    erase_count_final = erase_count_min+1;
 800a7d4:	8b3b      	ldrh	r3, [r7, #24]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	837b      	strh	r3, [r7, #26]
 800a7da:	e002      	b.n	800a7e2 <spiffs_obj_lu_scan+0xee>
  } else {
    erase_count_final = erase_count_max+1;
 800a7dc:	8afb      	ldrh	r3, [r7, #22]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	837b      	strh	r3, [r7, #26]
  }

  fs->max_erase_count = erase_count_final;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	8b7a      	ldrh	r2, [r7, #26]
 800a7e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  }
#endif

  // count blocks

  fs->free_blocks = 0;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	649a      	str	r2, [r3, #72]	; 0x48
  fs->stats_p_allocated = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	64da      	str	r2, [r3, #76]	; 0x4c
  fs->stats_p_deleted = 0;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	651a      	str	r2, [r3, #80]	; 0x50

  res = spiffs_obj_lu_find_entry_visitor(fs,
 800a7fc:	f107 0310 	add.w	r3, r7, #16
 800a800:	9305      	str	r3, [sp, #20]
 800a802:	f107 0314 	add.w	r3, r7, #20
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	2300      	movs	r3, #0
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	2300      	movs	r3, #0
 800a80e:	9302      	str	r3, [sp, #8]
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <spiffs_obj_lu_scan+0x154>)
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	2300      	movs	r3, #0
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	2300      	movs	r3, #0
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fda0 	bl	800a364 <spiffs_obj_lu_find_entry_visitor>
 800a824:	61f8      	str	r0, [r7, #28]
      0,
      0,
      &bix,
      &entry);

  if (res == SPIFFS_VIS_END) {
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	4a08      	ldr	r2, [pc, #32]	; (800a84c <spiffs_obj_lu_scan+0x158>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d101      	bne.n	800a832 <spiffs_obj_lu_scan+0x13e>
    res = SPIFFS_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
  }

  SPIFFS_CHECK_RES(res);
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	da01      	bge.n	800a83c <spiffs_obj_lu_scan+0x148>
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	e000      	b.n	800a83e <spiffs_obj_lu_scan+0x14a>

  return res;
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	0800a699 	.word	0x0800a699
 800a84c:	ffffd8a8 	.word	0xffffd8a8

0800a850 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08a      	sub	sp, #40	; 0x28
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10e      	bne.n	800a87e <BSP_LED_Init+0x2e>
 800a860:	2300      	movs	r3, #0
 800a862:	613b      	str	r3, [r7, #16]
 800a864:	4b21      	ldr	r3, [pc, #132]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a868:	4a20      	ldr	r2, [pc, #128]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	6313      	str	r3, [r2, #48]	; 0x30
 800a870:	4b1e      	ldr	r3, [pc, #120]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	613b      	str	r3, [r7, #16]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	e010      	b.n	800a8a0 <BSP_LED_Init+0x50>
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d10d      	bne.n	800a8a0 <BSP_LED_Init+0x50>
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	4b18      	ldr	r3, [pc, #96]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	4a17      	ldr	r2, [pc, #92]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a892:	6313      	str	r3, [r2, #48]	; 0x30
 800a894:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <BSP_LED_Init+0x9c>)
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	4a13      	ldr	r2, [pc, #76]	; (800a8f0 <BSP_LED_Init+0xa0>)
 800a8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	4a0e      	ldr	r2, [pc, #56]	; (800a8f4 <BSP_LED_Init+0xa4>)
 800a8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8be:	f107 0214 	add.w	r2, r7, #20
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f003 fbe5 	bl	800e094 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <BSP_LED_Init+0xa4>)
 800a8ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	4a06      	ldr	r2, [pc, #24]	; (800a8f0 <BSP_LED_Init+0xa0>)
 800a8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f003 fd9d 	bl	800e41c <HAL_GPIO_WritePin>
}
 800a8e2:	bf00      	nop
 800a8e4:	3728      	adds	r7, #40	; 0x28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40023800 	.word	0x40023800
 800a8f0:	0801881c 	.word	0x0801881c
 800a8f4:	200001c8 	.word	0x200001c8

0800a8f8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	4a07      	ldr	r2, [pc, #28]	; (800a924 <BSP_LED_On+0x2c>)
 800a906:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a90a:	79fb      	ldrb	r3, [r7, #7]
 800a90c:	4a06      	ldr	r2, [pc, #24]	; (800a928 <BSP_LED_On+0x30>)
 800a90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a912:	2201      	movs	r2, #1
 800a914:	4619      	mov	r1, r3
 800a916:	f003 fd81 	bl	800e41c <HAL_GPIO_WritePin>
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	200001c8 	.word	0x200001c8
 800a928:	0801881c 	.word	0x0801881c

0800a92c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	4a07      	ldr	r2, [pc, #28]	; (800a958 <BSP_LED_Off+0x2c>)
 800a93a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	4a06      	ldr	r2, [pc, #24]	; (800a95c <BSP_LED_Off+0x30>)
 800a942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a946:	2200      	movs	r2, #0
 800a948:	4619      	mov	r1, r3
 800a94a:	f003 fd67 	bl	800e41c <HAL_GPIO_WritePin>
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200001c8 	.word	0x200001c8
 800a95c:	0801881c 	.word	0x0801881c

0800a960 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	460a      	mov	r2, r1
 800a96a:	71fb      	strb	r3, [r7, #7]
 800a96c:	4613      	mov	r3, r2
 800a96e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10d      	bne.n	800a992 <BSP_PB_Init+0x32>
 800a976:	2300      	movs	r3, #0
 800a978:	60bb      	str	r3, [r7, #8]
 800a97a:	4b22      	ldr	r3, [pc, #136]	; (800aa04 <BSP_PB_Init+0xa4>)
 800a97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97e:	4a21      	ldr	r2, [pc, #132]	; (800aa04 <BSP_PB_Init+0xa4>)
 800a980:	f043 0301 	orr.w	r3, r3, #1
 800a984:	6313      	str	r3, [r2, #48]	; 0x30
 800a986:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <BSP_PB_Init+0xa4>)
 800a988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	60bb      	str	r3, [r7, #8]
 800a990:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 800a992:	79bb      	ldrb	r3, [r7, #6]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d111      	bne.n	800a9bc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800a998:	2301      	movs	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <BSP_PB_Init+0xa8>)
 800a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9b0:	f107 020c 	add.w	r2, r7, #12
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f003 fb6c 	bl	800e094 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 800a9bc:	79bb      	ldrb	r3, [r7, #6]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d11c      	bne.n	800a9fc <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a9ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a9ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	4a0d      	ldr	r2, [pc, #52]	; (800aa08 <BSP_PB_Init+0xa8>)
 800a9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d8:	f107 020c 	add.w	r2, r7, #12
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f003 fb58 	bl	800e094 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x00, 0x02);
 800a9e4:	2306      	movs	r3, #6
 800a9e6:	b25b      	sxtb	r3, r3
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f002 fc26 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800a9f2:	2306      	movs	r3, #6
 800a9f4:	b25b      	sxtb	r3, r3
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f002 fc3d 	bl	800d276 <HAL_NVIC_EnableIRQ>
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	3720      	adds	r7, #32
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	40023800 	.word	0x40023800
 800aa08:	200001d0 	.word	0x200001d0

0800aa0c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
void BSP_SDRAM_Init(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800aa10:	4b22      	ldr	r3, [pc, #136]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa12:	4a23      	ldr	r2, [pc, #140]	; (800aaa0 <BSP_SDRAM_Init+0x94>)
 800aa14:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800aa16:	4b23      	ldr	r3, [pc, #140]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa18:	2202      	movs	r2, #2
 800aa1a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800aa1c:	4b21      	ldr	r3, [pc, #132]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa1e:	2207      	movs	r2, #7
 800aa20:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800aa22:	4b20      	ldr	r3, [pc, #128]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa24:	2204      	movs	r2, #4
 800aa26:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800aa28:	4b1e      	ldr	r3, [pc, #120]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa2a:	2207      	movs	r2, #7
 800aa2c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800aa2e:	4b1d      	ldr	r3, [pc, #116]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa30:	2202      	movs	r2, #2
 800aa32:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800aa34:	4b1b      	ldr	r3, [pc, #108]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa36:	2202      	movs	r2, #2
 800aa38:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800aa3a:	4b1a      	ldr	r3, [pc, #104]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800aa40:	4b16      	ldr	r3, [pc, #88]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800aa46:	4b15      	ldr	r3, [pc, #84]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800aa4c:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa4e:	2204      	movs	r2, #4
 800aa50:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800aa52:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa54:	2210      	movs	r2, #16
 800aa56:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa5a:	2240      	movs	r2, #64	; 0x40
 800aa5c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa60:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800aa64:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800aa66:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa72:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aa80:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 800aa82:	f000 f899 	bl	800abb8 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800aa86:	4907      	ldr	r1, [pc, #28]	; (800aaa4 <BSP_SDRAM_Init+0x98>)
 800aa88:	4804      	ldr	r0, [pc, #16]	; (800aa9c <BSP_SDRAM_Init+0x90>)
 800aa8a:	f005 fc33 	bl	80102f4 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800aa8e:	f240 506a 	movw	r0, #1386	; 0x56a
 800aa92:	f000 f809 	bl	800aaa8 <BSP_SDRAM_Initialization_sequence>
}
 800aa96:	bf00      	nop
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200021b4 	.word	0x200021b4
 800aaa0:	a0000140 	.word	0xa0000140
 800aaa4:	200021e8 	.word	0x200021e8

0800aaa8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800aab4:	4b2a      	ldr	r3, [pc, #168]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800aaba:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aabc:	2208      	movs	r2, #8
 800aabe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800aac0:	4b27      	ldr	r3, [pc, #156]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800aac6:	4b26      	ldr	r3, [pc, #152]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800aacc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aad0:	4923      	ldr	r1, [pc, #140]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aad2:	4824      	ldr	r0, [pc, #144]	; (800ab64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800aad4:	f005 fd31 	bl	801053a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800aad8:	2001      	movs	r0, #1
 800aada:	f001 fc6f 	bl	800c3bc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800aade:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aae0:	2202      	movs	r2, #2
 800aae2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800aae4:	4b1e      	ldr	r3, [pc, #120]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aae6:	2208      	movs	r2, #8
 800aae8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800aaea:	4b1d      	ldr	r3, [pc, #116]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800aaf0:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800aaf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aafa:	4919      	ldr	r1, [pc, #100]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aafc:	4819      	ldr	r0, [pc, #100]	; (800ab64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800aafe:	f005 fd1c 	bl	801053a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ab02:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab04:	2203      	movs	r2, #3
 800ab06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ab08:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab0a:	2208      	movs	r2, #8
 800ab0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800ab0e:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab10:	2204      	movs	r2, #4
 800ab12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800ab14:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ab1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab1e:	4910      	ldr	r1, [pc, #64]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab20:	4810      	ldr	r0, [pc, #64]	; (800ab64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ab22:	f005 fd0a 	bl	801053a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800ab26:	f44f 730c 	mov.w	r3, #560	; 0x230
 800ab2a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800ab2c:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab2e:	2204      	movs	r2, #4
 800ab30:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ab32:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab34:	2208      	movs	r2, #8
 800ab36:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4a07      	ldr	r2, [pc, #28]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab42:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ab44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab48:	4905      	ldr	r1, [pc, #20]	; (800ab60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ab4a:	4806      	ldr	r0, [pc, #24]	; (800ab64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ab4c:	f005 fcf5 	bl	801053a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4804      	ldr	r0, [pc, #16]	; (800ab64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ab54:	f005 fd26 	bl	80105a4 <HAL_SDRAM_ProgramRefreshRate>
}
 800ab58:	bf00      	nop
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20002204 	.word	0x20002204
 800ab64:	200021b4 	.word	0x200021b4

0800ab68 <BSP_SDRAM_ReadData16b>:
{
  HAL_SDRAM_Read_32b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize); 
}

void BSP_SDRAM_ReadData16b(uint32_t uwStartAddress, uint16_t *pData, uint32_t uwDataSize)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_Read_16b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
 800ab74:	68f9      	ldr	r1, [r7, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	4803      	ldr	r0, [pc, #12]	; (800ab88 <BSP_SDRAM_ReadData16b+0x20>)
 800ab7c:	f005 fbee 	bl	801035c <HAL_SDRAM_Read_16b>
}
 800ab80:	bf00      	nop
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	200021b4 	.word	0x200021b4

0800ab8c <BSP_SDRAM_WriteData16b>:
  /*Write 32-bit data buffer to SDRAM memory*/
  HAL_SDRAM_Write_32b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
}

void BSP_SDRAM_WriteData16b(uint32_t uwStartAddress, uint16_t *pData, uint32_t uwDataSize)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  /* Disable write protection */
  HAL_SDRAM_WriteProtection_Disable(&SdramHandle);
 800ab98:	4806      	ldr	r0, [pc, #24]	; (800abb4 <BSP_SDRAM_WriteData16b+0x28>)
 800ab9a:	f005 fca7 	bl	80104ec <HAL_SDRAM_WriteProtection_Disable>

  /*Write 32-bit data buffer to SDRAM memory*/
  HAL_SDRAM_Write_16b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	4803      	ldr	r0, [pc, #12]	; (800abb4 <BSP_SDRAM_WriteData16b+0x28>)
 800aba6:	f005 fc3a 	bl	801041e <HAL_SDRAM_Write_16b>
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200021b4 	.word	0x200021b4

0800abb8 <MspInit>:

/**
  * @brief  Initializes SDRAM MSP.
  */
static void MspInit(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 800abbe:	4b79      	ldr	r3, [pc, #484]	; (800ada4 <MspInit+0x1ec>)
 800abc0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	4b78      	ldr	r3, [pc, #480]	; (800ada8 <MspInit+0x1f0>)
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	4a77      	ldr	r2, [pc, #476]	; (800ada8 <MspInit+0x1f0>)
 800abcc:	f043 0301 	orr.w	r3, r3, #1
 800abd0:	6393      	str	r3, [r2, #56]	; 0x38
 800abd2:	4b75      	ldr	r3, [pc, #468]	; (800ada8 <MspInit+0x1f0>)
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	61fb      	str	r3, [r7, #28]
 800abdc:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800abde:	2300      	movs	r3, #0
 800abe0:	61bb      	str	r3, [r7, #24]
 800abe2:	4b71      	ldr	r3, [pc, #452]	; (800ada8 <MspInit+0x1f0>)
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	4a70      	ldr	r2, [pc, #448]	; (800ada8 <MspInit+0x1f0>)
 800abe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abec:	6313      	str	r3, [r2, #48]	; 0x30
 800abee:	4b6e      	ldr	r3, [pc, #440]	; (800ada8 <MspInit+0x1f0>)
 800abf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abf6:	61bb      	str	r3, [r7, #24]
 800abf8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	4b6a      	ldr	r3, [pc, #424]	; (800ada8 <MspInit+0x1f0>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac02:	4a69      	ldr	r2, [pc, #420]	; (800ada8 <MspInit+0x1f0>)
 800ac04:	f043 0302 	orr.w	r3, r3, #2
 800ac08:	6313      	str	r3, [r2, #48]	; 0x30
 800ac0a:	4b67      	ldr	r3, [pc, #412]	; (800ada8 <MspInit+0x1f0>)
 800ac0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	4b63      	ldr	r3, [pc, #396]	; (800ada8 <MspInit+0x1f0>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	4a62      	ldr	r2, [pc, #392]	; (800ada8 <MspInit+0x1f0>)
 800ac20:	f043 0304 	orr.w	r3, r3, #4
 800ac24:	6313      	str	r3, [r2, #48]	; 0x30
 800ac26:	4b60      	ldr	r3, [pc, #384]	; (800ada8 <MspInit+0x1f0>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	f003 0304 	and.w	r3, r3, #4
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	4b5c      	ldr	r3, [pc, #368]	; (800ada8 <MspInit+0x1f0>)
 800ac38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3a:	4a5b      	ldr	r2, [pc, #364]	; (800ada8 <MspInit+0x1f0>)
 800ac3c:	f043 0308 	orr.w	r3, r3, #8
 800ac40:	6313      	str	r3, [r2, #48]	; 0x30
 800ac42:	4b59      	ldr	r3, [pc, #356]	; (800ada8 <MspInit+0x1f0>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f003 0308 	and.w	r3, r3, #8
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60bb      	str	r3, [r7, #8]
 800ac52:	4b55      	ldr	r3, [pc, #340]	; (800ada8 <MspInit+0x1f0>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	4a54      	ldr	r2, [pc, #336]	; (800ada8 <MspInit+0x1f0>)
 800ac58:	f043 0310 	orr.w	r3, r3, #16
 800ac5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac5e:	4b52      	ldr	r3, [pc, #328]	; (800ada8 <MspInit+0x1f0>)
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	f003 0310 	and.w	r3, r3, #16
 800ac66:	60bb      	str	r3, [r7, #8]
 800ac68:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	4b4e      	ldr	r3, [pc, #312]	; (800ada8 <MspInit+0x1f0>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	4a4d      	ldr	r2, [pc, #308]	; (800ada8 <MspInit+0x1f0>)
 800ac74:	f043 0320 	orr.w	r3, r3, #32
 800ac78:	6313      	str	r3, [r2, #48]	; 0x30
 800ac7a:	4b4b      	ldr	r3, [pc, #300]	; (800ada8 <MspInit+0x1f0>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	607b      	str	r3, [r7, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800ac86:	2300      	movs	r3, #0
 800ac88:	603b      	str	r3, [r7, #0]
 800ac8a:	4b47      	ldr	r3, [pc, #284]	; (800ada8 <MspInit+0x1f0>)
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	4a46      	ldr	r2, [pc, #280]	; (800ada8 <MspInit+0x1f0>)
 800ac90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac94:	6313      	str	r3, [r2, #48]	; 0x30
 800ac96:	4b44      	ldr	r3, [pc, #272]	; (800ada8 <MspInit+0x1f0>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac9e:	603b      	str	r3, [r7, #0]
 800aca0:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800aca2:	2302      	movs	r3, #2
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800aca6:	2302      	movs	r3, #2
 800aca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800acae:	230c      	movs	r3, #12
 800acb0:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800acb2:	2360      	movs	r3, #96	; 0x60
 800acb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800acb6:	f107 0320 	add.w	r3, r7, #32
 800acba:	4619      	mov	r1, r3
 800acbc:	483b      	ldr	r0, [pc, #236]	; (800adac <MspInit+0x1f4>)
 800acbe:	f003 f9e9 	bl	800e094 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800acc2:	2301      	movs	r3, #1
 800acc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800acc6:	f107 0320 	add.w	r3, r7, #32
 800acca:	4619      	mov	r1, r3
 800accc:	4838      	ldr	r0, [pc, #224]	; (800adb0 <MspInit+0x1f8>)
 800acce:	f003 f9e1 	bl	800e094 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800acd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800acd6:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800acd8:	f107 0320 	add.w	r3, r7, #32
 800acdc:	4619      	mov	r1, r3
 800acde:	4835      	ldr	r0, [pc, #212]	; (800adb4 <MspInit+0x1fc>)
 800ace0:	f003 f9d8 	bl	800e094 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800ace4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ace8:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800acea:	f107 0320 	add.w	r3, r7, #32
 800acee:	4619      	mov	r1, r3
 800acf0:	4831      	ldr	r0, [pc, #196]	; (800adb8 <MspInit+0x200>)
 800acf2:	f003 f9cf 	bl	800e094 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800acf6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800acfa:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800acfc:	f107 0320 	add.w	r3, r7, #32
 800ad00:	4619      	mov	r1, r3
 800ad02:	482e      	ldr	r0, [pc, #184]	; (800adbc <MspInit+0x204>)
 800ad04:	f003 f9c6 	bl	800e094 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800ad08:	f248 1333 	movw	r3, #33075	; 0x8133
 800ad0c:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800ad0e:	f107 0320 	add.w	r3, r7, #32
 800ad12:	4619      	mov	r1, r3
 800ad14:	482a      	ldr	r0, [pc, #168]	; (800adc0 <MspInit+0x208>)
 800ad16:	f003 f9bd 	bl	800e094 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ad1a:	4b2a      	ldr	r3, [pc, #168]	; (800adc4 <MspInit+0x20c>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ad20:	4b28      	ldr	r3, [pc, #160]	; (800adc4 <MspInit+0x20c>)
 800ad22:	2280      	movs	r2, #128	; 0x80
 800ad24:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ad26:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <MspInit+0x20c>)
 800ad28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad2c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800ad2e:	4b25      	ldr	r3, [pc, #148]	; (800adc4 <MspInit+0x20c>)
 800ad30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad34:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad36:	4b23      	ldr	r3, [pc, #140]	; (800adc4 <MspInit+0x20c>)
 800ad38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad3c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ad3e:	4b21      	ldr	r3, [pc, #132]	; (800adc4 <MspInit+0x20c>)
 800ad40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ad44:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800ad46:	4b1f      	ldr	r3, [pc, #124]	; (800adc4 <MspInit+0x20c>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800ad4c:	4b1d      	ldr	r3, [pc, #116]	; (800adc4 <MspInit+0x20c>)
 800ad4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ad52:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800ad54:	4b1b      	ldr	r3, [pc, #108]	; (800adc4 <MspInit+0x20c>)
 800ad56:	2204      	movs	r2, #4
 800ad58:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ad5a:	4b1a      	ldr	r3, [pc, #104]	; (800adc4 <MspInit+0x20c>)
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ad60:	4b18      	ldr	r3, [pc, #96]	; (800adc4 <MspInit+0x20c>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800ad66:	4b17      	ldr	r3, [pc, #92]	; (800adc4 <MspInit+0x20c>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800ad6c:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <MspInit+0x20c>)
 800ad6e:	4a16      	ldr	r2, [pc, #88]	; (800adc8 <MspInit+0x210>)
 800ad70:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800ad72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad74:	4a13      	ldr	r2, [pc, #76]	; (800adc4 <MspInit+0x20c>)
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30
 800ad78:	4a12      	ldr	r2, [pc, #72]	; (800adc4 <MspInit+0x20c>)
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800ad7e:	4811      	ldr	r0, [pc, #68]	; (800adc4 <MspInit+0x20c>)
 800ad80:	f002 fdf8 	bl	800d974 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle);
 800ad84:	480f      	ldr	r0, [pc, #60]	; (800adc4 <MspInit+0x20c>)
 800ad86:	f002 fd47 	bl	800d818 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 2, 3);
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	2038      	movs	r0, #56	; 0x38
 800ad90:	f002 fa55 	bl	800d23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800ad94:	2038      	movs	r0, #56	; 0x38
 800ad96:	f002 fa6e 	bl	800d276 <HAL_NVIC_EnableIRQ>
}
 800ad9a:	bf00      	nop
 800ad9c:	3738      	adds	r7, #56	; 0x38
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200021b4 	.word	0x200021b4
 800ada8:	40023800 	.word	0x40023800
 800adac:	40020400 	.word	0x40020400
 800adb0:	40020800 	.word	0x40020800
 800adb4:	40020c00 	.word	0x40020c00
 800adb8:	40021000 	.word	0x40021000
 800adbc:	40021400 	.word	0x40021400
 800adc0:	40021800 	.word	0x40021800
 800adc4:	20002214 	.word	0x20002214
 800adc8:	40026410 	.word	0x40026410

0800adcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800add2:	2300      	movs	r3, #0
 800add4:	607b      	str	r3, [r7, #4]
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <HAL_MspInit+0x5c>)
 800add8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adda:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <HAL_MspInit+0x5c>)
 800addc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ade0:	6453      	str	r3, [r2, #68]	; 0x44
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <HAL_MspInit+0x5c>)
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800adee:	2300      	movs	r3, #0
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <HAL_MspInit+0x5c>)
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <HAL_MspInit+0x5c>)
 800adf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adfc:	6413      	str	r3, [r2, #64]	; 0x40
 800adfe:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <HAL_MspInit+0x5c>)
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800ae0a:	2005      	movs	r0, #5
 800ae0c:	f002 fa0c 	bl	800d228 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800ae10:	2200      	movs	r2, #0
 800ae12:	2100      	movs	r1, #0
 800ae14:	2001      	movs	r0, #1
 800ae16:	f002 fa12 	bl	800d23e <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	f002 fa2b 	bl	800d276 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	40023800 	.word	0x40023800

0800ae2c <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae30:	bf00      	nop
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ae3e:	bf00      	nop
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ae4c:	f001 fa96 	bl	800c37c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800ae58:	f004 fd9a 	bl	800f990 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800ae5c:	bf00      	nop
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADS1256_DRDY_Pin);
 800ae64:	2004      	movs	r0, #4
 800ae66:	f003 faf3 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ToggleFunction_Pin);
 800ae72:	2010      	movs	r0, #16
 800ae74:	f003 faec 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800ae78:	bf00      	nop
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800ae80:	4802      	ldr	r0, [pc, #8]	; (800ae8c <DMA1_Stream6_IRQHandler+0x10>)
 800ae82:	f002 fe9d 	bl	800dbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200004e8 	.word	0x200004e8

0800ae90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ae94:	4803      	ldr	r0, [pc, #12]	; (800aea4 <ADC_IRQHandler+0x14>)
 800ae96:	f001 fbd7 	bl	800c648 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800ae9a:	4803      	ldr	r0, [pc, #12]	; (800aea8 <ADC_IRQHandler+0x18>)
 800ae9c:	f001 fbd4 	bl	800c648 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800aea0:	bf00      	nop
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	200003a4 	.word	0x200003a4
 800aea8:	200003ec 	.word	0x200003ec

0800aeac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Recording_Pin);
 800aeb0:	2040      	movs	r0, #64	; 0x40
 800aeb2:	f003 facd 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Overdubbing_Pin);
 800aeb6:	2080      	movs	r0, #128	; 0x80
 800aeb8:	f003 faca 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Playback_Pin);
 800aebc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aec0:	f003 fac6 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800aec4:	bf00      	nop
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800aecc:	4802      	ldr	r0, [pc, #8]	; (800aed8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800aece:	f006 fb7e 	bl	80115ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800aed2:	bf00      	nop
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20002350 	.word	0x20002350

0800aedc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800aee0:	4802      	ldr	r0, [pc, #8]	; (800aeec <TIM2_IRQHandler+0x10>)
 800aee2:	f006 fb74 	bl	80115ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20002278 	.word	0x20002278

0800aef0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800aef4:	4802      	ldr	r0, [pc, #8]	; (800af00 <TIM4_IRQHandler+0x10>)
 800aef6:	f006 fb6a 	bl	80115ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200022c0 	.word	0x200022c0

0800af04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_KBD_BUT_DOWN_Pin);
 800af08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800af0c:	f003 faa0 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AD_KBD_INT_Pin);
 800af10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af14:	f003 fa9c 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Joystick_SW_Pin);
 800af18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800af1c:	f003 fa98 	bl	800e450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800af20:	bf00      	nop
 800af22:	bd80      	pop	{r7, pc}

0800af24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800af28:	4802      	ldr	r0, [pc, #8]	; (800af34 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800af2a:	f006 fb50 	bl	80115ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800af2e:	bf00      	nop
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20002308 	.word	0x20002308

0800af38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800af3c:	4802      	ldr	r0, [pc, #8]	; (800af48 <DMA2_Stream1_IRQHandler+0x10>)
 800af3e:	f002 fe3f 	bl	800dbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800af42:	bf00      	nop
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000434 	.word	0x20000434

0800af4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800af50:	4802      	ldr	r0, [pc, #8]	; (800af5c <DMA2_Stream3_IRQHandler+0x10>)
 800af52:	f002 fe35 	bl	800dbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800af56:	bf00      	nop
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	200020f4 	.word	0x200020f4

0800af60 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800af64:	4802      	ldr	r0, [pc, #8]	; (800af70 <DMA2_Stream4_IRQHandler+0x10>)
 800af66:	f002 fe2b 	bl	800dbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800af6a:	bf00      	nop
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20002154 	.word	0x20002154

0800af74 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800af78:	4802      	ldr	r0, [pc, #8]	; (800af84 <OTG_HS_IRQHandler+0x10>)
 800af7a:	f003 fbdc 	bl	800e736 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20002ae0 	.word	0x20002ae0

0800af88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e00a      	b.n	800afb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800af9a:	f3af 8000 	nop.w
 800af9e:	4601      	mov	r1, r0
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	60ba      	str	r2, [r7, #8]
 800afa6:	b2ca      	uxtb	r2, r1
 800afa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	3301      	adds	r3, #1
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	dbf0      	blt.n	800af9a <_read+0x12>
	}

return len;
 800afb8:	687b      	ldr	r3, [r7, #4]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	e009      	b.n	800afe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	60ba      	str	r2, [r7, #8]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	3301      	adds	r3, #1
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	dbf1      	blt.n	800afd4 <_write+0x12>
	}
	return len;
 800aff0:	687b      	ldr	r3, [r7, #4]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <_close>:

int _close(int file)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
	return -1;
 800b002:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b022:	605a      	str	r2, [r3, #4]
	return 0;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <_isatty>:

int _isatty(int file)
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
	return 1;
 800b03a:	2301      	movs	r3, #1
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
	return 0;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
	...

0800b064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b06c:	4a14      	ldr	r2, [pc, #80]	; (800b0c0 <_sbrk+0x5c>)
 800b06e:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <_sbrk+0x60>)
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b078:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <_sbrk+0x64>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b080:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <_sbrk+0x64>)
 800b082:	4a12      	ldr	r2, [pc, #72]	; (800b0cc <_sbrk+0x68>)
 800b084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b086:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <_sbrk+0x64>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	429a      	cmp	r2, r3
 800b092:	d207      	bcs.n	800b0a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b094:	f00b fc72 	bl	801697c <__errno>
 800b098:	4603      	mov	r3, r0
 800b09a:	220c      	movs	r2, #12
 800b09c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	e009      	b.n	800b0b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b0a4:	4b08      	ldr	r3, [pc, #32]	; (800b0c8 <_sbrk+0x64>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b0aa:	4b07      	ldr	r3, [pc, #28]	; (800b0c8 <_sbrk+0x64>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	4a05      	ldr	r2, [pc, #20]	; (800b0c8 <_sbrk+0x64>)
 800b0b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20030000 	.word	0x20030000
 800b0c4:	00000400 	.word	0x00000400
 800b0c8:	20002274 	.word	0x20002274
 800b0cc:	20003220 	.word	0x20003220

0800b0d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <SystemInit+0x20>)
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0da:	4a05      	ldr	r2, [pc, #20]	; (800b0f0 <SystemInit+0x20>)
 800b0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b0e4:	bf00      	nop
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	e000ed00 	.word	0xe000ed00

0800b0f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b0fa:	f107 0308 	add.w	r3, r7, #8
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	605a      	str	r2, [r3, #4]
 800b104:	609a      	str	r2, [r3, #8]
 800b106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b108:	463b      	mov	r3, r7
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b110:	4b20      	ldr	r3, [pc, #128]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 104;
 800b118:	4b1e      	ldr	r3, [pc, #120]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b11a:	2268      	movs	r2, #104	; 0x68
 800b11c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b11e:	4b1d      	ldr	r3, [pc, #116]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b120:	2200      	movs	r2, #0
 800b122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800b124:	4b1b      	ldr	r3, [pc, #108]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b126:	f240 321f 	movw	r2, #799	; 0x31f
 800b12a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b12c:	4b19      	ldr	r3, [pc, #100]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b12e:	2200      	movs	r2, #0
 800b130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b132:	4b18      	ldr	r3, [pc, #96]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b134:	2200      	movs	r2, #0
 800b136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b138:	4816      	ldr	r0, [pc, #88]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b13a:	f006 f959 	bl	80113f0 <HAL_TIM_Base_Init>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800b144:	2136      	movs	r1, #54	; 0x36
 800b146:	4814      	ldr	r0, [pc, #80]	; (800b198 <MX_TIM2_Init+0xa4>)
 800b148:	f7fb feb6 	bl	8006eb8 <_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	4619      	mov	r1, r3
 800b158:	480e      	ldr	r0, [pc, #56]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b15a:	f006 fb40 	bl	80117de <HAL_TIM_ConfigClockSource>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800b164:	213b      	movs	r1, #59	; 0x3b
 800b166:	480c      	ldr	r0, [pc, #48]	; (800b198 <MX_TIM2_Init+0xa4>)
 800b168:	f7fb fea6 	bl	8006eb8 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b16c:	2300      	movs	r3, #0
 800b16e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b170:	2300      	movs	r3, #0
 800b172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b174:	463b      	mov	r3, r7
 800b176:	4619      	mov	r1, r3
 800b178:	4806      	ldr	r0, [pc, #24]	; (800b194 <MX_TIM2_Init+0xa0>)
 800b17a:	f006 fd63 	bl	8011c44 <HAL_TIMEx_MasterConfigSynchronization>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800b184:	2141      	movs	r1, #65	; 0x41
 800b186:	4804      	ldr	r0, [pc, #16]	; (800b198 <MX_TIM2_Init+0xa4>)
 800b188:	f7fb fe96 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b18c:	bf00      	nop
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20002278 	.word	0x20002278
 800b198:	080186bc 	.word	0x080186bc

0800b19c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b1a2:	f107 0308 	add.w	r3, r7, #8
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]
 800b1ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b1b8:	4b20      	ldr	r3, [pc, #128]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1ba:	4a21      	ldr	r2, [pc, #132]	; (800b240 <MX_TIM4_Init+0xa4>)
 800b1bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37499;
 800b1be:	4b1f      	ldr	r3, [pc, #124]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1c0:	f249 227b 	movw	r2, #37499	; 0x927b
 800b1c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 299;
 800b1cc:	4b1b      	ldr	r3, [pc, #108]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1ce:	f240 122b 	movw	r2, #299	; 0x12b
 800b1d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1d4:	4b19      	ldr	r3, [pc, #100]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1da:	4b18      	ldr	r3, [pc, #96]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b1e0:	4816      	ldr	r0, [pc, #88]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b1e2:	f006 f905 	bl	80113f0 <HAL_TIM_Base_Init>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800b1ec:	215e      	movs	r1, #94	; 0x5e
 800b1ee:	4815      	ldr	r0, [pc, #84]	; (800b244 <MX_TIM4_Init+0xa8>)
 800b1f0:	f7fb fe62 	bl	8006eb8 <_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b1f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b1fa:	f107 0308 	add.w	r3, r7, #8
 800b1fe:	4619      	mov	r1, r3
 800b200:	480e      	ldr	r0, [pc, #56]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b202:	f006 faec 	bl	80117de <HAL_TIM_ConfigClockSource>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800b20c:	2163      	movs	r1, #99	; 0x63
 800b20e:	480d      	ldr	r0, [pc, #52]	; (800b244 <MX_TIM4_Init+0xa8>)
 800b210:	f7fb fe52 	bl	8006eb8 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b214:	2300      	movs	r3, #0
 800b216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b218:	2300      	movs	r3, #0
 800b21a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b21c:	463b      	mov	r3, r7
 800b21e:	4619      	mov	r1, r3
 800b220:	4806      	ldr	r0, [pc, #24]	; (800b23c <MX_TIM4_Init+0xa0>)
 800b222:	f006 fd0f 	bl	8011c44 <HAL_TIMEx_MasterConfigSynchronization>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800b22c:	2169      	movs	r1, #105	; 0x69
 800b22e:	4805      	ldr	r0, [pc, #20]	; (800b244 <MX_TIM4_Init+0xa8>)
 800b230:	f7fb fe42 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b234:	bf00      	nop
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200022c0 	.word	0x200022c0
 800b240:	40000800 	.word	0x40000800
 800b244:	080186bc 	.word	0x080186bc

0800b248 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b24e:	f107 0308 	add.w	r3, r7, #8
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	605a      	str	r2, [r3, #4]
 800b258:	609a      	str	r2, [r3, #8]
 800b25a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b25c:	463b      	mov	r3, r7
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b264:	4b21      	ldr	r3, [pc, #132]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b266:	4a22      	ldr	r2, [pc, #136]	; (800b2f0 <MX_TIM8_Init+0xa8>)
 800b268:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 399;
 800b26a:	4b20      	ldr	r3, [pc, #128]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b26c:	f240 128f 	movw	r2, #399	; 0x18f
 800b270:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b272:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b274:	2200      	movs	r2, #0
 800b276:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27;
 800b278:	4b1c      	ldr	r3, [pc, #112]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b27a:	221b      	movs	r2, #27
 800b27c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b27e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b280:	2200      	movs	r2, #0
 800b282:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b284:	4b19      	ldr	r3, [pc, #100]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b286:	2200      	movs	r2, #0
 800b288:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b28a:	4b18      	ldr	r3, [pc, #96]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800b290:	4816      	ldr	r0, [pc, #88]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b292:	f006 f8ad 	bl	80113f0 <HAL_TIM_Base_Init>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 800b29c:	2187      	movs	r1, #135	; 0x87
 800b29e:	4815      	ldr	r0, [pc, #84]	; (800b2f4 <MX_TIM8_Init+0xac>)
 800b2a0:	f7fb fe0a 	bl	8006eb8 <_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800b2aa:	f107 0308 	add.w	r3, r7, #8
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	480e      	ldr	r0, [pc, #56]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b2b2:	f006 fa94 	bl	80117de <HAL_TIM_ConfigClockSource>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800b2bc:	218c      	movs	r1, #140	; 0x8c
 800b2be:	480d      	ldr	r0, [pc, #52]	; (800b2f4 <MX_TIM8_Init+0xac>)
 800b2c0:	f7fb fdfa 	bl	8006eb8 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b2cc:	463b      	mov	r3, r7
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4806      	ldr	r0, [pc, #24]	; (800b2ec <MX_TIM8_Init+0xa4>)
 800b2d2:	f006 fcb7 	bl	8011c44 <HAL_TIMEx_MasterConfigSynchronization>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 800b2dc:	2192      	movs	r1, #146	; 0x92
 800b2de:	4805      	ldr	r0, [pc, #20]	; (800b2f4 <MX_TIM8_Init+0xac>)
 800b2e0:	f7fb fdea 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800b2e4:	bf00      	nop
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20002308 	.word	0x20002308
 800b2f0:	40010400 	.word	0x40010400
 800b2f4:	080186bc 	.word	0x080186bc

0800b2f8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2fe:	463b      	mov	r3, r7
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	609a      	str	r2, [r3, #8]
 800b308:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800b30a:	4b17      	ldr	r3, [pc, #92]	; (800b368 <MX_TIM9_Init+0x70>)
 800b30c:	4a17      	ldr	r2, [pc, #92]	; (800b36c <MX_TIM9_Init+0x74>)
 800b30e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 199;
 800b310:	4b15      	ldr	r3, [pc, #84]	; (800b368 <MX_TIM9_Init+0x70>)
 800b312:	22c7      	movs	r2, #199	; 0xc7
 800b314:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b316:	4b14      	ldr	r3, [pc, #80]	; (800b368 <MX_TIM9_Init+0x70>)
 800b318:	2200      	movs	r2, #0
 800b31a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 199;
 800b31c:	4b12      	ldr	r3, [pc, #72]	; (800b368 <MX_TIM9_Init+0x70>)
 800b31e:	22c7      	movs	r2, #199	; 0xc7
 800b320:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b322:	4b11      	ldr	r3, [pc, #68]	; (800b368 <MX_TIM9_Init+0x70>)
 800b324:	2200      	movs	r2, #0
 800b326:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <MX_TIM9_Init+0x70>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800b32e:	480e      	ldr	r0, [pc, #56]	; (800b368 <MX_TIM9_Init+0x70>)
 800b330:	f006 f85e 	bl	80113f0 <HAL_TIM_Base_Init>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800b33a:	21ae      	movs	r1, #174	; 0xae
 800b33c:	480c      	ldr	r0, [pc, #48]	; (800b370 <MX_TIM9_Init+0x78>)
 800b33e:	f7fb fdbb 	bl	8006eb8 <_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b346:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800b348:	463b      	mov	r3, r7
 800b34a:	4619      	mov	r1, r3
 800b34c:	4806      	ldr	r0, [pc, #24]	; (800b368 <MX_TIM9_Init+0x70>)
 800b34e:	f006 fa46 	bl	80117de <HAL_TIM_ConfigClockSource>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <MX_TIM9_Init+0x68>
  {
    Error_Handler();
 800b358:	21b3      	movs	r1, #179	; 0xb3
 800b35a:	4805      	ldr	r0, [pc, #20]	; (800b370 <MX_TIM9_Init+0x78>)
 800b35c:	f7fb fdac 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800b360:	bf00      	nop
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20002350 	.word	0x20002350
 800b36c:	40014000 	.word	0x40014000
 800b370:	080186bc 	.word	0x080186bc

0800b374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b384:	d116      	bne.n	800b3b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b386:	2300      	movs	r3, #0
 800b388:	617b      	str	r3, [r7, #20]
 800b38a:	4b36      	ldr	r3, [pc, #216]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38e:	4a35      	ldr	r2, [pc, #212]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b390:	f043 0301 	orr.w	r3, r3, #1
 800b394:	6413      	str	r3, [r2, #64]	; 0x40
 800b396:	4b33      	ldr	r3, [pc, #204]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	617b      	str	r3, [r7, #20]
 800b3a0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 2);
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	2103      	movs	r1, #3
 800b3a6:	201c      	movs	r0, #28
 800b3a8:	f001 ff49 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b3ac:	201c      	movs	r0, #28
 800b3ae:	f001 ff62 	bl	800d276 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800b3b2:	e052      	b.n	800b45a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a2b      	ldr	r2, [pc, #172]	; (800b468 <HAL_TIM_Base_MspInit+0xf4>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d116      	bne.n	800b3ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b3be:	2300      	movs	r3, #0
 800b3c0:	613b      	str	r3, [r7, #16]
 800b3c2:	4b28      	ldr	r3, [pc, #160]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	4a27      	ldr	r2, [pc, #156]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b3c8:	f043 0304 	orr.w	r3, r3, #4
 800b3cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b3ce:	4b25      	ldr	r3, [pc, #148]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	613b      	str	r3, [r7, #16]
 800b3d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 3);
 800b3da:	2203      	movs	r2, #3
 800b3dc:	2103      	movs	r1, #3
 800b3de:	201e      	movs	r0, #30
 800b3e0:	f001 ff2d 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b3e4:	201e      	movs	r0, #30
 800b3e6:	f001 ff46 	bl	800d276 <HAL_NVIC_EnableIRQ>
}
 800b3ea:	e036      	b.n	800b45a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM8)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a1e      	ldr	r2, [pc, #120]	; (800b46c <HAL_TIM_Base_MspInit+0xf8>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d116      	bne.n	800b424 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fe:	4a19      	ldr	r2, [pc, #100]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b400:	f043 0302 	orr.w	r3, r3, #2
 800b404:	6453      	str	r3, [r2, #68]	; 0x44
 800b406:	4b17      	ldr	r3, [pc, #92]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40a:	f003 0302 	and.w	r3, r3, #2
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	202c      	movs	r0, #44	; 0x2c
 800b418:	f001 ff11 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800b41c:	202c      	movs	r0, #44	; 0x2c
 800b41e:	f001 ff2a 	bl	800d276 <HAL_NVIC_EnableIRQ>
}
 800b422:	e01a      	b.n	800b45a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM9)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a11      	ldr	r2, [pc, #68]	; (800b470 <HAL_TIM_Base_MspInit+0xfc>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d115      	bne.n	800b45a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800b42e:	2300      	movs	r3, #0
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b436:	4a0b      	ldr	r2, [pc, #44]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b43c:	6453      	str	r3, [r2, #68]	; 0x44
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <HAL_TIM_Base_MspInit+0xf0>)
 800b440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b446:	60bb      	str	r3, [r7, #8]
 800b448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 2);
 800b44a:	2202      	movs	r2, #2
 800b44c:	2102      	movs	r1, #2
 800b44e:	2018      	movs	r0, #24
 800b450:	f001 fef5 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800b454:	2018      	movs	r0, #24
 800b456:	f001 ff0e 	bl	800d276 <HAL_NVIC_EnableIRQ>
}
 800b45a:	bf00      	nop
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40023800 	.word	0x40023800
 800b468:	40000800 	.word	0x40000800
 800b46c:	40010400 	.word	0x40010400
 800b470:	40014000 	.word	0x40014000

0800b474 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	460a      	mov	r2, r1
 800b47e:	71fb      	strb	r3, [r7, #7]
 800b480:	4613      	mov	r3, r2
 800b482:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	//TM_DELAY_Init();
	
	/* Init pinout */
	TM_HD44780_InitPins();
 800b484:	f000 f99c 	bl	800b7c0 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 800b488:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 800b48c:	f7f6 f9a2 	bl	80017d4 <ShortDelayUS>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 800b490:	4a2a      	ldr	r2, [pc, #168]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b492:	79bb      	ldrb	r3, [r7, #6]
 800b494:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 800b496:	4a29      	ldr	r2, [pc, #164]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 800b49c:	4b27      	ldr	r3, [pc, #156]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 800b4a2:	4b26      	ldr	r3, [pc, #152]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800b4a8:	4b24      	ldr	r3, [pc, #144]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 800b4ae:	79bb      	ldrb	r3, [r7, #6]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d906      	bls.n	800b4c2 <TM_HD44780_Init+0x4e>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 800b4b4:	4b21      	ldr	r3, [pc, #132]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	f043 0308 	orr.w	r3, r3, #8
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	4b1f      	ldr	r3, [pc, #124]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b4c0:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 800b4c2:	2003      	movs	r0, #3
 800b4c4:	f000 f8f8 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800b4c8:	f241 1094 	movw	r0, #4500	; 0x1194
 800b4cc:	f7f6 f982 	bl	80017d4 <ShortDelayUS>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 800b4d0:	2003      	movs	r0, #3
 800b4d2:	f000 f8f1 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800b4d6:	f241 1094 	movw	r0, #4500	; 0x1194
 800b4da:	f7f6 f97b 	bl	80017d4 <ShortDelayUS>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 800b4de:	2003      	movs	r0, #3
 800b4e0:	f000 f8ea 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800b4e4:	f241 1094 	movw	r0, #4500	; 0x1194
 800b4e8:	f7f6 f974 	bl	80017d4 <ShortDelayUS>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 800b4ec:	2002      	movs	r0, #2
 800b4ee:	f000 f8e3 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 800b4f2:	2064      	movs	r0, #100	; 0x64
 800b4f4:	f7f6 f96e 	bl	80017d4 <ShortDelayUS>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 800b4f8:	4b10      	ldr	r3, [pc, #64]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b4fa:	785b      	ldrb	r3, [r3, #1]
 800b4fc:	f043 0320 	orr.w	r3, r3, #32
 800b500:	b2db      	uxtb	r3, r3
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f89c 	bl	800b640 <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 800b508:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b50a:	2204      	movs	r2, #4
 800b50c:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 800b50e:	f000 f881 	bl	800b614 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 800b512:	f000 f815 	bl	800b540 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800b516:	4b09      	ldr	r3, [pc, #36]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b518:	2202      	movs	r2, #2
 800b51a:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800b51c:	4b07      	ldr	r3, [pc, #28]	; (800b53c <TM_HD44780_Init+0xc8>)
 800b51e:	789b      	ldrb	r3, [r3, #2]
 800b520:	f043 0304 	orr.w	r3, r3, #4
 800b524:	b2db      	uxtb	r3, r3
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f88a 	bl	800b640 <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 800b52c:	f241 1094 	movw	r0, #4500	; 0x1194
 800b530:	f7f6 f950 	bl	80017d4 <ShortDelayUS>
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20002398 	.word	0x20002398

0800b540 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 800b544:	2001      	movs	r0, #1
 800b546:	f000 f87b 	bl	800b640 <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 800b54a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b54e:	f7f6 f941 	bl	80017d4 <ShortDelayUS>
}
 800b552:	bf00      	nop
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	603a      	str	r2, [r7, #0]
 800b562:	71fb      	strb	r3, [r7, #7]
 800b564:	460b      	mov	r3, r1
 800b566:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 800b568:	79ba      	ldrb	r2, [r7, #6]
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	4611      	mov	r1, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 f8f6 	bl	800b760 <TM_HD44780_CursorSet>
	while (*str) {
 800b574:	e042      	b.n	800b5fc <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b578:	795a      	ldrb	r2, [r3, #5]
 800b57a:	4b25      	ldr	r3, [pc, #148]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b57c:	791b      	ldrb	r3, [r3, #4]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d310      	bcc.n	800b5a4 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 800b582:	4b23      	ldr	r3, [pc, #140]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b584:	2200      	movs	r2, #0
 800b586:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 800b588:	4b21      	ldr	r3, [pc, #132]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b58a:	799b      	ldrb	r3, [r3, #6]
 800b58c:	3301      	adds	r3, #1
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	4b1f      	ldr	r3, [pc, #124]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b592:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800b594:	4b1e      	ldr	r3, [pc, #120]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b596:	795b      	ldrb	r3, [r3, #5]
 800b598:	4a1d      	ldr	r2, [pc, #116]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b59a:	7992      	ldrb	r2, [r2, #6]
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f8de 	bl	800b760 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b0a      	cmp	r3, #10
 800b5aa:	d10e      	bne.n	800b5ca <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 800b5ac:	4b18      	ldr	r3, [pc, #96]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5ae:	799b      	ldrb	r3, [r3, #6]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	4b16      	ldr	r3, [pc, #88]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5b6:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800b5b8:	4b15      	ldr	r3, [pc, #84]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5ba:	795b      	ldrb	r3, [r3, #5]
 800b5bc:	4a14      	ldr	r2, [pc, #80]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5be:	7992      	ldrb	r2, [r2, #6]
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f8cc 	bl	800b760 <TM_HD44780_CursorSet>
 800b5c8:	e015      	b.n	800b5f6 <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b0d      	cmp	r3, #13
 800b5d0:	d106      	bne.n	800b5e0 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 800b5d2:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5d4:	799b      	ldrb	r3, [r3, #6]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	2000      	movs	r0, #0
 800b5da:	f000 f8c1 	bl	800b760 <TM_HD44780_CursorSet>
 800b5de:	e00a      	b.n	800b5f6 <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 f849 	bl	800b67c <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5ec:	795b      	ldrb	r3, [r3, #5]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b07      	ldr	r3, [pc, #28]	; (800b610 <TM_HD44780_Puts+0xb8>)
 800b5f4:	715a      	strb	r2, [r3, #5]
		}
		str++;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	603b      	str	r3, [r7, #0]
	while (*str) {
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1b8      	bne.n	800b576 <TM_HD44780_Puts+0x1e>
	}
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20002398 	.word	0x20002398

0800b614 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 800b618:	4b08      	ldr	r3, [pc, #32]	; (800b63c <TM_HD44780_DisplayOn+0x28>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	f043 0304 	orr.w	r3, r3, #4
 800b620:	b2da      	uxtb	r2, r3
 800b622:	4b06      	ldr	r3, [pc, #24]	; (800b63c <TM_HD44780_DisplayOn+0x28>)
 800b624:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <TM_HD44780_DisplayOn+0x28>)
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	f043 0308 	orr.w	r3, r3, #8
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f805 	bl	800b640 <TM_HD44780_Cmd>
}
 800b636:	bf00      	nop
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20002398 	.word	0x20002398

0800b640 <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 800b64a:	2200      	movs	r2, #0
 800b64c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b650:	4809      	ldr	r0, [pc, #36]	; (800b678 <TM_HD44780_Cmd+0x38>)
 800b652:	f002 fee3 	bl	800e41c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	091b      	lsrs	r3, r3, #4
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 f82b 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	f003 030f 	and.w	r3, r3, #15
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 f824 	bl	800b6b8 <TM_HD44780_Cmd4bit>
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40020000 	.word	0x40020000

0800b67c <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 800b686:	2201      	movs	r2, #1
 800b688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b68c:	4809      	ldr	r0, [pc, #36]	; (800b6b4 <TM_HD44780_Data+0x38>)
 800b68e:	f002 fec5 	bl	800e41c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	091b      	lsrs	r3, r3, #4
 800b696:	b2db      	uxtb	r3, r3
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f80d 	bl	800b6b8 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f806 	bl	800b6b8 <TM_HD44780_Cmd4bit>
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	40020000 	.word	0x40020000

0800b6b8 <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	71fb      	strb	r3, [r7, #7]
	/* Set output port */

	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, (cmd & 0x08) != 0);
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	f003 0308 	and.w	r3, r3, #8
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	bf14      	ite	ne
 800b6cc:	2301      	movne	r3, #1
 800b6ce:	2300      	moveq	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	2180      	movs	r1, #128	; 0x80
 800b6d6:	4820      	ldr	r0, [pc, #128]	; (800b758 <TM_HD44780_Cmd4bit+0xa0>)
 800b6d8:	f002 fea0 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin, (cmd & 0x04) != 0);
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf14      	ite	ne
 800b6e6:	2301      	movne	r3, #1
 800b6e8:	2300      	moveq	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2140      	movs	r1, #64	; 0x40
 800b6f0:	481a      	ldr	r0, [pc, #104]	; (800b75c <TM_HD44780_Cmd4bit+0xa4>)
 800b6f2:	f002 fe93 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin, (cmd & 0x02) != 0);
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	461a      	mov	r2, r3
 800b708:	2180      	movs	r1, #128	; 0x80
 800b70a:	4814      	ldr	r0, [pc, #80]	; (800b75c <TM_HD44780_Cmd4bit+0xa4>)
 800b70c:	f002 fe86 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin, (cmd & 0x01) != 0);
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	bf14      	ite	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	2300      	moveq	r3, #0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	461a      	mov	r2, r3
 800b722:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b726:	480d      	ldr	r0, [pc, #52]	; (800b75c <TM_HD44780_Cmd4bit+0xa4>)
 800b728:	f002 fe78 	bl	800e41c <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 800b72c:	2201      	movs	r2, #1
 800b72e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b732:	480a      	ldr	r0, [pc, #40]	; (800b75c <TM_HD44780_Cmd4bit+0xa4>)
 800b734:	f002 fe72 	bl	800e41c <HAL_GPIO_WritePin>
 800b738:	2014      	movs	r0, #20
 800b73a:	f7f6 f84b 	bl	80017d4 <ShortDelayUS>
 800b73e:	2200      	movs	r2, #0
 800b740:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b744:	4805      	ldr	r0, [pc, #20]	; (800b75c <TM_HD44780_Cmd4bit+0xa4>)
 800b746:	f002 fe69 	bl	800e41c <HAL_GPIO_WritePin>
 800b74a:	2014      	movs	r0, #20
 800b74c:	f7f6 f842 	bl	80017d4 <ShortDelayUS>
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	40021800 	.word	0x40021800
 800b75c:	40020800 	.word	0x40020800

0800b760 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	460a      	mov	r2, r1
 800b76a:	71fb      	strb	r3, [r7, #7]
 800b76c:	4613      	mov	r3, r2
 800b76e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800b770:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <TM_HD44780_CursorSet+0x58>)
 800b772:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 800b774:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <TM_HD44780_CursorSet+0x5c>)
 800b776:	78db      	ldrb	r3, [r3, #3]
 800b778:	79ba      	ldrb	r2, [r7, #6]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d301      	bcc.n	800b782 <TM_HD44780_CursorSet+0x22>
		row = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 800b782:	4a0e      	ldr	r2, [pc, #56]	; (800b7bc <TM_HD44780_CursorSet+0x5c>)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 800b788:	4a0c      	ldr	r2, [pc, #48]	; (800b7bc <TM_HD44780_CursorSet+0x5c>)
 800b78a:	79bb      	ldrb	r3, [r7, #6]
 800b78c:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800b78e:	79bb      	ldrb	r3, [r7, #6]
 800b790:	3310      	adds	r3, #16
 800b792:	443b      	add	r3, r7
 800b794:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	4413      	add	r3, r2
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	b25b      	sxtb	r3, r3
 800b7a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7a4:	b25b      	sxtb	r3, r3
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ff49 	bl	800b640 <TM_HD44780_Cmd>
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	54144000 	.word	0x54144000
 800b7bc:	20002398 	.word	0x20002398

0800b7c0 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
	/* Init all pins */
	/* Set pins low */
	HAL_GPIO_WritePin(HD44780_RS_GPIO_Port, HD44780_RS_Pin,GPIO_PIN_RESET);
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7ca:	4810      	ldr	r0, [pc, #64]	; (800b80c <TM_HD44780_InitPins+0x4c>)
 800b7cc:	f002 fe26 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_GPIO_Port, HD44780_E_Pin,GPIO_PIN_RESET);
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7d6:	480e      	ldr	r0, [pc, #56]	; (800b810 <TM_HD44780_InitPins+0x50>)
 800b7d8:	f002 fe20 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin,GPIO_PIN_RESET);
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7e2:	480b      	ldr	r0, [pc, #44]	; (800b810 <TM_HD44780_InitPins+0x50>)
 800b7e4:	f002 fe1a 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin,GPIO_PIN_RESET);
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2180      	movs	r1, #128	; 0x80
 800b7ec:	4808      	ldr	r0, [pc, #32]	; (800b810 <TM_HD44780_InitPins+0x50>)
 800b7ee:	f002 fe15 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin,GPIO_PIN_RESET);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2140      	movs	r1, #64	; 0x40
 800b7f6:	4806      	ldr	r0, [pc, #24]	; (800b810 <TM_HD44780_InitPins+0x50>)
 800b7f8:	f002 fe10 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin,GPIO_PIN_RESET);
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2180      	movs	r1, #128	; 0x80
 800b800:	4804      	ldr	r0, [pc, #16]	; (800b814 <TM_HD44780_InitPins+0x54>)
 800b802:	f002 fe0b 	bl	800e41c <HAL_GPIO_WritePin>
}
 800b806:	bf00      	nop
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	40020000 	.word	0x40020000
 800b810:	40020800 	.word	0x40020800
 800b814:	40021800 	.word	0x40021800

0800b818 <TM_ILI9341_Init>:
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);


void TM_ILI9341_Init() {
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
	
	/* Init RST pin */
	//TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);

	/* CS high */
	ILI9341_CS_SET;
 800b81c:	2201      	movs	r2, #1
 800b81e:	2104      	movs	r1, #4
 800b820:	480d      	ldr	r0, [pc, #52]	; (800b858 <TM_ILI9341_Init+0x40>)
 800b822:	f002 fdfb 	bl	800e41c <HAL_GPIO_WritePin>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 800b826:	f000 f81f 	bl	800b868 <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 800b82a:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <TM_ILI9341_Init+0x44>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	801a      	strh	r2, [r3, #0]
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <TM_ILI9341_Init+0x44>)
 800b832:	881a      	ldrh	r2, [r3, #0]
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <TM_ILI9341_Init+0x48>)
 800b836:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 800b838:	4b0a      	ldr	r3, [pc, #40]	; (800b864 <TM_ILI9341_Init+0x4c>)
 800b83a:	22f0      	movs	r2, #240	; 0xf0
 800b83c:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 800b83e:	4b09      	ldr	r3, [pc, #36]	; (800b864 <TM_ILI9341_Init+0x4c>)
 800b840:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b844:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 800b846:	4b07      	ldr	r3, [pc, #28]	; (800b864 <TM_ILI9341_Init+0x4c>)
 800b848:	2201      	movs	r2, #1
 800b84a:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
 800b84c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b850:	f000 f9fe 	bl	800bc50 <TM_ILI9341_Fill>
}
 800b854:	bf00      	nop
 800b856:	bd80      	pop	{r7, pc}
 800b858:	40020800 	.word	0x40020800
 800b85c:	200023a2 	.word	0x200023a2
 800b860:	200023a0 	.word	0x200023a0
 800b864:	200023a4 	.word	0x200023a4

0800b868 <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 800b86c:	2200      	movs	r2, #0
 800b86e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b872:	489a      	ldr	r0, [pc, #616]	; (800badc <TM_ILI9341_InitLCD+0x274>)
 800b874:	f002 fdd2 	bl	800e41c <HAL_GPIO_WritePin>
	TM_ILI9341_Delay(20000);
 800b878:	f644 6020 	movw	r0, #20000	; 0x4e20
 800b87c:	f000 fa94 	bl	800bda8 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 800b880:	2201      	movs	r2, #1
 800b882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b886:	4895      	ldr	r0, [pc, #596]	; (800badc <TM_ILI9341_InitLCD+0x274>)
 800b888:	f002 fdc8 	bl	800e41c <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 800b88c:	f644 6020 	movw	r0, #20000	; 0x4e20
 800b890:	f000 fa8a 	bl	800bda8 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 800b894:	2001      	movs	r0, #1
 800b896:	f000 f925 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 800b89a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b89e:	f000 fa83 	bl	800bda8 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 800b8a2:	20cb      	movs	r0, #203	; 0xcb
 800b8a4:	f000 f91e 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 800b8a8:	2039      	movs	r0, #57	; 0x39
 800b8aa:	f000 f941 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800b8ae:	202c      	movs	r0, #44	; 0x2c
 800b8b0:	f000 f93e 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	f000 f93b 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 800b8ba:	2034      	movs	r0, #52	; 0x34
 800b8bc:	f000 f938 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 800b8c0:	2002      	movs	r0, #2
 800b8c2:	f000 f935 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 800b8c6:	20cf      	movs	r0, #207	; 0xcf
 800b8c8:	f000 f90c 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f000 f92f 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800b8d2:	20c1      	movs	r0, #193	; 0xc1
 800b8d4:	f000 f92c 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 800b8d8:	2030      	movs	r0, #48	; 0x30
 800b8da:	f000 f929 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 800b8de:	20e8      	movs	r0, #232	; 0xe8
 800b8e0:	f000 f900 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800b8e4:	2085      	movs	r0, #133	; 0x85
 800b8e6:	f000 f923 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	f000 f920 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 800b8f0:	2078      	movs	r0, #120	; 0x78
 800b8f2:	f000 f91d 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800b8f6:	20ea      	movs	r0, #234	; 0xea
 800b8f8:	f000 f8f4 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	f000 f917 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b902:	2000      	movs	r0, #0
 800b904:	f000 f914 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800b908:	20ed      	movs	r0, #237	; 0xed
 800b90a:	f000 f8eb 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 800b90e:	2064      	movs	r0, #100	; 0x64
 800b910:	f000 f90e 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800b914:	2003      	movs	r0, #3
 800b916:	f000 f90b 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800b91a:	2012      	movs	r0, #18
 800b91c:	f000 f908 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 800b920:	2081      	movs	r0, #129	; 0x81
 800b922:	f000 f905 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800b926:	20f7      	movs	r0, #247	; 0xf7
 800b928:	f000 f8dc 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 800b92c:	2020      	movs	r0, #32
 800b92e:	f000 f8ff 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 800b932:	20c0      	movs	r0, #192	; 0xc0
 800b934:	f000 f8d6 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 800b938:	2023      	movs	r0, #35	; 0x23
 800b93a:	f000 f8f9 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800b93e:	20c1      	movs	r0, #193	; 0xc1
 800b940:	f000 f8d0 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 800b944:	2010      	movs	r0, #16
 800b946:	f000 f8f3 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800b94a:	20c5      	movs	r0, #197	; 0xc5
 800b94c:	f000 f8ca 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 800b950:	203e      	movs	r0, #62	; 0x3e
 800b952:	f000 f8ed 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 800b956:	2028      	movs	r0, #40	; 0x28
 800b958:	f000 f8ea 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 800b95c:	20c7      	movs	r0, #199	; 0xc7
 800b95e:	f000 f8c1 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 800b962:	2086      	movs	r0, #134	; 0x86
 800b964:	f000 f8e4 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800b968:	2036      	movs	r0, #54	; 0x36
 800b96a:	f000 f8bb 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 800b96e:	2048      	movs	r0, #72	; 0x48
 800b970:	f000 f8de 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 800b974:	203a      	movs	r0, #58	; 0x3a
 800b976:	f000 f8b5 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 800b97a:	2055      	movs	r0, #85	; 0x55
 800b97c:	f000 f8d8 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 800b980:	20b1      	movs	r0, #177	; 0xb1
 800b982:	f000 f8af 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b986:	2000      	movs	r0, #0
 800b988:	f000 f8d2 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 800b98c:	2018      	movs	r0, #24
 800b98e:	f000 f8cf 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800b992:	20b6      	movs	r0, #182	; 0xb6
 800b994:	f000 f8a6 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 800b998:	2008      	movs	r0, #8
 800b99a:	f000 f8c9 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 800b99e:	2082      	movs	r0, #130	; 0x82
 800b9a0:	f000 f8c6 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 800b9a4:	2027      	movs	r0, #39	; 0x27
 800b9a6:	f000 f8c3 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 800b9aa:	20f2      	movs	r0, #242	; 0xf2
 800b9ac:	f000 f89a 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f000 f8bd 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800b9b6:	202a      	movs	r0, #42	; 0x2a
 800b9b8:	f000 f894 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b9bc:	2000      	movs	r0, #0
 800b9be:	f000 f8b7 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f000 f8b4 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	f000 f8b1 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 800b9ce:	20ef      	movs	r0, #239	; 0xef
 800b9d0:	f000 f8ae 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800b9d4:	202b      	movs	r0, #43	; 0x2b
 800b9d6:	f000 f885 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f000 f8a8 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f000 f8a5 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	f000 f8a2 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 800b9ec:	203f      	movs	r0, #63	; 0x3f
 800b9ee:	f000 f89f 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 800b9f2:	2026      	movs	r0, #38	; 0x26
 800b9f4:	f000 f876 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f000 f899 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 800b9fe:	20e0      	movs	r0, #224	; 0xe0
 800ba00:	f000 f870 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 800ba04:	200f      	movs	r0, #15
 800ba06:	f000 f893 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800ba0a:	2031      	movs	r0, #49	; 0x31
 800ba0c:	f000 f890 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 800ba10:	202b      	movs	r0, #43	; 0x2b
 800ba12:	f000 f88d 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800ba16:	200c      	movs	r0, #12
 800ba18:	f000 f88a 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800ba1c:	200e      	movs	r0, #14
 800ba1e:	f000 f887 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800ba22:	2008      	movs	r0, #8
 800ba24:	f000 f884 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 800ba28:	204e      	movs	r0, #78	; 0x4e
 800ba2a:	f000 f881 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 800ba2e:	20f1      	movs	r0, #241	; 0xf1
 800ba30:	f000 f87e 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 800ba34:	2037      	movs	r0, #55	; 0x37
 800ba36:	f000 f87b 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800ba3a:	2007      	movs	r0, #7
 800ba3c:	f000 f878 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 800ba40:	2010      	movs	r0, #16
 800ba42:	f000 f875 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800ba46:	2003      	movs	r0, #3
 800ba48:	f000 f872 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800ba4c:	200e      	movs	r0, #14
 800ba4e:	f000 f86f 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800ba52:	2009      	movs	r0, #9
 800ba54:	f000 f86c 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800ba58:	2000      	movs	r0, #0
 800ba5a:	f000 f869 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 800ba5e:	20e1      	movs	r0, #225	; 0xe1
 800ba60:	f000 f840 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800ba64:	2000      	movs	r0, #0
 800ba66:	f000 f863 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800ba6a:	200e      	movs	r0, #14
 800ba6c:	f000 f860 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 800ba70:	2014      	movs	r0, #20
 800ba72:	f000 f85d 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800ba76:	2003      	movs	r0, #3
 800ba78:	f000 f85a 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 800ba7c:	2011      	movs	r0, #17
 800ba7e:	f000 f857 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800ba82:	2007      	movs	r0, #7
 800ba84:	f000 f854 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800ba88:	2031      	movs	r0, #49	; 0x31
 800ba8a:	f000 f851 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800ba8e:	20c1      	movs	r0, #193	; 0xc1
 800ba90:	f000 f84e 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 800ba94:	2048      	movs	r0, #72	; 0x48
 800ba96:	f000 f84b 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800ba9a:	2008      	movs	r0, #8
 800ba9c:	f000 f848 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 800baa0:	200f      	movs	r0, #15
 800baa2:	f000 f845 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800baa6:	200c      	movs	r0, #12
 800baa8:	f000 f842 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800baac:	2031      	movs	r0, #49	; 0x31
 800baae:	f000 f83f 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 800bab2:	2036      	movs	r0, #54	; 0x36
 800bab4:	f000 f83c 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 800bab8:	200f      	movs	r0, #15
 800baba:	f000 f839 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800babe:	2011      	movs	r0, #17
 800bac0:	f000 f810 	bl	800bae4 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 800bac4:	4806      	ldr	r0, [pc, #24]	; (800bae0 <TM_ILI9341_InitLCD+0x278>)
 800bac6:	f000 f96f 	bl	800bda8 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 800baca:	2029      	movs	r0, #41	; 0x29
 800bacc:	f000 f80a 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800bad0:	202c      	movs	r0, #44	; 0x2c
 800bad2:	f000 f807 	bl	800bae4 <TM_ILI9341_SendCommand>
}
 800bad6:	bf00      	nop
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	40020c00 	.word	0x40020c00
 800bae0:	000f4240 	.word	0x000f4240

0800bae4 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 800baee:	2200      	movs	r2, #0
 800baf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800baf4:	480b      	ldr	r0, [pc, #44]	; (800bb24 <TM_ILI9341_SendCommand+0x40>)
 800baf6:	f002 fc91 	bl	800e41c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800bafa:	2200      	movs	r2, #0
 800bafc:	2104      	movs	r1, #4
 800bafe:	480a      	ldr	r0, [pc, #40]	; (800bb28 <TM_ILI9341_SendCommand+0x44>)
 800bb00:	f002 fc8c 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5,&data,1,100);
 800bb04:	1df9      	adds	r1, r7, #7
 800bb06:	2364      	movs	r3, #100	; 0x64
 800bb08:	2201      	movs	r2, #1
 800bb0a:	4808      	ldr	r0, [pc, #32]	; (800bb2c <TM_ILI9341_SendCommand+0x48>)
 800bb0c:	f004 fdfb 	bl	8010706 <HAL_SPI_Transmit>
	//TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
 800bb10:	2201      	movs	r2, #1
 800bb12:	2104      	movs	r1, #4
 800bb14:	4804      	ldr	r0, [pc, #16]	; (800bb28 <TM_ILI9341_SendCommand+0x44>)
 800bb16:	f002 fc81 	bl	800e41c <HAL_GPIO_WritePin>
}
 800bb1a:	bf00      	nop
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	40020c00 	.word	0x40020c00
 800bb28:	40020800 	.word	0x40020800
 800bb2c:	2000209c 	.word	0x2000209c

0800bb30 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bb40:	480b      	ldr	r0, [pc, #44]	; (800bb70 <TM_ILI9341_SendData+0x40>)
 800bb42:	f002 fc6b 	bl	800e41c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800bb46:	2200      	movs	r2, #0
 800bb48:	2104      	movs	r1, #4
 800bb4a:	480a      	ldr	r0, [pc, #40]	; (800bb74 <TM_ILI9341_SendData+0x44>)
 800bb4c:	f002 fc66 	bl	800e41c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5,&data,1,100);
 800bb50:	1df9      	adds	r1, r7, #7
 800bb52:	2364      	movs	r3, #100	; 0x64
 800bb54:	2201      	movs	r2, #1
 800bb56:	4808      	ldr	r0, [pc, #32]	; (800bb78 <TM_ILI9341_SendData+0x48>)
 800bb58:	f004 fdd5 	bl	8010706 <HAL_SPI_Transmit>
	//TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	2104      	movs	r1, #4
 800bb60:	4804      	ldr	r0, [pc, #16]	; (800bb74 <TM_ILI9341_SendData+0x44>)
 800bb62:	f002 fc5b 	bl	800e41c <HAL_GPIO_WritePin>
}
 800bb66:	bf00      	nop
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	40020c00 	.word	0x40020c00
 800bb74:	40020800 	.word	0x40020800
 800bb78:	2000209c 	.word	0x2000209c

0800bb7c <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	603a      	str	r2, [r7, #0]
 800bb86:	80fb      	strh	r3, [r7, #6]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 800bb8c:	88bb      	ldrh	r3, [r7, #4]
 800bb8e:	88fa      	ldrh	r2, [r7, #6]
 800bb90:	88b9      	ldrh	r1, [r7, #4]
 800bb92:	88f8      	ldrh	r0, [r7, #6]
 800bb94:	f000 f812 	bl	800bbbc <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800bb98:	202c      	movs	r0, #44	; 0x2c
 800bb9a:	f7ff ffa3 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	0a1b      	lsrs	r3, r3, #8
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff ffc3 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff ffbe 	bl	800bb30 <TM_ILI9341_SendData>
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	461a      	mov	r2, r3
 800bbca:	4623      	mov	r3, r4
 800bbcc:	80fb      	strh	r3, [r7, #6]
 800bbce:	4603      	mov	r3, r0
 800bbd0:	80bb      	strh	r3, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	807b      	strh	r3, [r7, #2]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800bbda:	202a      	movs	r0, #42	; 0x2a
 800bbdc:	f7ff ff82 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	0a1b      	lsrs	r3, r3, #8
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff ffa1 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff ff9c 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 800bbf8:	887b      	ldrh	r3, [r7, #2]
 800bbfa:	0a1b      	lsrs	r3, r3, #8
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff ff95 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 800bc06:	887b      	ldrh	r3, [r7, #2]
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff ff90 	bl	800bb30 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800bc10:	202b      	movs	r0, #43	; 0x2b
 800bc12:	f7ff ff67 	bl	800bae4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 800bc16:	88bb      	ldrh	r3, [r7, #4]
 800bc18:	0a1b      	lsrs	r3, r3, #8
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff ff86 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 800bc24:	88bb      	ldrh	r3, [r7, #4]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff ff81 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 800bc2e:	883b      	ldrh	r3, [r7, #0]
 800bc30:	0a1b      	lsrs	r3, r3, #8
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff ff7a 	bl	800bb30 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 800bc3c:	883b      	ldrh	r3, [r7, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff ff75 	bl	800bb30 <TM_ILI9341_SendData>
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd90      	pop	{r4, r7, pc}
	...

0800bc50 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height, color);
 800bc58:	4b08      	ldr	r3, [pc, #32]	; (800bc7c <TM_ILI9341_Fill+0x2c>)
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	4b06      	ldr	r3, [pc, #24]	; (800bc7c <TM_ILI9341_Fill+0x2c>)
 800bc62:	8859      	ldrh	r1, [r3, #2]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	2000      	movs	r0, #0
 800bc70:	f000 f806 	bl	800bc80 <TM_ILI9341_INT_Fill>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	200023a4 	.word	0x200023a4

0800bc80 <TM_ILI9341_INT_Fill>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4623      	mov	r3, r4
 800bc90:	80fb      	strh	r3, [r7, #6]
 800bc92:	4603      	mov	r3, r0
 800bc94:	80bb      	strh	r3, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	807b      	strh	r3, [r7, #2]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint32_t index = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]
	uint8_t color_bytes[2];
	color_bytes[0] = color >> 8;
 800bca2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bca4:	0a1b      	lsrs	r3, r3, #8
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	733b      	strb	r3, [r7, #12]
	color_bytes[1] = (uint8_t)color;
 800bcac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	737b      	strb	r3, [r7, #13]
	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800bcb2:	883b      	ldrh	r3, [r7, #0]
 800bcb4:	887a      	ldrh	r2, [r7, #2]
 800bcb6:	88b9      	ldrh	r1, [r7, #4]
 800bcb8:	88f8      	ldrh	r0, [r7, #6]
 800bcba:	f7ff ff7f 	bl	800bbbc <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800bcbe:	202c      	movs	r0, #44	; 0x2c
 800bcc0:	f7ff ff10 	bl	800bae4 <TM_ILI9341_SendCommand>
	
	/* Calculate pixels count */
	pixels_count = (x1 - x0 + 1) * (y1 - y0 + 1);
 800bcc4:	887a      	ldrh	r2, [r7, #2]
 800bcc6:	88fb      	ldrh	r3, [r7, #6]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	3301      	adds	r3, #1
 800bccc:	8839      	ldrh	r1, [r7, #0]
 800bcce:	88ba      	ldrh	r2, [r7, #4]
 800bcd0:	1a8a      	subs	r2, r1, r2
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
 800bcd8:	617b      	str	r3, [r7, #20]

	/* Send everything */
	ILI9341_CS_RESET;
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2104      	movs	r1, #4
 800bcde:	482f      	ldr	r0, [pc, #188]	; (800bd9c <TM_ILI9341_INT_Fill+0x11c>)
 800bce0:	f002 fb9c 	bl	800e41c <HAL_GPIO_WritePin>
	ILI9341_WRX_SET;
 800bce4:	2201      	movs	r2, #1
 800bce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bcea:	482d      	ldr	r0, [pc, #180]	; (800bda0 <TM_ILI9341_INT_Fill+0x120>)
 800bcec:	f002 fb96 	bl	800e41c <HAL_GPIO_WritePin>
	
	/* Go to 16-bit SPI mode */
	//TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_16b);
	__HAL_SPI_DISABLE(&hspi5);
 800bcf0:	4b2c      	ldr	r3, [pc, #176]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	4b2b      	ldr	r3, [pc, #172]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcfe:	601a      	str	r2, [r3, #0]
	hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800bd00:	4b28      	ldr	r3, [pc, #160]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd06:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(&hspi5);
 800bd08:	4b26      	ldr	r3, [pc, #152]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd16:	601a      	str	r2, [r3, #0]
	/* Send first 65535 bytes, SPI MUST BE IN 16-bit MODE */
	if(pixels_count > 0xFFFF){
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1e:	d31b      	bcc.n	800bd58 <TM_ILI9341_INT_Fill+0xd8>
		while(index++ < 0xFFFF){
 800bd20:	e009      	b.n	800bd36 <TM_ILI9341_INT_Fill+0xb6>
			HAL_SPI_Transmit_DMA(&hspi5,color_bytes,2);
 800bd22:	f107 030c 	add.w	r3, r7, #12
 800bd26:	2202      	movs	r2, #2
 800bd28:	4619      	mov	r1, r3
 800bd2a:	481e      	ldr	r0, [pc, #120]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd2c:	f005 f8da 	bl	8010ee4 <HAL_SPI_Transmit_DMA>
			pixels_count--;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	617b      	str	r3, [r7, #20]
		while(index++ < 0xFFFF){
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	613a      	str	r2, [r7, #16]
 800bd3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d9ee      	bls.n	800bd22 <TM_ILI9341_INT_Fill+0xa2>
		}

		index = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	613b      	str	r3, [r7, #16]
	}
	//TM_SPI_DMA_SendHalfWord(ILI9341_SPI, color, (pixels_count > 0xFFFF) ? 0xFFFF : pixels_count);
	/* Wait till done */
	//while (TM_SPI_DMA_Working(ILI9341_SPI));
	while(index++ < pixels_count)
 800bd48:	e006      	b.n	800bd58 <TM_ILI9341_INT_Fill+0xd8>
		HAL_SPI_Transmit_DMA(&hspi5,color_bytes,2);
 800bd4a:	f107 030c 	add.w	r3, r7, #12
 800bd4e:	2202      	movs	r2, #2
 800bd50:	4619      	mov	r1, r3
 800bd52:	4814      	ldr	r0, [pc, #80]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd54:	f005 f8c6 	bl	8010ee4 <HAL_SPI_Transmit_DMA>
	while(index++ < pixels_count)
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	613a      	str	r2, [r7, #16]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d8f2      	bhi.n	800bd4a <TM_ILI9341_INT_Fill+0xca>
//		TM_SPI_DMA_SendHalfWord(ILI9341_SPI, color, pixels_count - 0xFFFF);
//		/* Wait till done */
//		while (TM_SPI_DMA_Working(ILI9341_SPI));
//	}
	
	ILI9341_CS_SET;
 800bd64:	2201      	movs	r2, #1
 800bd66:	2104      	movs	r1, #4
 800bd68:	480c      	ldr	r0, [pc, #48]	; (800bd9c <TM_ILI9341_INT_Fill+0x11c>)
 800bd6a:	f002 fb57 	bl	800e41c <HAL_GPIO_WritePin>

	/* Go back to 8-bit SPI mode */
	//TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
	__HAL_SPI_DISABLE(&hspi5);
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd7c:	601a      	str	r2, [r3, #0]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800bd7e:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(&hspi5);
 800bd84:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <TM_ILI9341_INT_Fill+0x124>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd92:	601a      	str	r2, [r3, #0]
}
 800bd94:	bf00      	nop
 800bd96:	371c      	adds	r7, #28
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd90      	pop	{r4, r7, pc}
 800bd9c:	40020800 	.word	0x40020800
 800bda0:	40020c00 	.word	0x40020c00
 800bda4:	2000209c 	.word	0x2000209c

0800bda8 <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800bdb0:	e002      	b.n	800bdb8 <TM_ILI9341_Delay+0x10>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1f9      	bne.n	800bdb2 <TM_ILI9341_Delay+0xa>
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <TM_ILI9341_Rotate>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800bdd6:	2036      	movs	r0, #54	; 0x36
 800bdd8:	f7ff fe84 	bl	800bae4 <TM_ILI9341_SendCommand>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d103      	bne.n	800bdea <TM_ILI9341_Rotate+0x1e>
		TM_ILI9341_SendData(0x58);
 800bde2:	2058      	movs	r0, #88	; 0x58
 800bde4:	f7ff fea4 	bl	800bb30 <TM_ILI9341_SendData>
 800bde8:	e013      	b.n	800be12 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d103      	bne.n	800bdf8 <TM_ILI9341_Rotate+0x2c>
		TM_ILI9341_SendData(0x88);
 800bdf0:	2088      	movs	r0, #136	; 0x88
 800bdf2:	f7ff fe9d 	bl	800bb30 <TM_ILI9341_SendData>
 800bdf6:	e00c      	b.n	800be12 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d103      	bne.n	800be06 <TM_ILI9341_Rotate+0x3a>
		TM_ILI9341_SendData(0x28);
 800bdfe:	2028      	movs	r0, #40	; 0x28
 800be00:	f7ff fe96 	bl	800bb30 <TM_ILI9341_SendData>
 800be04:	e005      	b.n	800be12 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d102      	bne.n	800be12 <TM_ILI9341_Rotate+0x46>
		TM_ILI9341_SendData(0xE8);
 800be0c:	20e8      	movs	r0, #232	; 0xe8
 800be0e:	f7ff fe8f 	bl	800bb30 <TM_ILI9341_SendData>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <TM_ILI9341_Rotate+0x52>
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d10a      	bne.n	800be34 <TM_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be20:	22f0      	movs	r2, #240	; 0xf0
 800be22:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 800be24:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800be2a:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 800be2c:	4b09      	ldr	r3, [pc, #36]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be2e:	2201      	movs	r2, #1
 800be30:	711a      	strb	r2, [r3, #4]
 800be32:	e00a      	b.n	800be4a <TM_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800be3a:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be3e:	22f0      	movs	r2, #240	; 0xf0
 800be40:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 800be42:	4b04      	ldr	r3, [pc, #16]	; (800be54 <TM_ILI9341_Rotate+0x88>)
 800be44:	2200      	movs	r2, #0
 800be46:	711a      	strb	r2, [r3, #4]
	}
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200023a4 	.word	0x200023a4

0800be58 <TM_ILI9341_Puts>:

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	60ba      	str	r2, [r7, #8]
 800be60:	607b      	str	r3, [r7, #4]
 800be62:	4603      	mov	r3, r0
 800be64:	81fb      	strh	r3, [r7, #14]
 800be66:	460b      	mov	r3, r1
 800be68:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 800be6a:	89fb      	ldrh	r3, [r7, #14]
 800be6c:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 800be6e:	4a24      	ldr	r2, [pc, #144]	; (800bf00 <TM_ILI9341_Puts+0xa8>)
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800be74:	4a23      	ldr	r2, [pc, #140]	; (800bf04 <TM_ILI9341_Puts+0xac>)
 800be76:	89bb      	ldrh	r3, [r7, #12]
 800be78:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 800be7a:	e038      	b.n	800beee <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b0a      	cmp	r3, #10
 800be82:	d11d      	bne.n	800bec0 <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	785b      	ldrb	r3, [r3, #1]
 800be88:	b29a      	uxth	r2, r3
 800be8a:	4b1e      	ldr	r3, [pc, #120]	; (800bf04 <TM_ILI9341_Puts+0xac>)
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	4413      	add	r3, r2
 800be90:	b29b      	uxth	r3, r3
 800be92:	3301      	adds	r3, #1
 800be94:	b29a      	uxth	r2, r3
 800be96:	4b1b      	ldr	r3, [pc, #108]	; (800bf04 <TM_ILI9341_Puts+0xac>)
 800be98:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	3301      	adds	r3, #1
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b0d      	cmp	r3, #13
 800bea2:	d106      	bne.n	800beb2 <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 800bea4:	4b16      	ldr	r3, [pc, #88]	; (800bf00 <TM_ILI9341_Puts+0xa8>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	801a      	strh	r2, [r3, #0]
				str++;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	3301      	adds	r3, #1
 800beae:	60bb      	str	r3, [r7, #8]
 800beb0:	e002      	b.n	800beb8 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800beb2:	4a13      	ldr	r2, [pc, #76]	; (800bf00 <TM_ILI9341_Puts+0xa8>)
 800beb4:	8afb      	ldrh	r3, [r7, #22]
 800beb6:	8013      	strh	r3, [r2, #0]
			}
			str++;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	3301      	adds	r3, #1
 800bebc:	60bb      	str	r3, [r7, #8]
			continue;
 800bebe:	e016      	b.n	800beee <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b0d      	cmp	r3, #13
 800bec6:	d103      	bne.n	800bed0 <TM_ILI9341_Puts+0x78>
			str++;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	3301      	adds	r3, #1
 800becc:	60bb      	str	r3, [r7, #8]
			continue;
 800bece:	e00e      	b.n	800beee <TM_ILI9341_Puts+0x96>
		}
		
		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800bed0:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <TM_ILI9341_Puts+0xa8>)
 800bed2:	8818      	ldrh	r0, [r3, #0]
 800bed4:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <TM_ILI9341_Puts+0xac>)
 800bed6:	8819      	ldrh	r1, [r3, #0]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	60ba      	str	r2, [r7, #8]
 800bede:	781a      	ldrb	r2, [r3, #0]
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f000 f80d 	bl	800bf08 <TM_ILI9341_Putc>
	while (*str) {
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1c2      	bne.n	800be7c <TM_ILI9341_Puts+0x24>
	}
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	200023a0 	.word	0x200023a0
 800bf04:	200023a2 	.word	0x200023a2

0800bf08 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b08b      	sub	sp, #44	; 0x2c
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	607b      	str	r3, [r7, #4]
 800bf10:	4603      	mov	r3, r0
 800bf12:	81fb      	strh	r3, [r7, #14]
 800bf14:	460b      	mov	r3, r1
 800bf16:	81bb      	strh	r3, [r7, #12]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 800bf1c:	4a40      	ldr	r2, [pc, #256]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800bf22:	4a40      	ldr	r2, [pc, #256]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bf24:	89bb      	ldrh	r3, [r7, #12]
 800bf26:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 800bf28:	4b3d      	ldr	r3, [pc, #244]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	4413      	add	r3, r2
 800bf34:	4a3c      	ldr	r2, [pc, #240]	; (800c028 <TM_ILI9341_Putc+0x120>)
 800bf36:	8812      	ldrh	r2, [r2, #0]
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	dd0b      	ble.n	800bf54 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	785b      	ldrb	r3, [r3, #1]
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	4b38      	ldr	r3, [pc, #224]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	4413      	add	r3, r2
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	4b36      	ldr	r3, [pc, #216]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bf4c:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 800bf4e:	4b34      	ldr	r3, [pc, #208]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 800bf54:	4b32      	ldr	r3, [pc, #200]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bf56:	8818      	ldrh	r0, [r3, #0]
 800bf58:	4b32      	ldr	r3, [pc, #200]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bf5a:	8819      	ldrh	r1, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	4b2f      	ldr	r3, [pc, #188]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	4413      	add	r3, r2
 800bf68:	b29c      	uxth	r4, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	4b2c      	ldr	r3, [pc, #176]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	4413      	add	r3, r2
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	4622      	mov	r2, r4
 800bf82:	f7ff fe7d 	bl	800bc80 <TM_ILI9341_INT_Fill>
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 800bf86:	2300      	movs	r3, #0
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	e035      	b.n	800bff8 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3b20      	subs	r3, #32
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	7849      	ldrb	r1, [r1, #1]
 800bf98:	fb01 f303 	mul.w	r3, r1, r3
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	440b      	add	r3, r1
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 800bfaa:	2300      	movs	r3, #0
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	e01a      	b.n	800bfe6 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00f      	beq.n	800bfe0 <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	4b16      	ldr	r3, [pc, #88]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	4413      	add	r3, r2
 800bfca:	b298      	uxth	r0, r3
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	4b14      	ldr	r3, [pc, #80]	; (800c024 <TM_ILI9341_Putc+0x11c>)
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfda:	4619      	mov	r1, r3
 800bfdc:	f7ff fdce 	bl	800bb7c <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	61bb      	str	r3, [r7, #24]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d3de      	bcc.n	800bfb0 <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	3301      	adds	r3, #1
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	461a      	mov	r2, r3
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4293      	cmp	r3, r2
 800c002:	d3c3      	bcc.n	800bf8c <TM_ILI9341_Putc+0x84>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	4413      	add	r3, r2
 800c010:	b29a      	uxth	r2, r3
 800c012:	4b03      	ldr	r3, [pc, #12]	; (800c020 <TM_ILI9341_Putc+0x118>)
 800c014:	801a      	strh	r2, [r3, #0]
}
 800c016:	bf00      	nop
 800c018:	3724      	adds	r7, #36	; 0x24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd90      	pop	{r4, r7, pc}
 800c01e:	bf00      	nop
 800c020:	200023a0 	.word	0x200023a0
 800c024:	200023a2 	.word	0x200023a2
 800c028:	200023a4 	.word	0x200023a4

0800c02c <TM_ILI9341_DrawFilledRectangle>:
	TM_ILI9341_DrawLine(x0, y0, x0, y1, color);	//Left
	TM_ILI9341_DrawLine(x1, y0, x1, y1, color);	//Right
	TM_ILI9341_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void TM_ILI9341_DrawFilledRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {	
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b087      	sub	sp, #28
 800c030:	af02      	add	r7, sp, #8
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
 800c038:	461a      	mov	r2, r3
 800c03a:	4623      	mov	r3, r4
 800c03c:	80fb      	strh	r3, [r7, #6]
 800c03e:	4603      	mov	r3, r0
 800c040:	80bb      	strh	r3, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	807b      	strh	r3, [r7, #2]
 800c046:	4613      	mov	r3, r2
 800c048:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	
	/* Check correction */
	if (x0 > x1) {
 800c04a:	88fa      	ldrh	r2, [r7, #6]
 800c04c:	887b      	ldrh	r3, [r7, #2]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d905      	bls.n	800c05e <TM_ILI9341_DrawFilledRectangle+0x32>
		tmp = x0;
 800c052:	88fb      	ldrh	r3, [r7, #6]
 800c054:	81fb      	strh	r3, [r7, #14]
		x0 = x1;
 800c056:	887b      	ldrh	r3, [r7, #2]
 800c058:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 800c05a:	89fb      	ldrh	r3, [r7, #14]
 800c05c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800c05e:	88ba      	ldrh	r2, [r7, #4]
 800c060:	883b      	ldrh	r3, [r7, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d905      	bls.n	800c072 <TM_ILI9341_DrawFilledRectangle+0x46>
		tmp = y0;
 800c066:	88bb      	ldrh	r3, [r7, #4]
 800c068:	81fb      	strh	r3, [r7, #14]
		y0 = y1;
 800c06a:	883b      	ldrh	r3, [r7, #0]
 800c06c:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 800c06e:	89fb      	ldrh	r3, [r7, #14]
 800c070:	803b      	strh	r3, [r7, #0]
	}
	
	/* Fill rectangle */
	TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	b29b      	uxth	r3, r3
 800c076:	883c      	ldrh	r4, [r7, #0]
 800c078:	887a      	ldrh	r2, [r7, #2]
 800c07a:	88b9      	ldrh	r1, [r7, #4]
 800c07c:	88f8      	ldrh	r0, [r7, #6]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4623      	mov	r3, r4
 800c082:	f7ff fdfd 	bl	800bc80 <TM_ILI9341_INT_Fill>
	
	/* CS HIGH back */
	ILI9341_CS_SET;
 800c086:	2201      	movs	r2, #1
 800c088:	2104      	movs	r1, #4
 800c08a:	4803      	ldr	r0, [pc, #12]	; (800c098 <TM_ILI9341_DrawFilledRectangle+0x6c>)
 800c08c:	f002 f9c6 	bl	800e41c <HAL_GPIO_WritePin>
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}
 800c098:	40020800 	.word	0x40020800

0800c09c <TM_KEYPAD_Init>:
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
static TM_KEYPAD_Button_t KeyCode = TM_KEYPAD_Button_NOPRESSED;
static uint8_t KeyPressCount = 0;
static uint16_t millis = 0;

void TM_KEYPAD_Init() {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	af00      	add	r7, sp, #0
	
	TM_KEYPAD_INT_SetColumn(0);
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f000 f833 	bl	800c10c <TM_KEYPAD_INT_SetColumn>
}
 800c0a6:	bf00      	nop
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <TM_KEYPAD_GetChar>:

char TM_KEYPAD_GetChar(TM_KEYPAD_Button_t key){
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	71fb      	strb	r3, [r7, #7]
	return KEYPAD_INT_Chars[key];
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	4a03      	ldr	r2, [pc, #12]	; (800c0c8 <TM_KEYPAD_GetChar+0x1c>)
 800c0ba:	5cd3      	ldrb	r3, [r2, r3]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	200001e8 	.word	0x200001e8

0800c0cc <TM_KEYPAD_Read>:

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0

	if(KeyCode != TM_KEYPAD_Button_NOPRESSED && KeypadStatus != TM_KEYPAD_Button_PRESSED){
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <TM_KEYPAD_Read+0x34>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2bff      	cmp	r3, #255	; 0xff
 800c0d6:	d00c      	beq.n	800c0f2 <TM_KEYPAD_Read+0x26>
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <TM_KEYPAD_Read+0x38>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2bfe      	cmp	r3, #254	; 0xfe
 800c0de:	d008      	beq.n	800c0f2 <TM_KEYPAD_Read+0x26>
		millis = 0;
 800c0e0:	4b09      	ldr	r3, [pc, #36]	; (800c108 <TM_KEYPAD_Read+0x3c>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	801a      	strh	r2, [r3, #0]
		KeypadStatus = TM_KEYPAD_Button_PRESSED;
 800c0e6:	4b07      	ldr	r3, [pc, #28]	; (800c104 <TM_KEYPAD_Read+0x38>)
 800c0e8:	22fe      	movs	r2, #254	; 0xfe
 800c0ea:	701a      	strb	r2, [r3, #0]
		return KeyCode;
 800c0ec:	4b04      	ldr	r3, [pc, #16]	; (800c100 <TM_KEYPAD_Read+0x34>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	e000      	b.n	800c0f4 <TM_KEYPAD_Read+0x28>
	}
		return TM_KEYPAD_Button_NOPRESSED;
 800c0f2:	23ff      	movs	r3, #255	; 0xff

}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	200001f9 	.word	0x200001f9
 800c104:	200001f8 	.word	0x200001f8
 800c108:	200023aa 	.word	0x200023aa

0800c10c <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 800c116:	2201      	movs	r2, #1
 800c118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c11c:	481b      	ldr	r0, [pc, #108]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c11e:	f002 f97d 	bl	800e41c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_2_HIGH;
 800c122:	2201      	movs	r2, #1
 800c124:	2120      	movs	r1, #32
 800c126:	4819      	ldr	r0, [pc, #100]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c128:	f002 f978 	bl	800e41c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_3_HIGH;
 800c12c:	2201      	movs	r2, #1
 800c12e:	2140      	movs	r1, #64	; 0x40
 800c130:	4816      	ldr	r0, [pc, #88]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c132:	f002 f973 	bl	800e41c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_4_HIGH;
 800c136:	2201      	movs	r2, #1
 800c138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c13c:	4814      	ldr	r0, [pc, #80]	; (800c190 <TM_KEYPAD_INT_SetColumn+0x84>)
 800c13e:	f002 f96d 	bl	800e41c <HAL_GPIO_WritePin>

	/* Set column low */
	if (column == 1) {
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d104      	bne.n	800c152 <TM_KEYPAD_INT_SetColumn+0x46>
		KEYPAD_COLUMN_1_LOW;
 800c148:	2200      	movs	r2, #0
 800c14a:	2110      	movs	r1, #16
 800c14c:	480f      	ldr	r0, [pc, #60]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c14e:	f002 f965 	bl	800e41c <HAL_GPIO_WritePin>
	}
	if (column == 2) {
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b02      	cmp	r3, #2
 800c156:	d104      	bne.n	800c162 <TM_KEYPAD_INT_SetColumn+0x56>
		KEYPAD_COLUMN_2_LOW;
 800c158:	2200      	movs	r2, #0
 800c15a:	2120      	movs	r1, #32
 800c15c:	480b      	ldr	r0, [pc, #44]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c15e:	f002 f95d 	bl	800e41c <HAL_GPIO_WritePin>
	}
	if (column == 3) {
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	2b03      	cmp	r3, #3
 800c166:	d104      	bne.n	800c172 <TM_KEYPAD_INT_SetColumn+0x66>
		KEYPAD_COLUMN_3_LOW;
 800c168:	2200      	movs	r2, #0
 800c16a:	2140      	movs	r1, #64	; 0x40
 800c16c:	4807      	ldr	r0, [pc, #28]	; (800c18c <TM_KEYPAD_INT_SetColumn+0x80>)
 800c16e:	f002 f955 	bl	800e41c <HAL_GPIO_WritePin>
	}
	if (column == 4) {
 800c172:	79fb      	ldrb	r3, [r7, #7]
 800c174:	2b04      	cmp	r3, #4
 800c176:	d105      	bne.n	800c184 <TM_KEYPAD_INT_SetColumn+0x78>
		KEYPAD_COLUMN_4_LOW;
 800c178:	2200      	movs	r2, #0
 800c17a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c17e:	4804      	ldr	r0, [pc, #16]	; (800c190 <TM_KEYPAD_INT_SetColumn+0x84>)
 800c180:	f002 f94c 	bl	800e41c <HAL_GPIO_WritePin>
	}
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	40021000 	.word	0x40021000
 800c190:	40020800 	.word	0x40020800

0800c194 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c198:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c19a:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <MX_USART1_UART_Init+0x58>)
 800c19c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800c19e:	4b12      	ldr	r3, [pc, #72]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1a0:	f647 2212 	movw	r2, #31250	; 0x7a12
 800c1a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1a6:	4b10      	ldr	r3, [pc, #64]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c1ac:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c1b2:	4b0d      	ldr	r3, [pc, #52]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c1b8:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1ba:	220c      	movs	r2, #12
 800c1bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c1c4:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4806      	ldr	r0, [pc, #24]	; (800c1e8 <MX_USART1_UART_Init+0x54>)
 800c1d0:	f005 fdc8 	bl	8011d64 <HAL_MultiProcessor_Init>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
 800c1da:	2133      	movs	r1, #51	; 0x33
 800c1dc:	4804      	ldr	r0, [pc, #16]	; (800c1f0 <MX_USART1_UART_Init+0x5c>)
 800c1de:	f7fa fe6b 	bl	8006eb8 <_Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c1e2:	bf00      	nop
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200023ac 	.word	0x200023ac
 800c1ec:	40011000 	.word	0x40011000
 800c1f0:	080186d0 	.word	0x080186d0

0800c1f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	; 0x28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1fc:	f107 0314 	add.w	r3, r7, #20
 800c200:	2200      	movs	r2, #0
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	605a      	str	r2, [r3, #4]
 800c206:	609a      	str	r2, [r3, #8]
 800c208:	60da      	str	r2, [r3, #12]
 800c20a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a19      	ldr	r2, [pc, #100]	; (800c278 <HAL_UART_MspInit+0x84>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d12c      	bne.n	800c270 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c216:	2300      	movs	r3, #0
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	4b18      	ldr	r3, [pc, #96]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c21e:	4a17      	ldr	r2, [pc, #92]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c220:	f043 0310 	orr.w	r3, r3, #16
 800c224:	6453      	str	r3, [r2, #68]	; 0x44
 800c226:	4b15      	ldr	r3, [pc, #84]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c22a:	f003 0310 	and.w	r3, r3, #16
 800c22e:	613b      	str	r3, [r7, #16]
 800c230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
 800c236:	4b11      	ldr	r3, [pc, #68]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c23a:	4a10      	ldr	r2, [pc, #64]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c23c:	f043 0301 	orr.w	r3, r3, #1
 800c240:	6313      	str	r3, [r2, #48]	; 0x30
 800c242:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <HAL_UART_MspInit+0x88>)
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800c24e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c254:	2302      	movs	r3, #2
 800c256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c25c:	2303      	movs	r3, #3
 800c25e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c260:	2307      	movs	r3, #7
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c264:	f107 0314 	add.w	r3, r7, #20
 800c268:	4619      	mov	r1, r3
 800c26a:	4805      	ldr	r0, [pc, #20]	; (800c280 <HAL_UART_MspInit+0x8c>)
 800c26c:	f001 ff12 	bl	800e094 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c270:	bf00      	nop
 800c272:	3728      	adds	r7, #40	; 0x28
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40011000 	.word	0x40011000
 800c27c:	40023800 	.word	0x40023800
 800c280:	40020000 	.word	0x40020000

0800c284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800c284:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c2bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c288:	480d      	ldr	r0, [pc, #52]	; (800c2c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c28a:	490e      	ldr	r1, [pc, #56]	; (800c2c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c28c:	4a0e      	ldr	r2, [pc, #56]	; (800c2c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c28e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c290:	e002      	b.n	800c298 <LoopCopyDataInit>

0800c292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c296:	3304      	adds	r3, #4

0800c298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c29a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c29c:	d3f9      	bcc.n	800c292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c29e:	4a0b      	ldr	r2, [pc, #44]	; (800c2cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c2a0:	4c0b      	ldr	r4, [pc, #44]	; (800c2d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800c2a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c2a4:	e001      	b.n	800c2aa <LoopFillZerobss>

0800c2a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c2a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c2a8:	3204      	adds	r2, #4

0800c2aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c2aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c2ac:	d3fb      	bcc.n	800c2a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c2ae:	f7fe ff0f 	bl	800b0d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c2b2:	f00a fb69 	bl	8016988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c2b6:	f7fa fbe9 	bl	8006a8c <main>
  bx  lr    
 800c2ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800c2bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800c2c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c2c4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 800c2c8:	08019dd8 	.word	0x08019dd8
  ldr r2, =_sbss
 800c2cc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800c2d0:	2000321c 	.word	0x2000321c

0800c2d4 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c2d4:	e7fe      	b.n	800c2d4 <BusFault_Handler>
	...

0800c2d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c2dc:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <HAL_Init+0x40>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0d      	ldr	r2, [pc, #52]	; (800c318 <HAL_Init+0x40>)
 800c2e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c2e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c2e8:	4b0b      	ldr	r3, [pc, #44]	; (800c318 <HAL_Init+0x40>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a0a      	ldr	r2, [pc, #40]	; (800c318 <HAL_Init+0x40>)
 800c2ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c2f4:	4b08      	ldr	r3, [pc, #32]	; (800c318 <HAL_Init+0x40>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a07      	ldr	r2, [pc, #28]	; (800c318 <HAL_Init+0x40>)
 800c2fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c300:	2003      	movs	r0, #3
 800c302:	f000 ff91 	bl	800d228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c306:	2000      	movs	r0, #0
 800c308:	f000 f808 	bl	800c31c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c30c:	f7fe fd5e 	bl	800adcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	40023c00 	.word	0x40023c00

0800c31c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c324:	4b12      	ldr	r3, [pc, #72]	; (800c370 <HAL_InitTick+0x54>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	4b12      	ldr	r3, [pc, #72]	; (800c374 <HAL_InitTick+0x58>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	4619      	mov	r1, r3
 800c32e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c332:	fbb3 f3f1 	udiv	r3, r3, r1
 800c336:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 ffb7 	bl	800d2ae <HAL_SYSTICK_Config>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e00e      	b.n	800c368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b0f      	cmp	r3, #15
 800c34e:	d80a      	bhi.n	800c366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c350:	2200      	movs	r2, #0
 800c352:	6879      	ldr	r1, [r7, #4]
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	f000 ff71 	bl	800d23e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c35c:	4a06      	ldr	r2, [pc, #24]	; (800c378 <HAL_InitTick+0x5c>)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	e000      	b.n	800c368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	200001d4 	.word	0x200001d4
 800c374:	20000200 	.word	0x20000200
 800c378:	200001fc 	.word	0x200001fc

0800c37c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c380:	4b06      	ldr	r3, [pc, #24]	; (800c39c <HAL_IncTick+0x20>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <HAL_IncTick+0x24>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4413      	add	r3, r2
 800c38c:	4a04      	ldr	r2, [pc, #16]	; (800c3a0 <HAL_IncTick+0x24>)
 800c38e:	6013      	str	r3, [r2, #0]
}
 800c390:	bf00      	nop
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20000200 	.word	0x20000200
 800c3a0:	200023f0 	.word	0x200023f0

0800c3a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  return uwTick;
 800c3a8:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <HAL_GetTick+0x14>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	200023f0 	.word	0x200023f0

0800c3bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c3c4:	f7ff ffee 	bl	800c3a4 <HAL_GetTick>
 800c3c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d4:	d005      	beq.n	800c3e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <HAL_Delay+0x44>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4413      	add	r3, r2
 800c3e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c3e2:	bf00      	nop
 800c3e4:	f7ff ffde 	bl	800c3a4 <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d8f7      	bhi.n	800c3e4 <HAL_Delay+0x28>
  {
  }
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20000200 	.word	0x20000200

0800c404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e033      	b.n	800c482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7f5 f936 	bl	8001694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43a:	f003 0310 	and.w	r3, r3, #16
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d118      	bne.n	800c474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c44a:	f023 0302 	bic.w	r3, r3, #2
 800c44e:	f043 0202 	orr.w	r2, r3, #2
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fc6a 	bl	800cd30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	f023 0303 	bic.w	r3, r3, #3
 800c46a:	f043 0201 	orr.w	r2, r3, #1
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	641a      	str	r2, [r3, #64]	; 0x40
 800c472:	e001      	b.n	800c478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c480:	7bfb      	ldrb	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d101      	bne.n	800c4a6 <HAL_ADC_Start_IT+0x1a>
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	e0bd      	b.n	800c622 <HAL_ADC_Start_IT+0x196>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d018      	beq.n	800c4ee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0201 	orr.w	r2, r2, #1
 800c4ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c4cc:	4b58      	ldr	r3, [pc, #352]	; (800c630 <HAL_ADC_Start_IT+0x1a4>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a58      	ldr	r2, [pc, #352]	; (800c634 <HAL_ADC_Start_IT+0x1a8>)
 800c4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d6:	0c9a      	lsrs	r2, r3, #18
 800c4d8:	4613      	mov	r3, r2
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	4413      	add	r3, r2
 800c4de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c4e0:	e002      	b.n	800c4e8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f9      	bne.n	800c4e2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	f040 8085 	bne.w	800c608 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c502:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c524:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c528:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c53c:	d106      	bne.n	800c54c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c542:	f023 0206 	bic.w	r2, r3, #6
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	645a      	str	r2, [r3, #68]	; 0x44
 800c54a:	e002      	b.n	800c552 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c55a:	4b37      	ldr	r3, [pc, #220]	; (800c638 <HAL_ADC_Start_IT+0x1ac>)
 800c55c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c566:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6812      	ldr	r2, [r2, #0]
 800c572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c576:	f043 0320 	orr.w	r3, r3, #32
 800c57a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f003 031f 	and.w	r3, r3, #31
 800c584:	2b00      	cmp	r3, #0
 800c586:	d12a      	bne.n	800c5de <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a2b      	ldr	r2, [pc, #172]	; (800c63c <HAL_ADC_Start_IT+0x1b0>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d015      	beq.n	800c5be <HAL_ADC_Start_IT+0x132>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a2a      	ldr	r2, [pc, #168]	; (800c640 <HAL_ADC_Start_IT+0x1b4>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d105      	bne.n	800c5a8 <HAL_ADC_Start_IT+0x11c>
 800c59c:	4b26      	ldr	r3, [pc, #152]	; (800c638 <HAL_ADC_Start_IT+0x1ac>)
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	f003 031f 	and.w	r3, r3, #31
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00a      	beq.n	800c5be <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a25      	ldr	r2, [pc, #148]	; (800c644 <HAL_ADC_Start_IT+0x1b8>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d136      	bne.n	800c620 <HAL_ADC_Start_IT+0x194>
 800c5b2:	4b21      	ldr	r3, [pc, #132]	; (800c638 <HAL_ADC_Start_IT+0x1ac>)
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f003 0310 	and.w	r3, r3, #16
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d130      	bne.n	800c620 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d129      	bne.n	800c620 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	689a      	ldr	r2, [r3, #8]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c5da:	609a      	str	r2, [r3, #8]
 800c5dc:	e020      	b.n	800c620 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a16      	ldr	r2, [pc, #88]	; (800c63c <HAL_ADC_Start_IT+0x1b0>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d11b      	bne.n	800c620 <HAL_ADC_Start_IT+0x194>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d114      	bne.n	800c620 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689a      	ldr	r2, [r3, #8]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c604:	609a      	str	r2, [r3, #8]
 800c606:	e00b      	b.n	800c620 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	f043 0210 	orr.w	r2, r3, #16
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	200001d4 	.word	0x200001d4
 800c634:	431bde83 	.word	0x431bde83
 800c638:	40012300 	.word	0x40012300
 800c63c:	40012000 	.word	0x40012000
 800c640:	40012100 	.word	0x40012100
 800c644:	40012200 	.word	0x40012200

0800c648 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	2300      	movs	r3, #0
 800c656:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f003 0320 	and.w	r3, r3, #32
 800c676:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d049      	beq.n	800c712 <HAL_ADC_IRQHandler+0xca>
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d046      	beq.n	800c712 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d105      	bne.n	800c69c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d12b      	bne.n	800c702 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d127      	bne.n	800c702 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d006      	beq.n	800c6ce <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d119      	bne.n	800c702 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	685a      	ldr	r2, [r3, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0220 	bic.w	r2, r2, #32
 800c6dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	f043 0201 	orr.w	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f4 fe94 	bl	8001430 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f06f 0212 	mvn.w	r2, #18
 800c710:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c720:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d057      	beq.n	800c7d8 <HAL_ADC_IRQHandler+0x190>
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d054      	beq.n	800c7d8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	f003 0310 	and.w	r3, r3, #16
 800c736:	2b00      	cmp	r3, #0
 800c738:	d105      	bne.n	800c746 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d139      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d006      	beq.n	800c770 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d12b      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d124      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d11d      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c790:	2b00      	cmp	r3, #0
 800c792:	d119      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	685a      	ldr	r2, [r3, #4]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d105      	bne.n	800c7c8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c0:	f043 0201 	orr.w	r2, r3, #1
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fc2f 	bl	800d02c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f06f 020c 	mvn.w	r2, #12
 800c7d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d017      	beq.n	800c81e <HAL_ADC_IRQHandler+0x1d6>
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d014      	beq.n	800c81e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 0301 	and.w	r3, r3, #1
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d10d      	bne.n	800c81e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f951 	bl	800cab6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f06f 0201 	mvn.w	r2, #1
 800c81c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c82c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d015      	beq.n	800c860 <HAL_ADC_IRQHandler+0x218>
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d012      	beq.n	800c860 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c83e:	f043 0202 	orr.w	r2, r3, #2
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f06f 0220 	mvn.w	r2, #32
 800c84e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7f4 fdd7 	bl	8001404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f06f 0220 	mvn.w	r2, #32
 800c85e:	601a      	str	r2, [r3, #0]
  }
}
 800c860:	bf00      	nop
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_ADC_Start_DMA+0x1e>
 800c882:	2302      	movs	r3, #2
 800c884:	e0e9      	b.n	800ca5a <HAL_ADC_Start_DMA+0x1f2>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d018      	beq.n	800c8ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	689a      	ldr	r2, [r3, #8]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f042 0201 	orr.w	r2, r2, #1
 800c8aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c8ac:	4b6d      	ldr	r3, [pc, #436]	; (800ca64 <HAL_ADC_Start_DMA+0x1fc>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a6d      	ldr	r2, [pc, #436]	; (800ca68 <HAL_ADC_Start_DMA+0x200>)
 800c8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b6:	0c9a      	lsrs	r2, r3, #18
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	4413      	add	r3, r2
 800c8be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c8c0:	e002      	b.n	800c8c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1f9      	bne.n	800c8c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8dc:	d107      	bne.n	800c8ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	689a      	ldr	r2, [r3, #8]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	f040 80a1 	bne.w	800ca40 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c906:	f023 0301 	bic.w	r3, r3, #1
 800c90a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d007      	beq.n	800c930 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c93c:	d106      	bne.n	800c94c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c942:	f023 0206 	bic.w	r2, r3, #6
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	645a      	str	r2, [r3, #68]	; 0x44
 800c94a:	e002      	b.n	800c952 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c95a:	4b44      	ldr	r3, [pc, #272]	; (800ca6c <HAL_ADC_Start_DMA+0x204>)
 800c95c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	4a43      	ldr	r2, [pc, #268]	; (800ca70 <HAL_ADC_Start_DMA+0x208>)
 800c964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	4a42      	ldr	r2, [pc, #264]	; (800ca74 <HAL_ADC_Start_DMA+0x20c>)
 800c96c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	4a41      	ldr	r2, [pc, #260]	; (800ca78 <HAL_ADC_Start_DMA+0x210>)
 800c974:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c97e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c98e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c99e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	334c      	adds	r3, #76	; 0x4c
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f001 f83e 	bl	800da30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f003 031f 	and.w	r3, r3, #31
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d12a      	bne.n	800ca16 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a2d      	ldr	r2, [pc, #180]	; (800ca7c <HAL_ADC_Start_DMA+0x214>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d015      	beq.n	800c9f6 <HAL_ADC_Start_DMA+0x18e>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a2c      	ldr	r2, [pc, #176]	; (800ca80 <HAL_ADC_Start_DMA+0x218>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d105      	bne.n	800c9e0 <HAL_ADC_Start_DMA+0x178>
 800c9d4:	4b25      	ldr	r3, [pc, #148]	; (800ca6c <HAL_ADC_Start_DMA+0x204>)
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	f003 031f 	and.w	r3, r3, #31
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00a      	beq.n	800c9f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a27      	ldr	r2, [pc, #156]	; (800ca84 <HAL_ADC_Start_DMA+0x21c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d136      	bne.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
 800c9ea:	4b20      	ldr	r3, [pc, #128]	; (800ca6c <HAL_ADC_Start_DMA+0x204>)
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f003 0310 	and.w	r3, r3, #16
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d130      	bne.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d129      	bne.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ca12:	609a      	str	r2, [r3, #8]
 800ca14:	e020      	b.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a18      	ldr	r2, [pc, #96]	; (800ca7c <HAL_ADC_Start_DMA+0x214>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d11b      	bne.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d114      	bne.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ca3c:	609a      	str	r2, [r3, #8]
 800ca3e:	e00b      	b.n	800ca58 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	f043 0210 	orr.w	r2, r3, #16
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca50:	f043 0201 	orr.w	r2, r3, #1
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	200001d4 	.word	0x200001d4
 800ca68:	431bde83 	.word	0x431bde83
 800ca6c:	40012300 	.word	0x40012300
 800ca70:	0800cf29 	.word	0x0800cf29
 800ca74:	0800cfe3 	.word	0x0800cfe3
 800ca78:	0800cfff 	.word	0x0800cfff
 800ca7c:	40012000 	.word	0x40012000
 800ca80:	40012100 	.word	0x40012100
 800ca84:	40012200 	.word	0x40012200

0800ca88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800caaa:	bf00      	nop
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b083      	sub	sp, #12
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
	...

0800cacc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d101      	bne.n	800cae8 <HAL_ADC_ConfigChannel+0x1c>
 800cae4:	2302      	movs	r3, #2
 800cae6:	e113      	b.n	800cd10 <HAL_ADC_ConfigChannel+0x244>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d925      	bls.n	800cb44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68d9      	ldr	r1, [r3, #12]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3b1e      	subs	r3, #30
 800cb0e:	2207      	movs	r2, #7
 800cb10:	fa02 f303 	lsl.w	r3, r2, r3
 800cb14:	43da      	mvns	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	400a      	ands	r2, r1
 800cb1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68d9      	ldr	r1, [r3, #12]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4618      	mov	r0, r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	4403      	add	r3, r0
 800cb36:	3b1e      	subs	r3, #30
 800cb38:	409a      	lsls	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	60da      	str	r2, [r3, #12]
 800cb42:	e022      	b.n	800cb8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6919      	ldr	r1, [r3, #16]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	2207      	movs	r2, #7
 800cb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5e:	43da      	mvns	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	400a      	ands	r2, r1
 800cb66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6919      	ldr	r1, [r3, #16]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	4618      	mov	r0, r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4403      	add	r3, r0
 800cb80:	409a      	lsls	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	2b06      	cmp	r3, #6
 800cb90:	d824      	bhi.n	800cbdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	3b05      	subs	r3, #5
 800cba4:	221f      	movs	r2, #31
 800cba6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbaa:	43da      	mvns	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	400a      	ands	r2, r1
 800cbb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	3b05      	subs	r3, #5
 800cbce:	fa00 f203 	lsl.w	r2, r0, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	635a      	str	r2, [r3, #52]	; 0x34
 800cbda:	e04c      	b.n	800cc76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	2b0c      	cmp	r3, #12
 800cbe2:	d824      	bhi.n	800cc2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	3b23      	subs	r3, #35	; 0x23
 800cbf6:	221f      	movs	r2, #31
 800cbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfc:	43da      	mvns	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	400a      	ands	r2, r1
 800cc04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	4618      	mov	r0, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	3b23      	subs	r3, #35	; 0x23
 800cc20:	fa00 f203 	lsl.w	r2, r0, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc2c:	e023      	b.n	800cc76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3b41      	subs	r3, #65	; 0x41
 800cc40:	221f      	movs	r2, #31
 800cc42:	fa02 f303 	lsl.w	r3, r2, r3
 800cc46:	43da      	mvns	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	3b41      	subs	r3, #65	; 0x41
 800cc6a:	fa00 f203 	lsl.w	r2, r0, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cc76:	4b29      	ldr	r3, [pc, #164]	; (800cd1c <HAL_ADC_ConfigChannel+0x250>)
 800cc78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a28      	ldr	r2, [pc, #160]	; (800cd20 <HAL_ADC_ConfigChannel+0x254>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d10f      	bne.n	800cca4 <HAL_ADC_ConfigChannel+0x1d8>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b12      	cmp	r3, #18
 800cc8a:	d10b      	bne.n	800cca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a1d      	ldr	r2, [pc, #116]	; (800cd20 <HAL_ADC_ConfigChannel+0x254>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d12b      	bne.n	800cd06 <HAL_ADC_ConfigChannel+0x23a>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a1c      	ldr	r2, [pc, #112]	; (800cd24 <HAL_ADC_ConfigChannel+0x258>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <HAL_ADC_ConfigChannel+0x1f4>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b11      	cmp	r3, #17
 800ccbe:	d122      	bne.n	800cd06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a11      	ldr	r2, [pc, #68]	; (800cd24 <HAL_ADC_ConfigChannel+0x258>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d111      	bne.n	800cd06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800cce2:	4b11      	ldr	r3, [pc, #68]	; (800cd28 <HAL_ADC_ConfigChannel+0x25c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a11      	ldr	r2, [pc, #68]	; (800cd2c <HAL_ADC_ConfigChannel+0x260>)
 800cce8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccec:	0c9a      	lsrs	r2, r3, #18
 800ccee:	4613      	mov	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ccf8:	e002      	b.n	800cd00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1f9      	bne.n	800ccfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	40012300 	.word	0x40012300
 800cd20:	40012000 	.word	0x40012000
 800cd24:	10000012 	.word	0x10000012
 800cd28:	200001d4 	.word	0x200001d4
 800cd2c:	431bde83 	.word	0x431bde83

0800cd30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cd38:	4b79      	ldr	r3, [pc, #484]	; (800cf20 <ADC_Init+0x1f0>)
 800cd3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	431a      	orrs	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6859      	ldr	r1, [r3, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	021a      	lsls	r2, r3, #8
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800cd88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6859      	ldr	r1, [r3, #4]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	689a      	ldr	r2, [r3, #8]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689a      	ldr	r2, [r3, #8]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6899      	ldr	r1, [r3, #8]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68da      	ldr	r2, [r3, #12]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc2:	4a58      	ldr	r2, [pc, #352]	; (800cf24 <ADC_Init+0x1f4>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d022      	beq.n	800ce0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cdd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6899      	ldr	r1, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	430a      	orrs	r2, r1
 800cde8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	689a      	ldr	r2, [r3, #8]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cdf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6899      	ldr	r1, [r3, #8]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	430a      	orrs	r2, r1
 800ce0a:	609a      	str	r2, [r3, #8]
 800ce0c:	e00f      	b.n	800ce2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ce1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ce2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 0202 	bic.w	r2, r2, #2
 800ce3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6899      	ldr	r1, [r3, #8]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	7e1b      	ldrb	r3, [r3, #24]
 800ce48:	005a      	lsls	r2, r3, #1
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	430a      	orrs	r2, r1
 800ce50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01b      	beq.n	800ce94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ce7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6859      	ldr	r1, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	3b01      	subs	r3, #1
 800ce88:	035a      	lsls	r2, r3, #13
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	605a      	str	r2, [r3, #4]
 800ce92:	e007      	b.n	800cea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ceb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	69db      	ldr	r3, [r3, #28]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	051a      	lsls	r2, r3, #20
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	430a      	orrs	r2, r1
 800cec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	689a      	ldr	r2, [r3, #8]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ced8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6899      	ldr	r1, [r3, #8]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cee6:	025a      	lsls	r2, r3, #9
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cefe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6899      	ldr	r1, [r3, #8]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	029a      	lsls	r2, r3, #10
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	609a      	str	r2, [r3, #8]
}
 800cf14:	bf00      	nop
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	40012300 	.word	0x40012300
 800cf24:	0f000001 	.word	0x0f000001

0800cf28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d13c      	bne.n	800cfbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d12b      	bne.n	800cfb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d127      	bne.n	800cfb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d006      	beq.n	800cf80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d119      	bne.n	800cfb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 0220 	bic.w	r2, r2, #32
 800cf8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d105      	bne.n	800cfb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	f043 0201 	orr.w	r2, r3, #1
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7f4 fa3b 	bl	8001430 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800cfba:	e00e      	b.n	800cfda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc0:	f003 0310 	and.w	r3, r3, #16
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f7f4 fa1b 	bl	8001404 <HAL_ADC_ErrorCallback>
}
 800cfce:	e004      	b.n	800cfda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	4798      	blx	r3
}
 800cfda:	bf00      	nop
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff fd56 	bl	800caa2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cff6:	bf00      	nop
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b084      	sub	sp, #16
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2240      	movs	r2, #64	; 0x40
 800d010:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d016:	f043 0204 	orr.w	r2, r3, #4
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7f4 f9f0 	bl	8001404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d050:	4b0c      	ldr	r3, [pc, #48]	; (800d084 <__NVIC_SetPriorityGrouping+0x44>)
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d05c:	4013      	ands	r3, r2
 800d05e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d06c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d072:	4a04      	ldr	r2, [pc, #16]	; (800d084 <__NVIC_SetPriorityGrouping+0x44>)
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	60d3      	str	r3, [r2, #12]
}
 800d078:	bf00      	nop
 800d07a:	3714      	adds	r7, #20
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	e000ed00 	.word	0xe000ed00

0800d088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d088:	b480      	push	{r7}
 800d08a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <__NVIC_GetPriorityGrouping+0x18>)
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	0a1b      	lsrs	r3, r3, #8
 800d092:	f003 0307 	and.w	r3, r3, #7
}
 800d096:	4618      	mov	r0, r3
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	e000ed00 	.word	0xe000ed00

0800d0a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	db0b      	blt.n	800d0ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	f003 021f 	and.w	r2, r3, #31
 800d0bc:	4907      	ldr	r1, [pc, #28]	; (800d0dc <__NVIC_EnableIRQ+0x38>)
 800d0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0c2:	095b      	lsrs	r3, r3, #5
 800d0c4:	2001      	movs	r0, #1
 800d0c6:	fa00 f202 	lsl.w	r2, r0, r2
 800d0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	e000e100 	.word	0xe000e100

0800d0e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	db12      	blt.n	800d118 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	f003 021f 	and.w	r2, r3, #31
 800d0f8:	490a      	ldr	r1, [pc, #40]	; (800d124 <__NVIC_DisableIRQ+0x44>)
 800d0fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0fe:	095b      	lsrs	r3, r3, #5
 800d100:	2001      	movs	r0, #1
 800d102:	fa00 f202 	lsl.w	r2, r0, r2
 800d106:	3320      	adds	r3, #32
 800d108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d10c:	f3bf 8f4f 	dsb	sy
}
 800d110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d112:	f3bf 8f6f 	isb	sy
}
 800d116:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	e000e100 	.word	0xe000e100

0800d128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	6039      	str	r1, [r7, #0]
 800d132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	db0a      	blt.n	800d152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	490c      	ldr	r1, [pc, #48]	; (800d174 <__NVIC_SetPriority+0x4c>)
 800d142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d146:	0112      	lsls	r2, r2, #4
 800d148:	b2d2      	uxtb	r2, r2
 800d14a:	440b      	add	r3, r1
 800d14c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d150:	e00a      	b.n	800d168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	b2da      	uxtb	r2, r3
 800d156:	4908      	ldr	r1, [pc, #32]	; (800d178 <__NVIC_SetPriority+0x50>)
 800d158:	79fb      	ldrb	r3, [r7, #7]
 800d15a:	f003 030f 	and.w	r3, r3, #15
 800d15e:	3b04      	subs	r3, #4
 800d160:	0112      	lsls	r2, r2, #4
 800d162:	b2d2      	uxtb	r2, r2
 800d164:	440b      	add	r3, r1
 800d166:	761a      	strb	r2, [r3, #24]
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	e000e100 	.word	0xe000e100
 800d178:	e000ed00 	.word	0xe000ed00

0800d17c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b089      	sub	sp, #36	; 0x24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f003 0307 	and.w	r3, r3, #7
 800d18e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	f1c3 0307 	rsb	r3, r3, #7
 800d196:	2b04      	cmp	r3, #4
 800d198:	bf28      	it	cs
 800d19a:	2304      	movcs	r3, #4
 800d19c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	2b06      	cmp	r3, #6
 800d1a4:	d902      	bls.n	800d1ac <NVIC_EncodePriority+0x30>
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	3b03      	subs	r3, #3
 800d1aa:	e000      	b.n	800d1ae <NVIC_EncodePriority+0x32>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ba:	43da      	mvns	r2, r3
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	401a      	ands	r2, r3
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d1c4:	f04f 31ff 	mov.w	r1, #4294967295
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ce:	43d9      	mvns	r1, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1d4:	4313      	orrs	r3, r2
         );
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3724      	adds	r7, #36	; 0x24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
	...

0800d1e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d1f4:	d301      	bcc.n	800d1fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e00f      	b.n	800d21a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d1fa:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <SysTick_Config+0x40>)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3b01      	subs	r3, #1
 800d200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d202:	210f      	movs	r1, #15
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	f7ff ff8e 	bl	800d128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <SysTick_Config+0x40>)
 800d20e:	2200      	movs	r2, #0
 800d210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d212:	4b04      	ldr	r3, [pc, #16]	; (800d224 <SysTick_Config+0x40>)
 800d214:	2207      	movs	r2, #7
 800d216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	e000e010 	.word	0xe000e010

0800d228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff ff05 	bl	800d040 <__NVIC_SetPriorityGrouping>
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d23e:	b580      	push	{r7, lr}
 800d240:	b086      	sub	sp, #24
 800d242:	af00      	add	r7, sp, #0
 800d244:	4603      	mov	r3, r0
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	607a      	str	r2, [r7, #4]
 800d24a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d250:	f7ff ff1a 	bl	800d088 <__NVIC_GetPriorityGrouping>
 800d254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f7ff ff8e 	bl	800d17c <NVIC_EncodePriority>
 800d260:	4602      	mov	r2, r0
 800d262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff ff5d 	bl	800d128 <__NVIC_SetPriority>
}
 800d26e:	bf00      	nop
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	4603      	mov	r3, r0
 800d27e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff ff0d 	bl	800d0a4 <__NVIC_EnableIRQ>
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	4603      	mov	r3, r0
 800d29a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff ff1d 	bl	800d0e0 <__NVIC_DisableIRQ>
}
 800d2a6:	bf00      	nop
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff ff94 	bl	800d1e4 <SysTick_Config>
 800d2bc:	4603      	mov	r3, r0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b04      	cmp	r3, #4
 800d2d4:	d106      	bne.n	800d2e4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800d2d6:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a08      	ldr	r2, [pc, #32]	; (800d2fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800d2dc:	f043 0304 	orr.w	r3, r3, #4
 800d2e0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800d2e2:	e005      	b.n	800d2f0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a04      	ldr	r2, [pc, #16]	; (800d2fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800d2ea:	f023 0304 	bic.w	r3, r3, #4
 800d2ee:	6013      	str	r3, [r2, #0]
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	e000e010 	.word	0xe000e010

0800d300 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e014      	b.n	800d33c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	791b      	ldrb	r3, [r3, #4]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7f4 fe06 	bl	8001f34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2202      	movs	r2, #2
 800d32c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	795b      	ldrb	r3, [r3, #5]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <HAL_DAC_Start+0x16>
 800d356:	2302      	movs	r3, #2
 800d358:	e040      	b.n	800d3dc <HAL_DAC_Start+0x98>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2201      	movs	r2, #1
 800d35e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2202      	movs	r2, #2
 800d364:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	f003 0310 	and.w	r3, r3, #16
 800d372:	2201      	movs	r2, #1
 800d374:	409a      	lsls	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10f      	bne.n	800d3a4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d38e:	2b3c      	cmp	r3, #60	; 0x3c
 800d390:	d11d      	bne.n	800d3ce <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0201 	orr.w	r2, r2, #1
 800d3a0:	605a      	str	r2, [r3, #4]
 800d3a2:	e014      	b.n	800d3ce <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	f003 0310 	and.w	r3, r3, #16
 800d3b4:	213c      	movs	r1, #60	; 0x3c
 800d3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d107      	bne.n	800d3ce <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f042 0202 	orr.w	r2, r2, #2
 800d3cc:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6819      	ldr	r1, [r3, #0]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f003 0310 	and.w	r3, r3, #16
 800d3fe:	2201      	movs	r2, #1
 800d400:	fa02 f303 	lsl.w	r3, r2, r3
 800d404:	43da      	mvns	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	400a      	ands	r2, r1
 800d40c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800d436:	2300      	movs	r3, #0
 800d438:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	795b      	ldrb	r3, [r3, #5]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d101      	bne.n	800d446 <HAL_DAC_Start_DMA+0x22>
 800d442:	2302      	movs	r3, #2
 800d444:	e0ab      	b.n	800d59e <HAL_DAC_Start_DMA+0x17a>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2201      	movs	r2, #1
 800d44a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2202      	movs	r2, #2
 800d450:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d12f      	bne.n	800d4b8 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	4a52      	ldr	r2, [pc, #328]	; (800d5a8 <HAL_DAC_Start_DMA+0x184>)
 800d45e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	4a51      	ldr	r2, [pc, #324]	; (800d5ac <HAL_DAC_Start_DMA+0x188>)
 800d466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	4a50      	ldr	r2, [pc, #320]	; (800d5b0 <HAL_DAC_Start_DMA+0x18c>)
 800d46e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d47e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800d480:	6a3b      	ldr	r3, [r7, #32]
 800d482:	2b08      	cmp	r3, #8
 800d484:	d013      	beq.n	800d4ae <HAL_DAC_Start_DMA+0x8a>
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	2b08      	cmp	r3, #8
 800d48a:	d845      	bhi.n	800d518 <HAL_DAC_Start_DMA+0xf4>
 800d48c:	6a3b      	ldr	r3, [r7, #32]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <HAL_DAC_Start_DMA+0x76>
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	2b04      	cmp	r3, #4
 800d496:	d005      	beq.n	800d4a4 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800d498:	e03e      	b.n	800d518 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3308      	adds	r3, #8
 800d4a0:	613b      	str	r3, [r7, #16]
        break;
 800d4a2:	e03c      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	613b      	str	r3, [r7, #16]
        break;
 800d4ac:	e037      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	613b      	str	r3, [r7, #16]
        break;
 800d4b6:	e032      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	4a3d      	ldr	r2, [pc, #244]	; (800d5b4 <HAL_DAC_Start_DMA+0x190>)
 800d4be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	4a3c      	ldr	r2, [pc, #240]	; (800d5b8 <HAL_DAC_Start_DMA+0x194>)
 800d4c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	4a3b      	ldr	r2, [pc, #236]	; (800d5bc <HAL_DAC_Start_DMA+0x198>)
 800d4ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d4de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d013      	beq.n	800d50e <HAL_DAC_Start_DMA+0xea>
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	2b08      	cmp	r3, #8
 800d4ea:	d817      	bhi.n	800d51c <HAL_DAC_Start_DMA+0xf8>
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <HAL_DAC_Start_DMA+0xd6>
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	2b04      	cmp	r3, #4
 800d4f6:	d005      	beq.n	800d504 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800d4f8:	e010      	b.n	800d51c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3314      	adds	r3, #20
 800d500:	613b      	str	r3, [r7, #16]
        break;
 800d502:	e00c      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	3318      	adds	r3, #24
 800d50a:	613b      	str	r3, [r7, #16]
        break;
 800d50c:	e007      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	331c      	adds	r3, #28
 800d514:	613b      	str	r3, [r7, #16]
        break;
 800d516:	e002      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        break;
 800d518:	bf00      	nop
 800d51a:	e000      	b.n	800d51e <HAL_DAC_Start_DMA+0xfa>
        break;
 800d51c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d111      	bne.n	800d548 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d532:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6898      	ldr	r0, [r3, #8]
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	f000 fa77 	bl	800da30 <HAL_DMA_Start_IT>
 800d542:	4603      	mov	r3, r0
 800d544:	75fb      	strb	r3, [r7, #23]
 800d546:	e010      	b.n	800d56a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800d556:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	68d8      	ldr	r0, [r3, #12]
 800d55c:	6879      	ldr	r1, [r7, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	f000 fa65 	bl	800da30 <HAL_DMA_Start_IT>
 800d566:	4603      	mov	r3, r0
 800d568:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800d570:	7dfb      	ldrb	r3, [r7, #23]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10c      	bne.n	800d590 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6819      	ldr	r1, [r3, #0]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f003 0310 	and.w	r3, r3, #16
 800d582:	2201      	movs	r2, #1
 800d584:	409a      	lsls	r2, r3
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	e005      	b.n	800d59c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	f043 0204 	orr.w	r2, r3, #4
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0800d72b 	.word	0x0800d72b
 800d5ac:	0800d74d 	.word	0x0800d74d
 800d5b0:	0800d769 	.word	0x0800d769
 800d5b4:	0800d7ab 	.word	0x0800d7ab
 800d5b8:	0800d7cd 	.word	0x0800d7cd
 800d5bc:	0800d7e9 	.word	0x0800d7e9

0800d5c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6819      	ldr	r1, [r3, #0]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	f003 0310 	and.w	r3, r3, #16
 800d5d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d5da:	fa02 f303 	lsl.w	r3, r2, r3
 800d5de:	43da      	mvns	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	400a      	ands	r2, r1
 800d5e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6819      	ldr	r1, [r3, #0]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	f003 0310 	and.w	r3, r3, #16
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	43da      	mvns	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	400a      	ands	r2, r1
 800d602:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10d      	bne.n	800d626 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fa66 	bl	800dae0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e00c      	b.n	800d640 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fa58 	bl	800dae0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800d63e:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	795b      	ldrb	r3, [r3, #5]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d101      	bne.n	800d6a4 <HAL_DAC_ConfigChannel+0x18>
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	e03c      	b.n	800d71e <HAL_DAC_ConfigChannel+0x92>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f003 0310 	and.w	r3, r3, #16
 800d6be:	f640 72fe 	movw	r2, #4094	; 0xffe
 800d6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c6:	43db      	mvns	r3, r3
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f003 0310 	and.w	r3, r3, #16
 800d6e0:	693a      	ldr	r2, [r7, #16]
 800d6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6819      	ldr	r1, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f003 0310 	and.w	r3, r3, #16
 800d700:	22c0      	movs	r2, #192	; 0xc0
 800d702:	fa02 f303 	lsl.w	r3, r2, r3
 800d706:	43da      	mvns	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	400a      	ands	r2, r1
 800d70e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d736:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff ff89 	bl	800d650 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	711a      	strb	r2, [r3, #4]
}
 800d744:	bf00      	nop
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d758:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7ff ff82 	bl	800d664 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800d760:	bf00      	nop
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f043 0204 	orr.w	r2, r3, #4
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff ff78 	bl	800d678 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	711a      	strb	r2, [r3, #4]
}
 800d78e:	bf00      	nop
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800d796:	b480      	push	{r7}
 800d798:	b083      	sub	sp, #12
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7f9 fb83 	bl	8006ec4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	711a      	strb	r2, [r3, #4]
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7f9 fb86 	bl	8006eec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800d7e0:	bf00      	nop
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	f043 0204 	orr.w	r2, r3, #4
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f7ff ffc7 	bl	800d796 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	711a      	strb	r2, [r3, #4]
}
 800d80e:	bf00      	nop
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d824:	f7fe fdbe 	bl	800c3a4 <HAL_GetTick>
 800d828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	e099      	b.n	800d968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f022 0201 	bic.w	r2, r2, #1
 800d852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d854:	e00f      	b.n	800d876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d856:	f7fe fda5 	bl	800c3a4 <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	2b05      	cmp	r3, #5
 800d862:	d908      	bls.n	800d876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2220      	movs	r2, #32
 800d868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2203      	movs	r2, #3
 800d86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d872:	2303      	movs	r3, #3
 800d874:	e078      	b.n	800d968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1e8      	bne.n	800d856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	4b38      	ldr	r3, [pc, #224]	; (800d970 <HAL_DMA_Init+0x158>)
 800d890:	4013      	ands	r3, r2
 800d892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685a      	ldr	r2, [r3, #4]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d8a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d8ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d8ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	d107      	bne.n	800d8e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f023 0307 	bic.w	r3, r3, #7
 800d8f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d906:	2b04      	cmp	r3, #4
 800d908:	d117      	bne.n	800d93a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	4313      	orrs	r3, r2
 800d912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00e      	beq.n	800d93a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 fb3d 	bl	800df9c <DMA_CheckFifoParam>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d008      	beq.n	800d93a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2240      	movs	r2, #64	; 0x40
 800d92c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800d936:	2301      	movs	r3, #1
 800d938:	e016      	b.n	800d968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 faf4 	bl	800df30 <DMA_CalcBaseAndBitshift>
 800d948:	4603      	mov	r3, r0
 800d94a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d950:	223f      	movs	r2, #63	; 0x3f
 800d952:	409a      	lsls	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3718      	adds	r7, #24
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	f010803f 	.word	0xf010803f

0800d974 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e050      	b.n	800da28 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d101      	bne.n	800d996 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800d992:	2302      	movs	r3, #2
 800d994:	e048      	b.n	800da28 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f022 0201 	bic.w	r2, r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2221      	movs	r2, #33	; 0x21
 800d9d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 faaa 	bl	800df30 <DMA_CalcBaseAndBitshift>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da08:	223f      	movs	r2, #63	; 0x3f
 800da0a:	409a      	lsls	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d101      	bne.n	800da56 <HAL_DMA_Start_IT+0x26>
 800da52:	2302      	movs	r3, #2
 800da54:	e040      	b.n	800dad8 <HAL_DMA_Start_IT+0xa8>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b01      	cmp	r3, #1
 800da68:	d12f      	bne.n	800daca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2202      	movs	r2, #2
 800da6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2200      	movs	r2, #0
 800da76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 fa28 	bl	800ded4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da88:	223f      	movs	r2, #63	; 0x3f
 800da8a:	409a      	lsls	r2, r3
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f042 0216 	orr.w	r2, r2, #22
 800da9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d007      	beq.n	800dab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f042 0208 	orr.w	r2, r2, #8
 800dab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f042 0201 	orr.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	e005      	b.n	800dad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800dad2:	2302      	movs	r3, #2
 800dad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800daee:	f7fe fc59 	bl	800c3a4 <HAL_GetTick>
 800daf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d008      	beq.n	800db12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2280      	movs	r2, #128	; 0x80
 800db04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	e052      	b.n	800dbb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f022 0216 	bic.w	r2, r2, #22
 800db20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	695a      	ldr	r2, [r3, #20]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db36:	2b00      	cmp	r3, #0
 800db38:	d103      	bne.n	800db42 <HAL_DMA_Abort+0x62>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d007      	beq.n	800db52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f022 0208 	bic.w	r2, r2, #8
 800db50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f022 0201 	bic.w	r2, r2, #1
 800db60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db62:	e013      	b.n	800db8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800db64:	f7fe fc1e 	bl	800c3a4 <HAL_GetTick>
 800db68:	4602      	mov	r2, r0
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	2b05      	cmp	r3, #5
 800db70:	d90c      	bls.n	800db8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2203      	movs	r2, #3
 800db7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	e015      	b.n	800dbb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1e4      	bne.n	800db64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db9e:	223f      	movs	r2, #63	; 0x3f
 800dba0:	409a      	lsls	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800dbcc:	4b8e      	ldr	r3, [pc, #568]	; (800de08 <HAL_DMA_IRQHandler+0x248>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a8e      	ldr	r2, [pc, #568]	; (800de0c <HAL_DMA_IRQHandler+0x24c>)
 800dbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd6:	0a9b      	lsrs	r3, r3, #10
 800dbd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbea:	2208      	movs	r2, #8
 800dbec:	409a      	lsls	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d01a      	beq.n	800dc2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f003 0304 	and.w	r3, r3, #4
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d013      	beq.n	800dc2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f022 0204 	bic.w	r2, r2, #4
 800dc12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc18:	2208      	movs	r2, #8
 800dc1a:	409a      	lsls	r2, r3
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc24:	f043 0201 	orr.w	r2, r3, #1
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc30:	2201      	movs	r2, #1
 800dc32:	409a      	lsls	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4013      	ands	r3, r2
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d012      	beq.n	800dc62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00b      	beq.n	800dc62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc4e:	2201      	movs	r2, #1
 800dc50:	409a      	lsls	r2, r3
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5a:	f043 0202 	orr.w	r2, r3, #2
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc66:	2204      	movs	r2, #4
 800dc68:	409a      	lsls	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d012      	beq.n	800dc98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc84:	2204      	movs	r2, #4
 800dc86:	409a      	lsls	r2, r3
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc90:	f043 0204 	orr.w	r2, r3, #4
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc9c:	2210      	movs	r2, #16
 800dc9e:	409a      	lsls	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4013      	ands	r3, r2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d043      	beq.n	800dd30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 0308 	and.w	r3, r3, #8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d03c      	beq.n	800dd30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcba:	2210      	movs	r2, #16
 800dcbc:	409a      	lsls	r2, r3
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d018      	beq.n	800dd02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d024      	beq.n	800dd30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	4798      	blx	r3
 800dcee:	e01f      	b.n	800dd30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d01b      	beq.n	800dd30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	4798      	blx	r3
 800dd00:	e016      	b.n	800dd30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d107      	bne.n	800dd20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0208 	bic.w	r2, r2, #8
 800dd1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d003      	beq.n	800dd30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd34:	2220      	movs	r2, #32
 800dd36:	409a      	lsls	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 808f 	beq.w	800de60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0310 	and.w	r3, r3, #16
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 8087 	beq.w	800de60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd56:	2220      	movs	r2, #32
 800dd58:	409a      	lsls	r2, r3
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b05      	cmp	r3, #5
 800dd68:	d136      	bne.n	800ddd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f022 0216 	bic.w	r2, r2, #22
 800dd78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	695a      	ldr	r2, [r3, #20]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d103      	bne.n	800dd9a <HAL_DMA_IRQHandler+0x1da>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d007      	beq.n	800ddaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f022 0208 	bic.w	r2, r2, #8
 800dda8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddae:	223f      	movs	r2, #63	; 0x3f
 800ddb0:	409a      	lsls	r2, r3
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d07e      	beq.n	800decc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
        }
        return;
 800ddd6:	e079      	b.n	800decc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01d      	beq.n	800de22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10d      	bne.n	800de10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d031      	beq.n	800de60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	4798      	blx	r3
 800de04:	e02c      	b.n	800de60 <HAL_DMA_IRQHandler+0x2a0>
 800de06:	bf00      	nop
 800de08:	200001d4 	.word	0x200001d4
 800de0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d023      	beq.n	800de60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	4798      	blx	r3
 800de20:	e01e      	b.n	800de60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10f      	bne.n	800de50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f022 0210 	bic.w	r2, r2, #16
 800de3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de64:	2b00      	cmp	r3, #0
 800de66:	d032      	beq.n	800dece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d022      	beq.n	800deba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2205      	movs	r2, #5
 800de78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f022 0201 	bic.w	r2, r2, #1
 800de8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	3301      	adds	r3, #1
 800de90:	60bb      	str	r3, [r7, #8]
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	429a      	cmp	r2, r3
 800de96:	d307      	bcc.n	800dea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1f2      	bne.n	800de8c <HAL_DMA_IRQHandler+0x2cc>
 800dea6:	e000      	b.n	800deaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800dea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2201      	movs	r2, #1
 800deae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d005      	beq.n	800dece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	4798      	blx	r3
 800deca:	e000      	b.n	800dece <HAL_DMA_IRQHandler+0x30e>
        return;
 800decc:	bf00      	nop
    }
  }
}
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800def0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	2b40      	cmp	r3, #64	; 0x40
 800df00:	d108      	bne.n	800df14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68ba      	ldr	r2, [r7, #8]
 800df10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800df12:	e007      	b.n	800df24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	60da      	str	r2, [r3, #12]
}
 800df24:	bf00      	nop
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	3b10      	subs	r3, #16
 800df40:	4a14      	ldr	r2, [pc, #80]	; (800df94 <DMA_CalcBaseAndBitshift+0x64>)
 800df42:	fba2 2303 	umull	r2, r3, r2, r3
 800df46:	091b      	lsrs	r3, r3, #4
 800df48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800df4a:	4a13      	ldr	r2, [pc, #76]	; (800df98 <DMA_CalcBaseAndBitshift+0x68>)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4413      	add	r3, r2
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d909      	bls.n	800df72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800df66:	f023 0303 	bic.w	r3, r3, #3
 800df6a:	1d1a      	adds	r2, r3, #4
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	659a      	str	r2, [r3, #88]	; 0x58
 800df70:	e007      	b.n	800df82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800df7a:	f023 0303 	bic.w	r3, r3, #3
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800df86:	4618      	mov	r0, r3
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	aaaaaaab 	.word	0xaaaaaaab
 800df98:	08019d00 	.word	0x08019d00

0800df9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d11f      	bne.n	800dff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d856      	bhi.n	800e06a <DMA_CheckFifoParam+0xce>
 800dfbc:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <DMA_CheckFifoParam+0x28>)
 800dfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc2:	bf00      	nop
 800dfc4:	0800dfd5 	.word	0x0800dfd5
 800dfc8:	0800dfe7 	.word	0x0800dfe7
 800dfcc:	0800dfd5 	.word	0x0800dfd5
 800dfd0:	0800e06b 	.word	0x0800e06b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d046      	beq.n	800e06e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dfe4:	e043      	b.n	800e06e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800dfee:	d140      	bne.n	800e072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dff4:	e03d      	b.n	800e072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dffe:	d121      	bne.n	800e044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d837      	bhi.n	800e076 <DMA_CheckFifoParam+0xda>
 800e006:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <DMA_CheckFifoParam+0x70>)
 800e008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00c:	0800e01d 	.word	0x0800e01d
 800e010:	0800e023 	.word	0x0800e023
 800e014:	0800e01d 	.word	0x0800e01d
 800e018:	0800e035 	.word	0x0800e035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	73fb      	strb	r3, [r7, #15]
      break;
 800e020:	e030      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d025      	beq.n	800e07a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e032:	e022      	b.n	800e07a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e03c:	d11f      	bne.n	800e07e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e042:	e01c      	b.n	800e07e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b02      	cmp	r3, #2
 800e048:	d903      	bls.n	800e052 <DMA_CheckFifoParam+0xb6>
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b03      	cmp	r3, #3
 800e04e:	d003      	beq.n	800e058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e050:	e018      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	73fb      	strb	r3, [r7, #15]
      break;
 800e056:	e015      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	73fb      	strb	r3, [r7, #15]
      break;
 800e068:	e00b      	b.n	800e082 <DMA_CheckFifoParam+0xe6>
      break;
 800e06a:	bf00      	nop
 800e06c:	e00a      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;
 800e06e:	bf00      	nop
 800e070:	e008      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;
 800e072:	bf00      	nop
 800e074:	e006      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;
 800e076:	bf00      	nop
 800e078:	e004      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;
 800e07a:	bf00      	nop
 800e07c:	e002      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;   
 800e07e:	bf00      	nop
 800e080:	e000      	b.n	800e084 <DMA_CheckFifoParam+0xe8>
      break;
 800e082:	bf00      	nop
    }
  } 
  
  return status; 
 800e084:	7bfb      	ldrb	r3, [r7, #15]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop

0800e094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e094:	b480      	push	{r7}
 800e096:	b089      	sub	sp, #36	; 0x24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	61fb      	str	r3, [r7, #28]
 800e0ae:	e177      	b.n	800e3a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e0c4:	693a      	ldr	r2, [r7, #16]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	f040 8166 	bne.w	800e39a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d005      	beq.n	800e0e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d130      	bne.n	800e148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	2203      	movs	r2, #3
 800e0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f6:	43db      	mvns	r3, r3
 800e0f8:	69ba      	ldr	r2, [r7, #24]
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	68da      	ldr	r2, [r3, #12]
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	fa02 f303 	lsl.w	r3, r2, r3
 800e10a:	69ba      	ldr	r2, [r7, #24]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e11c:	2201      	movs	r2, #1
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	43db      	mvns	r3, r3
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	4013      	ands	r3, r2
 800e12a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	091b      	lsrs	r3, r3, #4
 800e132:	f003 0201 	and.w	r2, r3, #1
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	fa02 f303 	lsl.w	r3, r2, r3
 800e13c:	69ba      	ldr	r2, [r7, #24]
 800e13e:	4313      	orrs	r3, r2
 800e140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	69ba      	ldr	r2, [r7, #24]
 800e146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	f003 0303 	and.w	r3, r3, #3
 800e150:	2b03      	cmp	r3, #3
 800e152:	d017      	beq.n	800e184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	2203      	movs	r2, #3
 800e160:	fa02 f303 	lsl.w	r3, r2, r3
 800e164:	43db      	mvns	r3, r3
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	4013      	ands	r3, r2
 800e16a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	689a      	ldr	r2, [r3, #8]
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	fa02 f303 	lsl.w	r3, r2, r3
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	69ba      	ldr	r2, [r7, #24]
 800e182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	f003 0303 	and.w	r3, r3, #3
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d123      	bne.n	800e1d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	08da      	lsrs	r2, r3, #3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3208      	adds	r2, #8
 800e198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	f003 0307 	and.w	r3, r3, #7
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	220f      	movs	r2, #15
 800e1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ac:	43db      	mvns	r3, r3
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	f003 0307 	and.w	r3, r3, #7
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c4:	69ba      	ldr	r2, [r7, #24]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	08da      	lsrs	r2, r3, #3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3208      	adds	r2, #8
 800e1d2:	69b9      	ldr	r1, [r7, #24]
 800e1d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	2203      	movs	r2, #3
 800e1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e8:	43db      	mvns	r3, r3
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	f003 0203 	and.w	r2, r3, #3
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	4313      	orrs	r3, r2
 800e204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 80c0 	beq.w	800e39a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e21a:	2300      	movs	r3, #0
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	4b66      	ldr	r3, [pc, #408]	; (800e3b8 <HAL_GPIO_Init+0x324>)
 800e220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e222:	4a65      	ldr	r2, [pc, #404]	; (800e3b8 <HAL_GPIO_Init+0x324>)
 800e224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e228:	6453      	str	r3, [r2, #68]	; 0x44
 800e22a:	4b63      	ldr	r3, [pc, #396]	; (800e3b8 <HAL_GPIO_Init+0x324>)
 800e22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e236:	4a61      	ldr	r2, [pc, #388]	; (800e3bc <HAL_GPIO_Init+0x328>)
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	089b      	lsrs	r3, r3, #2
 800e23c:	3302      	adds	r3, #2
 800e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	f003 0303 	and.w	r3, r3, #3
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	220f      	movs	r2, #15
 800e24e:	fa02 f303 	lsl.w	r3, r2, r3
 800e252:	43db      	mvns	r3, r3
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	4013      	ands	r3, r2
 800e258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a58      	ldr	r2, [pc, #352]	; (800e3c0 <HAL_GPIO_Init+0x32c>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d037      	beq.n	800e2d2 <HAL_GPIO_Init+0x23e>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a57      	ldr	r2, [pc, #348]	; (800e3c4 <HAL_GPIO_Init+0x330>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d031      	beq.n	800e2ce <HAL_GPIO_Init+0x23a>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a56      	ldr	r2, [pc, #344]	; (800e3c8 <HAL_GPIO_Init+0x334>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d02b      	beq.n	800e2ca <HAL_GPIO_Init+0x236>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a55      	ldr	r2, [pc, #340]	; (800e3cc <HAL_GPIO_Init+0x338>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d025      	beq.n	800e2c6 <HAL_GPIO_Init+0x232>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a54      	ldr	r2, [pc, #336]	; (800e3d0 <HAL_GPIO_Init+0x33c>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d01f      	beq.n	800e2c2 <HAL_GPIO_Init+0x22e>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a53      	ldr	r2, [pc, #332]	; (800e3d4 <HAL_GPIO_Init+0x340>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d019      	beq.n	800e2be <HAL_GPIO_Init+0x22a>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a52      	ldr	r2, [pc, #328]	; (800e3d8 <HAL_GPIO_Init+0x344>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d013      	beq.n	800e2ba <HAL_GPIO_Init+0x226>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a51      	ldr	r2, [pc, #324]	; (800e3dc <HAL_GPIO_Init+0x348>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d00d      	beq.n	800e2b6 <HAL_GPIO_Init+0x222>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a50      	ldr	r2, [pc, #320]	; (800e3e0 <HAL_GPIO_Init+0x34c>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d007      	beq.n	800e2b2 <HAL_GPIO_Init+0x21e>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a4f      	ldr	r2, [pc, #316]	; (800e3e4 <HAL_GPIO_Init+0x350>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d101      	bne.n	800e2ae <HAL_GPIO_Init+0x21a>
 800e2aa:	2309      	movs	r3, #9
 800e2ac:	e012      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2ae:	230a      	movs	r3, #10
 800e2b0:	e010      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2b2:	2308      	movs	r3, #8
 800e2b4:	e00e      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2b6:	2307      	movs	r3, #7
 800e2b8:	e00c      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2ba:	2306      	movs	r3, #6
 800e2bc:	e00a      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2be:	2305      	movs	r3, #5
 800e2c0:	e008      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	e006      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	e004      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e002      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e000      	b.n	800e2d4 <HAL_GPIO_Init+0x240>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	69fa      	ldr	r2, [r7, #28]
 800e2d6:	f002 0203 	and.w	r2, r2, #3
 800e2da:	0092      	lsls	r2, r2, #2
 800e2dc:	4093      	lsls	r3, r2
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e2e4:	4935      	ldr	r1, [pc, #212]	; (800e3bc <HAL_GPIO_Init+0x328>)
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	089b      	lsrs	r3, r3, #2
 800e2ea:	3302      	adds	r3, #2
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e2f2:	4b3d      	ldr	r3, [pc, #244]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	43db      	mvns	r3, r3
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	4013      	ands	r3, r2
 800e300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800e30e:	69ba      	ldr	r2, [r7, #24]
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	4313      	orrs	r3, r2
 800e314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e316:	4a34      	ldr	r2, [pc, #208]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e31c:	4b32      	ldr	r3, [pc, #200]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	43db      	mvns	r3, r3
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	4013      	ands	r3, r2
 800e32a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800e338:	69ba      	ldr	r2, [r7, #24]
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e340:	4a29      	ldr	r2, [pc, #164]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e346:	4b28      	ldr	r3, [pc, #160]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	43db      	mvns	r3, r3
 800e350:	69ba      	ldr	r2, [r7, #24]
 800e352:	4013      	ands	r3, r2
 800e354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800e362:	69ba      	ldr	r2, [r7, #24]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	4313      	orrs	r3, r2
 800e368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e36a:	4a1f      	ldr	r2, [pc, #124]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e370:	4b1d      	ldr	r3, [pc, #116]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	43db      	mvns	r3, r3
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	4013      	ands	r3, r2
 800e37e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800e38c:	69ba      	ldr	r2, [r7, #24]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	4313      	orrs	r3, r2
 800e392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e394:	4a14      	ldr	r2, [pc, #80]	; (800e3e8 <HAL_GPIO_Init+0x354>)
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	3301      	adds	r3, #1
 800e39e:	61fb      	str	r3, [r7, #28]
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2b0f      	cmp	r3, #15
 800e3a4:	f67f ae84 	bls.w	800e0b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e3a8:	bf00      	nop
 800e3aa:	bf00      	nop
 800e3ac:	3724      	adds	r7, #36	; 0x24
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	40023800 	.word	0x40023800
 800e3bc:	40013800 	.word	0x40013800
 800e3c0:	40020000 	.word	0x40020000
 800e3c4:	40020400 	.word	0x40020400
 800e3c8:	40020800 	.word	0x40020800
 800e3cc:	40020c00 	.word	0x40020c00
 800e3d0:	40021000 	.word	0x40021000
 800e3d4:	40021400 	.word	0x40021400
 800e3d8:	40021800 	.word	0x40021800
 800e3dc:	40021c00 	.word	0x40021c00
 800e3e0:	40022000 	.word	0x40022000
 800e3e4:	40022400 	.word	0x40022400
 800e3e8:	40013c00 	.word	0x40013c00

0800e3ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b085      	sub	sp, #20
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	691a      	ldr	r2, [r3, #16]
 800e3fc:	887b      	ldrh	r3, [r7, #2]
 800e3fe:	4013      	ands	r3, r2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e404:	2301      	movs	r3, #1
 800e406:	73fb      	strb	r3, [r7, #15]
 800e408:	e001      	b.n	800e40e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	807b      	strh	r3, [r7, #2]
 800e428:	4613      	mov	r3, r2
 800e42a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e42c:	787b      	ldrb	r3, [r7, #1]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d003      	beq.n	800e43a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e432:	887a      	ldrh	r2, [r7, #2]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e438:	e003      	b.n	800e442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e43a:	887b      	ldrh	r3, [r7, #2]
 800e43c:	041a      	lsls	r2, r3, #16
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	619a      	str	r2, [r3, #24]
}
 800e442:	bf00      	nop
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
	...

0800e450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e45a:	4b08      	ldr	r3, [pc, #32]	; (800e47c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e45c:	695a      	ldr	r2, [r3, #20]
 800e45e:	88fb      	ldrh	r3, [r7, #6]
 800e460:	4013      	ands	r3, r2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d006      	beq.n	800e474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e466:	4a05      	ldr	r2, [pc, #20]	; (800e47c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e468:	88fb      	ldrh	r3, [r7, #6]
 800e46a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 f806 	bl	800e480 <HAL_GPIO_EXTI_Callback>
  }
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	40013c00 	.word	0x40013c00

0800e480 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e496:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e498:	b08f      	sub	sp, #60	; 0x3c
 800e49a:	af0a      	add	r7, sp, #40	; 0x28
 800e49c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e10f      	b.n	800e6c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d106      	bne.n	800e4c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f007 ff1c 	bl	8016300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2203      	movs	r2, #3
 800e4cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f004 fa65 	bl	80129b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	603b      	str	r3, [r7, #0]
 800e4f2:	687e      	ldr	r6, [r7, #4]
 800e4f4:	466d      	mov	r5, sp
 800e4f6:	f106 0410 	add.w	r4, r6, #16
 800e4fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e4fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e502:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e506:	e885 0003 	stmia.w	r5, {r0, r1}
 800e50a:	1d33      	adds	r3, r6, #4
 800e50c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e50e:	6838      	ldr	r0, [r7, #0]
 800e510:	f004 f93c 	bl	801278c <USB_CoreInit>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d005      	beq.n	800e526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2202      	movs	r2, #2
 800e51e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e0d0      	b.n	800e6c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2100      	movs	r1, #0
 800e52c:	4618      	mov	r0, r3
 800e52e:	f004 fa53 	bl	80129d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e532:	2300      	movs	r3, #0
 800e534:	73fb      	strb	r3, [r7, #15]
 800e536:	e04a      	b.n	800e5ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e538:	7bfa      	ldrb	r2, [r7, #15]
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	4613      	mov	r3, r2
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	440b      	add	r3, r1
 800e546:	333d      	adds	r3, #61	; 0x3d
 800e548:	2201      	movs	r2, #1
 800e54a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e54c:	7bfa      	ldrb	r2, [r7, #15]
 800e54e:	6879      	ldr	r1, [r7, #4]
 800e550:	4613      	mov	r3, r2
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	440b      	add	r3, r1
 800e55a:	333c      	adds	r3, #60	; 0x3c
 800e55c:	7bfa      	ldrb	r2, [r7, #15]
 800e55e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800e560:	7bfa      	ldrb	r2, [r7, #15]
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	b298      	uxth	r0, r3
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	4613      	mov	r3, r2
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	3344      	adds	r3, #68	; 0x44
 800e574:	4602      	mov	r2, r0
 800e576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e578:	7bfa      	ldrb	r2, [r7, #15]
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	4613      	mov	r3, r2
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	4413      	add	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	440b      	add	r3, r1
 800e586:	3340      	adds	r3, #64	; 0x40
 800e588:	2200      	movs	r2, #0
 800e58a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e58c:	7bfa      	ldrb	r2, [r7, #15]
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	4613      	mov	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	440b      	add	r3, r1
 800e59a:	3348      	adds	r3, #72	; 0x48
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e5a0:	7bfa      	ldrb	r2, [r7, #15]
 800e5a2:	6879      	ldr	r1, [r7, #4]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	4413      	add	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	440b      	add	r3, r1
 800e5ae:	334c      	adds	r3, #76	; 0x4c
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e5b4:	7bfa      	ldrb	r2, [r7, #15]
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	4413      	add	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	440b      	add	r3, r1
 800e5c2:	3354      	adds	r3, #84	; 0x54
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e5c8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	73fb      	strb	r3, [r7, #15]
 800e5ce:	7bfa      	ldrb	r2, [r7, #15]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d3af      	bcc.n	800e538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	73fb      	strb	r3, [r7, #15]
 800e5dc:	e044      	b.n	800e668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e5de:	7bfa      	ldrb	r2, [r7, #15]
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	4413      	add	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	440b      	add	r3, r1
 800e5ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e5f4:	7bfa      	ldrb	r2, [r7, #15]
 800e5f6:	6879      	ldr	r1, [r7, #4]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	4413      	add	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	440b      	add	r3, r1
 800e602:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800e606:	7bfa      	ldrb	r2, [r7, #15]
 800e608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e60a:	7bfa      	ldrb	r2, [r7, #15]
 800e60c:	6879      	ldr	r1, [r7, #4]
 800e60e:	4613      	mov	r3, r2
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	4413      	add	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	440b      	add	r3, r1
 800e618:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e61c:	2200      	movs	r2, #0
 800e61e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e620:	7bfa      	ldrb	r2, [r7, #15]
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	4613      	mov	r3, r2
 800e626:	00db      	lsls	r3, r3, #3
 800e628:	4413      	add	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	440b      	add	r3, r1
 800e62e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e636:	7bfa      	ldrb	r2, [r7, #15]
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	4613      	mov	r3, r2
 800e63c:	00db      	lsls	r3, r3, #3
 800e63e:	4413      	add	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	440b      	add	r3, r1
 800e644:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e64c:	7bfa      	ldrb	r2, [r7, #15]
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	4613      	mov	r3, r2
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	4413      	add	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	440b      	add	r3, r1
 800e65a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e65e:	2200      	movs	r2, #0
 800e660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e662:	7bfb      	ldrb	r3, [r7, #15]
 800e664:	3301      	adds	r3, #1
 800e666:	73fb      	strb	r3, [r7, #15]
 800e668:	7bfa      	ldrb	r2, [r7, #15]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d3b5      	bcc.n	800e5de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	603b      	str	r3, [r7, #0]
 800e678:	687e      	ldr	r6, [r7, #4]
 800e67a:	466d      	mov	r5, sp
 800e67c:	f106 0410 	add.w	r4, r6, #16
 800e680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e68c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e690:	1d33      	adds	r3, r6, #4
 800e692:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e694:	6838      	ldr	r0, [r7, #0]
 800e696:	f004 f9eb 	bl	8012a70 <USB_DevInit>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e00d      	b.n	800e6c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f005 fb3a 	bl	8013d3a <USB_DevDisconnect>

  return HAL_OK;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d101      	bne.n	800e6ec <HAL_PCD_Start+0x1c>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e020      	b.n	800e72e <HAL_PCD_Start+0x5e>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d109      	bne.n	800e710 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e700:	2b01      	cmp	r3, #1
 800e702:	d005      	beq.n	800e710 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	f004 f93d 	bl	8012994 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f005 faea 	bl	8013cf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e736:	b590      	push	{r4, r7, lr}
 800e738:	b08d      	sub	sp, #52	; 0x34
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f005 fba8 	bl	8013ea2 <USB_GetMode>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	f040 848a 	bne.w	800f06e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f005 fb0c 	bl	8013d7c <USB_ReadInterrupts>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 8480 	beq.w	800f06c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	0a1b      	lsrs	r3, r3, #8
 800e776:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	f005 faf9 	bl	8013d7c <USB_ReadInterrupts>
 800e78a:	4603      	mov	r3, r0
 800e78c:	f003 0302 	and.w	r3, r3, #2
 800e790:	2b02      	cmp	r3, #2
 800e792:	d107      	bne.n	800e7a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	695a      	ldr	r2, [r3, #20]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f002 0202 	and.w	r2, r2, #2
 800e7a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f005 fae7 	bl	8013d7c <USB_ReadInterrupts>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f003 0310 	and.w	r3, r3, #16
 800e7b4:	2b10      	cmp	r3, #16
 800e7b6:	d161      	bne.n	800e87c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	699a      	ldr	r2, [r3, #24]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0210 	bic.w	r2, r2, #16
 800e7c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	6a1b      	ldr	r3, [r3, #32]
 800e7cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	f003 020f 	and.w	r2, r3, #15
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	0c5b      	lsrs	r3, r3, #17
 800e7ec:	f003 030f 	and.w	r3, r3, #15
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d124      	bne.n	800e83e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d035      	beq.n	800e86c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	091b      	lsrs	r3, r3, #4
 800e808:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e80a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e80e:	b29b      	uxth	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	6a38      	ldr	r0, [r7, #32]
 800e814:	f005 f91e 	bl	8013a54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	691a      	ldr	r2, [r3, #16]
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	091b      	lsrs	r3, r3, #4
 800e820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e824:	441a      	add	r2, r3
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	6a1a      	ldr	r2, [r3, #32]
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	091b      	lsrs	r3, r3, #4
 800e832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e836:	441a      	add	r2, r3
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	621a      	str	r2, [r3, #32]
 800e83c:	e016      	b.n	800e86c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	0c5b      	lsrs	r3, r3, #17
 800e842:	f003 030f 	and.w	r3, r3, #15
 800e846:	2b06      	cmp	r3, #6
 800e848:	d110      	bne.n	800e86c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e850:	2208      	movs	r2, #8
 800e852:	4619      	mov	r1, r3
 800e854:	6a38      	ldr	r0, [r7, #32]
 800e856:	f005 f8fd 	bl	8013a54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	6a1a      	ldr	r2, [r3, #32]
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	091b      	lsrs	r3, r3, #4
 800e862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e866:	441a      	add	r2, r3
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	699a      	ldr	r2, [r3, #24]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f042 0210 	orr.w	r2, r2, #16
 800e87a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4618      	mov	r0, r3
 800e882:	f005 fa7b 	bl	8013d7c <USB_ReadInterrupts>
 800e886:	4603      	mov	r3, r0
 800e888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e88c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e890:	f040 80a7 	bne.w	800e9e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4618      	mov	r0, r3
 800e89e:	f005 fa80 	bl	8013da2 <USB_ReadDevAllOutEpInterrupt>
 800e8a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e8a4:	e099      	b.n	800e9da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	f003 0301 	and.w	r3, r3, #1
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 808e 	beq.w	800e9ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b8:	b2d2      	uxtb	r2, r2
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f005 faa4 	bl	8013e0a <USB_ReadDevOutEPInterrupt>
 800e8c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	f003 0301 	and.w	r3, r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00c      	beq.n	800e8e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	015a      	lsls	r2, r3, #5
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8da:	461a      	mov	r2, r3
 800e8dc:	2301      	movs	r3, #1
 800e8de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e8e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fec2 	bl	800f66c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	f003 0308 	and.w	r3, r3, #8
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00c      	beq.n	800e90c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	015a      	lsls	r2, r3, #5
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8fe:	461a      	mov	r2, r3
 800e900:	2308      	movs	r3, #8
 800e902:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 ff98 	bl	800f83c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	f003 0310 	and.w	r3, r3, #16
 800e912:	2b00      	cmp	r3, #0
 800e914:	d008      	beq.n	800e928 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	015a      	lsls	r2, r3, #5
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	4413      	add	r3, r2
 800e91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e922:	461a      	mov	r2, r3
 800e924:	2310      	movs	r3, #16
 800e926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	f003 0302 	and.w	r3, r3, #2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d030      	beq.n	800e994 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e93a:	2b80      	cmp	r3, #128	; 0x80
 800e93c:	d109      	bne.n	800e952 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	69fa      	ldr	r2, [r7, #28]
 800e948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e94c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e950:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e954:	4613      	mov	r3, r2
 800e956:	00db      	lsls	r3, r3, #3
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	4413      	add	r3, r2
 800e964:	3304      	adds	r3, #4
 800e966:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	78db      	ldrb	r3, [r3, #3]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d108      	bne.n	800e982 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2200      	movs	r2, #0
 800e974:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f007 fde3 	bl	8016548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	015a      	lsls	r2, r3, #5
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	4413      	add	r3, r2
 800e98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e98e:	461a      	mov	r2, r3
 800e990:	2302      	movs	r3, #2
 800e992:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f003 0320 	and.w	r3, r3, #32
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d008      	beq.n	800e9b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	015a      	lsls	r2, r3, #5
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d009      	beq.n	800e9ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	015a      	lsls	r2, r3, #5
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e9cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	085b      	lsrs	r3, r3, #1
 800e9d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f47f af62 	bne.w	800e8a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f005 f9c8 	bl	8013d7c <USB_ReadInterrupts>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e9f6:	f040 80db 	bne.w	800ebb0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f005 f9e9 	bl	8013dd6 <USB_ReadDevAllInEpInterrupt>
 800ea04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ea0a:	e0cd      	b.n	800eba8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 80c2 	beq.w	800eb9c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea1e:	b2d2      	uxtb	r2, r2
 800ea20:	4611      	mov	r1, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f005 fa0f 	bl	8013e46 <USB_ReadDevInEPInterrupt>
 800ea28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d057      	beq.n	800eae4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ea34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea36:	f003 030f 	and.w	r3, r3, #15
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	43db      	mvns	r3, r3
 800ea4e:	69f9      	ldr	r1, [r7, #28]
 800ea50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea54:	4013      	ands	r3, r2
 800ea56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	015a      	lsls	r2, r3, #5
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea64:	461a      	mov	r2, r3
 800ea66:	2301      	movs	r3, #1
 800ea68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d132      	bne.n	800ead8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ea72:	6879      	ldr	r1, [r7, #4]
 800ea74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea76:	4613      	mov	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	4413      	add	r3, r2
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	440b      	add	r3, r1
 800ea80:	334c      	adds	r3, #76	; 0x4c
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea88:	4613      	mov	r3, r2
 800ea8a:	00db      	lsls	r3, r3, #3
 800ea8c:	4413      	add	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4403      	add	r3, r0
 800ea92:	3348      	adds	r3, #72	; 0x48
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4419      	add	r1, r3
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea9c:	4613      	mov	r3, r2
 800ea9e:	00db      	lsls	r3, r3, #3
 800eaa0:	4413      	add	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4403      	add	r3, r0
 800eaa6:	334c      	adds	r3, #76	; 0x4c
 800eaa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d113      	bne.n	800ead8 <HAL_PCD_IRQHandler+0x3a2>
 800eab0:	6879      	ldr	r1, [r7, #4]
 800eab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eab4:	4613      	mov	r3, r2
 800eab6:	00db      	lsls	r3, r3, #3
 800eab8:	4413      	add	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	3354      	adds	r3, #84	; 0x54
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d108      	bne.n	800ead8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6818      	ldr	r0, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ead0:	461a      	mov	r2, r3
 800ead2:	2101      	movs	r1, #1
 800ead4:	f005 fa16 	bl	8013f04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ead8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	4619      	mov	r1, r3
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f007 fca9 	bl	8016436 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	f003 0308 	and.w	r3, r3, #8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d008      	beq.n	800eb00 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	015a      	lsls	r2, r3, #5
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eafa:	461a      	mov	r2, r3
 800eafc:	2308      	movs	r3, #8
 800eafe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	f003 0310 	and.w	r3, r3, #16
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d008      	beq.n	800eb1c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	015a      	lsls	r2, r3, #5
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	4413      	add	r3, r2
 800eb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb16:	461a      	mov	r2, r3
 800eb18:	2310      	movs	r3, #16
 800eb1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d008      	beq.n	800eb38 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb32:	461a      	mov	r2, r3
 800eb34:	2340      	movs	r3, #64	; 0x40
 800eb36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d023      	beq.n	800eb8a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800eb42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb44:	6a38      	ldr	r0, [r7, #32]
 800eb46:	f004 f8f7 	bl	8012d38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800eb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	4413      	add	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	3338      	adds	r3, #56	; 0x38
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	4413      	add	r3, r2
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	78db      	ldrb	r3, [r3, #3]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d108      	bne.n	800eb78 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f007 fcfa 	bl	801656c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	015a      	lsls	r2, r3, #5
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb84:	461a      	mov	r2, r3
 800eb86:	2302      	movs	r3, #2
 800eb88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d003      	beq.n	800eb9c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800eb94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 fcdb 	bl	800f552 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	3301      	adds	r3, #1
 800eba0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	085b      	lsrs	r3, r3, #1
 800eba6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800eba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f47f af2e 	bne.w	800ea0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f005 f8e1 	bl	8013d7c <USB_ReadInterrupts>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebc4:	d122      	bne.n	800ec0c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	69fa      	ldr	r2, [r7, #28]
 800ebd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebd4:	f023 0301 	bic.w	r3, r3, #1
 800ebd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d108      	bne.n	800ebf6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ebec:	2100      	movs	r1, #0
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fec2 	bl	800f978 <HAL_PCDEx_LPM_Callback>
 800ebf4:	e002      	b.n	800ebfc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f007 fc98 	bl	801652c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	695a      	ldr	r2, [r3, #20]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ec0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f005 f8b3 	bl	8013d7c <USB_ReadInterrupts>
 800ec16:	4603      	mov	r3, r0
 800ec18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec20:	d112      	bne.n	800ec48 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d102      	bne.n	800ec38 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f007 fc54 	bl	80164e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	695a      	ldr	r2, [r3, #20]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ec46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f005 f895 	bl	8013d7c <USB_ReadInterrupts>
 800ec52:	4603      	mov	r3, r0
 800ec54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec5c:	f040 80b7 	bne.w	800edce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	69fa      	ldr	r2, [r7, #28]
 800ec6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec6e:	f023 0301 	bic.w	r3, r3, #1
 800ec72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2110      	movs	r1, #16
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f004 f85c 	bl	8012d38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ec80:	2300      	movs	r3, #0
 800ec82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec84:	e046      	b.n	800ed14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec92:	461a      	mov	r2, r3
 800ec94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9c:	015a      	lsls	r2, r3, #5
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	4413      	add	r3, r2
 800eca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecaa:	0151      	lsls	r1, r2, #5
 800ecac:	69fa      	ldr	r2, [r7, #28]
 800ecae:	440a      	add	r2, r1
 800ecb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ecb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	015a      	lsls	r2, r3, #5
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eccc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	015a      	lsls	r2, r3, #5
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecde:	0151      	lsls	r1, r2, #5
 800ece0:	69fa      	ldr	r2, [r7, #28]
 800ece2:	440a      	add	r2, r1
 800ece4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ece8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ecec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	015a      	lsls	r2, r3, #5
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecfe:	0151      	lsls	r1, r2, #5
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	440a      	add	r2, r1
 800ed04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	3301      	adds	r3, #1
 800ed12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d3b3      	bcc.n	800ec86 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed24:	69db      	ldr	r3, [r3, #28]
 800ed26:	69fa      	ldr	r2, [r7, #28]
 800ed28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ed30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d016      	beq.n	800ed68 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed44:	69fa      	ldr	r2, [r7, #28]
 800ed46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed4a:	f043 030b 	orr.w	r3, r3, #11
 800ed4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed5a:	69fa      	ldr	r2, [r7, #28]
 800ed5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed60:	f043 030b 	orr.w	r3, r3, #11
 800ed64:	6453      	str	r3, [r2, #68]	; 0x44
 800ed66:	e015      	b.n	800ed94 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	69fa      	ldr	r2, [r7, #28]
 800ed72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ed7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	69fa      	ldr	r2, [r7, #28]
 800ed8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed8e:	f043 030b 	orr.w	r3, r3, #11
 800ed92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	69fa      	ldr	r2, [r7, #28]
 800ed9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eda2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eda6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800edb8:	461a      	mov	r2, r3
 800edba:	f005 f8a3 	bl	8013f04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	695a      	ldr	r2, [r3, #20]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800edcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f004 ffd2 	bl	8013d7c <USB_ReadInterrupts>
 800edd8:	4603      	mov	r3, r0
 800edda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ede2:	d124      	bne.n	800ee2e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4618      	mov	r0, r3
 800edea:	f005 f868 	bl	8013ebe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f004 f81d 	bl	8012e32 <USB_GetDevSpeed>
 800edf8:	4603      	mov	r3, r0
 800edfa:	461a      	mov	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681c      	ldr	r4, [r3, #0]
 800ee04:	f001 fa42 	bl	801028c <HAL_RCC_GetHCLKFreq>
 800ee08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	461a      	mov	r2, r3
 800ee12:	4620      	mov	r0, r4
 800ee14:	f003 fd1c 	bl	8012850 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f007 fb35 	bl	8016488 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	695a      	ldr	r2, [r3, #20]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ee2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f004 ffa2 	bl	8013d7c <USB_ReadInterrupts>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	f003 0308 	and.w	r3, r3, #8
 800ee3e:	2b08      	cmp	r3, #8
 800ee40:	d10a      	bne.n	800ee58 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f007 fb11 	bl	801646a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	695a      	ldr	r2, [r3, #20]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f002 0208 	and.w	r2, r2, #8
 800ee56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f004 ff8d 	bl	8013d7c <USB_ReadInterrupts>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee68:	2b80      	cmp	r3, #128	; 0x80
 800ee6a:	d122      	bne.n	800eeb2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee74:	6a3b      	ldr	r3, [r7, #32]
 800ee76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ee78:	2301      	movs	r3, #1
 800ee7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee7c:	e014      	b.n	800eea8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ee7e:	6879      	ldr	r1, [r7, #4]
 800ee80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee82:	4613      	mov	r3, r2
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	4413      	add	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	440b      	add	r3, r1
 800ee8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d105      	bne.n	800eea2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fb27 	bl	800f4f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	3301      	adds	r3, #1
 800eea6:	627b      	str	r3, [r7, #36]	; 0x24
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d3e5      	bcc.n	800ee7e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f004 ff60 	bl	8013d7c <USB_ReadInterrupts>
 800eebc:	4603      	mov	r3, r0
 800eebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec6:	d13b      	bne.n	800ef40 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eec8:	2301      	movs	r3, #1
 800eeca:	627b      	str	r3, [r7, #36]	; 0x24
 800eecc:	e02b      	b.n	800ef26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee2:	4613      	mov	r3, r2
 800eee4:	00db      	lsls	r3, r3, #3
 800eee6:	4413      	add	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	440b      	add	r3, r1
 800eeec:	3340      	adds	r3, #64	; 0x40
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d115      	bne.n	800ef20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800eef4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	da12      	bge.n	800ef20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800eefa:	6879      	ldr	r1, [r7, #4]
 800eefc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eefe:	4613      	mov	r3, r2
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	4413      	add	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	440b      	add	r3, r1
 800ef08:	333f      	adds	r3, #63	; 0x3f
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fae8 	bl	800f4f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	3301      	adds	r3, #1
 800ef24:	627b      	str	r3, [r7, #36]	; 0x24
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d3ce      	bcc.n	800eece <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	695a      	ldr	r2, [r3, #20]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ef3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f004 ff19 	bl	8013d7c <USB_ReadInterrupts>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef54:	d155      	bne.n	800f002 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ef56:	2301      	movs	r3, #1
 800ef58:	627b      	str	r3, [r7, #36]	; 0x24
 800ef5a:	e045      	b.n	800efe8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef70:	4613      	mov	r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	4413      	add	r3, r2
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	440b      	add	r3, r1
 800ef7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d12e      	bne.n	800efe2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ef84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	da2b      	bge.n	800efe2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ef96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d121      	bne.n	800efe2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa2:	4613      	mov	r3, r2
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	4413      	add	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	440b      	add	r3, r1
 800efac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800efb0:	2201      	movs	r2, #1
 800efb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10a      	bne.n	800efe2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	69fa      	ldr	r2, [r7, #28]
 800efd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800efde:	6053      	str	r3, [r2, #4]
            break;
 800efe0:	e007      	b.n	800eff2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	3301      	adds	r3, #1
 800efe6:	627b      	str	r3, [r7, #36]	; 0x24
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efee:	429a      	cmp	r2, r3
 800eff0:	d3b4      	bcc.n	800ef5c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	695a      	ldr	r2, [r3, #20]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4618      	mov	r0, r3
 800f008:	f004 feb8 	bl	8013d7c <USB_ReadInterrupts>
 800f00c:	4603      	mov	r3, r0
 800f00e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f016:	d10a      	bne.n	800f02e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f007 fab9 	bl	8016590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	695a      	ldr	r2, [r3, #20]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f02c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4618      	mov	r0, r3
 800f034:	f004 fea2 	bl	8013d7c <USB_ReadInterrupts>
 800f038:	4603      	mov	r3, r0
 800f03a:	f003 0304 	and.w	r3, r3, #4
 800f03e:	2b04      	cmp	r3, #4
 800f040:	d115      	bne.n	800f06e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f007 faa9 	bl	80165ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	6859      	ldr	r1, [r3, #4]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	430a      	orrs	r2, r1
 800f068:	605a      	str	r2, [r3, #4]
 800f06a:	e000      	b.n	800f06e <HAL_PCD_IRQHandler+0x938>
      return;
 800f06c:	bf00      	nop
    }
  }
}
 800f06e:	3734      	adds	r7, #52	; 0x34
 800f070:	46bd      	mov	sp, r7
 800f072:	bd90      	pop	{r4, r7, pc}

0800f074 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f086:	2b01      	cmp	r3, #1
 800f088:	d101      	bne.n	800f08e <HAL_PCD_SetAddress+0x1a>
 800f08a:	2302      	movs	r3, #2
 800f08c:	e013      	b.n	800f0b6 <HAL_PCD_SetAddress+0x42>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	78fa      	ldrb	r2, [r7, #3]
 800f09a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	78fa      	ldrb	r2, [r7, #3]
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f004 fe00 	bl	8013cac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	4608      	mov	r0, r1
 800f0c8:	4611      	mov	r1, r2
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	70fb      	strb	r3, [r7, #3]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	803b      	strh	r3, [r7, #0]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f0dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	da0f      	bge.n	800f104 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f0e4:	78fb      	ldrb	r3, [r7, #3]
 800f0e6:	f003 020f 	and.w	r2, r3, #15
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	4413      	add	r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	3338      	adds	r3, #56	; 0x38
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2201      	movs	r2, #1
 800f100:	705a      	strb	r2, [r3, #1]
 800f102:	e00f      	b.n	800f124 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f104:	78fb      	ldrb	r3, [r7, #3]
 800f106:	f003 020f 	and.w	r2, r3, #15
 800f10a:	4613      	mov	r3, r2
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	4413      	add	r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	4413      	add	r3, r2
 800f11a:	3304      	adds	r3, #4
 800f11c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f124:	78fb      	ldrb	r3, [r7, #3]
 800f126:	f003 030f 	and.w	r3, r3, #15
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f130:	883a      	ldrh	r2, [r7, #0]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	78ba      	ldrb	r2, [r7, #2]
 800f13a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	785b      	ldrb	r3, [r3, #1]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d004      	beq.n	800f14e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	b29a      	uxth	r2, r3
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f14e:	78bb      	ldrb	r3, [r7, #2]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d102      	bne.n	800f15a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f160:	2b01      	cmp	r3, #1
 800f162:	d101      	bne.n	800f168 <HAL_PCD_EP_Open+0xaa>
 800f164:	2302      	movs	r3, #2
 800f166:	e00e      	b.n	800f186 <HAL_PCD_EP_Open+0xc8>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68f9      	ldr	r1, [r7, #12]
 800f176:	4618      	mov	r0, r3
 800f178:	f003 fe80 	bl	8012e7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800f184:	7afb      	ldrb	r3, [r7, #11]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b084      	sub	sp, #16
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	460b      	mov	r3, r1
 800f198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f19a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	da0f      	bge.n	800f1c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f1a2:	78fb      	ldrb	r3, [r7, #3]
 800f1a4:	f003 020f 	and.w	r2, r3, #15
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	4413      	add	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	3338      	adds	r3, #56	; 0x38
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	705a      	strb	r2, [r3, #1]
 800f1c0:	e00f      	b.n	800f1e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	f003 020f 	and.w	r2, r3, #15
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	4413      	add	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	3304      	adds	r3, #4
 800f1da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f1e2:	78fb      	ldrb	r3, [r7, #3]
 800f1e4:	f003 030f 	and.w	r3, r3, #15
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d101      	bne.n	800f1fc <HAL_PCD_EP_Close+0x6e>
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	e00e      	b.n	800f21a <HAL_PCD_EP_Close+0x8c>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68f9      	ldr	r1, [r7, #12]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f003 febe 	bl	8012f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b086      	sub	sp, #24
 800f226:	af00      	add	r7, sp, #0
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	607a      	str	r2, [r7, #4]
 800f22c:	603b      	str	r3, [r7, #0]
 800f22e:	460b      	mov	r3, r1
 800f230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f232:	7afb      	ldrb	r3, [r7, #11]
 800f234:	f003 020f 	and.w	r2, r3, #15
 800f238:	4613      	mov	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	4413      	add	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	4413      	add	r3, r2
 800f248:	3304      	adds	r3, #4
 800f24a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	683a      	ldr	r2, [r7, #0]
 800f256:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	2200      	movs	r2, #0
 800f25c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2200      	movs	r2, #0
 800f262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f264:	7afb      	ldrb	r3, [r7, #11]
 800f266:	f003 030f 	and.w	r3, r3, #15
 800f26a:	b2da      	uxtb	r2, r3
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d102      	bne.n	800f27e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f27e:	7afb      	ldrb	r3, [r7, #11]
 800f280:	f003 030f 	and.w	r3, r3, #15
 800f284:	2b00      	cmp	r3, #0
 800f286:	d109      	bne.n	800f29c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6818      	ldr	r0, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	b2db      	uxtb	r3, r3
 800f292:	461a      	mov	r2, r3
 800f294:	6979      	ldr	r1, [r7, #20]
 800f296:	f004 f99d 	bl	80135d4 <USB_EP0StartXfer>
 800f29a:	e008      	b.n	800f2ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6818      	ldr	r0, [r3, #0]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	6979      	ldr	r1, [r7, #20]
 800f2aa:	f003 ff4b 	bl	8013144 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3718      	adds	r7, #24
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f2c4:	78fb      	ldrb	r3, [r7, #3]
 800f2c6:	f003 020f 	and.w	r2, r3, #15
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	4413      	add	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	440b      	add	r3, r1
 800f2d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f2da:	681b      	ldr	r3, [r3, #0]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f2f8:	7afb      	ldrb	r3, [r7, #11]
 800f2fa:	f003 020f 	and.w	r2, r3, #15
 800f2fe:	4613      	mov	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	4413      	add	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	3338      	adds	r3, #56	; 0x38
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	4413      	add	r3, r2
 800f30c:	3304      	adds	r3, #4
 800f30e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	2200      	movs	r2, #0
 800f320:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2201      	movs	r2, #1
 800f326:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f328:	7afb      	ldrb	r3, [r7, #11]
 800f32a:	f003 030f 	and.w	r3, r3, #15
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d102      	bne.n	800f342 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f342:	7afb      	ldrb	r3, [r7, #11]
 800f344:	f003 030f 	and.w	r3, r3, #15
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d109      	bne.n	800f360 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6818      	ldr	r0, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	b2db      	uxtb	r3, r3
 800f356:	461a      	mov	r2, r3
 800f358:	6979      	ldr	r1, [r7, #20]
 800f35a:	f004 f93b 	bl	80135d4 <USB_EP0StartXfer>
 800f35e:	e008      	b.n	800f372 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6818      	ldr	r0, [r3, #0]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	691b      	ldr	r3, [r3, #16]
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	461a      	mov	r2, r3
 800f36c:	6979      	ldr	r1, [r7, #20]
 800f36e:	f003 fee9 	bl	8013144 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f388:	78fb      	ldrb	r3, [r7, #3]
 800f38a:	f003 020f 	and.w	r2, r3, #15
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	429a      	cmp	r2, r3
 800f394:	d901      	bls.n	800f39a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f396:	2301      	movs	r3, #1
 800f398:	e050      	b.n	800f43c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f39a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	da0f      	bge.n	800f3c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f3a2:	78fb      	ldrb	r3, [r7, #3]
 800f3a4:	f003 020f 	and.w	r2, r3, #15
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	00db      	lsls	r3, r3, #3
 800f3ac:	4413      	add	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	3338      	adds	r3, #56	; 0x38
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	705a      	strb	r2, [r3, #1]
 800f3c0:	e00d      	b.n	800f3de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f3c2:	78fa      	ldrb	r2, [r7, #3]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	f003 030f 	and.w	r3, r3, #15
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d101      	bne.n	800f3fe <HAL_PCD_EP_SetStall+0x82>
 800f3fa:	2302      	movs	r3, #2
 800f3fc:	e01e      	b.n	800f43c <HAL_PCD_EP_SetStall+0xc0>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68f9      	ldr	r1, [r7, #12]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f004 fb79 	bl	8013b04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f412:	78fb      	ldrb	r3, [r7, #3]
 800f414:	f003 030f 	and.w	r3, r3, #15
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10a      	bne.n	800f432 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6818      	ldr	r0, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	b2d9      	uxtb	r1, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f42c:	461a      	mov	r2, r3
 800f42e:	f004 fd69 	bl	8013f04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	460b      	mov	r3, r1
 800f44e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	f003 020f 	and.w	r2, r3, #15
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d901      	bls.n	800f462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	e042      	b.n	800f4e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f466:	2b00      	cmp	r3, #0
 800f468:	da0f      	bge.n	800f48a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	f003 020f 	and.w	r2, r3, #15
 800f470:	4613      	mov	r3, r2
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	4413      	add	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	3338      	adds	r3, #56	; 0x38
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	4413      	add	r3, r2
 800f47e:	3304      	adds	r3, #4
 800f480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2201      	movs	r2, #1
 800f486:	705a      	strb	r2, [r3, #1]
 800f488:	e00f      	b.n	800f4aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f48a:	78fb      	ldrb	r3, [r7, #3]
 800f48c:	f003 020f 	and.w	r2, r3, #15
 800f490:	4613      	mov	r3, r2
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	4413      	add	r3, r2
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f4b0:	78fb      	ldrb	r3, [r7, #3]
 800f4b2:	f003 030f 	and.w	r3, r3, #15
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d101      	bne.n	800f4ca <HAL_PCD_EP_ClrStall+0x86>
 800f4c6:	2302      	movs	r3, #2
 800f4c8:	e00e      	b.n	800f4e8 <HAL_PCD_EP_ClrStall+0xa4>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68f9      	ldr	r1, [r7, #12]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f004 fb81 	bl	8013be0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800f4fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f500:	2b00      	cmp	r3, #0
 800f502:	da0c      	bge.n	800f51e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f504:	78fb      	ldrb	r3, [r7, #3]
 800f506:	f003 020f 	and.w	r2, r3, #15
 800f50a:	4613      	mov	r3, r2
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	4413      	add	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	3338      	adds	r3, #56	; 0x38
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	4413      	add	r3, r2
 800f518:	3304      	adds	r3, #4
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	e00c      	b.n	800f538 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f51e:	78fb      	ldrb	r3, [r7, #3]
 800f520:	f003 020f 	and.w	r2, r3, #15
 800f524:	4613      	mov	r3, r2
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	4413      	add	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	4413      	add	r3, r2
 800f534:	3304      	adds	r3, #4
 800f536:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	68f9      	ldr	r1, [r7, #12]
 800f53e:	4618      	mov	r0, r3
 800f540:	f004 f9a0 	bl	8013884 <USB_EPStopXfer>
 800f544:	4603      	mov	r3, r0
 800f546:	72fb      	strb	r3, [r7, #11]

  return ret;
 800f548:	7afb      	ldrb	r3, [r7, #11]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b08a      	sub	sp, #40	; 0x28
 800f556:	af02      	add	r7, sp, #8
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4613      	mov	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	3338      	adds	r3, #56	; 0x38
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	4413      	add	r3, r2
 800f576:	3304      	adds	r3, #4
 800f578:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6a1a      	ldr	r2, [r3, #32]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	429a      	cmp	r2, r3
 800f584:	d901      	bls.n	800f58a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e06c      	b.n	800f664 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	699a      	ldr	r2, [r3, #24]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	1ad3      	subs	r3, r2, r3
 800f594:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	69fa      	ldr	r2, [r7, #28]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d902      	bls.n	800f5a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	3303      	adds	r3, #3
 800f5aa:	089b      	lsrs	r3, r3, #2
 800f5ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f5ae:	e02b      	b.n	800f608 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	699a      	ldr	r2, [r3, #24]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6a1b      	ldr	r3, [r3, #32]
 800f5b8:	1ad3      	subs	r3, r2, r3
 800f5ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	69fa      	ldr	r2, [r7, #28]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d902      	bls.n	800f5cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3303      	adds	r3, #3
 800f5d0:	089b      	lsrs	r3, r3, #2
 800f5d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6919      	ldr	r1, [r3, #16]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	6978      	ldr	r0, [r7, #20]
 800f5ec:	f004 f9f4 	bl	80139d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	691a      	ldr	r2, [r3, #16]
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	441a      	add	r2, r3
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6a1a      	ldr	r2, [r3, #32]
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	441a      	add	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	b29b      	uxth	r3, r3
 800f618:	69ba      	ldr	r2, [r7, #24]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d809      	bhi.n	800f632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6a1a      	ldr	r2, [r3, #32]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f626:	429a      	cmp	r2, r3
 800f628:	d203      	bcs.n	800f632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1be      	bne.n	800f5b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	699a      	ldr	r2, [r3, #24]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d811      	bhi.n	800f662 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	f003 030f 	and.w	r3, r3, #15
 800f644:	2201      	movs	r2, #1
 800f646:	fa02 f303 	lsl.w	r3, r2, r3
 800f64a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	43db      	mvns	r3, r3
 800f658:	6939      	ldr	r1, [r7, #16]
 800f65a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f65e:	4013      	ands	r3, r2
 800f660:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f662:	2300      	movs	r3, #0
}
 800f664:	4618      	mov	r0, r3
 800f666:	3720      	adds	r7, #32
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b088      	sub	sp, #32
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	333c      	adds	r3, #60	; 0x3c
 800f684:	3304      	adds	r3, #4
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	015a      	lsls	r2, r3, #5
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	4413      	add	r3, r2
 800f692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d17b      	bne.n	800f79a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	f003 0308 	and.w	r3, r3, #8
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d015      	beq.n	800f6d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	4a61      	ldr	r2, [pc, #388]	; (800f834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	f240 80b9 	bls.w	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	f000 80b3 	beq.w	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	015a      	lsls	r2, r3, #5
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6d4:	6093      	str	r3, [r2, #8]
 800f6d6:	e0a7      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f003 0320 	and.w	r3, r3, #32
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d009      	beq.n	800f6f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	015a      	lsls	r2, r3, #5
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	2320      	movs	r3, #32
 800f6f2:	6093      	str	r3, [r2, #8]
 800f6f4:	e098      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f040 8093 	bne.w	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	4a4b      	ldr	r2, [pc, #300]	; (800f834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d90f      	bls.n	800f72a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00a      	beq.n	800f72a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	015a      	lsls	r2, r3, #5
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	4413      	add	r3, r2
 800f71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f720:	461a      	mov	r2, r3
 800f722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f726:	6093      	str	r3, [r2, #8]
 800f728:	e07e      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	4613      	mov	r3, r2
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	4413      	add	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	4413      	add	r3, r2
 800f73c:	3304      	adds	r3, #4
 800f73e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	69da      	ldr	r2, [r3, #28]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	0159      	lsls	r1, r3, #5
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	440b      	add	r3, r1
 800f74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f750:	691b      	ldr	r3, [r3, #16]
 800f752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f756:	1ad2      	subs	r2, r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d114      	bne.n	800f78c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6818      	ldr	r0, [r3, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f774:	461a      	mov	r2, r3
 800f776:	2101      	movs	r1, #1
 800f778:	f004 fbc4 	bl	8013f04 <USB_EP0_OutStart>
 800f77c:	e006      	b.n	800f78c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	691a      	ldr	r2, [r3, #16]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	441a      	add	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f006 fe34 	bl	8016400 <HAL_PCD_DataOutStageCallback>
 800f798:	e046      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	4a26      	ldr	r2, [pc, #152]	; (800f838 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d124      	bne.n	800f7ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00a      	beq.n	800f7c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	015a      	lsls	r2, r3, #5
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7be:	6093      	str	r3, [r2, #8]
 800f7c0:	e032      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f003 0320 	and.w	r3, r3, #32
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d008      	beq.n	800f7de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d8:	461a      	mov	r2, r3
 800f7da:	2320      	movs	r3, #32
 800f7dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f006 fe0b 	bl	8016400 <HAL_PCD_DataOutStageCallback>
 800f7ea:	e01d      	b.n	800f828 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d114      	bne.n	800f81c <PCD_EP_OutXfrComplete_int+0x1b0>
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	4413      	add	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	440b      	add	r3, r1
 800f800:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d108      	bne.n	800f81c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6818      	ldr	r0, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f814:	461a      	mov	r2, r3
 800f816:	2100      	movs	r1, #0
 800f818:	f004 fb74 	bl	8013f04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f006 fdec 	bl	8016400 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3720      	adds	r7, #32
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	4f54300a 	.word	0x4f54300a
 800f838:	4f54310a 	.word	0x4f54310a

0800f83c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	333c      	adds	r3, #60	; 0x3c
 800f854:	3304      	adds	r3, #4
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4a15      	ldr	r2, [pc, #84]	; (800f8c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d90e      	bls.n	800f890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d009      	beq.n	800f890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	015a      	lsls	r2, r3, #5
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	4413      	add	r3, r2
 800f884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f888:	461a      	mov	r2, r3
 800f88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f88e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f006 fda3 	bl	80163dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4a0a      	ldr	r2, [pc, #40]	; (800f8c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d90c      	bls.n	800f8b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d108      	bne.n	800f8b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6818      	ldr	r0, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	f004 fb26 	bl	8013f04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3718      	adds	r7, #24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	4f54300a 	.word	0x4f54300a

0800f8c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	70fb      	strb	r3, [r7, #3]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f8e0:	78fb      	ldrb	r3, [r7, #3]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d107      	bne.n	800f8f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f8e6:	883b      	ldrh	r3, [r7, #0]
 800f8e8:	0419      	lsls	r1, r3, #16
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	629a      	str	r2, [r3, #40]	; 0x28
 800f8f4:	e028      	b.n	800f948 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fc:	0c1b      	lsrs	r3, r3, #16
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	4413      	add	r3, r2
 800f902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f904:	2300      	movs	r3, #0
 800f906:	73fb      	strb	r3, [r7, #15]
 800f908:	e00d      	b.n	800f926 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	3340      	adds	r3, #64	; 0x40
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	4413      	add	r3, r2
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	0c1b      	lsrs	r3, r3, #16
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	4413      	add	r3, r2
 800f91e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	3301      	adds	r3, #1
 800f924:	73fb      	strb	r3, [r7, #15]
 800f926:	7bfa      	ldrb	r2, [r7, #15]
 800f928:	78fb      	ldrb	r3, [r7, #3]
 800f92a:	3b01      	subs	r3, #1
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d3ec      	bcc.n	800f90a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f930:	883b      	ldrh	r3, [r7, #0]
 800f932:	0418      	lsls	r0, r3, #16
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6819      	ldr	r1, [r3, #0]
 800f938:	78fb      	ldrb	r3, [r7, #3]
 800f93a:	3b01      	subs	r3, #1
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	4302      	orrs	r2, r0
 800f940:	3340      	adds	r3, #64	; 0x40
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	440b      	add	r3, r1
 800f946:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3714      	adds	r7, #20
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f956:	b480      	push	{r7}
 800f958:	b083      	sub	sp, #12
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	460b      	mov	r3, r1
 800f960:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	887a      	ldrh	r2, [r7, #2]
 800f968:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	460b      	mov	r3, r1
 800f982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800f994:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <HAL_PWR_PVD_IRQHandler+0x20>)
 800f996:	695b      	ldr	r3, [r3, #20]
 800f998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800f9a0:	f000 f808 	bl	800f9b4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800f9a4:	4b02      	ldr	r3, [pc, #8]	; (800f9b0 <HAL_PWR_PVD_IRQHandler+0x20>)
 800f9a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f9aa:	615a      	str	r2, [r3, #20]
  }
}
 800f9ac:	bf00      	nop
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	40013c00 	.word	0x40013c00

0800f9b4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800f9b8:	bf00      	nop
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
	...

0800f9c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d101      	bne.n	800f9d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e267      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f003 0301 	and.w	r3, r3, #1
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d075      	beq.n	800face <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f9e2:	4b88      	ldr	r3, [pc, #544]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f003 030c 	and.w	r3, r3, #12
 800f9ea:	2b04      	cmp	r3, #4
 800f9ec:	d00c      	beq.n	800fa08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f9ee:	4b85      	ldr	r3, [pc, #532]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f9f6:	2b08      	cmp	r3, #8
 800f9f8:	d112      	bne.n	800fa20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f9fa:	4b82      	ldr	r3, [pc, #520]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa06:	d10b      	bne.n	800fa20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa08:	4b7e      	ldr	r3, [pc, #504]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d05b      	beq.n	800facc <HAL_RCC_OscConfig+0x108>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d157      	bne.n	800facc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e242      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa28:	d106      	bne.n	800fa38 <HAL_RCC_OscConfig+0x74>
 800fa2a:	4b76      	ldr	r3, [pc, #472]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a75      	ldr	r2, [pc, #468]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa34:	6013      	str	r3, [r2, #0]
 800fa36:	e01d      	b.n	800fa74 <HAL_RCC_OscConfig+0xb0>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fa40:	d10c      	bne.n	800fa5c <HAL_RCC_OscConfig+0x98>
 800fa42:	4b70      	ldr	r3, [pc, #448]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a6f      	ldr	r2, [pc, #444]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa4c:	6013      	str	r3, [r2, #0]
 800fa4e:	4b6d      	ldr	r3, [pc, #436]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4a6c      	ldr	r2, [pc, #432]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa58:	6013      	str	r3, [r2, #0]
 800fa5a:	e00b      	b.n	800fa74 <HAL_RCC_OscConfig+0xb0>
 800fa5c:	4b69      	ldr	r3, [pc, #420]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a68      	ldr	r2, [pc, #416]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	4b66      	ldr	r3, [pc, #408]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4a65      	ldr	r2, [pc, #404]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fa72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d013      	beq.n	800faa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa7c:	f7fc fc92 	bl	800c3a4 <HAL_GetTick>
 800fa80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fa82:	e008      	b.n	800fa96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fa84:	f7fc fc8e 	bl	800c3a4 <HAL_GetTick>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	1ad3      	subs	r3, r2, r3
 800fa8e:	2b64      	cmp	r3, #100	; 0x64
 800fa90:	d901      	bls.n	800fa96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800fa92:	2303      	movs	r3, #3
 800fa94:	e207      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fa96:	4b5b      	ldr	r3, [pc, #364]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d0f0      	beq.n	800fa84 <HAL_RCC_OscConfig+0xc0>
 800faa2:	e014      	b.n	800face <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800faa4:	f7fc fc7e 	bl	800c3a4 <HAL_GetTick>
 800faa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800faaa:	e008      	b.n	800fabe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800faac:	f7fc fc7a 	bl	800c3a4 <HAL_GetTick>
 800fab0:	4602      	mov	r2, r0
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	2b64      	cmp	r3, #100	; 0x64
 800fab8:	d901      	bls.n	800fabe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800faba:	2303      	movs	r3, #3
 800fabc:	e1f3      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fabe:	4b51      	ldr	r3, [pc, #324]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1f0      	bne.n	800faac <HAL_RCC_OscConfig+0xe8>
 800faca:	e000      	b.n	800face <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800facc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f003 0302 	and.w	r3, r3, #2
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d063      	beq.n	800fba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fada:	4b4a      	ldr	r3, [pc, #296]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f003 030c 	and.w	r3, r3, #12
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00b      	beq.n	800fafe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fae6:	4b47      	ldr	r3, [pc, #284]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800faee:	2b08      	cmp	r3, #8
 800faf0:	d11c      	bne.n	800fb2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800faf2:	4b44      	ldr	r3, [pc, #272]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d116      	bne.n	800fb2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fafe:	4b41      	ldr	r3, [pc, #260]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f003 0302 	and.w	r3, r3, #2
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d005      	beq.n	800fb16 <HAL_RCC_OscConfig+0x152>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d001      	beq.n	800fb16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e1c7      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb16:	4b3b      	ldr	r3, [pc, #236]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	691b      	ldr	r3, [r3, #16]
 800fb22:	00db      	lsls	r3, r3, #3
 800fb24:	4937      	ldr	r1, [pc, #220]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb26:	4313      	orrs	r3, r2
 800fb28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fb2a:	e03a      	b.n	800fba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d020      	beq.n	800fb76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fb34:	4b34      	ldr	r3, [pc, #208]	; (800fc08 <HAL_RCC_OscConfig+0x244>)
 800fb36:	2201      	movs	r2, #1
 800fb38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb3a:	f7fc fc33 	bl	800c3a4 <HAL_GetTick>
 800fb3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb40:	e008      	b.n	800fb54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fb42:	f7fc fc2f 	bl	800c3a4 <HAL_GetTick>
 800fb46:	4602      	mov	r2, r0
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d901      	bls.n	800fb54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800fb50:	2303      	movs	r3, #3
 800fb52:	e1a8      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fb54:	4b2b      	ldr	r3, [pc, #172]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0302 	and.w	r3, r3, #2
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d0f0      	beq.n	800fb42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb60:	4b28      	ldr	r3, [pc, #160]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	691b      	ldr	r3, [r3, #16]
 800fb6c:	00db      	lsls	r3, r3, #3
 800fb6e:	4925      	ldr	r1, [pc, #148]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb70:	4313      	orrs	r3, r2
 800fb72:	600b      	str	r3, [r1, #0]
 800fb74:	e015      	b.n	800fba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fb76:	4b24      	ldr	r3, [pc, #144]	; (800fc08 <HAL_RCC_OscConfig+0x244>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb7c:	f7fc fc12 	bl	800c3a4 <HAL_GetTick>
 800fb80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fb82:	e008      	b.n	800fb96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fb84:	f7fc fc0e 	bl	800c3a4 <HAL_GetTick>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d901      	bls.n	800fb96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800fb92:	2303      	movs	r3, #3
 800fb94:	e187      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fb96:	4b1b      	ldr	r3, [pc, #108]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f003 0302 	and.w	r3, r3, #2
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1f0      	bne.n	800fb84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f003 0308 	and.w	r3, r3, #8
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d036      	beq.n	800fc1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d016      	beq.n	800fbe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fbb6:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <HAL_RCC_OscConfig+0x248>)
 800fbb8:	2201      	movs	r2, #1
 800fbba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbbc:	f7fc fbf2 	bl	800c3a4 <HAL_GetTick>
 800fbc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fbc2:	e008      	b.n	800fbd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fbc4:	f7fc fbee 	bl	800c3a4 <HAL_GetTick>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d901      	bls.n	800fbd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800fbd2:	2303      	movs	r3, #3
 800fbd4:	e167      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fbd6:	4b0b      	ldr	r3, [pc, #44]	; (800fc04 <HAL_RCC_OscConfig+0x240>)
 800fbd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbda:	f003 0302 	and.w	r3, r3, #2
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d0f0      	beq.n	800fbc4 <HAL_RCC_OscConfig+0x200>
 800fbe2:	e01b      	b.n	800fc1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fbe4:	4b09      	ldr	r3, [pc, #36]	; (800fc0c <HAL_RCC_OscConfig+0x248>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fbea:	f7fc fbdb 	bl	800c3a4 <HAL_GetTick>
 800fbee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fbf0:	e00e      	b.n	800fc10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fbf2:	f7fc fbd7 	bl	800c3a4 <HAL_GetTick>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d907      	bls.n	800fc10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800fc00:	2303      	movs	r3, #3
 800fc02:	e150      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
 800fc04:	40023800 	.word	0x40023800
 800fc08:	42470000 	.word	0x42470000
 800fc0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fc10:	4b88      	ldr	r3, [pc, #544]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fc12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc14:	f003 0302 	and.w	r3, r3, #2
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1ea      	bne.n	800fbf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f003 0304 	and.w	r3, r3, #4
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 8097 	beq.w	800fd58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc2e:	4b81      	ldr	r3, [pc, #516]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10f      	bne.n	800fc5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60bb      	str	r3, [r7, #8]
 800fc3e:	4b7d      	ldr	r3, [pc, #500]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc42:	4a7c      	ldr	r2, [pc, #496]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fc44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc48:	6413      	str	r3, [r2, #64]	; 0x40
 800fc4a:	4b7a      	ldr	r3, [pc, #488]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc52:	60bb      	str	r3, [r7, #8]
 800fc54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fc56:	2301      	movs	r3, #1
 800fc58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fc5a:	4b77      	ldr	r3, [pc, #476]	; (800fe38 <HAL_RCC_OscConfig+0x474>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d118      	bne.n	800fc98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fc66:	4b74      	ldr	r3, [pc, #464]	; (800fe38 <HAL_RCC_OscConfig+0x474>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a73      	ldr	r2, [pc, #460]	; (800fe38 <HAL_RCC_OscConfig+0x474>)
 800fc6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fc72:	f7fc fb97 	bl	800c3a4 <HAL_GetTick>
 800fc76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fc78:	e008      	b.n	800fc8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc7a:	f7fc fb93 	bl	800c3a4 <HAL_GetTick>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d901      	bls.n	800fc8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e10c      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fc8c:	4b6a      	ldr	r3, [pc, #424]	; (800fe38 <HAL_RCC_OscConfig+0x474>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d0f0      	beq.n	800fc7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d106      	bne.n	800fcae <HAL_RCC_OscConfig+0x2ea>
 800fca0:	4b64      	ldr	r3, [pc, #400]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca4:	4a63      	ldr	r2, [pc, #396]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fca6:	f043 0301 	orr.w	r3, r3, #1
 800fcaa:	6713      	str	r3, [r2, #112]	; 0x70
 800fcac:	e01c      	b.n	800fce8 <HAL_RCC_OscConfig+0x324>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	2b05      	cmp	r3, #5
 800fcb4:	d10c      	bne.n	800fcd0 <HAL_RCC_OscConfig+0x30c>
 800fcb6:	4b5f      	ldr	r3, [pc, #380]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcba:	4a5e      	ldr	r2, [pc, #376]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcbc:	f043 0304 	orr.w	r3, r3, #4
 800fcc0:	6713      	str	r3, [r2, #112]	; 0x70
 800fcc2:	4b5c      	ldr	r3, [pc, #368]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcc6:	4a5b      	ldr	r2, [pc, #364]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcc8:	f043 0301 	orr.w	r3, r3, #1
 800fccc:	6713      	str	r3, [r2, #112]	; 0x70
 800fcce:	e00b      	b.n	800fce8 <HAL_RCC_OscConfig+0x324>
 800fcd0:	4b58      	ldr	r3, [pc, #352]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd4:	4a57      	ldr	r2, [pc, #348]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcd6:	f023 0301 	bic.w	r3, r3, #1
 800fcda:	6713      	str	r3, [r2, #112]	; 0x70
 800fcdc:	4b55      	ldr	r3, [pc, #340]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fcde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce0:	4a54      	ldr	r2, [pc, #336]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fce2:	f023 0304 	bic.w	r3, r3, #4
 800fce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d015      	beq.n	800fd1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fcf0:	f7fc fb58 	bl	800c3a4 <HAL_GetTick>
 800fcf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fcf6:	e00a      	b.n	800fd0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fcf8:	f7fc fb54 	bl	800c3a4 <HAL_GetTick>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d901      	bls.n	800fd0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800fd0a:	2303      	movs	r3, #3
 800fd0c:	e0cb      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fd0e:	4b49      	ldr	r3, [pc, #292]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd12:	f003 0302 	and.w	r3, r3, #2
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0ee      	beq.n	800fcf8 <HAL_RCC_OscConfig+0x334>
 800fd1a:	e014      	b.n	800fd46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd1c:	f7fc fb42 	bl	800c3a4 <HAL_GetTick>
 800fd20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd22:	e00a      	b.n	800fd3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd24:	f7fc fb3e 	bl	800c3a4 <HAL_GetTick>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d901      	bls.n	800fd3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800fd36:	2303      	movs	r3, #3
 800fd38:	e0b5      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd3a:	4b3e      	ldr	r3, [pc, #248]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd3e:	f003 0302 	and.w	r3, r3, #2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1ee      	bne.n	800fd24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d105      	bne.n	800fd58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fd4c:	4b39      	ldr	r3, [pc, #228]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd50:	4a38      	ldr	r2, [pc, #224]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	699b      	ldr	r3, [r3, #24]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 80a1 	beq.w	800fea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fd62:	4b34      	ldr	r3, [pc, #208]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	f003 030c 	and.w	r3, r3, #12
 800fd6a:	2b08      	cmp	r3, #8
 800fd6c:	d05c      	beq.n	800fe28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	699b      	ldr	r3, [r3, #24]
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d141      	bne.n	800fdfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd76:	4b31      	ldr	r3, [pc, #196]	; (800fe3c <HAL_RCC_OscConfig+0x478>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd7c:	f7fc fb12 	bl	800c3a4 <HAL_GetTick>
 800fd80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd82:	e008      	b.n	800fd96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fd84:	f7fc fb0e 	bl	800c3a4 <HAL_GetTick>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d901      	bls.n	800fd96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e087      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd96:	4b27      	ldr	r3, [pc, #156]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1f0      	bne.n	800fd84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	69da      	ldr	r2, [r3, #28]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	431a      	orrs	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb0:	019b      	lsls	r3, r3, #6
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb8:	085b      	lsrs	r3, r3, #1
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	041b      	lsls	r3, r3, #16
 800fdbe:	431a      	orrs	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc4:	061b      	lsls	r3, r3, #24
 800fdc6:	491b      	ldr	r1, [pc, #108]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fdcc:	4b1b      	ldr	r3, [pc, #108]	; (800fe3c <HAL_RCC_OscConfig+0x478>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fdd2:	f7fc fae7 	bl	800c3a4 <HAL_GetTick>
 800fdd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fdd8:	e008      	b.n	800fdec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fdda:	f7fc fae3 	bl	800c3a4 <HAL_GetTick>
 800fdde:	4602      	mov	r2, r0
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	2b02      	cmp	r3, #2
 800fde6:	d901      	bls.n	800fdec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800fde8:	2303      	movs	r3, #3
 800fdea:	e05c      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fdec:	4b11      	ldr	r3, [pc, #68]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d0f0      	beq.n	800fdda <HAL_RCC_OscConfig+0x416>
 800fdf8:	e054      	b.n	800fea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fdfa:	4b10      	ldr	r3, [pc, #64]	; (800fe3c <HAL_RCC_OscConfig+0x478>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe00:	f7fc fad0 	bl	800c3a4 <HAL_GetTick>
 800fe04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fe06:	e008      	b.n	800fe1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe08:	f7fc facc 	bl	800c3a4 <HAL_GetTick>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	d901      	bls.n	800fe1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	e045      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fe1a:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <HAL_RCC_OscConfig+0x470>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1f0      	bne.n	800fe08 <HAL_RCC_OscConfig+0x444>
 800fe26:	e03d      	b.n	800fea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d107      	bne.n	800fe40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800fe30:	2301      	movs	r3, #1
 800fe32:	e038      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
 800fe34:	40023800 	.word	0x40023800
 800fe38:	40007000 	.word	0x40007000
 800fe3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fe40:	4b1b      	ldr	r3, [pc, #108]	; (800feb0 <HAL_RCC_OscConfig+0x4ec>)
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d028      	beq.n	800fea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d121      	bne.n	800fea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d11a      	bne.n	800fea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fe70:	4013      	ands	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fe76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d111      	bne.n	800fea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe86:	085b      	lsrs	r3, r3, #1
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d107      	bne.n	800fea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d001      	beq.n	800fea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800fea0:	2301      	movs	r3, #1
 800fea2:	e000      	b.n	800fea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	40023800 	.word	0x40023800

0800feb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d101      	bne.n	800fec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	e0cc      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fec8:	4b68      	ldr	r3, [pc, #416]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f003 030f 	and.w	r3, r3, #15
 800fed0:	683a      	ldr	r2, [r7, #0]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d90c      	bls.n	800fef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fed6:	4b65      	ldr	r3, [pc, #404]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	b2d2      	uxtb	r2, r2
 800fedc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fede:	4b63      	ldr	r3, [pc, #396]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 030f 	and.w	r3, r3, #15
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d001      	beq.n	800fef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800feec:	2301      	movs	r3, #1
 800feee:	e0b8      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f003 0302 	and.w	r3, r3, #2
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d020      	beq.n	800ff3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f003 0304 	and.w	r3, r3, #4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d005      	beq.n	800ff14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ff08:	4b59      	ldr	r3, [pc, #356]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	4a58      	ldr	r2, [pc, #352]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ff12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f003 0308 	and.w	r3, r3, #8
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d005      	beq.n	800ff2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ff20:	4b53      	ldr	r3, [pc, #332]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	4a52      	ldr	r2, [pc, #328]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ff2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff2c:	4b50      	ldr	r3, [pc, #320]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	494d      	ldr	r1, [pc, #308]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d044      	beq.n	800ffd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d107      	bne.n	800ff62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ff52:	4b47      	ldr	r3, [pc, #284]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d119      	bne.n	800ff92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e07f      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d003      	beq.n	800ff72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d107      	bne.n	800ff82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff72:	4b3f      	ldr	r3, [pc, #252]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d109      	bne.n	800ff92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e06f      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ff82:	4b3b      	ldr	r3, [pc, #236]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f003 0302 	and.w	r3, r3, #2
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d101      	bne.n	800ff92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e067      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ff92:	4b37      	ldr	r3, [pc, #220]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	f023 0203 	bic.w	r2, r3, #3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	4934      	ldr	r1, [pc, #208]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ffa4:	f7fc f9fe 	bl	800c3a4 <HAL_GetTick>
 800ffa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ffaa:	e00a      	b.n	800ffc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ffac:	f7fc f9fa 	bl	800c3a4 <HAL_GetTick>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d901      	bls.n	800ffc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e04f      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ffc2:	4b2b      	ldr	r3, [pc, #172]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	f003 020c 	and.w	r2, r3, #12
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d1eb      	bne.n	800ffac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ffd4:	4b25      	ldr	r3, [pc, #148]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 030f 	and.w	r3, r3, #15
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d20c      	bcs.n	800fffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ffe2:	4b22      	ldr	r3, [pc, #136]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	b2d2      	uxtb	r2, r2
 800ffe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ffea:	4b20      	ldr	r3, [pc, #128]	; (801006c <HAL_RCC_ClockConfig+0x1b8>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f003 030f 	and.w	r3, r3, #15
 800fff2:	683a      	ldr	r2, [r7, #0]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d001      	beq.n	800fffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	e032      	b.n	8010062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d008      	beq.n	801001a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010008:	4b19      	ldr	r3, [pc, #100]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	4916      	ldr	r1, [pc, #88]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 8010016:	4313      	orrs	r3, r2
 8010018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 0308 	and.w	r3, r3, #8
 8010022:	2b00      	cmp	r3, #0
 8010024:	d009      	beq.n	801003a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010026:	4b12      	ldr	r3, [pc, #72]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	490e      	ldr	r1, [pc, #56]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 8010036:	4313      	orrs	r3, r2
 8010038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801003a:	f000 f821 	bl	8010080 <HAL_RCC_GetSysClockFreq>
 801003e:	4602      	mov	r2, r0
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <HAL_RCC_ClockConfig+0x1bc>)
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	091b      	lsrs	r3, r3, #4
 8010046:	f003 030f 	and.w	r3, r3, #15
 801004a:	490a      	ldr	r1, [pc, #40]	; (8010074 <HAL_RCC_ClockConfig+0x1c0>)
 801004c:	5ccb      	ldrb	r3, [r1, r3]
 801004e:	fa22 f303 	lsr.w	r3, r2, r3
 8010052:	4a09      	ldr	r2, [pc, #36]	; (8010078 <HAL_RCC_ClockConfig+0x1c4>)
 8010054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010056:	4b09      	ldr	r3, [pc, #36]	; (801007c <HAL_RCC_ClockConfig+0x1c8>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4618      	mov	r0, r3
 801005c:	f7fc f95e 	bl	800c31c <HAL_InitTick>

  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	40023c00 	.word	0x40023c00
 8010070:	40023800 	.word	0x40023800
 8010074:	08018820 	.word	0x08018820
 8010078:	200001d4 	.word	0x200001d4
 801007c:	200001fc 	.word	0x200001fc

08010080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010084:	b094      	sub	sp, #80	; 0x50
 8010086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010088:	2300      	movs	r3, #0
 801008a:	647b      	str	r3, [r7, #68]	; 0x44
 801008c:	2300      	movs	r3, #0
 801008e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010090:	2300      	movs	r3, #0
 8010092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8010094:	2300      	movs	r3, #0
 8010096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010098:	4b79      	ldr	r3, [pc, #484]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	f003 030c 	and.w	r3, r3, #12
 80100a0:	2b08      	cmp	r3, #8
 80100a2:	d00d      	beq.n	80100c0 <HAL_RCC_GetSysClockFreq+0x40>
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	f200 80e1 	bhi.w	801026c <HAL_RCC_GetSysClockFreq+0x1ec>
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <HAL_RCC_GetSysClockFreq+0x34>
 80100ae:	2b04      	cmp	r3, #4
 80100b0:	d003      	beq.n	80100ba <HAL_RCC_GetSysClockFreq+0x3a>
 80100b2:	e0db      	b.n	801026c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80100b4:	4b73      	ldr	r3, [pc, #460]	; (8010284 <HAL_RCC_GetSysClockFreq+0x204>)
 80100b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80100b8:	e0db      	b.n	8010272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80100ba:	4b73      	ldr	r3, [pc, #460]	; (8010288 <HAL_RCC_GetSysClockFreq+0x208>)
 80100bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80100be:	e0d8      	b.n	8010272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80100c0:	4b6f      	ldr	r3, [pc, #444]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80100ca:	4b6d      	ldr	r3, [pc, #436]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d063      	beq.n	801019e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80100d6:	4b6a      	ldr	r3, [pc, #424]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	099b      	lsrs	r3, r3, #6
 80100dc:	2200      	movs	r2, #0
 80100de:	63bb      	str	r3, [r7, #56]	; 0x38
 80100e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100e8:	633b      	str	r3, [r7, #48]	; 0x30
 80100ea:	2300      	movs	r3, #0
 80100ec:	637b      	str	r3, [r7, #52]	; 0x34
 80100ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80100f2:	4622      	mov	r2, r4
 80100f4:	462b      	mov	r3, r5
 80100f6:	f04f 0000 	mov.w	r0, #0
 80100fa:	f04f 0100 	mov.w	r1, #0
 80100fe:	0159      	lsls	r1, r3, #5
 8010100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010104:	0150      	lsls	r0, r2, #5
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4621      	mov	r1, r4
 801010c:	1a51      	subs	r1, r2, r1
 801010e:	6139      	str	r1, [r7, #16]
 8010110:	4629      	mov	r1, r5
 8010112:	eb63 0301 	sbc.w	r3, r3, r1
 8010116:	617b      	str	r3, [r7, #20]
 8010118:	f04f 0200 	mov.w	r2, #0
 801011c:	f04f 0300 	mov.w	r3, #0
 8010120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010124:	4659      	mov	r1, fp
 8010126:	018b      	lsls	r3, r1, #6
 8010128:	4651      	mov	r1, sl
 801012a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801012e:	4651      	mov	r1, sl
 8010130:	018a      	lsls	r2, r1, #6
 8010132:	4651      	mov	r1, sl
 8010134:	ebb2 0801 	subs.w	r8, r2, r1
 8010138:	4659      	mov	r1, fp
 801013a:	eb63 0901 	sbc.w	r9, r3, r1
 801013e:	f04f 0200 	mov.w	r2, #0
 8010142:	f04f 0300 	mov.w	r3, #0
 8010146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801014a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801014e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010152:	4690      	mov	r8, r2
 8010154:	4699      	mov	r9, r3
 8010156:	4623      	mov	r3, r4
 8010158:	eb18 0303 	adds.w	r3, r8, r3
 801015c:	60bb      	str	r3, [r7, #8]
 801015e:	462b      	mov	r3, r5
 8010160:	eb49 0303 	adc.w	r3, r9, r3
 8010164:	60fb      	str	r3, [r7, #12]
 8010166:	f04f 0200 	mov.w	r2, #0
 801016a:	f04f 0300 	mov.w	r3, #0
 801016e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010172:	4629      	mov	r1, r5
 8010174:	024b      	lsls	r3, r1, #9
 8010176:	4621      	mov	r1, r4
 8010178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801017c:	4621      	mov	r1, r4
 801017e:	024a      	lsls	r2, r1, #9
 8010180:	4610      	mov	r0, r2
 8010182:	4619      	mov	r1, r3
 8010184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010186:	2200      	movs	r2, #0
 8010188:	62bb      	str	r3, [r7, #40]	; 0x28
 801018a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801018c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010190:	f7f0 fc74 	bl	8000a7c <__aeabi_uldivmod>
 8010194:	4602      	mov	r2, r0
 8010196:	460b      	mov	r3, r1
 8010198:	4613      	mov	r3, r2
 801019a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801019c:	e058      	b.n	8010250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801019e:	4b38      	ldr	r3, [pc, #224]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	099b      	lsrs	r3, r3, #6
 80101a4:	2200      	movs	r2, #0
 80101a6:	4618      	mov	r0, r3
 80101a8:	4611      	mov	r1, r2
 80101aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80101ae:	623b      	str	r3, [r7, #32]
 80101b0:	2300      	movs	r3, #0
 80101b2:	627b      	str	r3, [r7, #36]	; 0x24
 80101b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80101b8:	4642      	mov	r2, r8
 80101ba:	464b      	mov	r3, r9
 80101bc:	f04f 0000 	mov.w	r0, #0
 80101c0:	f04f 0100 	mov.w	r1, #0
 80101c4:	0159      	lsls	r1, r3, #5
 80101c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80101ca:	0150      	lsls	r0, r2, #5
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4641      	mov	r1, r8
 80101d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80101d6:	4649      	mov	r1, r9
 80101d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80101dc:	f04f 0200 	mov.w	r2, #0
 80101e0:	f04f 0300 	mov.w	r3, #0
 80101e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80101e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80101ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80101f0:	ebb2 040a 	subs.w	r4, r2, sl
 80101f4:	eb63 050b 	sbc.w	r5, r3, fp
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	f04f 0300 	mov.w	r3, #0
 8010200:	00eb      	lsls	r3, r5, #3
 8010202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010206:	00e2      	lsls	r2, r4, #3
 8010208:	4614      	mov	r4, r2
 801020a:	461d      	mov	r5, r3
 801020c:	4643      	mov	r3, r8
 801020e:	18e3      	adds	r3, r4, r3
 8010210:	603b      	str	r3, [r7, #0]
 8010212:	464b      	mov	r3, r9
 8010214:	eb45 0303 	adc.w	r3, r5, r3
 8010218:	607b      	str	r3, [r7, #4]
 801021a:	f04f 0200 	mov.w	r2, #0
 801021e:	f04f 0300 	mov.w	r3, #0
 8010222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010226:	4629      	mov	r1, r5
 8010228:	028b      	lsls	r3, r1, #10
 801022a:	4621      	mov	r1, r4
 801022c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010230:	4621      	mov	r1, r4
 8010232:	028a      	lsls	r2, r1, #10
 8010234:	4610      	mov	r0, r2
 8010236:	4619      	mov	r1, r3
 8010238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801023a:	2200      	movs	r2, #0
 801023c:	61bb      	str	r3, [r7, #24]
 801023e:	61fa      	str	r2, [r7, #28]
 8010240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010244:	f7f0 fc1a 	bl	8000a7c <__aeabi_uldivmod>
 8010248:	4602      	mov	r2, r0
 801024a:	460b      	mov	r3, r1
 801024c:	4613      	mov	r3, r2
 801024e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <HAL_RCC_GetSysClockFreq+0x200>)
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	0c1b      	lsrs	r3, r3, #16
 8010256:	f003 0303 	and.w	r3, r3, #3
 801025a:	3301      	adds	r3, #1
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8010260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010264:	fbb2 f3f3 	udiv	r3, r2, r3
 8010268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801026a:	e002      	b.n	8010272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801026c:	4b05      	ldr	r3, [pc, #20]	; (8010284 <HAL_RCC_GetSysClockFreq+0x204>)
 801026e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010274:	4618      	mov	r0, r3
 8010276:	3750      	adds	r7, #80	; 0x50
 8010278:	46bd      	mov	sp, r7
 801027a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801027e:	bf00      	nop
 8010280:	40023800 	.word	0x40023800
 8010284:	00f42400 	.word	0x00f42400
 8010288:	007a1200 	.word	0x007a1200

0801028c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801028c:	b480      	push	{r7}
 801028e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010290:	4b03      	ldr	r3, [pc, #12]	; (80102a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8010292:	681b      	ldr	r3, [r3, #0]
}
 8010294:	4618      	mov	r0, r3
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	200001d4 	.word	0x200001d4

080102a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80102a8:	f7ff fff0 	bl	801028c <HAL_RCC_GetHCLKFreq>
 80102ac:	4602      	mov	r2, r0
 80102ae:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	0a9b      	lsrs	r3, r3, #10
 80102b4:	f003 0307 	and.w	r3, r3, #7
 80102b8:	4903      	ldr	r1, [pc, #12]	; (80102c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80102ba:	5ccb      	ldrb	r3, [r1, r3]
 80102bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	40023800 	.word	0x40023800
 80102c8:	08018830 	.word	0x08018830

080102cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80102d0:	f7ff ffdc 	bl	801028c <HAL_RCC_GetHCLKFreq>
 80102d4:	4602      	mov	r2, r0
 80102d6:	4b05      	ldr	r3, [pc, #20]	; (80102ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	0b5b      	lsrs	r3, r3, #13
 80102dc:	f003 0307 	and.w	r3, r3, #7
 80102e0:	4903      	ldr	r1, [pc, #12]	; (80102f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80102e2:	5ccb      	ldrb	r3, [r1, r3]
 80102e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	40023800 	.word	0x40023800
 80102f0:	08018830 	.word	0x08018830

080102f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	e025      	b.n	8010354 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801030e:	b2db      	uxtb	r3, r3
 8010310:	2b00      	cmp	r3, #0
 8010312:	d106      	bne.n	8010322 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7f6 f8bd 	bl	800649c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2202      	movs	r2, #2
 8010326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	3304      	adds	r3, #4
 8010332:	4619      	mov	r1, r3
 8010334:	4610      	mov	r0, r2
 8010336:	f002 f8f9 	bl	801252c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	461a      	mov	r2, r3
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	f002 f94e 	bl	80125e6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2201      	movs	r2, #1
 801034e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <HAL_SDRAM_Read_16b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 801035c:	b480      	push	{r7}
 801035e:	b089      	sub	sp, #36	; 0x24
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = pAddress;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	61bb      	str	r3, [r7, #24]
  uint16_t *pdestbuff = pDstBuffer;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010378:	74fb      	strb	r3, [r7, #19]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 801037a:	7cfb      	ldrb	r3, [r7, #19]
 801037c:	2b02      	cmp	r3, #2
 801037e:	d101      	bne.n	8010384 <HAL_SDRAM_Read_16b+0x28>
  {
    return HAL_BUSY;
 8010380:	2302      	movs	r3, #2
 8010382:	e046      	b.n	8010412 <HAL_SDRAM_Read_16b+0xb6>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8010384:	7cfb      	ldrb	r3, [r7, #19]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d002      	beq.n	8010390 <HAL_SDRAM_Read_16b+0x34>
 801038a:	7cfb      	ldrb	r3, [r7, #19]
 801038c:	2b04      	cmp	r3, #4
 801038e:	d13f      	bne.n	8010410 <HAL_SDRAM_Read_16b+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010396:	2b01      	cmp	r3, #1
 8010398:	d101      	bne.n	801039e <HAL_SDRAM_Read_16b+0x42>
 801039a:	2302      	movs	r3, #2
 801039c:	e039      	b.n	8010412 <HAL_SDRAM_Read_16b+0xb6>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2202      	movs	r2, #2
 80103aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Read data from memory */
    for (size = BufferSize; size >= 2U ; size -= 2U)
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	61fb      	str	r3, [r7, #28]
 80103b2:	e016      	b.n	80103e2 <HAL_SDRAM_Read_16b+0x86>
    {
      *pdestbuff = (uint16_t)((*pSdramAddress) & 0x0000FFFFU);
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	801a      	strh	r2, [r3, #0]
      pdestbuff++;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	3302      	adds	r3, #2
 80103c2:	617b      	str	r3, [r7, #20]
      *pdestbuff = (uint16_t)(((*pSdramAddress) & 0xFFFF0000U) >> 16U);
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	0c1b      	lsrs	r3, r3, #16
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	801a      	strh	r2, [r3, #0]
      pdestbuff++;
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	3302      	adds	r3, #2
 80103d4:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	3304      	adds	r3, #4
 80103da:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size >= 2U ; size -= 2U)
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	3b02      	subs	r3, #2
 80103e0:	61fb      	str	r3, [r7, #28]
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d8e5      	bhi.n	80103b4 <HAL_SDRAM_Read_16b+0x58>
    }

    /* Read last 16-bits if size is not 32-bits multiple */
    if ((BufferSize % 2U) != 0U)
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	f003 0301 	and.w	r3, r3, #1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d004      	beq.n	80103fc <HAL_SDRAM_Read_16b+0xa0>
    {
      *pdestbuff = (uint16_t)((*pSdramAddress) & 0x0000FFFFU);
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	801a      	strh	r2, [r3, #0]
    }

    /* Update the SDRAM controller state */
    hsdram->State = state;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	7cfa      	ldrb	r2, [r7, #19]
 8010400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 801040c:	2300      	movs	r3, #0
 801040e:	e000      	b.n	8010412 <HAL_SDRAM_Read_16b+0xb6>
    return  HAL_ERROR;
 8010410:	2301      	movs	r3, #1
}
 8010412:	4618      	mov	r0, r3
 8010414:	3724      	adds	r7, #36	; 0x24
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr

0801041e <HAL_SDRAM_Write_16b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 801041e:	b480      	push	{r7}
 8010420:	b089      	sub	sp, #36	; 0x24
 8010422:	af00      	add	r7, sp, #0
 8010424:	60f8      	str	r0, [r7, #12]
 8010426:	60b9      	str	r1, [r7, #8]
 8010428:	607a      	str	r2, [r7, #4]
 801042a:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *psdramaddress = pAddress;
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	61bb      	str	r3, [r7, #24]
  uint16_t *psrcbuff = pSrcBuffer;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	617b      	str	r3, [r7, #20]

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b02      	cmp	r3, #2
 801043e:	d101      	bne.n	8010444 <HAL_SDRAM_Write_16b+0x26>
  {
    return HAL_BUSY;
 8010440:	2302      	movs	r3, #2
 8010442:	e04d      	b.n	80104e0 <HAL_SDRAM_Write_16b+0xc2>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801044a:	b2db      	uxtb	r3, r3
 801044c:	2b01      	cmp	r3, #1
 801044e:	d146      	bne.n	80104de <HAL_SDRAM_Write_16b+0xc0>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010456:	2b01      	cmp	r3, #1
 8010458:	d101      	bne.n	801045e <HAL_SDRAM_Write_16b+0x40>
 801045a:	2302      	movs	r3, #2
 801045c:	e040      	b.n	80104e0 <HAL_SDRAM_Write_16b+0xc2>
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2201      	movs	r2, #1
 8010462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2202      	movs	r2, #2
 801046a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Write data to memory */
    for (size = BufferSize; size >= 2U ; size -= 2U)
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	61fb      	str	r3, [r7, #28]
 8010472:	e018      	b.n	80104a6 <HAL_SDRAM_Write_16b+0x88>
    {
      *psdramaddress = (uint32_t)(*psrcbuff);
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	881b      	ldrh	r3, [r3, #0]
 8010478:	461a      	mov	r2, r3
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	3302      	adds	r3, #2
 8010482:	617b      	str	r3, [r7, #20]
      *psdramaddress |= ((uint32_t)(*psrcbuff) << 16U);
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	881b      	ldrh	r3, [r3, #0]
 801048c:	041b      	lsls	r3, r3, #16
 801048e:	431a      	orrs	r2, r3
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	3302      	adds	r3, #2
 8010498:	617b      	str	r3, [r7, #20]
      psdramaddress++;
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	3304      	adds	r3, #4
 801049e:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size >= 2U ; size -= 2U)
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	3b02      	subs	r3, #2
 80104a4:	61fb      	str	r3, [r7, #28]
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d8e3      	bhi.n	8010474 <HAL_SDRAM_Write_16b+0x56>
    }

    /* Write last 16-bits if size is not 32-bits multiple */
    if ((BufferSize % 2U) != 0U)
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	f003 0301 	and.w	r3, r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d009      	beq.n	80104ca <HAL_SDRAM_Write_16b+0xac>
    {
      *psdramaddress = ((uint32_t)(*psrcbuff) & 0x0000FFFFU) | ((*psdramaddress) & 0xFFFF0000U);
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	0c1b      	lsrs	r3, r3, #16
 80104c2:	041b      	lsls	r3, r3, #16
 80104c4:	431a      	orrs	r2, r3
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	601a      	str	r2, [r3, #0]
    }

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2200      	movs	r2, #0
 80104d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	e000      	b.n	80104e0 <HAL_SDRAM_Write_16b+0xc2>
    return  HAL_ERROR;
 80104de:	2301      	movs	r3, #1
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3724      	adds	r7, #36	; 0x24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <HAL_SDRAM_WriteProtection_Disable>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Disable(SDRAM_HandleTypeDef *hsdram)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80104fa:	73fb      	strb	r3, [r7, #15]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d101      	bne.n	8010506 <HAL_SDRAM_WriteProtection_Disable+0x1a>
  {
    return HAL_BUSY;
 8010502:	2302      	movs	r3, #2
 8010504:	e015      	b.n	8010532 <HAL_SDRAM_WriteProtection_Disable+0x46>
  }
  else if (state == HAL_SDRAM_STATE_WRITE_PROTECTED)
 8010506:	7bfb      	ldrb	r3, [r7, #15]
 8010508:	2b04      	cmp	r3, #4
 801050a:	d111      	bne.n	8010530 <HAL_SDRAM_WriteProtection_Disable+0x44>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2202      	movs	r2, #2
 8010510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Disable write protection */
    (void)FMC_SDRAM_WriteProtection_Disable(hsdram->Instance, hsdram->Init.SDBank);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	4619      	mov	r1, r3
 801051e:	4610      	mov	r0, r2
 8010520:	f002 f8ca 	bl	80126b8 <FMC_SDRAM_WriteProtection_Disable>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801052c:	2300      	movs	r3, #0
 801052e:	e000      	b.n	8010532 <HAL_SDRAM_WriteProtection_Disable+0x46>
    return HAL_ERROR;
 8010530:	2301      	movs	r3, #1
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b086      	sub	sp, #24
 801053e:	af00      	add	r7, sp, #0
 8010540:	60f8      	str	r0, [r7, #12]
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801054c:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 801054e:	7dfb      	ldrb	r3, [r7, #23]
 8010550:	2b02      	cmp	r3, #2
 8010552:	d101      	bne.n	8010558 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8010554:	2302      	movs	r3, #2
 8010556:	e021      	b.n	801059c <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d002      	beq.n	8010564 <HAL_SDRAM_SendCommand+0x2a>
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	2b05      	cmp	r3, #5
 8010562:	d118      	bne.n	8010596 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2202      	movs	r2, #2
 8010568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	68b9      	ldr	r1, [r7, #8]
 8010574:	4618      	mov	r0, r3
 8010576:	f002 f8b5 	bl	80126e4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b02      	cmp	r3, #2
 8010580:	d104      	bne.n	801058c <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2205      	movs	r2, #5
 8010586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801058a:	e006      	b.n	801059a <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010594:	e001      	b.n	801059a <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8010596:	2301      	movs	r3, #1
 8010598:	e000      	b.n	801059c <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801059a:	2300      	movs	r3, #0
}
 801059c:	4618      	mov	r0, r3
 801059e:	3718      	adds	r7, #24
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	d101      	bne.n	80105be <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80105ba:	2302      	movs	r3, #2
 80105bc:	e016      	b.n	80105ec <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d10f      	bne.n	80105ea <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2202      	movs	r2, #2
 80105ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	4618      	mov	r0, r3
 80105da:	f002 f8c0 	bl	801275e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	e000      	b.n	80105ec <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80105ea:	2301      	movs	r3, #1
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010602:	2301      	movs	r3, #1
 8010604:	e07b      	b.n	80106fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801060a:	2b00      	cmp	r3, #0
 801060c:	d108      	bne.n	8010620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010616:	d009      	beq.n	801062c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	61da      	str	r2, [r3, #28]
 801061e:	e005      	b.n	801062c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	d106      	bne.n	801064c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7f9 f810 	bl	800966c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2202      	movs	r2, #2
 8010650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010662:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010674:	431a      	orrs	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801067e:	431a      	orrs	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	f003 0302 	and.w	r3, r3, #2
 8010688:	431a      	orrs	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	695b      	ldr	r3, [r3, #20]
 801068e:	f003 0301 	and.w	r3, r3, #1
 8010692:	431a      	orrs	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801069c:	431a      	orrs	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106a6:	431a      	orrs	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a1b      	ldr	r3, [r3, #32]
 80106ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b0:	ea42 0103 	orr.w	r1, r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	430a      	orrs	r2, r1
 80106c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	0c1b      	lsrs	r3, r3, #16
 80106ca:	f003 0104 	and.w	r1, r3, #4
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d2:	f003 0210 	and.w	r2, r3, #16
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	430a      	orrs	r2, r1
 80106dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69da      	ldr	r2, [r3, #28]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80106ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2201      	movs	r2, #1
 80106f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80106fc:	2300      	movs	r3, #0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010706:	b580      	push	{r7, lr}
 8010708:	b088      	sub	sp, #32
 801070a:	af00      	add	r7, sp, #0
 801070c:	60f8      	str	r0, [r7, #12]
 801070e:	60b9      	str	r1, [r7, #8]
 8010710:	603b      	str	r3, [r7, #0]
 8010712:	4613      	mov	r3, r2
 8010714:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010720:	2b01      	cmp	r3, #1
 8010722:	d101      	bne.n	8010728 <HAL_SPI_Transmit+0x22>
 8010724:	2302      	movs	r3, #2
 8010726:	e126      	b.n	8010976 <HAL_SPI_Transmit+0x270>
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2201      	movs	r2, #1
 801072c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010730:	f7fb fe38 	bl	800c3a4 <HAL_GetTick>
 8010734:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010736:	88fb      	ldrh	r3, [r7, #6]
 8010738:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b01      	cmp	r3, #1
 8010744:	d002      	beq.n	801074c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010746:	2302      	movs	r3, #2
 8010748:	77fb      	strb	r3, [r7, #31]
    goto error;
 801074a:	e10b      	b.n	8010964 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <HAL_SPI_Transmit+0x52>
 8010752:	88fb      	ldrh	r3, [r7, #6]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d102      	bne.n	801075e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801075c:	e102      	b.n	8010964 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2203      	movs	r2, #3
 8010762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2200      	movs	r2, #0
 801076a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	68ba      	ldr	r2, [r7, #8]
 8010770:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	88fa      	ldrh	r2, [r7, #6]
 8010776:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	88fa      	ldrh	r2, [r7, #6]
 801077c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2200      	movs	r2, #0
 8010782:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2200      	movs	r2, #0
 8010788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2200      	movs	r2, #0
 801078e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2200      	movs	r2, #0
 801079a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107a4:	d10f      	bne.n	80107c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80107c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107d0:	2b40      	cmp	r3, #64	; 0x40
 80107d2:	d007      	beq.n	80107e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80107ec:	d14b      	bne.n	8010886 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <HAL_SPI_Transmit+0xf6>
 80107f6:	8afb      	ldrh	r3, [r7, #22]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d13e      	bne.n	801087a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010800:	881a      	ldrh	r2, [r3, #0]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080c:	1c9a      	adds	r2, r3, #2
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010816:	b29b      	uxth	r3, r3
 8010818:	3b01      	subs	r3, #1
 801081a:	b29a      	uxth	r2, r3
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010820:	e02b      	b.n	801087a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	f003 0302 	and.w	r3, r3, #2
 801082c:	2b02      	cmp	r3, #2
 801082e:	d112      	bne.n	8010856 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010834:	881a      	ldrh	r2, [r3, #0]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010840:	1c9a      	adds	r2, r3, #2
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801084a:	b29b      	uxth	r3, r3
 801084c:	3b01      	subs	r3, #1
 801084e:	b29a      	uxth	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	86da      	strh	r2, [r3, #54]	; 0x36
 8010854:	e011      	b.n	801087a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010856:	f7fb fda5 	bl	800c3a4 <HAL_GetTick>
 801085a:	4602      	mov	r2, r0
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	429a      	cmp	r2, r3
 8010864:	d803      	bhi.n	801086e <HAL_SPI_Transmit+0x168>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086c:	d102      	bne.n	8010874 <HAL_SPI_Transmit+0x16e>
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8010874:	2303      	movs	r3, #3
 8010876:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010878:	e074      	b.n	8010964 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801087e:	b29b      	uxth	r3, r3
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1ce      	bne.n	8010822 <HAL_SPI_Transmit+0x11c>
 8010884:	e04c      	b.n	8010920 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d002      	beq.n	8010894 <HAL_SPI_Transmit+0x18e>
 801088e:	8afb      	ldrh	r3, [r7, #22]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d140      	bne.n	8010916 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	330c      	adds	r3, #12
 801089e:	7812      	ldrb	r2, [r2, #0]
 80108a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a6:	1c5a      	adds	r2, r3, #1
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	3b01      	subs	r3, #1
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80108ba:	e02c      	b.n	8010916 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f003 0302 	and.w	r3, r3, #2
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	d113      	bne.n	80108f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	330c      	adds	r3, #12
 80108d4:	7812      	ldrb	r2, [r2, #0]
 80108d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	3b01      	subs	r3, #1
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80108f0:	e011      	b.n	8010916 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108f2:	f7fb fd57 	bl	800c3a4 <HAL_GetTick>
 80108f6:	4602      	mov	r2, r0
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d803      	bhi.n	801090a <HAL_SPI_Transmit+0x204>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010908:	d102      	bne.n	8010910 <HAL_SPI_Transmit+0x20a>
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d102      	bne.n	8010916 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010910:	2303      	movs	r3, #3
 8010912:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010914:	e026      	b.n	8010964 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801091a:	b29b      	uxth	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1cd      	bne.n	80108bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010920:	69ba      	ldr	r2, [r7, #24]
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f000 fd21 	bl	801136c <SPI_EndRxTxTransaction>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2220      	movs	r2, #32
 8010934:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801093e:	2300      	movs	r3, #0
 8010940:	613b      	str	r3, [r7, #16]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	613b      	str	r3, [r7, #16]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	613b      	str	r3, [r7, #16]
 8010952:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801095c:	2301      	movs	r3, #1
 801095e:	77fb      	strb	r3, [r7, #31]
 8010960:	e000      	b.n	8010964 <HAL_SPI_Transmit+0x25e>
  }

error:
 8010962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2201      	movs	r2, #1
 8010968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2200      	movs	r2, #0
 8010970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010974:	7ffb      	ldrb	r3, [r7, #31]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3720      	adds	r7, #32
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b088      	sub	sp, #32
 8010982:	af02      	add	r7, sp, #8
 8010984:	60f8      	str	r0, [r7, #12]
 8010986:	60b9      	str	r1, [r7, #8]
 8010988:	603b      	str	r3, [r7, #0]
 801098a:	4613      	mov	r3, r2
 801098c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801099a:	d112      	bne.n	80109c2 <HAL_SPI_Receive+0x44>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10e      	bne.n	80109c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2204      	movs	r2, #4
 80109a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80109ac:	88fa      	ldrh	r2, [r7, #6]
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	4613      	mov	r3, r2
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	68b9      	ldr	r1, [r7, #8]
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f000 f8f1 	bl	8010ba0 <HAL_SPI_TransmitReceive>
 80109be:	4603      	mov	r3, r0
 80109c0:	e0ea      	b.n	8010b98 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d101      	bne.n	80109d0 <HAL_SPI_Receive+0x52>
 80109cc:	2302      	movs	r3, #2
 80109ce:	e0e3      	b.n	8010b98 <HAL_SPI_Receive+0x21a>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2201      	movs	r2, #1
 80109d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80109d8:	f7fb fce4 	bl	800c3a4 <HAL_GetTick>
 80109dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d002      	beq.n	80109f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80109ea:	2302      	movs	r3, #2
 80109ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80109ee:	e0ca      	b.n	8010b86 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d002      	beq.n	80109fc <HAL_SPI_Receive+0x7e>
 80109f6:	88fb      	ldrh	r3, [r7, #6]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d102      	bne.n	8010a02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80109fc:	2301      	movs	r3, #1
 80109fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010a00:	e0c1      	b.n	8010b86 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2204      	movs	r2, #4
 8010a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	88fa      	ldrh	r2, [r7, #6]
 8010a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	88fa      	ldrh	r2, [r7, #6]
 8010a20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2200      	movs	r2, #0
 8010a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2200      	movs	r2, #0
 8010a32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2200      	movs	r2, #0
 8010a38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	689b      	ldr	r3, [r3, #8]
 8010a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a48:	d10f      	bne.n	8010a6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010a68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a74:	2b40      	cmp	r3, #64	; 0x40
 8010a76:	d007      	beq.n	8010a88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d162      	bne.n	8010b56 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010a90:	e02e      	b.n	8010af0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f003 0301 	and.w	r3, r3, #1
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d115      	bne.n	8010acc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f103 020c 	add.w	r2, r3, #12
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aac:	7812      	ldrb	r2, [r2, #0]
 8010aae:	b2d2      	uxtb	r2, r2
 8010ab0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab6:	1c5a      	adds	r2, r3, #1
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010aca:	e011      	b.n	8010af0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010acc:	f7fb fc6a 	bl	800c3a4 <HAL_GetTick>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d803      	bhi.n	8010ae4 <HAL_SPI_Receive+0x166>
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae2:	d102      	bne.n	8010aea <HAL_SPI_Receive+0x16c>
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d102      	bne.n	8010af0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8010aea:	2303      	movs	r3, #3
 8010aec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010aee:	e04a      	b.n	8010b86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1cb      	bne.n	8010a92 <HAL_SPI_Receive+0x114>
 8010afa:	e031      	b.n	8010b60 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	f003 0301 	and.w	r3, r3, #1
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d113      	bne.n	8010b32 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68da      	ldr	r2, [r3, #12]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b14:	b292      	uxth	r2, r2
 8010b16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1c:	1c9a      	adds	r2, r3, #2
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	3b01      	subs	r3, #1
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010b30:	e011      	b.n	8010b56 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b32:	f7fb fc37 	bl	800c3a4 <HAL_GetTick>
 8010b36:	4602      	mov	r2, r0
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d803      	bhi.n	8010b4a <HAL_SPI_Receive+0x1cc>
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b48:	d102      	bne.n	8010b50 <HAL_SPI_Receive+0x1d2>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d102      	bne.n	8010b56 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8010b50:	2303      	movs	r3, #3
 8010b52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010b54:	e017      	b.n	8010b86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1cd      	bne.n	8010afc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	6839      	ldr	r1, [r7, #0]
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f000 fb9b 	bl	80112a0 <SPI_EndRxTransaction>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2220      	movs	r2, #32
 8010b74:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	75fb      	strb	r3, [r7, #23]
 8010b82:	e000      	b.n	8010b86 <HAL_SPI_Receive+0x208>
  }

error :
 8010b84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3718      	adds	r7, #24
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08c      	sub	sp, #48	; 0x30
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d101      	bne.n	8010bc6 <HAL_SPI_TransmitReceive+0x26>
 8010bc2:	2302      	movs	r3, #2
 8010bc4:	e18a      	b.n	8010edc <HAL_SPI_TransmitReceive+0x33c>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010bce:	f7fb fbe9 	bl	800c3a4 <HAL_GetTick>
 8010bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010be4:	887b      	ldrh	r3, [r7, #2]
 8010be6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d00f      	beq.n	8010c10 <HAL_SPI_TransmitReceive+0x70>
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010bf6:	d107      	bne.n	8010c08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d103      	bne.n	8010c08 <HAL_SPI_TransmitReceive+0x68>
 8010c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c04:	2b04      	cmp	r3, #4
 8010c06:	d003      	beq.n	8010c10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010c08:	2302      	movs	r3, #2
 8010c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010c0e:	e15b      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d005      	beq.n	8010c22 <HAL_SPI_TransmitReceive+0x82>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d002      	beq.n	8010c22 <HAL_SPI_TransmitReceive+0x82>
 8010c1c:	887b      	ldrh	r3, [r7, #2]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d103      	bne.n	8010c2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010c22:	2301      	movs	r3, #1
 8010c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010c28:	e14e      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	2b04      	cmp	r3, #4
 8010c34:	d003      	beq.n	8010c3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2205      	movs	r2, #5
 8010c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2200      	movs	r2, #0
 8010c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	887a      	ldrh	r2, [r7, #2]
 8010c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	887a      	ldrh	r2, [r7, #2]
 8010c54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	887a      	ldrh	r2, [r7, #2]
 8010c60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	887a      	ldrh	r2, [r7, #2]
 8010c66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c7e:	2b40      	cmp	r3, #64	; 0x40
 8010c80:	d007      	beq.n	8010c92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c9a:	d178      	bne.n	8010d8e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <HAL_SPI_TransmitReceive+0x10a>
 8010ca4:	8b7b      	ldrh	r3, [r7, #26]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d166      	bne.n	8010d78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cae:	881a      	ldrh	r2, [r3, #0]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cba:	1c9a      	adds	r2, r3, #2
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010cce:	e053      	b.n	8010d78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	f003 0302 	and.w	r3, r3, #2
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	d11b      	bne.n	8010d16 <HAL_SPI_TransmitReceive+0x176>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d016      	beq.n	8010d16 <HAL_SPI_TransmitReceive+0x176>
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d113      	bne.n	8010d16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cf2:	881a      	ldrh	r2, [r3, #0]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfe:	1c9a      	adds	r2, r3, #2
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010d12:	2300      	movs	r3, #0
 8010d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	689b      	ldr	r3, [r3, #8]
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d119      	bne.n	8010d58 <HAL_SPI_TransmitReceive+0x1b8>
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d014      	beq.n	8010d58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	68da      	ldr	r2, [r3, #12]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d38:	b292      	uxth	r2, r2
 8010d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d40:	1c9a      	adds	r2, r3, #2
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010d54:	2301      	movs	r3, #1
 8010d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010d58:	f7fb fb24 	bl	800c3a4 <HAL_GetTick>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d807      	bhi.n	8010d78 <HAL_SPI_TransmitReceive+0x1d8>
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6e:	d003      	beq.n	8010d78 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010d70:	2303      	movs	r3, #3
 8010d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010d76:	e0a7      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1a6      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x130>
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1a1      	bne.n	8010cd0 <HAL_SPI_TransmitReceive+0x130>
 8010d8c:	e07c      	b.n	8010e88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d002      	beq.n	8010d9c <HAL_SPI_TransmitReceive+0x1fc>
 8010d96:	8b7b      	ldrh	r3, [r7, #26]
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d16b      	bne.n	8010e74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	330c      	adds	r3, #12
 8010da6:	7812      	ldrb	r2, [r2, #0]
 8010da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010dc2:	e057      	b.n	8010e74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	d11c      	bne.n	8010e0c <HAL_SPI_TransmitReceive+0x26c>
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d017      	beq.n	8010e0c <HAL_SPI_TransmitReceive+0x26c>
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d114      	bne.n	8010e0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	330c      	adds	r3, #12
 8010dec:	7812      	ldrb	r2, [r2, #0]
 8010dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	3b01      	subs	r3, #1
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	f003 0301 	and.w	r3, r3, #1
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d119      	bne.n	8010e4e <HAL_SPI_TransmitReceive+0x2ae>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d014      	beq.n	8010e4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	68da      	ldr	r2, [r3, #12]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e2e:	b2d2      	uxtb	r2, r2
 8010e30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	1c5a      	adds	r2, r3, #1
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	3b01      	subs	r3, #1
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010e4e:	f7fb faa9 	bl	800c3a4 <HAL_GetTick>
 8010e52:	4602      	mov	r2, r0
 8010e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d803      	bhi.n	8010e66 <HAL_SPI_TransmitReceive+0x2c6>
 8010e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e64:	d102      	bne.n	8010e6c <HAL_SPI_TransmitReceive+0x2cc>
 8010e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d103      	bne.n	8010e74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010e72:	e029      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d1a2      	bne.n	8010dc4 <HAL_SPI_TransmitReceive+0x224>
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d19d      	bne.n	8010dc4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f000 fa6d 	bl	801136c <SPI_EndRxTxTransaction>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d006      	beq.n	8010ea6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2220      	movs	r2, #32
 8010ea2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010ea4:	e010      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10b      	bne.n	8010ec6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010eae:	2300      	movs	r3, #0
 8010eb0:	617b      	str	r3, [r7, #20]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	617b      	str	r3, [r7, #20]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	617b      	str	r3, [r7, #20]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	e000      	b.n	8010ec8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3730      	adds	r7, #48	; 0x30
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d101      	bne.n	8010f04 <HAL_SPI_Transmit_DMA+0x20>
 8010f00:	2302      	movs	r3, #2
 8010f02:	e09b      	b.n	801103c <HAL_SPI_Transmit_DMA+0x158>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2201      	movs	r2, #1
 8010f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d002      	beq.n	8010f1e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8010f18:	2302      	movs	r3, #2
 8010f1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010f1c:	e089      	b.n	8011032 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <HAL_SPI_Transmit_DMA+0x46>
 8010f24:	88fb      	ldrh	r3, [r7, #6]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d102      	bne.n	8010f30 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010f2e:	e080      	b.n	8011032 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2203      	movs	r2, #3
 8010f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	88fa      	ldrh	r2, [r7, #6]
 8010f48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	88fa      	ldrh	r2, [r7, #6]
 8010f4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2200      	movs	r2, #0
 8010f54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2200      	movs	r2, #0
 8010f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	689b      	ldr	r3, [r3, #8]
 8010f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f76:	d10f      	bne.n	8010f98 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f9c:	4a29      	ldr	r2, [pc, #164]	; (8011044 <HAL_SPI_Transmit_DMA+0x160>)
 8010f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fa4:	4a28      	ldr	r2, [pc, #160]	; (8011048 <HAL_SPI_Transmit_DMA+0x164>)
 8010fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fac:	4a27      	ldr	r2, [pc, #156]	; (801104c <HAL_SPI_Transmit_DMA+0x168>)
 8010fae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	330c      	adds	r3, #12
 8010fc8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8010fd0:	f7fc fd2e 	bl	800da30 <HAL_DMA_Start_IT>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00c      	beq.n	8010ff4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fde:	f043 0210 	orr.w	r2, r3, #16
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8010ff2:	e01e      	b.n	8011032 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ffe:	2b40      	cmp	r3, #64	; 0x40
 8011000:	d007      	beq.n	8011012 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011010:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f042 0220 	orr.w	r2, r2, #32
 8011020:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f042 0202 	orr.w	r2, r2, #2
 8011030:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801103a:	7dfb      	ldrb	r3, [r7, #23]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3718      	adds	r7, #24
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	08011135 	.word	0x08011135
 8011048:	0801108d 	.word	0x0801108d
 801104c:	08011151 	.word	0x08011151

08011050 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011058:	bf00      	nop
 801105a:	370c      	adds	r7, #12
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr

08011064 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr

0801108c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b086      	sub	sp, #24
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011098:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801109a:	f7fb f983 	bl	800c3a4 <HAL_GetTick>
 801109e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ae:	d03b      	beq.n	8011128 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f022 0220 	bic.w	r2, r2, #32
 80110be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f022 0202 	bic.w	r2, r2, #2
 80110ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80110d0:	693a      	ldr	r2, [r7, #16]
 80110d2:	2164      	movs	r1, #100	; 0x64
 80110d4:	6978      	ldr	r0, [r7, #20]
 80110d6:	f000 f949 	bl	801136c <SPI_EndRxTxTransaction>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d005      	beq.n	80110ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e4:	f043 0220 	orr.w	r2, r3, #32
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	689b      	ldr	r3, [r3, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10a      	bne.n	801110a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80110f4:	2300      	movs	r3, #0
 80110f6:	60fb      	str	r3, [r7, #12]
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2200      	movs	r2, #0
 801110e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2201      	movs	r2, #1
 8011114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801111c:	2b00      	cmp	r3, #0
 801111e:	d003      	beq.n	8011128 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011120:	6978      	ldr	r0, [r7, #20]
 8011122:	f7ff ffa9 	bl	8011078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011126:	e002      	b.n	801112e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8011128:	6978      	ldr	r0, [r7, #20]
 801112a:	f7ff ff91 	bl	8011050 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801112e:	3718      	adds	r7, #24
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011140:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011142:	68f8      	ldr	r0, [r7, #12]
 8011144:	f7ff ff8e 	bl	8011064 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011148:	bf00      	nop
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801115c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f022 0203 	bic.w	r2, r2, #3
 801116c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011172:	f043 0210 	orr.w	r2, r3, #16
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2201      	movs	r2, #1
 801117e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7ff ff78 	bl	8011078 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011188:	bf00      	nop
 801118a:	3710      	adds	r7, #16
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b088      	sub	sp, #32
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	603b      	str	r3, [r7, #0]
 801119c:	4613      	mov	r3, r2
 801119e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80111a0:	f7fb f900 	bl	800c3a4 <HAL_GetTick>
 80111a4:	4602      	mov	r2, r0
 80111a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a8:	1a9b      	subs	r3, r3, r2
 80111aa:	683a      	ldr	r2, [r7, #0]
 80111ac:	4413      	add	r3, r2
 80111ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80111b0:	f7fb f8f8 	bl	800c3a4 <HAL_GetTick>
 80111b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80111b6:	4b39      	ldr	r3, [pc, #228]	; (801129c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	015b      	lsls	r3, r3, #5
 80111bc:	0d1b      	lsrs	r3, r3, #20
 80111be:	69fa      	ldr	r2, [r7, #28]
 80111c0:	fb02 f303 	mul.w	r3, r2, r3
 80111c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80111c6:	e054      	b.n	8011272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ce:	d050      	beq.n	8011272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80111d0:	f7fb f8e8 	bl	800c3a4 <HAL_GetTick>
 80111d4:	4602      	mov	r2, r0
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	69fa      	ldr	r2, [r7, #28]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d902      	bls.n	80111e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d13d      	bne.n	8011262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	685a      	ldr	r2, [r3, #4]
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80111f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80111fe:	d111      	bne.n	8011224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011208:	d004      	beq.n	8011214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011212:	d107      	bne.n	8011224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801122c:	d10f      	bne.n	801124e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801124c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2201      	movs	r2, #1
 8011252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801125e:	2303      	movs	r3, #3
 8011260:	e017      	b.n	8011292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011268:	2300      	movs	r3, #0
 801126a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	3b01      	subs	r3, #1
 8011270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	689a      	ldr	r2, [r3, #8]
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	4013      	ands	r3, r2
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	429a      	cmp	r2, r3
 8011280:	bf0c      	ite	eq
 8011282:	2301      	moveq	r3, #1
 8011284:	2300      	movne	r3, #0
 8011286:	b2db      	uxtb	r3, r3
 8011288:	461a      	mov	r2, r3
 801128a:	79fb      	ldrb	r3, [r7, #7]
 801128c:	429a      	cmp	r2, r3
 801128e:	d19b      	bne.n	80111c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3720      	adds	r7, #32
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	200001d4 	.word	0x200001d4

080112a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80112b4:	d111      	bne.n	80112da <SPI_EndRxTransaction+0x3a>
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80112be:	d004      	beq.n	80112ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112c8:	d107      	bne.n	80112da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	681a      	ldr	r2, [r3, #0]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80112e2:	d12a      	bne.n	801133a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112ec:	d012      	beq.n	8011314 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	2200      	movs	r2, #0
 80112f6:	2180      	movs	r1, #128	; 0x80
 80112f8:	68f8      	ldr	r0, [r7, #12]
 80112fa:	f7ff ff49 	bl	8011190 <SPI_WaitFlagStateUntilTimeout>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d02d      	beq.n	8011360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011308:	f043 0220 	orr.w	r2, r3, #32
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011310:	2303      	movs	r3, #3
 8011312:	e026      	b.n	8011362 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	2200      	movs	r2, #0
 801131c:	2101      	movs	r1, #1
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f7ff ff36 	bl	8011190 <SPI_WaitFlagStateUntilTimeout>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d01a      	beq.n	8011360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801132e:	f043 0220 	orr.w	r2, r3, #32
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011336:	2303      	movs	r3, #3
 8011338:	e013      	b.n	8011362 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	9300      	str	r3, [sp, #0]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2200      	movs	r2, #0
 8011342:	2101      	movs	r1, #1
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f7ff ff23 	bl	8011190 <SPI_WaitFlagStateUntilTimeout>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d007      	beq.n	8011360 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011354:	f043 0220 	orr.w	r2, r3, #32
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e000      	b.n	8011362 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
	...

0801136c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b088      	sub	sp, #32
 8011370:	af02      	add	r7, sp, #8
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011378:	4b1b      	ldr	r3, [pc, #108]	; (80113e8 <SPI_EndRxTxTransaction+0x7c>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a1b      	ldr	r2, [pc, #108]	; (80113ec <SPI_EndRxTxTransaction+0x80>)
 801137e:	fba2 2303 	umull	r2, r3, r2, r3
 8011382:	0d5b      	lsrs	r3, r3, #21
 8011384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011388:	fb02 f303 	mul.w	r3, r2, r3
 801138c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011396:	d112      	bne.n	80113be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	2200      	movs	r2, #0
 80113a0:	2180      	movs	r1, #128	; 0x80
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f7ff fef4 	bl	8011190 <SPI_WaitFlagStateUntilTimeout>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d016      	beq.n	80113dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113b2:	f043 0220 	orr.w	r2, r3, #32
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80113ba:	2303      	movs	r3, #3
 80113bc:	e00f      	b.n	80113de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d00a      	beq.n	80113da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	3b01      	subs	r3, #1
 80113c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113d4:	2b80      	cmp	r3, #128	; 0x80
 80113d6:	d0f2      	beq.n	80113be <SPI_EndRxTxTransaction+0x52>
 80113d8:	e000      	b.n	80113dc <SPI_EndRxTxTransaction+0x70>
        break;
 80113da:	bf00      	nop
  }

  return HAL_OK;
 80113dc:	2300      	movs	r3, #0
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3718      	adds	r7, #24
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	200001d4 	.word	0x200001d4
 80113ec:	165e9f81 	.word	0x165e9f81

080113f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	e041      	b.n	8011486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011408:	b2db      	uxtb	r3, r3
 801140a:	2b00      	cmp	r3, #0
 801140c:	d106      	bne.n	801141c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7f9 ffac 	bl	800b374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2202      	movs	r2, #2
 8011420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3304      	adds	r3, #4
 801142c:	4619      	mov	r1, r3
 801142e:	4610      	mov	r0, r2
 8011430:	f000 face 	bl	80119d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2201      	movs	r2, #1
 8011438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2201      	movs	r2, #1
 8011440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2201      	movs	r2, #1
 8011448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2201      	movs	r2, #1
 8011460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2201      	movs	r2, #1
 8011468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2201      	movs	r2, #1
 8011470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2201      	movs	r2, #1
 8011480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
	...

08011490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d001      	beq.n	80114a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80114a4:	2301      	movs	r3, #1
 80114a6:	e04e      	b.n	8011546 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2202      	movs	r2, #2
 80114ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f042 0201 	orr.w	r2, r2, #1
 80114be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a23      	ldr	r2, [pc, #140]	; (8011554 <HAL_TIM_Base_Start_IT+0xc4>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d022      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114d2:	d01d      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a1f      	ldr	r2, [pc, #124]	; (8011558 <HAL_TIM_Base_Start_IT+0xc8>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d018      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a1e      	ldr	r2, [pc, #120]	; (801155c <HAL_TIM_Base_Start_IT+0xcc>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d013      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a1c      	ldr	r2, [pc, #112]	; (8011560 <HAL_TIM_Base_Start_IT+0xd0>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d00e      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4a1b      	ldr	r2, [pc, #108]	; (8011564 <HAL_TIM_Base_Start_IT+0xd4>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d009      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a19      	ldr	r2, [pc, #100]	; (8011568 <HAL_TIM_Base_Start_IT+0xd8>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d004      	beq.n	8011510 <HAL_TIM_Base_Start_IT+0x80>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4a18      	ldr	r2, [pc, #96]	; (801156c <HAL_TIM_Base_Start_IT+0xdc>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d111      	bne.n	8011534 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	689b      	ldr	r3, [r3, #8]
 8011516:	f003 0307 	and.w	r3, r3, #7
 801151a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2b06      	cmp	r3, #6
 8011520:	d010      	beq.n	8011544 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f042 0201 	orr.w	r2, r2, #1
 8011530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011532:	e007      	b.n	8011544 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f042 0201 	orr.w	r2, r2, #1
 8011542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	40010000 	.word	0x40010000
 8011558:	40000400 	.word	0x40000400
 801155c:	40000800 	.word	0x40000800
 8011560:	40000c00 	.word	0x40000c00
 8011564:	40010400 	.word	0x40010400
 8011568:	40014000 	.word	0x40014000
 801156c:	40001800 	.word	0x40001800

08011570 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	68da      	ldr	r2, [r3, #12]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f022 0201 	bic.w	r2, r2, #1
 8011586:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	6a1a      	ldr	r2, [r3, #32]
 801158e:	f241 1311 	movw	r3, #4369	; 0x1111
 8011592:	4013      	ands	r3, r2
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10f      	bne.n	80115b8 <HAL_TIM_Base_Stop_IT+0x48>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	6a1a      	ldr	r2, [r3, #32]
 801159e:	f240 4344 	movw	r3, #1092	; 0x444
 80115a2:	4013      	ands	r3, r2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d107      	bne.n	80115b8 <HAL_TIM_Base_Stop_IT+0x48>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f022 0201 	bic.w	r2, r2, #1
 80115b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2201      	movs	r2, #1
 80115bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr

080115ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b082      	sub	sp, #8
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	f003 0302 	and.w	r3, r3, #2
 80115e0:	2b02      	cmp	r3, #2
 80115e2:	d122      	bne.n	801162a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	f003 0302 	and.w	r3, r3, #2
 80115ee:	2b02      	cmp	r3, #2
 80115f0:	d11b      	bne.n	801162a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f06f 0202 	mvn.w	r2, #2
 80115fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2201      	movs	r2, #1
 8011600:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	699b      	ldr	r3, [r3, #24]
 8011608:	f003 0303 	and.w	r3, r3, #3
 801160c:	2b00      	cmp	r3, #0
 801160e:	d003      	beq.n	8011618 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f000 f9bf 	bl	8011994 <HAL_TIM_IC_CaptureCallback>
 8011616:	e005      	b.n	8011624 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 f9b1 	bl	8011980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 f9c2 	bl	80119a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	f003 0304 	and.w	r3, r3, #4
 8011634:	2b04      	cmp	r3, #4
 8011636:	d122      	bne.n	801167e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	f003 0304 	and.w	r3, r3, #4
 8011642:	2b04      	cmp	r3, #4
 8011644:	d11b      	bne.n	801167e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f06f 0204 	mvn.w	r2, #4
 801164e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2202      	movs	r2, #2
 8011654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	699b      	ldr	r3, [r3, #24]
 801165c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011660:	2b00      	cmp	r3, #0
 8011662:	d003      	beq.n	801166c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 f995 	bl	8011994 <HAL_TIM_IC_CaptureCallback>
 801166a:	e005      	b.n	8011678 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f987 	bl	8011980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f998 	bl	80119a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	691b      	ldr	r3, [r3, #16]
 8011684:	f003 0308 	and.w	r3, r3, #8
 8011688:	2b08      	cmp	r3, #8
 801168a:	d122      	bne.n	80116d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	f003 0308 	and.w	r3, r3, #8
 8011696:	2b08      	cmp	r3, #8
 8011698:	d11b      	bne.n	80116d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f06f 0208 	mvn.w	r2, #8
 80116a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2204      	movs	r2, #4
 80116a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	69db      	ldr	r3, [r3, #28]
 80116b0:	f003 0303 	and.w	r3, r3, #3
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d003      	beq.n	80116c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 f96b 	bl	8011994 <HAL_TIM_IC_CaptureCallback>
 80116be:	e005      	b.n	80116cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f000 f95d 	bl	8011980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 f96e 	bl	80119a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2200      	movs	r2, #0
 80116d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	f003 0310 	and.w	r3, r3, #16
 80116dc:	2b10      	cmp	r3, #16
 80116de:	d122      	bne.n	8011726 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	f003 0310 	and.w	r3, r3, #16
 80116ea:	2b10      	cmp	r3, #16
 80116ec:	d11b      	bne.n	8011726 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f06f 0210 	mvn.w	r2, #16
 80116f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2208      	movs	r2, #8
 80116fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	69db      	ldr	r3, [r3, #28]
 8011704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011708:	2b00      	cmp	r3, #0
 801170a:	d003      	beq.n	8011714 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 f941 	bl	8011994 <HAL_TIM_IC_CaptureCallback>
 8011712:	e005      	b.n	8011720 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f933 	bl	8011980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 f944 	bl	80119a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	691b      	ldr	r3, [r3, #16]
 801172c:	f003 0301 	and.w	r3, r3, #1
 8011730:	2b01      	cmp	r3, #1
 8011732:	d10e      	bne.n	8011752 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	2b01      	cmp	r3, #1
 8011740:	d107      	bne.n	8011752 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f06f 0201 	mvn.w	r2, #1
 801174a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 f90d 	bl	801196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801175c:	2b80      	cmp	r3, #128	; 0x80
 801175e:	d10e      	bne.n	801177e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801176a:	2b80      	cmp	r3, #128	; 0x80
 801176c:	d107      	bne.n	801177e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 fae9 	bl	8011d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011788:	2b40      	cmp	r3, #64	; 0x40
 801178a:	d10e      	bne.n	80117aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011796:	2b40      	cmp	r3, #64	; 0x40
 8011798:	d107      	bne.n	80117aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80117a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 f909 	bl	80119bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	f003 0320 	and.w	r3, r3, #32
 80117b4:	2b20      	cmp	r3, #32
 80117b6:	d10e      	bne.n	80117d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	f003 0320 	and.w	r3, r3, #32
 80117c2:	2b20      	cmp	r3, #32
 80117c4:	d107      	bne.n	80117d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f06f 0220 	mvn.w	r2, #32
 80117ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 fab3 	bl	8011d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80117d6:	bf00      	nop
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80117e8:	2300      	movs	r3, #0
 80117ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d101      	bne.n	80117fa <HAL_TIM_ConfigClockSource+0x1c>
 80117f6:	2302      	movs	r3, #2
 80117f8:	e0b4      	b.n	8011964 <HAL_TIM_ConfigClockSource+0x186>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2201      	movs	r2, #1
 80117fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2202      	movs	r2, #2
 8011806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011818:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011820:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011832:	d03e      	beq.n	80118b2 <HAL_TIM_ConfigClockSource+0xd4>
 8011834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011838:	f200 8087 	bhi.w	801194a <HAL_TIM_ConfigClockSource+0x16c>
 801183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011840:	f000 8086 	beq.w	8011950 <HAL_TIM_ConfigClockSource+0x172>
 8011844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011848:	d87f      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 801184a:	2b70      	cmp	r3, #112	; 0x70
 801184c:	d01a      	beq.n	8011884 <HAL_TIM_ConfigClockSource+0xa6>
 801184e:	2b70      	cmp	r3, #112	; 0x70
 8011850:	d87b      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 8011852:	2b60      	cmp	r3, #96	; 0x60
 8011854:	d050      	beq.n	80118f8 <HAL_TIM_ConfigClockSource+0x11a>
 8011856:	2b60      	cmp	r3, #96	; 0x60
 8011858:	d877      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 801185a:	2b50      	cmp	r3, #80	; 0x50
 801185c:	d03c      	beq.n	80118d8 <HAL_TIM_ConfigClockSource+0xfa>
 801185e:	2b50      	cmp	r3, #80	; 0x50
 8011860:	d873      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 8011862:	2b40      	cmp	r3, #64	; 0x40
 8011864:	d058      	beq.n	8011918 <HAL_TIM_ConfigClockSource+0x13a>
 8011866:	2b40      	cmp	r3, #64	; 0x40
 8011868:	d86f      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 801186a:	2b30      	cmp	r3, #48	; 0x30
 801186c:	d064      	beq.n	8011938 <HAL_TIM_ConfigClockSource+0x15a>
 801186e:	2b30      	cmp	r3, #48	; 0x30
 8011870:	d86b      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 8011872:	2b20      	cmp	r3, #32
 8011874:	d060      	beq.n	8011938 <HAL_TIM_ConfigClockSource+0x15a>
 8011876:	2b20      	cmp	r3, #32
 8011878:	d867      	bhi.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
 801187a:	2b00      	cmp	r3, #0
 801187c:	d05c      	beq.n	8011938 <HAL_TIM_ConfigClockSource+0x15a>
 801187e:	2b10      	cmp	r3, #16
 8011880:	d05a      	beq.n	8011938 <HAL_TIM_ConfigClockSource+0x15a>
 8011882:	e062      	b.n	801194a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6818      	ldr	r0, [r3, #0]
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	6899      	ldr	r1, [r3, #8]
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	f000 f9b6 	bl	8011c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80118a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	609a      	str	r2, [r3, #8]
      break;
 80118b0:	e04f      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6818      	ldr	r0, [r3, #0]
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	6899      	ldr	r1, [r3, #8]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	685a      	ldr	r2, [r3, #4]
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	f000 f99f 	bl	8011c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	689a      	ldr	r2, [r3, #8]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80118d4:	609a      	str	r2, [r3, #8]
      break;
 80118d6:	e03c      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6818      	ldr	r0, [r3, #0]
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	6859      	ldr	r1, [r3, #4]
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	461a      	mov	r2, r3
 80118e6:	f000 f913 	bl	8011b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	2150      	movs	r1, #80	; 0x50
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 f96c 	bl	8011bce <TIM_ITRx_SetConfig>
      break;
 80118f6:	e02c      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6818      	ldr	r0, [r3, #0]
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	6859      	ldr	r1, [r3, #4]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	68db      	ldr	r3, [r3, #12]
 8011904:	461a      	mov	r2, r3
 8011906:	f000 f932 	bl	8011b6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2160      	movs	r1, #96	; 0x60
 8011910:	4618      	mov	r0, r3
 8011912:	f000 f95c 	bl	8011bce <TIM_ITRx_SetConfig>
      break;
 8011916:	e01c      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6818      	ldr	r0, [r3, #0]
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	6859      	ldr	r1, [r3, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	461a      	mov	r2, r3
 8011926:	f000 f8f3 	bl	8011b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2140      	movs	r1, #64	; 0x40
 8011930:	4618      	mov	r0, r3
 8011932:	f000 f94c 	bl	8011bce <TIM_ITRx_SetConfig>
      break;
 8011936:	e00c      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4619      	mov	r1, r3
 8011942:	4610      	mov	r0, r2
 8011944:	f000 f943 	bl	8011bce <TIM_ITRx_SetConfig>
      break;
 8011948:	e003      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	73fb      	strb	r3, [r7, #15]
      break;
 801194e:	e000      	b.n	8011952 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8011950:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2201      	movs	r2, #1
 8011956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011962:	7bfb      	ldrb	r3, [r7, #15]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011988:	bf00      	nop
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801199c:	bf00      	nop
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4a40      	ldr	r2, [pc, #256]	; (8011ae4 <TIM_Base_SetConfig+0x114>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d013      	beq.n	8011a10 <TIM_Base_SetConfig+0x40>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119ee:	d00f      	beq.n	8011a10 <TIM_Base_SetConfig+0x40>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4a3d      	ldr	r2, [pc, #244]	; (8011ae8 <TIM_Base_SetConfig+0x118>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d00b      	beq.n	8011a10 <TIM_Base_SetConfig+0x40>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4a3c      	ldr	r2, [pc, #240]	; (8011aec <TIM_Base_SetConfig+0x11c>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d007      	beq.n	8011a10 <TIM_Base_SetConfig+0x40>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4a3b      	ldr	r2, [pc, #236]	; (8011af0 <TIM_Base_SetConfig+0x120>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d003      	beq.n	8011a10 <TIM_Base_SetConfig+0x40>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4a3a      	ldr	r2, [pc, #232]	; (8011af4 <TIM_Base_SetConfig+0x124>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d108      	bne.n	8011a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4a2f      	ldr	r2, [pc, #188]	; (8011ae4 <TIM_Base_SetConfig+0x114>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d02b      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a30:	d027      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4a2c      	ldr	r2, [pc, #176]	; (8011ae8 <TIM_Base_SetConfig+0x118>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d023      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	4a2b      	ldr	r2, [pc, #172]	; (8011aec <TIM_Base_SetConfig+0x11c>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d01f      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4a2a      	ldr	r2, [pc, #168]	; (8011af0 <TIM_Base_SetConfig+0x120>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d01b      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a29      	ldr	r2, [pc, #164]	; (8011af4 <TIM_Base_SetConfig+0x124>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d017      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4a28      	ldr	r2, [pc, #160]	; (8011af8 <TIM_Base_SetConfig+0x128>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d013      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4a27      	ldr	r2, [pc, #156]	; (8011afc <TIM_Base_SetConfig+0x12c>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d00f      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4a26      	ldr	r2, [pc, #152]	; (8011b00 <TIM_Base_SetConfig+0x130>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d00b      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4a25      	ldr	r2, [pc, #148]	; (8011b04 <TIM_Base_SetConfig+0x134>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d007      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	4a24      	ldr	r2, [pc, #144]	; (8011b08 <TIM_Base_SetConfig+0x138>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d003      	beq.n	8011a82 <TIM_Base_SetConfig+0xb2>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	4a23      	ldr	r2, [pc, #140]	; (8011b0c <TIM_Base_SetConfig+0x13c>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d108      	bne.n	8011a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	4313      	orrs	r3, r2
 8011a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	695b      	ldr	r3, [r3, #20]
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	689a      	ldr	r2, [r3, #8]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4a0a      	ldr	r2, [pc, #40]	; (8011ae4 <TIM_Base_SetConfig+0x114>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d003      	beq.n	8011ac8 <TIM_Base_SetConfig+0xf8>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4a0c      	ldr	r2, [pc, #48]	; (8011af4 <TIM_Base_SetConfig+0x124>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d103      	bne.n	8011ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	691a      	ldr	r2, [r3, #16]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	615a      	str	r2, [r3, #20]
}
 8011ad6:	bf00      	nop
 8011ad8:	3714      	adds	r7, #20
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop
 8011ae4:	40010000 	.word	0x40010000
 8011ae8:	40000400 	.word	0x40000400
 8011aec:	40000800 	.word	0x40000800
 8011af0:	40000c00 	.word	0x40000c00
 8011af4:	40010400 	.word	0x40010400
 8011af8:	40014000 	.word	0x40014000
 8011afc:	40014400 	.word	0x40014400
 8011b00:	40014800 	.word	0x40014800
 8011b04:	40001800 	.word	0x40001800
 8011b08:	40001c00 	.word	0x40001c00
 8011b0c:	40002000 	.word	0x40002000

08011b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b087      	sub	sp, #28
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6a1b      	ldr	r3, [r3, #32]
 8011b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	f023 0201 	bic.w	r2, r3, #1
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	699b      	ldr	r3, [r3, #24]
 8011b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	011b      	lsls	r3, r3, #4
 8011b40:	693a      	ldr	r2, [r7, #16]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	f023 030a 	bic.w	r3, r3, #10
 8011b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011b4e:	697a      	ldr	r2, [r7, #20]
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	621a      	str	r2, [r3, #32]
}
 8011b62:	bf00      	nop
 8011b64:	371c      	adds	r7, #28
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b087      	sub	sp, #28
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	60f8      	str	r0, [r7, #12]
 8011b76:	60b9      	str	r1, [r7, #8]
 8011b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6a1b      	ldr	r3, [r3, #32]
 8011b7e:	f023 0210 	bic.w	r2, r3, #16
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6a1b      	ldr	r3, [r3, #32]
 8011b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	031b      	lsls	r3, r3, #12
 8011b9e:	697a      	ldr	r2, [r7, #20]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	011b      	lsls	r3, r3, #4
 8011bb0:	693a      	ldr	r2, [r7, #16]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	697a      	ldr	r2, [r7, #20]
 8011bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	693a      	ldr	r2, [r7, #16]
 8011bc0:	621a      	str	r2, [r3, #32]
}
 8011bc2:	bf00      	nop
 8011bc4:	371c      	adds	r7, #28
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr

08011bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011bce:	b480      	push	{r7}
 8011bd0:	b085      	sub	sp, #20
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011be6:	683a      	ldr	r2, [r7, #0]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	4313      	orrs	r3, r2
 8011bec:	f043 0307 	orr.w	r3, r3, #7
 8011bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	609a      	str	r2, [r3, #8]
}
 8011bf8:	bf00      	nop
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr

08011c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	689b      	ldr	r3, [r3, #8]
 8011c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	021a      	lsls	r2, r3, #8
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	431a      	orrs	r2, r3
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	697a      	ldr	r2, [r7, #20]
 8011c36:	609a      	str	r2, [r3, #8]
}
 8011c38:	bf00      	nop
 8011c3a:	371c      	adds	r7, #28
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d101      	bne.n	8011c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011c58:	2302      	movs	r3, #2
 8011c5a:	e05a      	b.n	8011d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2201      	movs	r2, #1
 8011c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2202      	movs	r2, #2
 8011c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	68fa      	ldr	r2, [r7, #12]
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a21      	ldr	r2, [pc, #132]	; (8011d20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d022      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ca8:	d01d      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4a1d      	ldr	r2, [pc, #116]	; (8011d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d018      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a1b      	ldr	r2, [pc, #108]	; (8011d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d013      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	4a1a      	ldr	r2, [pc, #104]	; (8011d2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d00e      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4a18      	ldr	r2, [pc, #96]	; (8011d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d009      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4a17      	ldr	r2, [pc, #92]	; (8011d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d004      	beq.n	8011ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a15      	ldr	r2, [pc, #84]	; (8011d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d10c      	bne.n	8011d00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2201      	movs	r2, #1
 8011d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3714      	adds	r7, #20
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	40010000 	.word	0x40010000
 8011d24:	40000400 	.word	0x40000400
 8011d28:	40000800 	.word	0x40000800
 8011d2c:	40000c00 	.word	0x40000c00
 8011d30:	40010400 	.word	0x40010400
 8011d34:	40014000 	.word	0x40014000
 8011d38:	40001800 	.word	0x40001800

08011d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011d44:	bf00      	nop
 8011d46:	370c      	adds	r7, #12
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011d58:	bf00      	nop
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	607a      	str	r2, [r7, #4]
 8011d70:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d101      	bne.n	8011d7c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e05f      	b.n	8011e3c <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f7fa fa2f 	bl	800c1f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2224      	movs	r2, #36	; 0x24
 8011d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011dac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 f948 	bl	8012044 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	691a      	ldr	r2, [r3, #16]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011dc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	695a      	ldr	r2, [r3, #20]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011dd2:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	691a      	ldr	r2, [r3, #16]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f022 020f 	bic.w	r2, r2, #15
 8011de2:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	6919      	ldr	r1, [r3, #16]
 8011dea:	7afa      	ldrb	r2, [r7, #11]
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	430a      	orrs	r2, r1
 8011df2:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	68da      	ldr	r2, [r3, #12]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e02:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	68d9      	ldr	r1, [r3, #12]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	430a      	orrs	r2, r1
 8011e12:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	68da      	ldr	r2, [r3, #12]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011e22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2220      	movs	r2, #32
 8011e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2220      	movs	r2, #32
 8011e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b08a      	sub	sp, #40	; 0x28
 8011e48:	af02      	add	r7, sp, #8
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	603b      	str	r3, [r7, #0]
 8011e50:	4613      	mov	r3, r2
 8011e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011e54:	2300      	movs	r3, #0
 8011e56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	2b20      	cmp	r3, #32
 8011e62:	d17c      	bne.n	8011f5e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d002      	beq.n	8011e70 <HAL_UART_Transmit+0x2c>
 8011e6a:	88fb      	ldrh	r3, [r7, #6]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	e075      	b.n	8011f60 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d101      	bne.n	8011e82 <HAL_UART_Transmit+0x3e>
 8011e7e:	2302      	movs	r3, #2
 8011e80:	e06e      	b.n	8011f60 <HAL_UART_Transmit+0x11c>
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2201      	movs	r2, #1
 8011e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2221      	movs	r2, #33	; 0x21
 8011e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011e98:	f7fa fa84 	bl	800c3a4 <HAL_GetTick>
 8011e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	88fa      	ldrh	r2, [r7, #6]
 8011ea2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	88fa      	ldrh	r2, [r7, #6]
 8011ea8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eb2:	d108      	bne.n	8011ec6 <HAL_UART_Transmit+0x82>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	691b      	ldr	r3, [r3, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d104      	bne.n	8011ec6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	61bb      	str	r3, [r7, #24]
 8011ec4:	e003      	b.n	8011ece <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011ed6:	e02a      	b.n	8011f2e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	2180      	movs	r1, #128	; 0x80
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f000 f840 	bl	8011f68 <UART_WaitOnFlagUntilTimeout>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011eee:	2303      	movs	r3, #3
 8011ef0:	e036      	b.n	8011f60 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d10b      	bne.n	8011f10 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	461a      	mov	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f06:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	3302      	adds	r3, #2
 8011f0c:	61bb      	str	r3, [r7, #24]
 8011f0e:	e007      	b.n	8011f20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	781a      	ldrb	r2, [r3, #0]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1cf      	bne.n	8011ed8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	2140      	movs	r1, #64	; 0x40
 8011f42:	68f8      	ldr	r0, [r7, #12]
 8011f44:	f000 f810 	bl	8011f68 <UART_WaitOnFlagUntilTimeout>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d001      	beq.n	8011f52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	e006      	b.n	8011f60 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2220      	movs	r2, #32
 8011f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	e000      	b.n	8011f60 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011f5e:	2302      	movs	r3, #2
  }
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3720      	adds	r7, #32
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b090      	sub	sp, #64	; 0x40
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	603b      	str	r3, [r7, #0]
 8011f74:	4613      	mov	r3, r2
 8011f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f78:	e050      	b.n	801201c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f80:	d04c      	beq.n	801201c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d007      	beq.n	8011f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8011f88:	f7fa fa0c 	bl	800c3a4 <HAL_GetTick>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d241      	bcs.n	801201c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	330c      	adds	r3, #12
 8011f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	e853 3f00 	ldrex	r3, [r3]
 8011fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	330c      	adds	r3, #12
 8011fb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fb8:	637a      	str	r2, [r7, #52]	; 0x34
 8011fba:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fc0:	e841 2300 	strex	r3, r2, [r1]
 8011fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1e5      	bne.n	8011f98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	3314      	adds	r3, #20
 8011fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	e853 3f00 	ldrex	r3, [r3]
 8011fda:	613b      	str	r3, [r7, #16]
   return(result);
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	f023 0301 	bic.w	r3, r3, #1
 8011fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	3314      	adds	r3, #20
 8011fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fec:	623a      	str	r2, [r7, #32]
 8011fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff0:	69f9      	ldr	r1, [r7, #28]
 8011ff2:	6a3a      	ldr	r2, [r7, #32]
 8011ff4:	e841 2300 	strex	r3, r2, [r1]
 8011ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1e5      	bne.n	8011fcc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2220      	movs	r2, #32
 8012004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2220      	movs	r2, #32
 801200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2200      	movs	r2, #0
 8012014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8012018:	2303      	movs	r3, #3
 801201a:	e00f      	b.n	801203c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	4013      	ands	r3, r2
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	429a      	cmp	r2, r3
 801202a:	bf0c      	ite	eq
 801202c:	2301      	moveq	r3, #1
 801202e:	2300      	movne	r3, #0
 8012030:	b2db      	uxtb	r3, r3
 8012032:	461a      	mov	r2, r3
 8012034:	79fb      	ldrb	r3, [r7, #7]
 8012036:	429a      	cmp	r2, r3
 8012038:	d09f      	beq.n	8011f7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3740      	adds	r7, #64	; 0x40
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012048:	b0c0      	sub	sp, #256	; 0x100
 801204a:	af00      	add	r7, sp, #0
 801204c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012060:	68d9      	ldr	r1, [r3, #12]
 8012062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	ea40 0301 	orr.w	r3, r0, r1
 801206c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801206e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012072:	689a      	ldr	r2, [r3, #8]
 8012074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012078:	691b      	ldr	r3, [r3, #16]
 801207a:	431a      	orrs	r2, r3
 801207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012080:	695b      	ldr	r3, [r3, #20]
 8012082:	431a      	orrs	r2, r3
 8012084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012088:	69db      	ldr	r3, [r3, #28]
 801208a:	4313      	orrs	r3, r2
 801208c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801209c:	f021 010c 	bic.w	r1, r1, #12
 80120a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80120aa:	430b      	orrs	r3, r1
 80120ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80120ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	695b      	ldr	r3, [r3, #20]
 80120b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80120ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120be:	6999      	ldr	r1, [r3, #24]
 80120c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	ea40 0301 	orr.w	r3, r0, r1
 80120ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80120cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	4b8f      	ldr	r3, [pc, #572]	; (8012310 <UART_SetConfig+0x2cc>)
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d005      	beq.n	80120e4 <UART_SetConfig+0xa0>
 80120d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	4b8d      	ldr	r3, [pc, #564]	; (8012314 <UART_SetConfig+0x2d0>)
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d104      	bne.n	80120ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80120e4:	f7fe f8f2 	bl	80102cc <HAL_RCC_GetPCLK2Freq>
 80120e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80120ec:	e003      	b.n	80120f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80120ee:	f7fe f8d9 	bl	80102a4 <HAL_RCC_GetPCLK1Freq>
 80120f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120fa:	69db      	ldr	r3, [r3, #28]
 80120fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012100:	f040 810c 	bne.w	801231c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012108:	2200      	movs	r2, #0
 801210a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801210e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012116:	4622      	mov	r2, r4
 8012118:	462b      	mov	r3, r5
 801211a:	1891      	adds	r1, r2, r2
 801211c:	65b9      	str	r1, [r7, #88]	; 0x58
 801211e:	415b      	adcs	r3, r3
 8012120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012126:	4621      	mov	r1, r4
 8012128:	eb12 0801 	adds.w	r8, r2, r1
 801212c:	4629      	mov	r1, r5
 801212e:	eb43 0901 	adc.w	r9, r3, r1
 8012132:	f04f 0200 	mov.w	r2, #0
 8012136:	f04f 0300 	mov.w	r3, #0
 801213a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801213e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012146:	4690      	mov	r8, r2
 8012148:	4699      	mov	r9, r3
 801214a:	4623      	mov	r3, r4
 801214c:	eb18 0303 	adds.w	r3, r8, r3
 8012150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012154:	462b      	mov	r3, r5
 8012156:	eb49 0303 	adc.w	r3, r9, r3
 801215a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801216a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801216e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012172:	460b      	mov	r3, r1
 8012174:	18db      	adds	r3, r3, r3
 8012176:	653b      	str	r3, [r7, #80]	; 0x50
 8012178:	4613      	mov	r3, r2
 801217a:	eb42 0303 	adc.w	r3, r2, r3
 801217e:	657b      	str	r3, [r7, #84]	; 0x54
 8012180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012188:	f7ee fc78 	bl	8000a7c <__aeabi_uldivmod>
 801218c:	4602      	mov	r2, r0
 801218e:	460b      	mov	r3, r1
 8012190:	4b61      	ldr	r3, [pc, #388]	; (8012318 <UART_SetConfig+0x2d4>)
 8012192:	fba3 2302 	umull	r2, r3, r3, r2
 8012196:	095b      	lsrs	r3, r3, #5
 8012198:	011c      	lsls	r4, r3, #4
 801219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801219e:	2200      	movs	r2, #0
 80121a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80121a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80121a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80121ac:	4642      	mov	r2, r8
 80121ae:	464b      	mov	r3, r9
 80121b0:	1891      	adds	r1, r2, r2
 80121b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80121b4:	415b      	adcs	r3, r3
 80121b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80121bc:	4641      	mov	r1, r8
 80121be:	eb12 0a01 	adds.w	sl, r2, r1
 80121c2:	4649      	mov	r1, r9
 80121c4:	eb43 0b01 	adc.w	fp, r3, r1
 80121c8:	f04f 0200 	mov.w	r2, #0
 80121cc:	f04f 0300 	mov.w	r3, #0
 80121d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80121d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80121d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121dc:	4692      	mov	sl, r2
 80121de:	469b      	mov	fp, r3
 80121e0:	4643      	mov	r3, r8
 80121e2:	eb1a 0303 	adds.w	r3, sl, r3
 80121e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80121ea:	464b      	mov	r3, r9
 80121ec:	eb4b 0303 	adc.w	r3, fp, r3
 80121f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80121f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012208:	460b      	mov	r3, r1
 801220a:	18db      	adds	r3, r3, r3
 801220c:	643b      	str	r3, [r7, #64]	; 0x40
 801220e:	4613      	mov	r3, r2
 8012210:	eb42 0303 	adc.w	r3, r2, r3
 8012214:	647b      	str	r3, [r7, #68]	; 0x44
 8012216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801221a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801221e:	f7ee fc2d 	bl	8000a7c <__aeabi_uldivmod>
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	4611      	mov	r1, r2
 8012228:	4b3b      	ldr	r3, [pc, #236]	; (8012318 <UART_SetConfig+0x2d4>)
 801222a:	fba3 2301 	umull	r2, r3, r3, r1
 801222e:	095b      	lsrs	r3, r3, #5
 8012230:	2264      	movs	r2, #100	; 0x64
 8012232:	fb02 f303 	mul.w	r3, r2, r3
 8012236:	1acb      	subs	r3, r1, r3
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801223e:	4b36      	ldr	r3, [pc, #216]	; (8012318 <UART_SetConfig+0x2d4>)
 8012240:	fba3 2302 	umull	r2, r3, r3, r2
 8012244:	095b      	lsrs	r3, r3, #5
 8012246:	005b      	lsls	r3, r3, #1
 8012248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801224c:	441c      	add	r4, r3
 801224e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012252:	2200      	movs	r2, #0
 8012254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801225c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012260:	4642      	mov	r2, r8
 8012262:	464b      	mov	r3, r9
 8012264:	1891      	adds	r1, r2, r2
 8012266:	63b9      	str	r1, [r7, #56]	; 0x38
 8012268:	415b      	adcs	r3, r3
 801226a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801226c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012270:	4641      	mov	r1, r8
 8012272:	1851      	adds	r1, r2, r1
 8012274:	6339      	str	r1, [r7, #48]	; 0x30
 8012276:	4649      	mov	r1, r9
 8012278:	414b      	adcs	r3, r1
 801227a:	637b      	str	r3, [r7, #52]	; 0x34
 801227c:	f04f 0200 	mov.w	r2, #0
 8012280:	f04f 0300 	mov.w	r3, #0
 8012284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012288:	4659      	mov	r1, fp
 801228a:	00cb      	lsls	r3, r1, #3
 801228c:	4651      	mov	r1, sl
 801228e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012292:	4651      	mov	r1, sl
 8012294:	00ca      	lsls	r2, r1, #3
 8012296:	4610      	mov	r0, r2
 8012298:	4619      	mov	r1, r3
 801229a:	4603      	mov	r3, r0
 801229c:	4642      	mov	r2, r8
 801229e:	189b      	adds	r3, r3, r2
 80122a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80122a4:	464b      	mov	r3, r9
 80122a6:	460a      	mov	r2, r1
 80122a8:	eb42 0303 	adc.w	r3, r2, r3
 80122ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80122b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80122bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80122c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80122c4:	460b      	mov	r3, r1
 80122c6:	18db      	adds	r3, r3, r3
 80122c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ca:	4613      	mov	r3, r2
 80122cc:	eb42 0303 	adc.w	r3, r2, r3
 80122d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80122d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80122da:	f7ee fbcf 	bl	8000a7c <__aeabi_uldivmod>
 80122de:	4602      	mov	r2, r0
 80122e0:	460b      	mov	r3, r1
 80122e2:	4b0d      	ldr	r3, [pc, #52]	; (8012318 <UART_SetConfig+0x2d4>)
 80122e4:	fba3 1302 	umull	r1, r3, r3, r2
 80122e8:	095b      	lsrs	r3, r3, #5
 80122ea:	2164      	movs	r1, #100	; 0x64
 80122ec:	fb01 f303 	mul.w	r3, r1, r3
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	00db      	lsls	r3, r3, #3
 80122f4:	3332      	adds	r3, #50	; 0x32
 80122f6:	4a08      	ldr	r2, [pc, #32]	; (8012318 <UART_SetConfig+0x2d4>)
 80122f8:	fba2 2303 	umull	r2, r3, r2, r3
 80122fc:	095b      	lsrs	r3, r3, #5
 80122fe:	f003 0207 	and.w	r2, r3, #7
 8012302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	4422      	add	r2, r4
 801230a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801230c:	e105      	b.n	801251a <UART_SetConfig+0x4d6>
 801230e:	bf00      	nop
 8012310:	40011000 	.word	0x40011000
 8012314:	40011400 	.word	0x40011400
 8012318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801231c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012320:	2200      	movs	r2, #0
 8012322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801232a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801232e:	4642      	mov	r2, r8
 8012330:	464b      	mov	r3, r9
 8012332:	1891      	adds	r1, r2, r2
 8012334:	6239      	str	r1, [r7, #32]
 8012336:	415b      	adcs	r3, r3
 8012338:	627b      	str	r3, [r7, #36]	; 0x24
 801233a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801233e:	4641      	mov	r1, r8
 8012340:	1854      	adds	r4, r2, r1
 8012342:	4649      	mov	r1, r9
 8012344:	eb43 0501 	adc.w	r5, r3, r1
 8012348:	f04f 0200 	mov.w	r2, #0
 801234c:	f04f 0300 	mov.w	r3, #0
 8012350:	00eb      	lsls	r3, r5, #3
 8012352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012356:	00e2      	lsls	r2, r4, #3
 8012358:	4614      	mov	r4, r2
 801235a:	461d      	mov	r5, r3
 801235c:	4643      	mov	r3, r8
 801235e:	18e3      	adds	r3, r4, r3
 8012360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012364:	464b      	mov	r3, r9
 8012366:	eb45 0303 	adc.w	r3, r5, r3
 801236a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	2200      	movs	r2, #0
 8012376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801237a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801237e:	f04f 0200 	mov.w	r2, #0
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801238a:	4629      	mov	r1, r5
 801238c:	008b      	lsls	r3, r1, #2
 801238e:	4621      	mov	r1, r4
 8012390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012394:	4621      	mov	r1, r4
 8012396:	008a      	lsls	r2, r1, #2
 8012398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801239c:	f7ee fb6e 	bl	8000a7c <__aeabi_uldivmod>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4b60      	ldr	r3, [pc, #384]	; (8012528 <UART_SetConfig+0x4e4>)
 80123a6:	fba3 2302 	umull	r2, r3, r3, r2
 80123aa:	095b      	lsrs	r3, r3, #5
 80123ac:	011c      	lsls	r4, r3, #4
 80123ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80123b2:	2200      	movs	r2, #0
 80123b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80123b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80123bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80123c0:	4642      	mov	r2, r8
 80123c2:	464b      	mov	r3, r9
 80123c4:	1891      	adds	r1, r2, r2
 80123c6:	61b9      	str	r1, [r7, #24]
 80123c8:	415b      	adcs	r3, r3
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80123d0:	4641      	mov	r1, r8
 80123d2:	1851      	adds	r1, r2, r1
 80123d4:	6139      	str	r1, [r7, #16]
 80123d6:	4649      	mov	r1, r9
 80123d8:	414b      	adcs	r3, r1
 80123da:	617b      	str	r3, [r7, #20]
 80123dc:	f04f 0200 	mov.w	r2, #0
 80123e0:	f04f 0300 	mov.w	r3, #0
 80123e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80123e8:	4659      	mov	r1, fp
 80123ea:	00cb      	lsls	r3, r1, #3
 80123ec:	4651      	mov	r1, sl
 80123ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80123f2:	4651      	mov	r1, sl
 80123f4:	00ca      	lsls	r2, r1, #3
 80123f6:	4610      	mov	r0, r2
 80123f8:	4619      	mov	r1, r3
 80123fa:	4603      	mov	r3, r0
 80123fc:	4642      	mov	r2, r8
 80123fe:	189b      	adds	r3, r3, r2
 8012400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012404:	464b      	mov	r3, r9
 8012406:	460a      	mov	r2, r1
 8012408:	eb42 0303 	adc.w	r3, r2, r3
 801240c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	67bb      	str	r3, [r7, #120]	; 0x78
 801241a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801241c:	f04f 0200 	mov.w	r2, #0
 8012420:	f04f 0300 	mov.w	r3, #0
 8012424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012428:	4649      	mov	r1, r9
 801242a:	008b      	lsls	r3, r1, #2
 801242c:	4641      	mov	r1, r8
 801242e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012432:	4641      	mov	r1, r8
 8012434:	008a      	lsls	r2, r1, #2
 8012436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801243a:	f7ee fb1f 	bl	8000a7c <__aeabi_uldivmod>
 801243e:	4602      	mov	r2, r0
 8012440:	460b      	mov	r3, r1
 8012442:	4b39      	ldr	r3, [pc, #228]	; (8012528 <UART_SetConfig+0x4e4>)
 8012444:	fba3 1302 	umull	r1, r3, r3, r2
 8012448:	095b      	lsrs	r3, r3, #5
 801244a:	2164      	movs	r1, #100	; 0x64
 801244c:	fb01 f303 	mul.w	r3, r1, r3
 8012450:	1ad3      	subs	r3, r2, r3
 8012452:	011b      	lsls	r3, r3, #4
 8012454:	3332      	adds	r3, #50	; 0x32
 8012456:	4a34      	ldr	r2, [pc, #208]	; (8012528 <UART_SetConfig+0x4e4>)
 8012458:	fba2 2303 	umull	r2, r3, r2, r3
 801245c:	095b      	lsrs	r3, r3, #5
 801245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012462:	441c      	add	r4, r3
 8012464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012468:	2200      	movs	r2, #0
 801246a:	673b      	str	r3, [r7, #112]	; 0x70
 801246c:	677a      	str	r2, [r7, #116]	; 0x74
 801246e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012472:	4642      	mov	r2, r8
 8012474:	464b      	mov	r3, r9
 8012476:	1891      	adds	r1, r2, r2
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	415b      	adcs	r3, r3
 801247c:	60fb      	str	r3, [r7, #12]
 801247e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012482:	4641      	mov	r1, r8
 8012484:	1851      	adds	r1, r2, r1
 8012486:	6039      	str	r1, [r7, #0]
 8012488:	4649      	mov	r1, r9
 801248a:	414b      	adcs	r3, r1
 801248c:	607b      	str	r3, [r7, #4]
 801248e:	f04f 0200 	mov.w	r2, #0
 8012492:	f04f 0300 	mov.w	r3, #0
 8012496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801249a:	4659      	mov	r1, fp
 801249c:	00cb      	lsls	r3, r1, #3
 801249e:	4651      	mov	r1, sl
 80124a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80124a4:	4651      	mov	r1, sl
 80124a6:	00ca      	lsls	r2, r1, #3
 80124a8:	4610      	mov	r0, r2
 80124aa:	4619      	mov	r1, r3
 80124ac:	4603      	mov	r3, r0
 80124ae:	4642      	mov	r2, r8
 80124b0:	189b      	adds	r3, r3, r2
 80124b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80124b4:	464b      	mov	r3, r9
 80124b6:	460a      	mov	r2, r1
 80124b8:	eb42 0303 	adc.w	r3, r2, r3
 80124bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80124be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	663b      	str	r3, [r7, #96]	; 0x60
 80124c8:	667a      	str	r2, [r7, #100]	; 0x64
 80124ca:	f04f 0200 	mov.w	r2, #0
 80124ce:	f04f 0300 	mov.w	r3, #0
 80124d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80124d6:	4649      	mov	r1, r9
 80124d8:	008b      	lsls	r3, r1, #2
 80124da:	4641      	mov	r1, r8
 80124dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124e0:	4641      	mov	r1, r8
 80124e2:	008a      	lsls	r2, r1, #2
 80124e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80124e8:	f7ee fac8 	bl	8000a7c <__aeabi_uldivmod>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <UART_SetConfig+0x4e4>)
 80124f2:	fba3 1302 	umull	r1, r3, r3, r2
 80124f6:	095b      	lsrs	r3, r3, #5
 80124f8:	2164      	movs	r1, #100	; 0x64
 80124fa:	fb01 f303 	mul.w	r3, r1, r3
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	011b      	lsls	r3, r3, #4
 8012502:	3332      	adds	r3, #50	; 0x32
 8012504:	4a08      	ldr	r2, [pc, #32]	; (8012528 <UART_SetConfig+0x4e4>)
 8012506:	fba2 2303 	umull	r2, r3, r2, r3
 801250a:	095b      	lsrs	r3, r3, #5
 801250c:	f003 020f 	and.w	r2, r3, #15
 8012510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	4422      	add	r2, r4
 8012518:	609a      	str	r2, [r3, #8]
}
 801251a:	bf00      	nop
 801251c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012520:	46bd      	mov	sp, r7
 8012522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012526:	bf00      	nop
 8012528:	51eb851f 	.word	0x51eb851f

0801252c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d123      	bne.n	8012586 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8012546:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801254a:	683a      	ldr	r2, [r7, #0]
 801254c:	6851      	ldr	r1, [r2, #4]
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	6892      	ldr	r2, [r2, #8]
 8012552:	4311      	orrs	r1, r2
 8012554:	683a      	ldr	r2, [r7, #0]
 8012556:	68d2      	ldr	r2, [r2, #12]
 8012558:	4311      	orrs	r1, r2
 801255a:	683a      	ldr	r2, [r7, #0]
 801255c:	6912      	ldr	r2, [r2, #16]
 801255e:	4311      	orrs	r1, r2
 8012560:	683a      	ldr	r2, [r7, #0]
 8012562:	6952      	ldr	r2, [r2, #20]
 8012564:	4311      	orrs	r1, r2
 8012566:	683a      	ldr	r2, [r7, #0]
 8012568:	6992      	ldr	r2, [r2, #24]
 801256a:	4311      	orrs	r1, r2
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	69d2      	ldr	r2, [r2, #28]
 8012570:	4311      	orrs	r1, r2
 8012572:	683a      	ldr	r2, [r7, #0]
 8012574:	6a12      	ldr	r2, [r2, #32]
 8012576:	4311      	orrs	r1, r2
 8012578:	683a      	ldr	r2, [r7, #0]
 801257a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801257c:	430a      	orrs	r2, r1
 801257e:	431a      	orrs	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	601a      	str	r2, [r3, #0]
 8012584:	e028      	b.n	80125d8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	69d9      	ldr	r1, [r3, #28]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	4319      	orrs	r1, r3
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259c:	430b      	orrs	r3, r1
 801259e:	431a      	orrs	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80125ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80125b0:	683a      	ldr	r2, [r7, #0]
 80125b2:	6851      	ldr	r1, [r2, #4]
 80125b4:	683a      	ldr	r2, [r7, #0]
 80125b6:	6892      	ldr	r2, [r2, #8]
 80125b8:	4311      	orrs	r1, r2
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	68d2      	ldr	r2, [r2, #12]
 80125be:	4311      	orrs	r1, r2
 80125c0:	683a      	ldr	r2, [r7, #0]
 80125c2:	6912      	ldr	r2, [r2, #16]
 80125c4:	4311      	orrs	r1, r2
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	6952      	ldr	r2, [r2, #20]
 80125ca:	4311      	orrs	r1, r2
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	6992      	ldr	r2, [r2, #24]
 80125d0:	430a      	orrs	r2, r1
 80125d2:	431a      	orrs	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	370c      	adds	r7, #12
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr

080125e6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80125e6:	b480      	push	{r7}
 80125e8:	b085      	sub	sp, #20
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	60f8      	str	r0, [r7, #12]
 80125ee:	60b9      	str	r1, [r7, #8]
 80125f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d128      	bne.n	801264a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	689b      	ldr	r3, [r3, #8]
 80125fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	1e59      	subs	r1, r3, #1
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	3b01      	subs	r3, #1
 801260c:	011b      	lsls	r3, r3, #4
 801260e:	4319      	orrs	r1, r3
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	689b      	ldr	r3, [r3, #8]
 8012614:	3b01      	subs	r3, #1
 8012616:	021b      	lsls	r3, r3, #8
 8012618:	4319      	orrs	r1, r3
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	3b01      	subs	r3, #1
 8012620:	031b      	lsls	r3, r3, #12
 8012622:	4319      	orrs	r1, r3
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	691b      	ldr	r3, [r3, #16]
 8012628:	3b01      	subs	r3, #1
 801262a:	041b      	lsls	r3, r3, #16
 801262c:	4319      	orrs	r1, r3
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	695b      	ldr	r3, [r3, #20]
 8012632:	3b01      	subs	r3, #1
 8012634:	051b      	lsls	r3, r3, #20
 8012636:	4319      	orrs	r1, r3
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	699b      	ldr	r3, [r3, #24]
 801263c:	3b01      	subs	r3, #1
 801263e:	061b      	lsls	r3, r3, #24
 8012640:	430b      	orrs	r3, r1
 8012642:	431a      	orrs	r2, r3
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	609a      	str	r2, [r3, #8]
 8012648:	e02f      	b.n	80126aa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012656:	68ba      	ldr	r2, [r7, #8]
 8012658:	68d2      	ldr	r2, [r2, #12]
 801265a:	3a01      	subs	r2, #1
 801265c:	0311      	lsls	r1, r2, #12
 801265e:	68ba      	ldr	r2, [r7, #8]
 8012660:	6952      	ldr	r2, [r2, #20]
 8012662:	3a01      	subs	r2, #1
 8012664:	0512      	lsls	r2, r2, #20
 8012666:	430a      	orrs	r2, r1
 8012668:	431a      	orrs	r2, r3
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	1e59      	subs	r1, r3, #1
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	3b01      	subs	r3, #1
 8012682:	011b      	lsls	r3, r3, #4
 8012684:	4319      	orrs	r1, r3
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	689b      	ldr	r3, [r3, #8]
 801268a:	3b01      	subs	r3, #1
 801268c:	021b      	lsls	r3, r3, #8
 801268e:	4319      	orrs	r1, r3
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	691b      	ldr	r3, [r3, #16]
 8012694:	3b01      	subs	r3, #1
 8012696:	041b      	lsls	r3, r3, #16
 8012698:	4319      	orrs	r1, r3
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	699b      	ldr	r3, [r3, #24]
 801269e:	3b01      	subs	r3, #1
 80126a0:	061b      	lsls	r3, r3, #24
 80126a2:	430b      	orrs	r3, r1
 80126a4:	431a      	orrs	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80126aa:	2300      	movs	r3, #0
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3714      	adds	r7, #20
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <FMC_SDRAM_WriteProtection_Disable>:
  * @brief  Disables dynamically FMC_SDRAM write protection.
  * @param  hsdram FMC_SDRAM handle
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_WriteProtection_Disable(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Disable write protection */
  CLEAR_BIT(Device->SDCR[Bank], FMC_SDRAM_WRITE_PROTECTION_ENABLE);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	683a      	ldr	r2, [r7, #0]
 80126c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ca:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	683a      	ldr	r2, [r7, #0]
 80126d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80126f0:	2300      	movs	r3, #0
 80126f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	691b      	ldr	r3, [r3, #16]
 80126f8:	0d9b      	lsrs	r3, r3, #22
 80126fa:	059b      	lsls	r3, r3, #22
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	6811      	ldr	r1, [r2, #0]
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	6852      	ldr	r2, [r2, #4]
 8012704:	4311      	orrs	r1, r2
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	6892      	ldr	r2, [r2, #8]
 801270a:	3a01      	subs	r2, #1
 801270c:	0152      	lsls	r2, r2, #5
 801270e:	4311      	orrs	r1, r2
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	68d2      	ldr	r2, [r2, #12]
 8012714:	0252      	lsls	r2, r2, #9
 8012716:	430a      	orrs	r2, r1
 8012718:	431a      	orrs	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 801271e:	f7f9 fe41 	bl	800c3a4 <HAL_GetTick>
 8012722:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8012724:	e010      	b.n	8012748 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272c:	d00c      	beq.n	8012748 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d007      	beq.n	8012744 <FMC_SDRAM_SendCommand+0x60>
 8012734:	f7f9 fe36 	bl	800c3a4 <HAL_GetTick>
 8012738:	4602      	mov	r2, r0
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	429a      	cmp	r2, r3
 8012742:	d201      	bcs.n	8012748 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8012744:	2303      	movs	r3, #3
 8012746:	e006      	b.n	8012756 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	699b      	ldr	r3, [r3, #24]
 801274c:	f003 0320 	and.w	r3, r3, #32
 8012750:	2b20      	cmp	r3, #32
 8012752:	d0e8      	beq.n	8012726 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8012754:	2300      	movs	r3, #0
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801275e:	b480      	push	{r7}
 8012760:	b083      	sub	sp, #12
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	695b      	ldr	r3, [r3, #20]
 801276c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8012770:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8012774:	683a      	ldr	r2, [r7, #0]
 8012776:	0052      	lsls	r2, r2, #1
 8012778:	431a      	orrs	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801278c:	b084      	sub	sp, #16
 801278e:	b580      	push	{r7, lr}
 8012790:	b084      	sub	sp, #16
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	f107 001c 	add.w	r0, r7, #28
 801279a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d122      	bne.n	80127ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80127b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80127cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d105      	bne.n	80127de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f001 fbee 	bl	8013fc0 <USB_CoreReset>
 80127e4:	4603      	mov	r3, r0
 80127e6:	73fb      	strb	r3, [r7, #15]
 80127e8:	e01a      	b.n	8012820 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	68db      	ldr	r3, [r3, #12]
 80127ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f001 fbe2 	bl	8013fc0 <USB_CoreReset>
 80127fc:	4603      	mov	r3, r0
 80127fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012802:	2b00      	cmp	r3, #0
 8012804:	d106      	bne.n	8012814 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801280a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	639a      	str	r2, [r3, #56]	; 0x38
 8012812:	e005      	b.n	8012820 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012822:	2b01      	cmp	r3, #1
 8012824:	d10b      	bne.n	801283e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	689b      	ldr	r3, [r3, #8]
 801282a:	f043 0206 	orr.w	r2, r3, #6
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	f043 0220 	orr.w	r2, r3, #32
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3710      	adds	r7, #16
 8012844:	46bd      	mov	sp, r7
 8012846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801284a:	b004      	add	sp, #16
 801284c:	4770      	bx	lr
	...

08012850 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012850:	b480      	push	{r7}
 8012852:	b087      	sub	sp, #28
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	4613      	mov	r3, r2
 801285c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801285e:	79fb      	ldrb	r3, [r7, #7]
 8012860:	2b02      	cmp	r3, #2
 8012862:	d165      	bne.n	8012930 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	4a41      	ldr	r2, [pc, #260]	; (801296c <USB_SetTurnaroundTime+0x11c>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d906      	bls.n	801287a <USB_SetTurnaroundTime+0x2a>
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	4a40      	ldr	r2, [pc, #256]	; (8012970 <USB_SetTurnaroundTime+0x120>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d202      	bcs.n	801287a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012874:	230f      	movs	r3, #15
 8012876:	617b      	str	r3, [r7, #20]
 8012878:	e062      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	4a3c      	ldr	r2, [pc, #240]	; (8012970 <USB_SetTurnaroundTime+0x120>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d306      	bcc.n	8012890 <USB_SetTurnaroundTime+0x40>
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	4a3b      	ldr	r2, [pc, #236]	; (8012974 <USB_SetTurnaroundTime+0x124>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d202      	bcs.n	8012890 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801288a:	230e      	movs	r3, #14
 801288c:	617b      	str	r3, [r7, #20]
 801288e:	e057      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	4a38      	ldr	r2, [pc, #224]	; (8012974 <USB_SetTurnaroundTime+0x124>)
 8012894:	4293      	cmp	r3, r2
 8012896:	d306      	bcc.n	80128a6 <USB_SetTurnaroundTime+0x56>
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	4a37      	ldr	r2, [pc, #220]	; (8012978 <USB_SetTurnaroundTime+0x128>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d202      	bcs.n	80128a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80128a0:	230d      	movs	r3, #13
 80128a2:	617b      	str	r3, [r7, #20]
 80128a4:	e04c      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	4a33      	ldr	r2, [pc, #204]	; (8012978 <USB_SetTurnaroundTime+0x128>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d306      	bcc.n	80128bc <USB_SetTurnaroundTime+0x6c>
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	4a32      	ldr	r2, [pc, #200]	; (801297c <USB_SetTurnaroundTime+0x12c>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d802      	bhi.n	80128bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80128b6:	230c      	movs	r3, #12
 80128b8:	617b      	str	r3, [r7, #20]
 80128ba:	e041      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	4a2f      	ldr	r2, [pc, #188]	; (801297c <USB_SetTurnaroundTime+0x12c>)
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d906      	bls.n	80128d2 <USB_SetTurnaroundTime+0x82>
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	4a2e      	ldr	r2, [pc, #184]	; (8012980 <USB_SetTurnaroundTime+0x130>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d802      	bhi.n	80128d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80128cc:	230b      	movs	r3, #11
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	e036      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	4a2a      	ldr	r2, [pc, #168]	; (8012980 <USB_SetTurnaroundTime+0x130>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d906      	bls.n	80128e8 <USB_SetTurnaroundTime+0x98>
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	4a29      	ldr	r2, [pc, #164]	; (8012984 <USB_SetTurnaroundTime+0x134>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d802      	bhi.n	80128e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80128e2:	230a      	movs	r3, #10
 80128e4:	617b      	str	r3, [r7, #20]
 80128e6:	e02b      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	4a26      	ldr	r2, [pc, #152]	; (8012984 <USB_SetTurnaroundTime+0x134>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d906      	bls.n	80128fe <USB_SetTurnaroundTime+0xae>
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	4a25      	ldr	r2, [pc, #148]	; (8012988 <USB_SetTurnaroundTime+0x138>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d202      	bcs.n	80128fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80128f8:	2309      	movs	r3, #9
 80128fa:	617b      	str	r3, [r7, #20]
 80128fc:	e020      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	4a21      	ldr	r2, [pc, #132]	; (8012988 <USB_SetTurnaroundTime+0x138>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d306      	bcc.n	8012914 <USB_SetTurnaroundTime+0xc4>
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	4a20      	ldr	r2, [pc, #128]	; (801298c <USB_SetTurnaroundTime+0x13c>)
 801290a:	4293      	cmp	r3, r2
 801290c:	d802      	bhi.n	8012914 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801290e:	2308      	movs	r3, #8
 8012910:	617b      	str	r3, [r7, #20]
 8012912:	e015      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	4a1d      	ldr	r2, [pc, #116]	; (801298c <USB_SetTurnaroundTime+0x13c>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d906      	bls.n	801292a <USB_SetTurnaroundTime+0xda>
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	4a1c      	ldr	r2, [pc, #112]	; (8012990 <USB_SetTurnaroundTime+0x140>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d202      	bcs.n	801292a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012924:	2307      	movs	r3, #7
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	e00a      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801292a:	2306      	movs	r3, #6
 801292c:	617b      	str	r3, [r7, #20]
 801292e:	e007      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012930:	79fb      	ldrb	r3, [r7, #7]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d102      	bne.n	801293c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012936:	2309      	movs	r3, #9
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	e001      	b.n	8012940 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801293c:	2309      	movs	r3, #9
 801293e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	68da      	ldr	r2, [r3, #12]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	029b      	lsls	r3, r3, #10
 8012954:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012958:	431a      	orrs	r2, r3
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	371c      	adds	r7, #28
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	00d8acbf 	.word	0x00d8acbf
 8012970:	00e4e1c0 	.word	0x00e4e1c0
 8012974:	00f42400 	.word	0x00f42400
 8012978:	01067380 	.word	0x01067380
 801297c:	011a499f 	.word	0x011a499f
 8012980:	01312cff 	.word	0x01312cff
 8012984:	014ca43f 	.word	0x014ca43f
 8012988:	016e3600 	.word	0x016e3600
 801298c:	01a6ab1f 	.word	0x01a6ab1f
 8012990:	01e84800 	.word	0x01e84800

08012994 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	f043 0201 	orr.w	r2, r3, #1
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	370c      	adds	r7, #12
 80129ae:	46bd      	mov	sp, r7
 80129b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b4:	4770      	bx	lr

080129b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80129b6:	b480      	push	{r7}
 80129b8:	b083      	sub	sp, #12
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	f023 0201 	bic.w	r2, r3, #1
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	460b      	mov	r3, r1
 80129e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80129e4:	2300      	movs	r3, #0
 80129e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80129f4:	78fb      	ldrb	r3, [r7, #3]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d115      	bne.n	8012a26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	68db      	ldr	r3, [r3, #12]
 80129fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012a06:	2001      	movs	r0, #1
 8012a08:	f7f9 fcd8 	bl	800c3bc <HAL_Delay>
      ms++;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f001 fa45 	bl	8013ea2 <USB_GetMode>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d01e      	beq.n	8012a5c <USB_SetCurrentMode+0x84>
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2b31      	cmp	r3, #49	; 0x31
 8012a22:	d9f0      	bls.n	8012a06 <USB_SetCurrentMode+0x2e>
 8012a24:	e01a      	b.n	8012a5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012a26:	78fb      	ldrb	r3, [r7, #3]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d115      	bne.n	8012a58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012a38:	2001      	movs	r0, #1
 8012a3a:	f7f9 fcbf 	bl	800c3bc <HAL_Delay>
      ms++;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	3301      	adds	r3, #1
 8012a42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f001 fa2c 	bl	8013ea2 <USB_GetMode>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d005      	beq.n	8012a5c <USB_SetCurrentMode+0x84>
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b31      	cmp	r3, #49	; 0x31
 8012a54:	d9f0      	bls.n	8012a38 <USB_SetCurrentMode+0x60>
 8012a56:	e001      	b.n	8012a5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e005      	b.n	8012a68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b32      	cmp	r3, #50	; 0x32
 8012a60:	d101      	bne.n	8012a66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e000      	b.n	8012a68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012a66:	2300      	movs	r3, #0
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a70:	b084      	sub	sp, #16
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b086      	sub	sp, #24
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	613b      	str	r3, [r7, #16]
 8012a8e:	e009      	b.n	8012aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	3340      	adds	r3, #64	; 0x40
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	613b      	str	r3, [r7, #16]
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	2b0e      	cmp	r3, #14
 8012aa8:	d9f2      	bls.n	8012a90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d11c      	bne.n	8012aea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012abe:	f043 0302 	orr.w	r3, r3, #2
 8012ac2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ad4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8012ae8:	e00b      	b.n	8012b02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012afa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012b08:	461a      	mov	r2, r3
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b14:	4619      	mov	r1, r3
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	680b      	ldr	r3, [r1, #0]
 8012b20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d10c      	bne.n	8012b42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d104      	bne.n	8012b38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012b2e:	2100      	movs	r1, #0
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f000 f965 	bl	8012e00 <USB_SetDevSpeed>
 8012b36:	e008      	b.n	8012b4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012b38:	2101      	movs	r1, #1
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f000 f960 	bl	8012e00 <USB_SetDevSpeed>
 8012b40:	e003      	b.n	8012b4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012b42:	2103      	movs	r1, #3
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f000 f95b 	bl	8012e00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012b4a:	2110      	movs	r1, #16
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 f8f3 	bl	8012d38 <USB_FlushTxFifo>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8012b58:	2301      	movs	r3, #1
 8012b5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f000 f91f 	bl	8012da0 <USB_FlushRxFifo>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b72:	461a      	mov	r2, r3
 8012b74:	2300      	movs	r3, #0
 8012b76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b7e:	461a      	mov	r2, r3
 8012b80:	2300      	movs	r3, #0
 8012b82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b90:	2300      	movs	r3, #0
 8012b92:	613b      	str	r3, [r7, #16]
 8012b94:	e043      	b.n	8012c1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	015a      	lsls	r2, r3, #5
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bac:	d118      	bne.n	8012be0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10a      	bne.n	8012bca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	015a      	lsls	r2, r3, #5
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	4413      	add	r3, r2
 8012bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012bc6:	6013      	str	r3, [r2, #0]
 8012bc8:	e013      	b.n	8012bf2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	015a      	lsls	r2, r3, #5
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012bdc:	6013      	str	r3, [r2, #0]
 8012bde:	e008      	b.n	8012bf2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	015a      	lsls	r2, r3, #5
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	4413      	add	r3, r2
 8012be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bec:	461a      	mov	r2, r3
 8012bee:	2300      	movs	r3, #0
 8012bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	015a      	lsls	r2, r3, #5
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bfe:	461a      	mov	r2, r3
 8012c00:	2300      	movs	r3, #0
 8012c02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	015a      	lsls	r2, r3, #5
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	4413      	add	r3, r2
 8012c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c10:	461a      	mov	r2, r3
 8012c12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	613b      	str	r3, [r7, #16]
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	693a      	ldr	r2, [r7, #16]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d3b7      	bcc.n	8012b96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]
 8012c2a:	e043      	b.n	8012cb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	015a      	lsls	r2, r3, #5
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	4413      	add	r3, r2
 8012c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c42:	d118      	bne.n	8012c76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d10a      	bne.n	8012c60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	015a      	lsls	r2, r3, #5
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	4413      	add	r3, r2
 8012c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c56:	461a      	mov	r2, r3
 8012c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012c5c:	6013      	str	r3, [r2, #0]
 8012c5e:	e013      	b.n	8012c88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	015a      	lsls	r2, r3, #5
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	4413      	add	r3, r2
 8012c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012c72:	6013      	str	r3, [r2, #0]
 8012c74:	e008      	b.n	8012c88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	015a      	lsls	r2, r3, #5
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c82:	461a      	mov	r2, r3
 8012c84:	2300      	movs	r3, #0
 8012c86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	015a      	lsls	r2, r3, #5
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	4413      	add	r3, r2
 8012c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c94:	461a      	mov	r2, r3
 8012c96:	2300      	movs	r3, #0
 8012c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	015a      	lsls	r2, r3, #5
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	613b      	str	r3, [r7, #16]
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	693a      	ldr	r2, [r7, #16]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d3b7      	bcc.n	8012c2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cc2:	691b      	ldr	r3, [r3, #16]
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012cdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d105      	bne.n	8012cf0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	f043 0210 	orr.w	r2, r3, #16
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	699a      	ldr	r2, [r3, #24]
 8012cf4:	4b0f      	ldr	r3, [pc, #60]	; (8012d34 <USB_DevInit+0x2c4>)
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d005      	beq.n	8012d0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	699b      	ldr	r3, [r3, #24]
 8012d06:	f043 0208 	orr.w	r2, r3, #8
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d107      	bne.n	8012d24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	699b      	ldr	r3, [r3, #24]
 8012d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d1c:	f043 0304 	orr.w	r3, r3, #4
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3718      	adds	r7, #24
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012d30:	b004      	add	sp, #16
 8012d32:	4770      	bx	lr
 8012d34:	803c3800 	.word	0x803c3800

08012d38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b085      	sub	sp, #20
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012d42:	2300      	movs	r3, #0
 8012d44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	4a13      	ldr	r2, [pc, #76]	; (8012d9c <USB_FlushTxFifo+0x64>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d901      	bls.n	8012d58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012d54:	2303      	movs	r3, #3
 8012d56:	e01b      	b.n	8012d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	691b      	ldr	r3, [r3, #16]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	daf2      	bge.n	8012d46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012d60:	2300      	movs	r3, #0
 8012d62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	019b      	lsls	r3, r3, #6
 8012d68:	f043 0220 	orr.w	r2, r3, #32
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	3301      	adds	r3, #1
 8012d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	4a08      	ldr	r2, [pc, #32]	; (8012d9c <USB_FlushTxFifo+0x64>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d901      	bls.n	8012d82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012d7e:	2303      	movs	r3, #3
 8012d80:	e006      	b.n	8012d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	f003 0320 	and.w	r3, r3, #32
 8012d8a:	2b20      	cmp	r3, #32
 8012d8c:	d0f0      	beq.n	8012d70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3714      	adds	r7, #20
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr
 8012d9c:	00030d40 	.word	0x00030d40

08012da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012da8:	2300      	movs	r3, #0
 8012daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	3301      	adds	r3, #1
 8012db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	4a11      	ldr	r2, [pc, #68]	; (8012dfc <USB_FlushRxFifo+0x5c>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d901      	bls.n	8012dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012dba:	2303      	movs	r3, #3
 8012dbc:	e018      	b.n	8012df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	691b      	ldr	r3, [r3, #16]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	daf2      	bge.n	8012dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2210      	movs	r2, #16
 8012dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	4a08      	ldr	r2, [pc, #32]	; (8012dfc <USB_FlushRxFifo+0x5c>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d901      	bls.n	8012de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012dde:	2303      	movs	r3, #3
 8012de0:	e006      	b.n	8012df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	f003 0310 	and.w	r3, r3, #16
 8012dea:	2b10      	cmp	r3, #16
 8012dec:	d0f0      	beq.n	8012dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	00030d40 	.word	0x00030d40

08012e00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	460b      	mov	r3, r1
 8012e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	78fb      	ldrb	r3, [r7, #3]
 8012e1a:	68f9      	ldr	r1, [r7, #12]
 8012e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e20:	4313      	orrs	r3, r2
 8012e22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012e24:	2300      	movs	r3, #0
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3714      	adds	r7, #20
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012e32:	b480      	push	{r7}
 8012e34:	b087      	sub	sp, #28
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e44:	689b      	ldr	r3, [r3, #8]
 8012e46:	f003 0306 	and.w	r3, r3, #6
 8012e4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d102      	bne.n	8012e58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012e52:	2300      	movs	r3, #0
 8012e54:	75fb      	strb	r3, [r7, #23]
 8012e56:	e00a      	b.n	8012e6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b02      	cmp	r3, #2
 8012e5c:	d002      	beq.n	8012e64 <USB_GetDevSpeed+0x32>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2b06      	cmp	r3, #6
 8012e62:	d102      	bne.n	8012e6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012e64:	2302      	movs	r3, #2
 8012e66:	75fb      	strb	r3, [r7, #23]
 8012e68:	e001      	b.n	8012e6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012e6a:	230f      	movs	r3, #15
 8012e6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	371c      	adds	r7, #28
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr

08012e7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	785b      	ldrb	r3, [r3, #1]
 8012e94:	2b01      	cmp	r3, #1
 8012e96:	d13a      	bne.n	8012f0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9e:	69da      	ldr	r2, [r3, #28]
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	f003 030f 	and.w	r3, r3, #15
 8012ea8:	2101      	movs	r1, #1
 8012eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	68f9      	ldr	r1, [r7, #12]
 8012eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012eb6:	4313      	orrs	r3, r2
 8012eb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	015a      	lsls	r2, r3, #5
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d155      	bne.n	8012f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	015a      	lsls	r2, r3, #5
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	791b      	ldrb	r3, [r3, #4]
 8012eea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012eec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	059b      	lsls	r3, r3, #22
 8012ef2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	0151      	lsls	r1, r2, #5
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	440a      	add	r2, r1
 8012efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	e036      	b.n	8012f7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f14:	69da      	ldr	r2, [r3, #28]
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	f003 030f 	and.w	r3, r3, #15
 8012f1e:	2101      	movs	r1, #1
 8012f20:	fa01 f303 	lsl.w	r3, r1, r3
 8012f24:	041b      	lsls	r3, r3, #16
 8012f26:	68f9      	ldr	r1, [r7, #12]
 8012f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	015a      	lsls	r2, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d11a      	bne.n	8012f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	015a      	lsls	r2, r3, #5
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	791b      	ldrb	r3, [r3, #4]
 8012f60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012f62:	430b      	orrs	r3, r1
 8012f64:	4313      	orrs	r3, r2
 8012f66:	68ba      	ldr	r2, [r7, #8]
 8012f68:	0151      	lsls	r1, r2, #5
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	440a      	add	r2, r1
 8012f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3714      	adds	r7, #20
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
	...

08012f8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	785b      	ldrb	r3, [r3, #1]
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d161      	bne.n	801306c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	015a      	lsls	r2, r3, #5
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012fbe:	d11f      	bne.n	8013000 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	015a      	lsls	r2, r3, #5
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	0151      	lsls	r1, r2, #5
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	440a      	add	r2, r1
 8012fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012fde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	015a      	lsls	r2, r3, #5
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	0151      	lsls	r1, r2, #5
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	440a      	add	r2, r1
 8012ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	f003 030f 	and.w	r3, r3, #15
 8013010:	2101      	movs	r1, #1
 8013012:	fa01 f303 	lsl.w	r3, r1, r3
 8013016:	b29b      	uxth	r3, r3
 8013018:	43db      	mvns	r3, r3
 801301a:	68f9      	ldr	r1, [r7, #12]
 801301c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013020:	4013      	ands	r3, r2
 8013022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302a:	69da      	ldr	r2, [r3, #28]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	2101      	movs	r1, #1
 8013036:	fa01 f303 	lsl.w	r3, r1, r3
 801303a:	b29b      	uxth	r3, r3
 801303c:	43db      	mvns	r3, r3
 801303e:	68f9      	ldr	r1, [r7, #12]
 8013040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013044:	4013      	ands	r3, r2
 8013046:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	015a      	lsls	r2, r3, #5
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	4413      	add	r3, r2
 8013050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	0159      	lsls	r1, r3, #5
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	440b      	add	r3, r1
 801305e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013062:	4619      	mov	r1, r3
 8013064:	4b35      	ldr	r3, [pc, #212]	; (801313c <USB_DeactivateEndpoint+0x1b0>)
 8013066:	4013      	ands	r3, r2
 8013068:	600b      	str	r3, [r1, #0]
 801306a:	e060      	b.n	801312e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	015a      	lsls	r2, r3, #5
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	4413      	add	r3, r2
 8013074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801307e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013082:	d11f      	bne.n	80130c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	015a      	lsls	r2, r3, #5
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	4413      	add	r3, r2
 801308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	68ba      	ldr	r2, [r7, #8]
 8013094:	0151      	lsls	r1, r2, #5
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	440a      	add	r2, r1
 801309a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801309e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80130a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	015a      	lsls	r2, r3, #5
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	4413      	add	r3, r2
 80130ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	68ba      	ldr	r2, [r7, #8]
 80130b4:	0151      	lsls	r1, r2, #5
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	440a      	add	r2, r1
 80130ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80130c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 030f 	and.w	r3, r3, #15
 80130d4:	2101      	movs	r1, #1
 80130d6:	fa01 f303 	lsl.w	r3, r1, r3
 80130da:	041b      	lsls	r3, r3, #16
 80130dc:	43db      	mvns	r3, r3
 80130de:	68f9      	ldr	r1, [r7, #12]
 80130e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130e4:	4013      	ands	r3, r2
 80130e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ee:	69da      	ldr	r2, [r3, #28]
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	f003 030f 	and.w	r3, r3, #15
 80130f8:	2101      	movs	r1, #1
 80130fa:	fa01 f303 	lsl.w	r3, r1, r3
 80130fe:	041b      	lsls	r3, r3, #16
 8013100:	43db      	mvns	r3, r3
 8013102:	68f9      	ldr	r1, [r7, #12]
 8013104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013108:	4013      	ands	r3, r2
 801310a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	015a      	lsls	r2, r3, #5
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	4413      	add	r3, r2
 8013114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	0159      	lsls	r1, r3, #5
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	440b      	add	r3, r1
 8013122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013126:	4619      	mov	r1, r3
 8013128:	4b05      	ldr	r3, [pc, #20]	; (8013140 <USB_DeactivateEndpoint+0x1b4>)
 801312a:	4013      	ands	r3, r2
 801312c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	ec337800 	.word	0xec337800
 8013140:	eff37800 	.word	0xeff37800

08013144 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af02      	add	r7, sp, #8
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	4613      	mov	r3, r2
 8013150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	785b      	ldrb	r3, [r3, #1]
 8013160:	2b01      	cmp	r3, #1
 8013162:	f040 815c 	bne.w	801341e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	699b      	ldr	r3, [r3, #24]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d132      	bne.n	80131d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	015a      	lsls	r2, r3, #5
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	4413      	add	r3, r2
 8013176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	69ba      	ldr	r2, [r7, #24]
 801317e:	0151      	lsls	r1, r2, #5
 8013180:	69fa      	ldr	r2, [r7, #28]
 8013182:	440a      	add	r2, r1
 8013184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801318c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	015a      	lsls	r2, r3, #5
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	4413      	add	r3, r2
 801319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	69ba      	ldr	r2, [r7, #24]
 80131a2:	0151      	lsls	r1, r2, #5
 80131a4:	69fa      	ldr	r2, [r7, #28]
 80131a6:	440a      	add	r2, r1
 80131a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80131b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	015a      	lsls	r2, r3, #5
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	4413      	add	r3, r2
 80131ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131be:	691b      	ldr	r3, [r3, #16]
 80131c0:	69ba      	ldr	r2, [r7, #24]
 80131c2:	0151      	lsls	r1, r2, #5
 80131c4:	69fa      	ldr	r2, [r7, #28]
 80131c6:	440a      	add	r2, r1
 80131c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131cc:	0cdb      	lsrs	r3, r3, #19
 80131ce:	04db      	lsls	r3, r3, #19
 80131d0:	6113      	str	r3, [r2, #16]
 80131d2:	e074      	b.n	80132be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	015a      	lsls	r2, r3, #5
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	4413      	add	r3, r2
 80131dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e0:	691b      	ldr	r3, [r3, #16]
 80131e2:	69ba      	ldr	r2, [r7, #24]
 80131e4:	0151      	lsls	r1, r2, #5
 80131e6:	69fa      	ldr	r2, [r7, #28]
 80131e8:	440a      	add	r2, r1
 80131ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131ee:	0cdb      	lsrs	r3, r3, #19
 80131f0:	04db      	lsls	r3, r3, #19
 80131f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	015a      	lsls	r2, r3, #5
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	4413      	add	r3, r2
 80131fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013200:	691b      	ldr	r3, [r3, #16]
 8013202:	69ba      	ldr	r2, [r7, #24]
 8013204:	0151      	lsls	r1, r2, #5
 8013206:	69fa      	ldr	r2, [r7, #28]
 8013208:	440a      	add	r2, r1
 801320a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801320e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	015a      	lsls	r2, r3, #5
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	4413      	add	r3, r2
 8013220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013224:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	6999      	ldr	r1, [r3, #24]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	440b      	add	r3, r1
 8013230:	1e59      	subs	r1, r3, #1
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	fbb1 f3f3 	udiv	r3, r1, r3
 801323a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801323c:	4b9d      	ldr	r3, [pc, #628]	; (80134b4 <USB_EPStartXfer+0x370>)
 801323e:	400b      	ands	r3, r1
 8013240:	69b9      	ldr	r1, [r7, #24]
 8013242:	0148      	lsls	r0, r1, #5
 8013244:	69f9      	ldr	r1, [r7, #28]
 8013246:	4401      	add	r1, r0
 8013248:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801324c:	4313      	orrs	r3, r2
 801324e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	015a      	lsls	r2, r3, #5
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	4413      	add	r3, r2
 8013258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801325c:	691a      	ldr	r2, [r3, #16]
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	699b      	ldr	r3, [r3, #24]
 8013262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013266:	69b9      	ldr	r1, [r7, #24]
 8013268:	0148      	lsls	r0, r1, #5
 801326a:	69f9      	ldr	r1, [r7, #28]
 801326c:	4401      	add	r1, r0
 801326e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013272:	4313      	orrs	r3, r2
 8013274:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	791b      	ldrb	r3, [r3, #4]
 801327a:	2b01      	cmp	r3, #1
 801327c:	d11f      	bne.n	80132be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	015a      	lsls	r2, r3, #5
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	4413      	add	r3, r2
 8013286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	69ba      	ldr	r2, [r7, #24]
 801328e:	0151      	lsls	r1, r2, #5
 8013290:	69fa      	ldr	r2, [r7, #28]
 8013292:	440a      	add	r2, r1
 8013294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013298:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801329c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	015a      	lsls	r2, r3, #5
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	4413      	add	r3, r2
 80132a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132aa:	691b      	ldr	r3, [r3, #16]
 80132ac:	69ba      	ldr	r2, [r7, #24]
 80132ae:	0151      	lsls	r1, r2, #5
 80132b0:	69fa      	ldr	r2, [r7, #28]
 80132b2:	440a      	add	r2, r1
 80132b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d14b      	bne.n	801335c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	695b      	ldr	r3, [r3, #20]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d009      	beq.n	80132e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	015a      	lsls	r2, r3, #5
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	4413      	add	r3, r2
 80132d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d8:	461a      	mov	r2, r3
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	695b      	ldr	r3, [r3, #20]
 80132de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	791b      	ldrb	r3, [r3, #4]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d128      	bne.n	801333a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d110      	bne.n	801331a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	015a      	lsls	r2, r3, #5
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	4413      	add	r3, r2
 8013300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	69ba      	ldr	r2, [r7, #24]
 8013308:	0151      	lsls	r1, r2, #5
 801330a:	69fa      	ldr	r2, [r7, #28]
 801330c:	440a      	add	r2, r1
 801330e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013316:	6013      	str	r3, [r2, #0]
 8013318:	e00f      	b.n	801333a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	015a      	lsls	r2, r3, #5
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	4413      	add	r3, r2
 8013322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	69ba      	ldr	r2, [r7, #24]
 801332a:	0151      	lsls	r1, r2, #5
 801332c:	69fa      	ldr	r2, [r7, #28]
 801332e:	440a      	add	r2, r1
 8013330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013338:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	015a      	lsls	r2, r3, #5
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	4413      	add	r3, r2
 8013342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	69ba      	ldr	r2, [r7, #24]
 801334a:	0151      	lsls	r1, r2, #5
 801334c:	69fa      	ldr	r2, [r7, #28]
 801334e:	440a      	add	r2, r1
 8013350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013358:	6013      	str	r3, [r2, #0]
 801335a:	e133      	b.n	80135c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	015a      	lsls	r2, r3, #5
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	4413      	add	r3, r2
 8013364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	69ba      	ldr	r2, [r7, #24]
 801336c:	0151      	lsls	r1, r2, #5
 801336e:	69fa      	ldr	r2, [r7, #28]
 8013370:	440a      	add	r2, r1
 8013372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013376:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801337a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	791b      	ldrb	r3, [r3, #4]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d015      	beq.n	80133b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	2b00      	cmp	r3, #0
 801338a:	f000 811b 	beq.w	80135c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801338e:	69fb      	ldr	r3, [r7, #28]
 8013390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	f003 030f 	and.w	r3, r3, #15
 801339e:	2101      	movs	r1, #1
 80133a0:	fa01 f303 	lsl.w	r3, r1, r3
 80133a4:	69f9      	ldr	r1, [r7, #28]
 80133a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133aa:	4313      	orrs	r3, r2
 80133ac:	634b      	str	r3, [r1, #52]	; 0x34
 80133ae:	e109      	b.n	80135c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d110      	bne.n	80133e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	015a      	lsls	r2, r3, #5
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	4413      	add	r3, r2
 80133c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	69ba      	ldr	r2, [r7, #24]
 80133d0:	0151      	lsls	r1, r2, #5
 80133d2:	69fa      	ldr	r2, [r7, #28]
 80133d4:	440a      	add	r2, r1
 80133d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133de:	6013      	str	r3, [r2, #0]
 80133e0:	e00f      	b.n	8013402 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	015a      	lsls	r2, r3, #5
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	4413      	add	r3, r2
 80133ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	69ba      	ldr	r2, [r7, #24]
 80133f2:	0151      	lsls	r1, r2, #5
 80133f4:	69fa      	ldr	r2, [r7, #28]
 80133f6:	440a      	add	r2, r1
 80133f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013400:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	6919      	ldr	r1, [r3, #16]
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	781a      	ldrb	r2, [r3, #0]
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	b298      	uxth	r0, r3
 8013410:	79fb      	ldrb	r3, [r7, #7]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	4603      	mov	r3, r0
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	f000 fade 	bl	80139d8 <USB_WritePacket>
 801341c:	e0d2      	b.n	80135c4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	015a      	lsls	r2, r3, #5
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	4413      	add	r3, r2
 8013426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801342a:	691b      	ldr	r3, [r3, #16]
 801342c:	69ba      	ldr	r2, [r7, #24]
 801342e:	0151      	lsls	r1, r2, #5
 8013430:	69fa      	ldr	r2, [r7, #28]
 8013432:	440a      	add	r2, r1
 8013434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013438:	0cdb      	lsrs	r3, r3, #19
 801343a:	04db      	lsls	r3, r3, #19
 801343c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	015a      	lsls	r2, r3, #5
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	4413      	add	r3, r2
 8013446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801344a:	691b      	ldr	r3, [r3, #16]
 801344c:	69ba      	ldr	r2, [r7, #24]
 801344e:	0151      	lsls	r1, r2, #5
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	440a      	add	r2, r1
 8013454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013458:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801345c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013460:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	699b      	ldr	r3, [r3, #24]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d126      	bne.n	80134b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	015a      	lsls	r2, r3, #5
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	4413      	add	r3, r2
 8013472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013476:	691a      	ldr	r2, [r3, #16]
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013480:	69b9      	ldr	r1, [r7, #24]
 8013482:	0148      	lsls	r0, r1, #5
 8013484:	69f9      	ldr	r1, [r7, #28]
 8013486:	4401      	add	r1, r0
 8013488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801348c:	4313      	orrs	r3, r2
 801348e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	015a      	lsls	r2, r3, #5
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	4413      	add	r3, r2
 8013498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801349c:	691b      	ldr	r3, [r3, #16]
 801349e:	69ba      	ldr	r2, [r7, #24]
 80134a0:	0151      	lsls	r1, r2, #5
 80134a2:	69fa      	ldr	r2, [r7, #28]
 80134a4:	440a      	add	r2, r1
 80134a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134ae:	6113      	str	r3, [r2, #16]
 80134b0:	e03a      	b.n	8013528 <USB_EPStartXfer+0x3e4>
 80134b2:	bf00      	nop
 80134b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	699a      	ldr	r2, [r3, #24]
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	4413      	add	r3, r2
 80134c2:	1e5a      	subs	r2, r3, #1
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80134cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	8afa      	ldrh	r2, [r7, #22]
 80134d4:	fb03 f202 	mul.w	r2, r3, r2
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	015a      	lsls	r2, r3, #5
 80134e0:	69fb      	ldr	r3, [r7, #28]
 80134e2:	4413      	add	r3, r2
 80134e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134e8:	691a      	ldr	r2, [r3, #16]
 80134ea:	8afb      	ldrh	r3, [r7, #22]
 80134ec:	04d9      	lsls	r1, r3, #19
 80134ee:	4b38      	ldr	r3, [pc, #224]	; (80135d0 <USB_EPStartXfer+0x48c>)
 80134f0:	400b      	ands	r3, r1
 80134f2:	69b9      	ldr	r1, [r7, #24]
 80134f4:	0148      	lsls	r0, r1, #5
 80134f6:	69f9      	ldr	r1, [r7, #28]
 80134f8:	4401      	add	r1, r0
 80134fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134fe:	4313      	orrs	r3, r2
 8013500:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	015a      	lsls	r2, r3, #5
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	4413      	add	r3, r2
 801350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801350e:	691a      	ldr	r2, [r3, #16]
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	69db      	ldr	r3, [r3, #28]
 8013514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013518:	69b9      	ldr	r1, [r7, #24]
 801351a:	0148      	lsls	r0, r1, #5
 801351c:	69f9      	ldr	r1, [r7, #28]
 801351e:	4401      	add	r1, r0
 8013520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013524:	4313      	orrs	r3, r2
 8013526:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013528:	79fb      	ldrb	r3, [r7, #7]
 801352a:	2b01      	cmp	r3, #1
 801352c:	d10d      	bne.n	801354a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d009      	beq.n	801354a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	6919      	ldr	r1, [r3, #16]
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	015a      	lsls	r2, r3, #5
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	4413      	add	r3, r2
 8013542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013546:	460a      	mov	r2, r1
 8013548:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	791b      	ldrb	r3, [r3, #4]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d128      	bne.n	80135a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801355e:	2b00      	cmp	r3, #0
 8013560:	d110      	bne.n	8013584 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	015a      	lsls	r2, r3, #5
 8013566:	69fb      	ldr	r3, [r7, #28]
 8013568:	4413      	add	r3, r2
 801356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	69ba      	ldr	r2, [r7, #24]
 8013572:	0151      	lsls	r1, r2, #5
 8013574:	69fa      	ldr	r2, [r7, #28]
 8013576:	440a      	add	r2, r1
 8013578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801357c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013580:	6013      	str	r3, [r2, #0]
 8013582:	e00f      	b.n	80135a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	015a      	lsls	r2, r3, #5
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	4413      	add	r3, r2
 801358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	69ba      	ldr	r2, [r7, #24]
 8013594:	0151      	lsls	r1, r2, #5
 8013596:	69fa      	ldr	r2, [r7, #28]
 8013598:	440a      	add	r2, r1
 801359a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	015a      	lsls	r2, r3, #5
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	4413      	add	r3, r2
 80135ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	0151      	lsls	r1, r2, #5
 80135b6:	69fa      	ldr	r2, [r7, #28]
 80135b8:	440a      	add	r2, r1
 80135ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3720      	adds	r7, #32
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	1ff80000 	.word	0x1ff80000

080135d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b087      	sub	sp, #28
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	4613      	mov	r3, r2
 80135e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	785b      	ldrb	r3, [r3, #1]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	f040 80ce 	bne.w	8013792 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	699b      	ldr	r3, [r3, #24]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d132      	bne.n	8013664 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	015a      	lsls	r2, r3, #5
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	4413      	add	r3, r2
 8013606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360a:	691b      	ldr	r3, [r3, #16]
 801360c:	693a      	ldr	r2, [r7, #16]
 801360e:	0151      	lsls	r1, r2, #5
 8013610:	697a      	ldr	r2, [r7, #20]
 8013612:	440a      	add	r2, r1
 8013614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801361c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	693a      	ldr	r2, [r7, #16]
 8013632:	0151      	lsls	r1, r2, #5
 8013634:	697a      	ldr	r2, [r7, #20]
 8013636:	440a      	add	r2, r1
 8013638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801363c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	015a      	lsls	r2, r3, #5
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	4413      	add	r3, r2
 801364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	693a      	ldr	r2, [r7, #16]
 8013652:	0151      	lsls	r1, r2, #5
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	440a      	add	r2, r1
 8013658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801365c:	0cdb      	lsrs	r3, r3, #19
 801365e:	04db      	lsls	r3, r3, #19
 8013660:	6113      	str	r3, [r2, #16]
 8013662:	e04e      	b.n	8013702 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	015a      	lsls	r2, r3, #5
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	4413      	add	r3, r2
 801366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	693a      	ldr	r2, [r7, #16]
 8013674:	0151      	lsls	r1, r2, #5
 8013676:	697a      	ldr	r2, [r7, #20]
 8013678:	440a      	add	r2, r1
 801367a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801367e:	0cdb      	lsrs	r3, r3, #19
 8013680:	04db      	lsls	r3, r3, #19
 8013682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013684:	693b      	ldr	r3, [r7, #16]
 8013686:	015a      	lsls	r2, r3, #5
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	4413      	add	r3, r2
 801368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013690:	691b      	ldr	r3, [r3, #16]
 8013692:	693a      	ldr	r2, [r7, #16]
 8013694:	0151      	lsls	r1, r2, #5
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	440a      	add	r2, r1
 801369a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801369e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80136a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80136a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	699a      	ldr	r2, [r3, #24]
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d903      	bls.n	80136bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	68da      	ldr	r2, [r3, #12]
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	015a      	lsls	r2, r3, #5
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	4413      	add	r3, r2
 80136c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c8:	691b      	ldr	r3, [r3, #16]
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	0151      	lsls	r1, r2, #5
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	440a      	add	r2, r1
 80136d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80136da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	015a      	lsls	r2, r3, #5
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	4413      	add	r3, r2
 80136e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136e8:	691a      	ldr	r2, [r3, #16]
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	699b      	ldr	r3, [r3, #24]
 80136ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136f2:	6939      	ldr	r1, [r7, #16]
 80136f4:	0148      	lsls	r0, r1, #5
 80136f6:	6979      	ldr	r1, [r7, #20]
 80136f8:	4401      	add	r1, r0
 80136fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80136fe:	4313      	orrs	r3, r2
 8013700:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013702:	79fb      	ldrb	r3, [r7, #7]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d11e      	bne.n	8013746 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	695b      	ldr	r3, [r3, #20]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d009      	beq.n	8013724 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	015a      	lsls	r2, r3, #5
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	4413      	add	r3, r2
 8013718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801371c:	461a      	mov	r2, r3
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	695b      	ldr	r3, [r3, #20]
 8013722:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	015a      	lsls	r2, r3, #5
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	4413      	add	r3, r2
 801372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	0151      	lsls	r1, r2, #5
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	440a      	add	r2, r1
 801373a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801373e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013742:	6013      	str	r3, [r2, #0]
 8013744:	e097      	b.n	8013876 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	015a      	lsls	r2, r3, #5
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	4413      	add	r3, r2
 801374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	693a      	ldr	r2, [r7, #16]
 8013756:	0151      	lsls	r1, r2, #5
 8013758:	697a      	ldr	r2, [r7, #20]
 801375a:	440a      	add	r2, r1
 801375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013760:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013764:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	2b00      	cmp	r3, #0
 801376c:	f000 8083 	beq.w	8013876 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	f003 030f 	and.w	r3, r3, #15
 8013780:	2101      	movs	r1, #1
 8013782:	fa01 f303 	lsl.w	r3, r1, r3
 8013786:	6979      	ldr	r1, [r7, #20]
 8013788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801378c:	4313      	orrs	r3, r2
 801378e:	634b      	str	r3, [r1, #52]	; 0x34
 8013790:	e071      	b.n	8013876 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	015a      	lsls	r2, r3, #5
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	4413      	add	r3, r2
 801379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	693a      	ldr	r2, [r7, #16]
 80137a2:	0151      	lsls	r1, r2, #5
 80137a4:	697a      	ldr	r2, [r7, #20]
 80137a6:	440a      	add	r2, r1
 80137a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137ac:	0cdb      	lsrs	r3, r3, #19
 80137ae:	04db      	lsls	r3, r3, #19
 80137b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	015a      	lsls	r2, r3, #5
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	4413      	add	r3, r2
 80137ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137be:	691b      	ldr	r3, [r3, #16]
 80137c0:	693a      	ldr	r2, [r7, #16]
 80137c2:	0151      	lsls	r1, r2, #5
 80137c4:	697a      	ldr	r2, [r7, #20]
 80137c6:	440a      	add	r2, r1
 80137c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80137d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80137d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	699b      	ldr	r3, [r3, #24]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d003      	beq.n	80137e6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	68da      	ldr	r2, [r3, #12]
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	68da      	ldr	r2, [r3, #12]
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	015a      	lsls	r2, r3, #5
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	4413      	add	r3, r2
 80137f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fa:	691b      	ldr	r3, [r3, #16]
 80137fc:	693a      	ldr	r2, [r7, #16]
 80137fe:	0151      	lsls	r1, r2, #5
 8013800:	697a      	ldr	r2, [r7, #20]
 8013802:	440a      	add	r2, r1
 8013804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801380c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	015a      	lsls	r2, r3, #5
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	4413      	add	r3, r2
 8013816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801381a:	691a      	ldr	r2, [r3, #16]
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	69db      	ldr	r3, [r3, #28]
 8013820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013824:	6939      	ldr	r1, [r7, #16]
 8013826:	0148      	lsls	r0, r1, #5
 8013828:	6979      	ldr	r1, [r7, #20]
 801382a:	4401      	add	r1, r0
 801382c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013830:	4313      	orrs	r3, r2
 8013832:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d10d      	bne.n	8013856 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	691b      	ldr	r3, [r3, #16]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d009      	beq.n	8013856 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	6919      	ldr	r1, [r3, #16]
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	015a      	lsls	r2, r3, #5
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	4413      	add	r3, r2
 801384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013852:	460a      	mov	r2, r1
 8013854:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	015a      	lsls	r2, r3, #5
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	4413      	add	r3, r2
 801385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	693a      	ldr	r2, [r7, #16]
 8013866:	0151      	lsls	r1, r2, #5
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	440a      	add	r2, r1
 801386c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013876:	2300      	movs	r3, #0
}
 8013878:	4618      	mov	r0, r3
 801387a:	371c      	adds	r7, #28
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013884:	b480      	push	{r7}
 8013886:	b087      	sub	sp, #28
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801388e:	2300      	movs	r3, #0
 8013890:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013892:	2300      	movs	r3, #0
 8013894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	785b      	ldrb	r3, [r3, #1]
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d14a      	bne.n	8013938 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	015a      	lsls	r2, r3, #5
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	4413      	add	r3, r2
 80138ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138ba:	f040 8086 	bne.w	80139ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	015a      	lsls	r2, r3, #5
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	4413      	add	r3, r2
 80138c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	7812      	ldrb	r2, [r2, #0]
 80138d2:	0151      	lsls	r1, r2, #5
 80138d4:	693a      	ldr	r2, [r7, #16]
 80138d6:	440a      	add	r2, r1
 80138d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80138e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	683a      	ldr	r2, [r7, #0]
 80138f4:	7812      	ldrb	r2, [r2, #0]
 80138f6:	0151      	lsls	r1, r2, #5
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	440a      	add	r2, r1
 80138fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013904:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	3301      	adds	r3, #1
 801390a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013912:	4293      	cmp	r3, r2
 8013914:	d902      	bls.n	801391c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013916:	2301      	movs	r3, #1
 8013918:	75fb      	strb	r3, [r7, #23]
          break;
 801391a:	e056      	b.n	80139ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	015a      	lsls	r2, r3, #5
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	4413      	add	r3, r2
 8013926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013934:	d0e7      	beq.n	8013906 <USB_EPStopXfer+0x82>
 8013936:	e048      	b.n	80139ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	015a      	lsls	r2, r3, #5
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	4413      	add	r3, r2
 8013942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801394c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013950:	d13b      	bne.n	80139ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	015a      	lsls	r2, r3, #5
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	4413      	add	r3, r2
 801395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	683a      	ldr	r2, [r7, #0]
 8013964:	7812      	ldrb	r2, [r2, #0]
 8013966:	0151      	lsls	r1, r2, #5
 8013968:	693a      	ldr	r2, [r7, #16]
 801396a:	440a      	add	r2, r1
 801396c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013974:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	015a      	lsls	r2, r3, #5
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	4413      	add	r3, r2
 8013980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	683a      	ldr	r2, [r7, #0]
 8013988:	7812      	ldrb	r2, [r2, #0]
 801398a:	0151      	lsls	r1, r2, #5
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	440a      	add	r2, r1
 8013990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013998:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3301      	adds	r3, #1
 801399e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d902      	bls.n	80139b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80139aa:	2301      	movs	r3, #1
 80139ac:	75fb      	strb	r3, [r7, #23]
          break;
 80139ae:	e00c      	b.n	80139ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	015a      	lsls	r2, r3, #5
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	4413      	add	r3, r2
 80139ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139c8:	d0e7      	beq.n	801399a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80139ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	371c      	adds	r7, #28
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80139d8:	b480      	push	{r7}
 80139da:	b089      	sub	sp, #36	; 0x24
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	4611      	mov	r1, r2
 80139e4:	461a      	mov	r2, r3
 80139e6:	460b      	mov	r3, r1
 80139e8:	71fb      	strb	r3, [r7, #7]
 80139ea:	4613      	mov	r3, r2
 80139ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80139f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d123      	bne.n	8013a46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80139fe:	88bb      	ldrh	r3, [r7, #4]
 8013a00:	3303      	adds	r3, #3
 8013a02:	089b      	lsrs	r3, r3, #2
 8013a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013a06:	2300      	movs	r3, #0
 8013a08:	61bb      	str	r3, [r7, #24]
 8013a0a:	e018      	b.n	8013a3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	031a      	lsls	r2, r3, #12
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a18:	461a      	mov	r2, r3
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	3301      	adds	r3, #1
 8013a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	3301      	adds	r3, #1
 8013a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	61bb      	str	r3, [r7, #24]
 8013a3e:	69ba      	ldr	r2, [r7, #24]
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d3e2      	bcc.n	8013a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013a46:	2300      	movs	r3, #0
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3724      	adds	r7, #36	; 0x24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b08b      	sub	sp, #44	; 0x2c
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	4613      	mov	r3, r2
 8013a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013a6a:	88fb      	ldrh	r3, [r7, #6]
 8013a6c:	089b      	lsrs	r3, r3, #2
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013a72:	88fb      	ldrh	r3, [r7, #6]
 8013a74:	f003 0303 	and.w	r3, r3, #3
 8013a78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	623b      	str	r3, [r7, #32]
 8013a7e:	e014      	b.n	8013aaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8013a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8e:	3301      	adds	r3, #1
 8013a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	3301      	adds	r3, #1
 8013a96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013aa4:	6a3b      	ldr	r3, [r7, #32]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	623b      	str	r3, [r7, #32]
 8013aaa:	6a3a      	ldr	r2, [r7, #32]
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d3e6      	bcc.n	8013a80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013ab2:	8bfb      	ldrh	r3, [r7, #30]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d01e      	beq.n	8013af6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013abc:	69bb      	ldr	r3, [r7, #24]
 8013abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	f107 0310 	add.w	r3, r7, #16
 8013ac8:	6812      	ldr	r2, [r2, #0]
 8013aca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013acc:	693a      	ldr	r2, [r7, #16]
 8013ace:	6a3b      	ldr	r3, [r7, #32]
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	00db      	lsls	r3, r3, #3
 8013ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ad8:	b2da      	uxtb	r2, r3
 8013ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013adc:	701a      	strb	r2, [r3, #0]
      i++;
 8013ade:	6a3b      	ldr	r3, [r7, #32]
 8013ae0:	3301      	adds	r3, #1
 8013ae2:	623b      	str	r3, [r7, #32]
      pDest++;
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013aea:	8bfb      	ldrh	r3, [r7, #30]
 8013aec:	3b01      	subs	r3, #1
 8013aee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013af0:	8bfb      	ldrh	r3, [r7, #30]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d1ea      	bne.n	8013acc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	372c      	adds	r7, #44	; 0x2c
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	785b      	ldrb	r3, [r3, #1]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d12c      	bne.n	8013b7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	015a      	lsls	r2, r3, #5
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	4413      	add	r3, r2
 8013b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	db12      	blt.n	8013b58 <USB_EPSetStall+0x54>
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d00f      	beq.n	8013b58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	015a      	lsls	r2, r3, #5
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	4413      	add	r3, r2
 8013b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	68ba      	ldr	r2, [r7, #8]
 8013b48:	0151      	lsls	r1, r2, #5
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	440a      	add	r2, r1
 8013b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	015a      	lsls	r2, r3, #5
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	0151      	lsls	r1, r2, #5
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	440a      	add	r2, r1
 8013b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	e02b      	b.n	8013bd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	015a      	lsls	r2, r3, #5
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	db12      	blt.n	8013bb2 <USB_EPSetStall+0xae>
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00f      	beq.n	8013bb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	015a      	lsls	r2, r3, #5
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	4413      	add	r3, r2
 8013b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	68ba      	ldr	r2, [r7, #8]
 8013ba2:	0151      	lsls	r1, r2, #5
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	440a      	add	r2, r1
 8013ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	015a      	lsls	r2, r3, #5
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	4413      	add	r3, r2
 8013bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	0151      	lsls	r1, r2, #5
 8013bc4:	68fa      	ldr	r2, [r7, #12]
 8013bc6:	440a      	add	r2, r1
 8013bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013bd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013bd2:	2300      	movs	r3, #0
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3714      	adds	r7, #20
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013be0:	b480      	push	{r7}
 8013be2:	b085      	sub	sp, #20
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	785b      	ldrb	r3, [r3, #1]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d128      	bne.n	8013c4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	015a      	lsls	r2, r3, #5
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	4413      	add	r3, r2
 8013c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	0151      	lsls	r1, r2, #5
 8013c0e:	68fa      	ldr	r2, [r7, #12]
 8013c10:	440a      	add	r2, r1
 8013c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013c1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	791b      	ldrb	r3, [r3, #4]
 8013c20:	2b03      	cmp	r3, #3
 8013c22:	d003      	beq.n	8013c2c <USB_EPClearStall+0x4c>
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	791b      	ldrb	r3, [r3, #4]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d138      	bne.n	8013c9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	015a      	lsls	r2, r3, #5
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	4413      	add	r3, r2
 8013c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	0151      	lsls	r1, r2, #5
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	440a      	add	r2, r1
 8013c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	e027      	b.n	8013c9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	015a      	lsls	r2, r3, #5
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	4413      	add	r3, r2
 8013c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	68ba      	ldr	r2, [r7, #8]
 8013c5e:	0151      	lsls	r1, r2, #5
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	440a      	add	r2, r1
 8013c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013c6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	791b      	ldrb	r3, [r3, #4]
 8013c72:	2b03      	cmp	r3, #3
 8013c74:	d003      	beq.n	8013c7e <USB_EPClearStall+0x9e>
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	791b      	ldrb	r3, [r3, #4]
 8013c7a:	2b02      	cmp	r3, #2
 8013c7c:	d10f      	bne.n	8013c9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	015a      	lsls	r2, r3, #5
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	4413      	add	r3, r2
 8013c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	68ba      	ldr	r2, [r7, #8]
 8013c8e:	0151      	lsls	r1, r2, #5
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	440a      	add	r2, r1
 8013c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013c9e:	2300      	movs	r3, #0
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3714      	adds	r7, #20
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b085      	sub	sp, #20
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68fa      	ldr	r2, [r7, #12]
 8013cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013cce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	78fb      	ldrb	r3, [r7, #3]
 8013cda:	011b      	lsls	r3, r3, #4
 8013cdc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013ce0:	68f9      	ldr	r1, [r7, #12]
 8013ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ce6:	4313      	orrs	r3, r2
 8013ce8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b085      	sub	sp, #20
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d12:	f023 0303 	bic.w	r3, r3, #3
 8013d16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	68fa      	ldr	r2, [r7, #12]
 8013d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d26:	f023 0302 	bic.w	r3, r3, #2
 8013d2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3714      	adds	r7, #20
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr

08013d3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b085      	sub	sp, #20
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	68fa      	ldr	r2, [r7, #12]
 8013d50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d54:	f023 0303 	bic.w	r3, r3, #3
 8013d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d68:	f043 0302 	orr.w	r3, r3, #2
 8013d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3714      	adds	r7, #20
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	695b      	ldr	r3, [r3, #20]
 8013d88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	699b      	ldr	r3, [r3, #24]
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	4013      	ands	r3, r2
 8013d92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013d94:	68fb      	ldr	r3, [r7, #12]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3714      	adds	r7, #20
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013da2:	b480      	push	{r7}
 8013da4:	b085      	sub	sp, #20
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013db4:	699b      	ldr	r3, [r3, #24]
 8013db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dbe:	69db      	ldr	r3, [r3, #28]
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	4013      	ands	r3, r2
 8013dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	0c1b      	lsrs	r3, r3, #16
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3714      	adds	r7, #20
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr

08013dd6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013dd6:	b480      	push	{r7}
 8013dd8:	b085      	sub	sp, #20
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013de8:	699b      	ldr	r3, [r3, #24]
 8013dea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df2:	69db      	ldr	r3, [r3, #28]
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	4013      	ands	r3, r2
 8013df8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	b29b      	uxth	r3, r3
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3714      	adds	r7, #20
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr

08013e0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e0a:	b480      	push	{r7}
 8013e0c:	b085      	sub	sp, #20
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	460b      	mov	r3, r1
 8013e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013e1a:	78fb      	ldrb	r3, [r7, #3]
 8013e1c:	015a      	lsls	r2, r3, #5
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	4413      	add	r3, r2
 8013e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e26:	689b      	ldr	r3, [r3, #8]
 8013e28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e30:	695b      	ldr	r3, [r3, #20]
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	4013      	ands	r3, r2
 8013e36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e38:	68bb      	ldr	r3, [r7, #8]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e46:	b480      	push	{r7}
 8013e48:	b087      	sub	sp, #28
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
 8013e4e:	460b      	mov	r3, r1
 8013e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e5c:	691b      	ldr	r3, [r3, #16]
 8013e5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013e6a:	78fb      	ldrb	r3, [r7, #3]
 8013e6c:	f003 030f 	and.w	r3, r3, #15
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	fa22 f303 	lsr.w	r3, r2, r3
 8013e76:	01db      	lsls	r3, r3, #7
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	693a      	ldr	r2, [r7, #16]
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	015a      	lsls	r2, r3, #5
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	4413      	add	r3, r2
 8013e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	693a      	ldr	r2, [r7, #16]
 8013e90:	4013      	ands	r3, r2
 8013e92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e94:	68bb      	ldr	r3, [r7, #8]
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	371c      	adds	r7, #28
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr

08013ea2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013ea2:	b480      	push	{r7}
 8013ea4:	b083      	sub	sp, #12
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	695b      	ldr	r3, [r3, #20]
 8013eae:	f003 0301 	and.w	r3, r3, #1
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	370c      	adds	r7, #12
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr

08013ebe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013ebe:	b480      	push	{r7}
 8013ec0:	b085      	sub	sp, #20
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ed8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013edc:	f023 0307 	bic.w	r3, r3, #7
 8013ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3714      	adds	r7, #20
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr

08013f04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b087      	sub	sp, #28
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	333c      	adds	r3, #60	; 0x3c
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	4a26      	ldr	r2, [pc, #152]	; (8013fbc <USB_EP0_OutStart+0xb8>)
 8013f24:	4293      	cmp	r3, r2
 8013f26:	d90a      	bls.n	8013f3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f38:	d101      	bne.n	8013f3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	e037      	b.n	8013fae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f44:	461a      	mov	r2, r3
 8013f46:	2300      	movs	r3, #0
 8013f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f50:	691b      	ldr	r3, [r3, #16]
 8013f52:	697a      	ldr	r2, [r7, #20]
 8013f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f64:	691b      	ldr	r3, [r3, #16]
 8013f66:	697a      	ldr	r2, [r7, #20]
 8013f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f6c:	f043 0318 	orr.w	r3, r3, #24
 8013f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	697a      	ldr	r2, [r7, #20]
 8013f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013f84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013f86:	7afb      	ldrb	r3, [r7, #11]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d10f      	bne.n	8013fac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f92:	461a      	mov	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	697a      	ldr	r2, [r7, #20]
 8013fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fa6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013fac:	2300      	movs	r3, #0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	371c      	adds	r7, #28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr
 8013fba:	bf00      	nop
 8013fbc:	4f54300a 	.word	0x4f54300a

08013fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	4a13      	ldr	r2, [pc, #76]	; (8014024 <USB_CoreReset+0x64>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d901      	bls.n	8013fde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013fda:	2303      	movs	r3, #3
 8013fdc:	e01b      	b.n	8014016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	691b      	ldr	r3, [r3, #16]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	daf2      	bge.n	8013fcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	691b      	ldr	r3, [r3, #16]
 8013fee:	f043 0201 	orr.w	r2, r3, #1
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	4a09      	ldr	r2, [pc, #36]	; (8014024 <USB_CoreReset+0x64>)
 8014000:	4293      	cmp	r3, r2
 8014002:	d901      	bls.n	8014008 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014004:	2303      	movs	r3, #3
 8014006:	e006      	b.n	8014016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	691b      	ldr	r3, [r3, #16]
 801400c:	f003 0301 	and.w	r3, r3, #1
 8014010:	2b01      	cmp	r3, #1
 8014012:	d0f0      	beq.n	8013ff6 <USB_CoreReset+0x36>

  return HAL_OK;
 8014014:	2300      	movs	r3, #0
}
 8014016:	4618      	mov	r0, r3
 8014018:	3714      	adds	r7, #20
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	00030d40 	.word	0x00030d40

08014028 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	460b      	mov	r3, r1
 8014032:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014034:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014038:	f002 fc5c 	bl	80168f4 <USBD_static_malloc>
 801403c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d109      	bne.n	8014058 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	32b0      	adds	r2, #176	; 0xb0
 801404e:	2100      	movs	r1, #0
 8014050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014054:	2302      	movs	r3, #2
 8014056:	e0d4      	b.n	8014202 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014058:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801405c:	2100      	movs	r1, #0
 801405e:	68f8      	ldr	r0, [r7, #12]
 8014060:	f002 fcd4 	bl	8016a0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	32b0      	adds	r2, #176	; 0xb0
 801406e:	68f9      	ldr	r1, [r7, #12]
 8014070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	32b0      	adds	r2, #176	; 0xb0
 801407e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	7c1b      	ldrb	r3, [r3, #16]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d138      	bne.n	8014102 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014090:	4b5e      	ldr	r3, [pc, #376]	; (801420c <USBD_CDC_Init+0x1e4>)
 8014092:	7819      	ldrb	r1, [r3, #0]
 8014094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014098:	2202      	movs	r2, #2
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f002 fb07 	bl	80166ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80140a0:	4b5a      	ldr	r3, [pc, #360]	; (801420c <USBD_CDC_Init+0x1e4>)
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f003 020f 	and.w	r2, r3, #15
 80140a8:	6879      	ldr	r1, [r7, #4]
 80140aa:	4613      	mov	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	4413      	add	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	440b      	add	r3, r1
 80140b4:	3324      	adds	r3, #36	; 0x24
 80140b6:	2201      	movs	r2, #1
 80140b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80140ba:	4b55      	ldr	r3, [pc, #340]	; (8014210 <USBD_CDC_Init+0x1e8>)
 80140bc:	7819      	ldrb	r1, [r3, #0]
 80140be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140c2:	2202      	movs	r2, #2
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f002 faf2 	bl	80166ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80140ca:	4b51      	ldr	r3, [pc, #324]	; (8014210 <USBD_CDC_Init+0x1e8>)
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	f003 020f 	and.w	r2, r3, #15
 80140d2:	6879      	ldr	r1, [r7, #4]
 80140d4:	4613      	mov	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4413      	add	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	440b      	add	r3, r1
 80140de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80140e2:	2201      	movs	r2, #1
 80140e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80140e6:	4b4b      	ldr	r3, [pc, #300]	; (8014214 <USBD_CDC_Init+0x1ec>)
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	f003 020f 	and.w	r2, r3, #15
 80140ee:	6879      	ldr	r1, [r7, #4]
 80140f0:	4613      	mov	r3, r2
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	4413      	add	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	440b      	add	r3, r1
 80140fa:	3326      	adds	r3, #38	; 0x26
 80140fc:	2210      	movs	r2, #16
 80140fe:	801a      	strh	r2, [r3, #0]
 8014100:	e035      	b.n	801416e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014102:	4b42      	ldr	r3, [pc, #264]	; (801420c <USBD_CDC_Init+0x1e4>)
 8014104:	7819      	ldrb	r1, [r3, #0]
 8014106:	2340      	movs	r3, #64	; 0x40
 8014108:	2202      	movs	r2, #2
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f002 facf 	bl	80166ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014110:	4b3e      	ldr	r3, [pc, #248]	; (801420c <USBD_CDC_Init+0x1e4>)
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	f003 020f 	and.w	r2, r3, #15
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	4613      	mov	r3, r2
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	4413      	add	r3, r2
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	440b      	add	r3, r1
 8014124:	3324      	adds	r3, #36	; 0x24
 8014126:	2201      	movs	r2, #1
 8014128:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801412a:	4b39      	ldr	r3, [pc, #228]	; (8014210 <USBD_CDC_Init+0x1e8>)
 801412c:	7819      	ldrb	r1, [r3, #0]
 801412e:	2340      	movs	r3, #64	; 0x40
 8014130:	2202      	movs	r2, #2
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f002 fabb 	bl	80166ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014138:	4b35      	ldr	r3, [pc, #212]	; (8014210 <USBD_CDC_Init+0x1e8>)
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 020f 	and.w	r2, r3, #15
 8014140:	6879      	ldr	r1, [r7, #4]
 8014142:	4613      	mov	r3, r2
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	4413      	add	r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	440b      	add	r3, r1
 801414c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014150:	2201      	movs	r2, #1
 8014152:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014154:	4b2f      	ldr	r3, [pc, #188]	; (8014214 <USBD_CDC_Init+0x1ec>)
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	f003 020f 	and.w	r2, r3, #15
 801415c:	6879      	ldr	r1, [r7, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4413      	add	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	440b      	add	r3, r1
 8014168:	3326      	adds	r3, #38	; 0x26
 801416a:	2210      	movs	r2, #16
 801416c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801416e:	4b29      	ldr	r3, [pc, #164]	; (8014214 <USBD_CDC_Init+0x1ec>)
 8014170:	7819      	ldrb	r1, [r3, #0]
 8014172:	2308      	movs	r3, #8
 8014174:	2203      	movs	r2, #3
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f002 fa99 	bl	80166ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801417c:	4b25      	ldr	r3, [pc, #148]	; (8014214 <USBD_CDC_Init+0x1ec>)
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	f003 020f 	and.w	r2, r3, #15
 8014184:	6879      	ldr	r1, [r7, #4]
 8014186:	4613      	mov	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	440b      	add	r3, r1
 8014190:	3324      	adds	r3, #36	; 0x24
 8014192:	2201      	movs	r2, #1
 8014194:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2200      	movs	r2, #0
 801419a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80141a4:	687a      	ldr	r2, [r7, #4]
 80141a6:	33b0      	adds	r3, #176	; 0xb0
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	4413      	add	r3, r2
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2200      	movs	r2, #0
 80141b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2200      	movs	r2, #0
 80141be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d101      	bne.n	80141d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80141cc:	2302      	movs	r3, #2
 80141ce:	e018      	b.n	8014202 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	7c1b      	ldrb	r3, [r3, #16]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d10a      	bne.n	80141ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80141d8:	4b0d      	ldr	r3, [pc, #52]	; (8014210 <USBD_CDC_Init+0x1e8>)
 80141da:	7819      	ldrb	r1, [r3, #0]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80141e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f002 fb50 	bl	801688c <USBD_LL_PrepareReceive>
 80141ec:	e008      	b.n	8014200 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80141ee:	4b08      	ldr	r3, [pc, #32]	; (8014210 <USBD_CDC_Init+0x1e8>)
 80141f0:	7819      	ldrb	r1, [r3, #0]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80141f8:	2340      	movs	r3, #64	; 0x40
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f002 fb46 	bl	801688c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	2000028b 	.word	0x2000028b
 8014210:	2000028c 	.word	0x2000028c
 8014214:	2000028d 	.word	0x2000028d

08014218 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	460b      	mov	r3, r1
 8014222:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014224:	4b3a      	ldr	r3, [pc, #232]	; (8014310 <USBD_CDC_DeInit+0xf8>)
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f002 fa65 	bl	80166fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014230:	4b37      	ldr	r3, [pc, #220]	; (8014310 <USBD_CDC_DeInit+0xf8>)
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	f003 020f 	and.w	r2, r3, #15
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	4613      	mov	r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	4413      	add	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	440b      	add	r3, r1
 8014244:	3324      	adds	r3, #36	; 0x24
 8014246:	2200      	movs	r2, #0
 8014248:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801424a:	4b32      	ldr	r3, [pc, #200]	; (8014314 <USBD_CDC_DeInit+0xfc>)
 801424c:	781b      	ldrb	r3, [r3, #0]
 801424e:	4619      	mov	r1, r3
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f002 fa52 	bl	80166fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014256:	4b2f      	ldr	r3, [pc, #188]	; (8014314 <USBD_CDC_DeInit+0xfc>)
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	f003 020f 	and.w	r2, r3, #15
 801425e:	6879      	ldr	r1, [r7, #4]
 8014260:	4613      	mov	r3, r2
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	4413      	add	r3, r2
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	440b      	add	r3, r1
 801426a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801426e:	2200      	movs	r2, #0
 8014270:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014272:	4b29      	ldr	r3, [pc, #164]	; (8014318 <USBD_CDC_DeInit+0x100>)
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	4619      	mov	r1, r3
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f002 fa3e 	bl	80166fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801427e:	4b26      	ldr	r3, [pc, #152]	; (8014318 <USBD_CDC_DeInit+0x100>)
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	f003 020f 	and.w	r2, r3, #15
 8014286:	6879      	ldr	r1, [r7, #4]
 8014288:	4613      	mov	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	4413      	add	r3, r2
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	440b      	add	r3, r1
 8014292:	3324      	adds	r3, #36	; 0x24
 8014294:	2200      	movs	r2, #0
 8014296:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014298:	4b1f      	ldr	r3, [pc, #124]	; (8014318 <USBD_CDC_DeInit+0x100>)
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	f003 020f 	and.w	r2, r3, #15
 80142a0:	6879      	ldr	r1, [r7, #4]
 80142a2:	4613      	mov	r3, r2
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	4413      	add	r3, r2
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	440b      	add	r3, r1
 80142ac:	3326      	adds	r3, #38	; 0x26
 80142ae:	2200      	movs	r2, #0
 80142b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	32b0      	adds	r2, #176	; 0xb0
 80142bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d01f      	beq.n	8014304 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	33b0      	adds	r3, #176	; 0xb0
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	4413      	add	r3, r2
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	32b0      	adds	r2, #176	; 0xb0
 80142e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f002 fb12 	bl	8016910 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	32b0      	adds	r2, #176	; 0xb0
 80142f6:	2100      	movs	r1, #0
 80142f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2200      	movs	r2, #0
 8014300:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3708      	adds	r7, #8
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	2000028b 	.word	0x2000028b
 8014314:	2000028c 	.word	0x2000028c
 8014318:	2000028d 	.word	0x2000028d

0801431c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b086      	sub	sp, #24
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	32b0      	adds	r2, #176	; 0xb0
 8014330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014334:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014336:	2300      	movs	r3, #0
 8014338:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801433a:	2300      	movs	r3, #0
 801433c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801433e:	2300      	movs	r3, #0
 8014340:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014348:	2303      	movs	r3, #3
 801434a:	e0bf      	b.n	80144cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014354:	2b00      	cmp	r3, #0
 8014356:	d050      	beq.n	80143fa <USBD_CDC_Setup+0xde>
 8014358:	2b20      	cmp	r3, #32
 801435a:	f040 80af 	bne.w	80144bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	88db      	ldrh	r3, [r3, #6]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d03a      	beq.n	80143dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	b25b      	sxtb	r3, r3
 801436c:	2b00      	cmp	r3, #0
 801436e:	da1b      	bge.n	80143a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	33b0      	adds	r3, #176	; 0xb0
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	4413      	add	r3, r2
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014386:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014388:	683a      	ldr	r2, [r7, #0]
 801438a:	88d2      	ldrh	r2, [r2, #6]
 801438c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	88db      	ldrh	r3, [r3, #6]
 8014392:	2b07      	cmp	r3, #7
 8014394:	bf28      	it	cs
 8014396:	2307      	movcs	r3, #7
 8014398:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	89fa      	ldrh	r2, [r7, #14]
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f001 fd43 	bl	8015e2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80143a6:	e090      	b.n	80144ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	785a      	ldrb	r2, [r3, #1]
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	88db      	ldrh	r3, [r3, #6]
 80143b6:	2b3f      	cmp	r3, #63	; 0x3f
 80143b8:	d803      	bhi.n	80143c2 <USBD_CDC_Setup+0xa6>
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	88db      	ldrh	r3, [r3, #6]
 80143be:	b2da      	uxtb	r2, r3
 80143c0:	e000      	b.n	80143c4 <USBD_CDC_Setup+0xa8>
 80143c2:	2240      	movs	r2, #64	; 0x40
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80143ca:	6939      	ldr	r1, [r7, #16]
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80143d2:	461a      	mov	r2, r3
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f001 fd55 	bl	8015e84 <USBD_CtlPrepareRx>
      break;
 80143da:	e076      	b.n	80144ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	33b0      	adds	r3, #176	; 0xb0
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	4413      	add	r3, r2
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	689b      	ldr	r3, [r3, #8]
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	7850      	ldrb	r0, [r2, #1]
 80143f2:	2200      	movs	r2, #0
 80143f4:	6839      	ldr	r1, [r7, #0]
 80143f6:	4798      	blx	r3
      break;
 80143f8:	e067      	b.n	80144ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	785b      	ldrb	r3, [r3, #1]
 80143fe:	2b0b      	cmp	r3, #11
 8014400:	d851      	bhi.n	80144a6 <USBD_CDC_Setup+0x18a>
 8014402:	a201      	add	r2, pc, #4	; (adr r2, 8014408 <USBD_CDC_Setup+0xec>)
 8014404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014408:	08014439 	.word	0x08014439
 801440c:	080144b5 	.word	0x080144b5
 8014410:	080144a7 	.word	0x080144a7
 8014414:	080144a7 	.word	0x080144a7
 8014418:	080144a7 	.word	0x080144a7
 801441c:	080144a7 	.word	0x080144a7
 8014420:	080144a7 	.word	0x080144a7
 8014424:	080144a7 	.word	0x080144a7
 8014428:	080144a7 	.word	0x080144a7
 801442c:	080144a7 	.word	0x080144a7
 8014430:	08014463 	.word	0x08014463
 8014434:	0801448d 	.word	0x0801448d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801443e:	b2db      	uxtb	r3, r3
 8014440:	2b03      	cmp	r3, #3
 8014442:	d107      	bne.n	8014454 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014444:	f107 030a 	add.w	r3, r7, #10
 8014448:	2202      	movs	r2, #2
 801444a:	4619      	mov	r1, r3
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f001 fced 	bl	8015e2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014452:	e032      	b.n	80144ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014454:	6839      	ldr	r1, [r7, #0]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f001 fc77 	bl	8015d4a <USBD_CtlError>
            ret = USBD_FAIL;
 801445c:	2303      	movs	r3, #3
 801445e:	75fb      	strb	r3, [r7, #23]
          break;
 8014460:	e02b      	b.n	80144ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014468:	b2db      	uxtb	r3, r3
 801446a:	2b03      	cmp	r3, #3
 801446c:	d107      	bne.n	801447e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801446e:	f107 030d 	add.w	r3, r7, #13
 8014472:	2201      	movs	r2, #1
 8014474:	4619      	mov	r1, r3
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f001 fcd8 	bl	8015e2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801447c:	e01d      	b.n	80144ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801447e:	6839      	ldr	r1, [r7, #0]
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f001 fc62 	bl	8015d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8014486:	2303      	movs	r3, #3
 8014488:	75fb      	strb	r3, [r7, #23]
          break;
 801448a:	e016      	b.n	80144ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014492:	b2db      	uxtb	r3, r3
 8014494:	2b03      	cmp	r3, #3
 8014496:	d00f      	beq.n	80144b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014498:	6839      	ldr	r1, [r7, #0]
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f001 fc55 	bl	8015d4a <USBD_CtlError>
            ret = USBD_FAIL;
 80144a0:	2303      	movs	r3, #3
 80144a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80144a4:	e008      	b.n	80144b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f001 fc4e 	bl	8015d4a <USBD_CtlError>
          ret = USBD_FAIL;
 80144ae:	2303      	movs	r3, #3
 80144b0:	75fb      	strb	r3, [r7, #23]
          break;
 80144b2:	e002      	b.n	80144ba <USBD_CDC_Setup+0x19e>
          break;
 80144b4:	bf00      	nop
 80144b6:	e008      	b.n	80144ca <USBD_CDC_Setup+0x1ae>
          break;
 80144b8:	bf00      	nop
      }
      break;
 80144ba:	e006      	b.n	80144ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f001 fc43 	bl	8015d4a <USBD_CtlError>
      ret = USBD_FAIL;
 80144c4:	2303      	movs	r3, #3
 80144c6:	75fb      	strb	r3, [r7, #23]
      break;
 80144c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80144ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3718      	adds	r7, #24
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	460b      	mov	r3, r1
 80144de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80144e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	32b0      	adds	r2, #176	; 0xb0
 80144f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d101      	bne.n	80144fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80144fa:	2303      	movs	r3, #3
 80144fc:	e065      	b.n	80145ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	32b0      	adds	r2, #176	; 0xb0
 8014508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801450c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801450e:	78fb      	ldrb	r3, [r7, #3]
 8014510:	f003 020f 	and.w	r2, r3, #15
 8014514:	6879      	ldr	r1, [r7, #4]
 8014516:	4613      	mov	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4413      	add	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	440b      	add	r3, r1
 8014520:	3318      	adds	r3, #24
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d02f      	beq.n	8014588 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014528:	78fb      	ldrb	r3, [r7, #3]
 801452a:	f003 020f 	and.w	r2, r3, #15
 801452e:	6879      	ldr	r1, [r7, #4]
 8014530:	4613      	mov	r3, r2
 8014532:	009b      	lsls	r3, r3, #2
 8014534:	4413      	add	r3, r2
 8014536:	009b      	lsls	r3, r3, #2
 8014538:	440b      	add	r3, r1
 801453a:	3318      	adds	r3, #24
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	78fb      	ldrb	r3, [r7, #3]
 8014540:	f003 010f 	and.w	r1, r3, #15
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	460b      	mov	r3, r1
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	440b      	add	r3, r1
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4403      	add	r3, r0
 8014550:	3348      	adds	r3, #72	; 0x48
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	fbb2 f1f3 	udiv	r1, r2, r3
 8014558:	fb01 f303 	mul.w	r3, r1, r3
 801455c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801455e:	2b00      	cmp	r3, #0
 8014560:	d112      	bne.n	8014588 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014562:	78fb      	ldrb	r3, [r7, #3]
 8014564:	f003 020f 	and.w	r2, r3, #15
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	4613      	mov	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	4413      	add	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	440b      	add	r3, r1
 8014574:	3318      	adds	r3, #24
 8014576:	2200      	movs	r2, #0
 8014578:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801457a:	78f9      	ldrb	r1, [r7, #3]
 801457c:	2300      	movs	r3, #0
 801457e:	2200      	movs	r2, #0
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f002 f962 	bl	801684a <USBD_LL_Transmit>
 8014586:	e01f      	b.n	80145c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	2200      	movs	r2, #0
 801458c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	33b0      	adds	r3, #176	; 0xb0
 801459a:	009b      	lsls	r3, r3, #2
 801459c:	4413      	add	r3, r2
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	691b      	ldr	r3, [r3, #16]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d010      	beq.n	80145c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	33b0      	adds	r3, #176	; 0xb0
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	4413      	add	r3, r2
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	691b      	ldr	r3, [r3, #16]
 80145b8:	68ba      	ldr	r2, [r7, #8]
 80145ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80145be:	68ba      	ldr	r2, [r7, #8]
 80145c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80145c4:	78fa      	ldrb	r2, [r7, #3]
 80145c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b084      	sub	sp, #16
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	460b      	mov	r3, r1
 80145dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	32b0      	adds	r2, #176	; 0xb0
 80145e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	32b0      	adds	r2, #176	; 0xb0
 80145f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d101      	bne.n	8014604 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014600:	2303      	movs	r3, #3
 8014602:	e01a      	b.n	801463a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014604:	78fb      	ldrb	r3, [r7, #3]
 8014606:	4619      	mov	r1, r3
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f002 f960 	bl	80168ce <USBD_LL_GetRxDataSize>
 801460e:	4602      	mov	r2, r0
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	33b0      	adds	r3, #176	; 0xb0
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	4413      	add	r3, r2
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	68fa      	ldr	r2, [r7, #12]
 801462a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014634:	4611      	mov	r1, r2
 8014636:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014638:	2300      	movs	r3, #0
}
 801463a:	4618      	mov	r0, r3
 801463c:	3710      	adds	r7, #16
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}

08014642 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014642:	b580      	push	{r7, lr}
 8014644:	b084      	sub	sp, #16
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	32b0      	adds	r2, #176	; 0xb0
 8014654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014658:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014660:	2303      	movs	r3, #3
 8014662:	e025      	b.n	80146b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	33b0      	adds	r3, #176	; 0xb0
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	4413      	add	r3, r2
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d01a      	beq.n	80146ae <USBD_CDC_EP0_RxReady+0x6c>
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801467e:	2bff      	cmp	r3, #255	; 0xff
 8014680:	d015      	beq.n	80146ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	33b0      	adds	r3, #176	; 0xb0
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4413      	add	r3, r2
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801469a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80146a2:	b292      	uxth	r2, r2
 80146a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	22ff      	movs	r2, #255	; 0xff
 80146aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b086      	sub	sp, #24
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80146c0:	2182      	movs	r1, #130	; 0x82
 80146c2:	4818      	ldr	r0, [pc, #96]	; (8014724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146c4:	f000 fd09 	bl	80150da <USBD_GetEpDesc>
 80146c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80146ca:	2101      	movs	r1, #1
 80146cc:	4815      	ldr	r0, [pc, #84]	; (8014724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146ce:	f000 fd04 	bl	80150da <USBD_GetEpDesc>
 80146d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80146d4:	2181      	movs	r1, #129	; 0x81
 80146d6:	4813      	ldr	r0, [pc, #76]	; (8014724 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80146d8:	f000 fcff 	bl	80150da <USBD_GetEpDesc>
 80146dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	2210      	movs	r2, #16
 80146e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d006      	beq.n	80146fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	2200      	movs	r2, #0
 80146f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146f8:	711a      	strb	r2, [r3, #4]
 80146fa:	2200      	movs	r2, #0
 80146fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d006      	beq.n	8014712 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2200      	movs	r2, #0
 8014708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801470c:	711a      	strb	r2, [r3, #4]
 801470e:	2200      	movs	r2, #0
 8014710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2243      	movs	r2, #67	; 0x43
 8014716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801471a:	4618      	mov	r0, r3
 801471c:	3718      	adds	r7, #24
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20000248 	.word	0x20000248

08014728 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b086      	sub	sp, #24
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014730:	2182      	movs	r1, #130	; 0x82
 8014732:	4818      	ldr	r0, [pc, #96]	; (8014794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014734:	f000 fcd1 	bl	80150da <USBD_GetEpDesc>
 8014738:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801473a:	2101      	movs	r1, #1
 801473c:	4815      	ldr	r0, [pc, #84]	; (8014794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801473e:	f000 fccc 	bl	80150da <USBD_GetEpDesc>
 8014742:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014744:	2181      	movs	r1, #129	; 0x81
 8014746:	4813      	ldr	r0, [pc, #76]	; (8014794 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014748:	f000 fcc7 	bl	80150da <USBD_GetEpDesc>
 801474c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d002      	beq.n	801475a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	2210      	movs	r2, #16
 8014758:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d006      	beq.n	801476e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	2200      	movs	r2, #0
 8014764:	711a      	strb	r2, [r3, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	f042 0202 	orr.w	r2, r2, #2
 801476c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d006      	beq.n	8014782 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2200      	movs	r2, #0
 8014778:	711a      	strb	r2, [r3, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	f042 0202 	orr.w	r2, r2, #2
 8014780:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2243      	movs	r2, #67	; 0x43
 8014786:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014788:	4b02      	ldr	r3, [pc, #8]	; (8014794 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801478a:	4618      	mov	r0, r3
 801478c:	3718      	adds	r7, #24
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop
 8014794:	20000248 	.word	0x20000248

08014798 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80147a0:	2182      	movs	r1, #130	; 0x82
 80147a2:	4818      	ldr	r0, [pc, #96]	; (8014804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147a4:	f000 fc99 	bl	80150da <USBD_GetEpDesc>
 80147a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80147aa:	2101      	movs	r1, #1
 80147ac:	4815      	ldr	r0, [pc, #84]	; (8014804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147ae:	f000 fc94 	bl	80150da <USBD_GetEpDesc>
 80147b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80147b4:	2181      	movs	r1, #129	; 0x81
 80147b6:	4813      	ldr	r0, [pc, #76]	; (8014804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147b8:	f000 fc8f 	bl	80150da <USBD_GetEpDesc>
 80147bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	2210      	movs	r2, #16
 80147c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d006      	beq.n	80147de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80147d8:	711a      	strb	r2, [r3, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d006      	beq.n	80147f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	2200      	movs	r2, #0
 80147e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80147ec:	711a      	strb	r2, [r3, #4]
 80147ee:	2200      	movs	r2, #0
 80147f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2243      	movs	r2, #67	; 0x43
 80147f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80147f8:	4b02      	ldr	r3, [pc, #8]	; (8014804 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3718      	adds	r7, #24
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	20000248 	.word	0x20000248

08014808 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014808:	b480      	push	{r7}
 801480a:	b083      	sub	sp, #12
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	220a      	movs	r2, #10
 8014814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014816:	4b03      	ldr	r3, [pc, #12]	; (8014824 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014818:	4618      	mov	r0, r3
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr
 8014824:	20000204 	.word	0x20000204

08014828 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d101      	bne.n	801483c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014838:	2303      	movs	r3, #3
 801483a:	e009      	b.n	8014850 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	33b0      	adds	r3, #176	; 0xb0
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	4413      	add	r3, r2
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801484e:	2300      	movs	r3, #0
}
 8014850:	4618      	mov	r0, r3
 8014852:	370c      	adds	r7, #12
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801485c:	b480      	push	{r7}
 801485e:	b087      	sub	sp, #28
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	32b0      	adds	r2, #176	; 0xb0
 8014872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014876:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d101      	bne.n	8014882 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801487e:	2303      	movs	r3, #3
 8014880:	e008      	b.n	8014894 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	68ba      	ldr	r2, [r7, #8]
 8014886:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014892:	2300      	movs	r3, #0
}
 8014894:	4618      	mov	r0, r3
 8014896:	371c      	adds	r7, #28
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	32b0      	adds	r2, #176	; 0xb0
 80148b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d101      	bne.n	80148c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80148c0:	2303      	movs	r3, #3
 80148c2:	e004      	b.n	80148ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80148cc:	2300      	movs	r3, #0
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3714      	adds	r7, #20
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
	...

080148dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	32b0      	adds	r2, #176	; 0xb0
 80148ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	32b0      	adds	r2, #176	; 0xb0
 80148fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d101      	bne.n	801490a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014906:	2303      	movs	r3, #3
 8014908:	e018      	b.n	801493c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	7c1b      	ldrb	r3, [r3, #16]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d10a      	bne.n	8014928 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014912:	4b0c      	ldr	r3, [pc, #48]	; (8014944 <USBD_CDC_ReceivePacket+0x68>)
 8014914:	7819      	ldrb	r1, [r3, #0]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801491c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f001 ffb3 	bl	801688c <USBD_LL_PrepareReceive>
 8014926:	e008      	b.n	801493a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014928:	4b06      	ldr	r3, [pc, #24]	; (8014944 <USBD_CDC_ReceivePacket+0x68>)
 801492a:	7819      	ldrb	r1, [r3, #0]
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014932:	2340      	movs	r3, #64	; 0x40
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f001 ffa9 	bl	801688c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801493a:	2300      	movs	r3, #0
}
 801493c:	4618      	mov	r0, r3
 801493e:	3710      	adds	r7, #16
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	2000028c 	.word	0x2000028c

08014948 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	4613      	mov	r3, r2
 8014954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d101      	bne.n	8014960 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801495c:	2303      	movs	r3, #3
 801495e:	e01f      	b.n	80149a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2200      	movs	r2, #0
 8014964:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2200      	movs	r2, #0
 801496c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2200      	movs	r2, #0
 8014974:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d003      	beq.n	8014986 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2201      	movs	r2, #1
 801498a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	79fa      	ldrb	r2, [r7, #7]
 8014992:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014994:	68f8      	ldr	r0, [r7, #12]
 8014996:	f001 fe17 	bl	80165c8 <USBD_LL_Init>
 801499a:	4603      	mov	r3, r0
 801499c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3718      	adds	r7, #24
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80149b2:	2300      	movs	r3, #0
 80149b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d101      	bne.n	80149c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80149bc:	2303      	movs	r3, #3
 80149be:	e025      	b.n	8014a0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	32ae      	adds	r2, #174	; 0xae
 80149d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00f      	beq.n	80149fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	32ae      	adds	r2, #174	; 0xae
 80149e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149ec:	f107 020e 	add.w	r2, r7, #14
 80149f0:	4610      	mov	r0, r2
 80149f2:	4798      	blx	r3
 80149f4:	4602      	mov	r2, r0
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a02:	1c5a      	adds	r2, r3, #1
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014a0a:	2300      	movs	r3, #0
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3710      	adds	r7, #16
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f001 fe2b 	bl	8016678 <USBD_LL_Start>
 8014a22:	4603      	mov	r3, r0
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3708      	adds	r7, #8
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014a34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	370c      	adds	r7, #12
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a40:	4770      	bx	lr

08014a42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b084      	sub	sp, #16
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	6078      	str	r0, [r7, #4]
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d009      	beq.n	8014a70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	78fa      	ldrb	r2, [r7, #3]
 8014a66:	4611      	mov	r1, r2
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	4798      	blx	r3
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b084      	sub	sp, #16
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
 8014a82:	460b      	mov	r3, r1
 8014a84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a86:	2300      	movs	r3, #0
 8014a88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a90:	685b      	ldr	r3, [r3, #4]
 8014a92:	78fa      	ldrb	r2, [r7, #3]
 8014a94:	4611      	mov	r1, r2
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	4798      	blx	r3
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d001      	beq.n	8014aa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014aa0:	2303      	movs	r3, #3
 8014aa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}

08014aae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014aae:	b580      	push	{r7, lr}
 8014ab0:	b084      	sub	sp, #16
 8014ab2:	af00      	add	r7, sp, #0
 8014ab4:	6078      	str	r0, [r7, #4]
 8014ab6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014abe:	6839      	ldr	r1, [r7, #0]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f001 f908 	bl	8015cd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014ae2:	f003 031f 	and.w	r3, r3, #31
 8014ae6:	2b02      	cmp	r3, #2
 8014ae8:	d01a      	beq.n	8014b20 <USBD_LL_SetupStage+0x72>
 8014aea:	2b02      	cmp	r3, #2
 8014aec:	d822      	bhi.n	8014b34 <USBD_LL_SetupStage+0x86>
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d002      	beq.n	8014af8 <USBD_LL_SetupStage+0x4a>
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d00a      	beq.n	8014b0c <USBD_LL_SetupStage+0x5e>
 8014af6:	e01d      	b.n	8014b34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014afe:	4619      	mov	r1, r3
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f000 fb5f 	bl	80151c4 <USBD_StdDevReq>
 8014b06:	4603      	mov	r3, r0
 8014b08:	73fb      	strb	r3, [r7, #15]
      break;
 8014b0a:	e020      	b.n	8014b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b12:	4619      	mov	r1, r3
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fbc7 	bl	80152a8 <USBD_StdItfReq>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8014b1e:	e016      	b.n	8014b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b26:	4619      	mov	r1, r3
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f000 fc29 	bl	8015380 <USBD_StdEPReq>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	73fb      	strb	r3, [r7, #15]
      break;
 8014b32:	e00c      	b.n	8014b4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f001 fdf8 	bl	8016738 <USBD_LL_StallEP>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8014b4c:	bf00      	nop
  }

  return ret;
 8014b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3710      	adds	r7, #16
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b086      	sub	sp, #24
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	460b      	mov	r3, r1
 8014b62:	607a      	str	r2, [r7, #4]
 8014b64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014b66:	2300      	movs	r3, #0
 8014b68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014b6a:	7afb      	ldrb	r3, [r7, #11]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d16e      	bne.n	8014c4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014b7e:	2b03      	cmp	r3, #3
 8014b80:	f040 8098 	bne.w	8014cb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	689a      	ldr	r2, [r3, #8]
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d913      	bls.n	8014bb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	689a      	ldr	r2, [r3, #8]
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	68db      	ldr	r3, [r3, #12]
 8014b98:	1ad2      	subs	r2, r2, r3
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	68da      	ldr	r2, [r3, #12]
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	689b      	ldr	r3, [r3, #8]
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	bf28      	it	cs
 8014baa:	4613      	movcs	r3, r2
 8014bac:	461a      	mov	r2, r3
 8014bae:	6879      	ldr	r1, [r7, #4]
 8014bb0:	68f8      	ldr	r0, [r7, #12]
 8014bb2:	f001 f984 	bl	8015ebe <USBD_CtlContinueRx>
 8014bb6:	e07d      	b.n	8014cb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014bbe:	f003 031f 	and.w	r3, r3, #31
 8014bc2:	2b02      	cmp	r3, #2
 8014bc4:	d014      	beq.n	8014bf0 <USBD_LL_DataOutStage+0x98>
 8014bc6:	2b02      	cmp	r3, #2
 8014bc8:	d81d      	bhi.n	8014c06 <USBD_LL_DataOutStage+0xae>
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d002      	beq.n	8014bd4 <USBD_LL_DataOutStage+0x7c>
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d003      	beq.n	8014bda <USBD_LL_DataOutStage+0x82>
 8014bd2:	e018      	b.n	8014c06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8014bd8:	e018      	b.n	8014c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	4619      	mov	r1, r3
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f000 fa5e 	bl	80150a6 <USBD_CoreFindIF>
 8014bea:	4603      	mov	r3, r0
 8014bec:	75bb      	strb	r3, [r7, #22]
            break;
 8014bee:	e00d      	b.n	8014c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	68f8      	ldr	r0, [r7, #12]
 8014bfc:	f000 fa60 	bl	80150c0 <USBD_CoreFindEP>
 8014c00:	4603      	mov	r3, r0
 8014c02:	75bb      	strb	r3, [r7, #22]
            break;
 8014c04:	e002      	b.n	8014c0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014c06:	2300      	movs	r3, #0
 8014c08:	75bb      	strb	r3, [r7, #22]
            break;
 8014c0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014c0c:	7dbb      	ldrb	r3, [r7, #22]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d119      	bne.n	8014c46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	2b03      	cmp	r3, #3
 8014c1c:	d113      	bne.n	8014c46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014c1e:	7dba      	ldrb	r2, [r7, #22]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	32ae      	adds	r2, #174	; 0xae
 8014c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c28:	691b      	ldr	r3, [r3, #16]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d00b      	beq.n	8014c46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014c2e:	7dba      	ldrb	r2, [r7, #22]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014c36:	7dba      	ldrb	r2, [r7, #22]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	32ae      	adds	r2, #174	; 0xae
 8014c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c40:	691b      	ldr	r3, [r3, #16]
 8014c42:	68f8      	ldr	r0, [r7, #12]
 8014c44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f001 f94a 	bl	8015ee0 <USBD_CtlSendStatus>
 8014c4c:	e032      	b.n	8014cb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014c4e:	7afb      	ldrb	r3, [r7, #11]
 8014c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c54:	b2db      	uxtb	r3, r3
 8014c56:	4619      	mov	r1, r3
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f000 fa31 	bl	80150c0 <USBD_CoreFindEP>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014c62:	7dbb      	ldrb	r3, [r7, #22]
 8014c64:	2bff      	cmp	r3, #255	; 0xff
 8014c66:	d025      	beq.n	8014cb4 <USBD_LL_DataOutStage+0x15c>
 8014c68:	7dbb      	ldrb	r3, [r7, #22]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d122      	bne.n	8014cb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	2b03      	cmp	r3, #3
 8014c78:	d117      	bne.n	8014caa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014c7a:	7dba      	ldrb	r2, [r7, #22]
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	32ae      	adds	r2, #174	; 0xae
 8014c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c84:	699b      	ldr	r3, [r3, #24]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00f      	beq.n	8014caa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014c8a:	7dba      	ldrb	r2, [r7, #22]
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014c92:	7dba      	ldrb	r2, [r7, #22]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	32ae      	adds	r2, #174	; 0xae
 8014c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c9c:	699b      	ldr	r3, [r3, #24]
 8014c9e:	7afa      	ldrb	r2, [r7, #11]
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	4798      	blx	r3
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014caa:	7dfb      	ldrb	r3, [r7, #23]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d001      	beq.n	8014cb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014cb0:	7dfb      	ldrb	r3, [r7, #23]
 8014cb2:	e000      	b.n	8014cb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014cb4:	2300      	movs	r3, #0
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3718      	adds	r7, #24
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b086      	sub	sp, #24
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	60f8      	str	r0, [r7, #12]
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	607a      	str	r2, [r7, #4]
 8014cca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014ccc:	7afb      	ldrb	r3, [r7, #11]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d16f      	bne.n	8014db2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	3314      	adds	r3, #20
 8014cd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014cde:	2b02      	cmp	r3, #2
 8014ce0:	d15a      	bne.n	8014d98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	689a      	ldr	r2, [r3, #8]
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d914      	bls.n	8014d18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	689a      	ldr	r2, [r3, #8]
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	1ad2      	subs	r2, r2, r3
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	689b      	ldr	r3, [r3, #8]
 8014d00:	461a      	mov	r2, r3
 8014d02:	6879      	ldr	r1, [r7, #4]
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f001 f8ac 	bl	8015e62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	2100      	movs	r1, #0
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f001 fdbb 	bl	801688c <USBD_LL_PrepareReceive>
 8014d16:	e03f      	b.n	8014d98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	68da      	ldr	r2, [r3, #12]
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d11c      	bne.n	8014d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	685a      	ldr	r2, [r3, #4]
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d316      	bcc.n	8014d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	685a      	ldr	r2, [r3, #4]
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d20f      	bcs.n	8014d5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014d3e:	2200      	movs	r2, #0
 8014d40:	2100      	movs	r1, #0
 8014d42:	68f8      	ldr	r0, [r7, #12]
 8014d44:	f001 f88d 	bl	8015e62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d50:	2300      	movs	r3, #0
 8014d52:	2200      	movs	r2, #0
 8014d54:	2100      	movs	r1, #0
 8014d56:	68f8      	ldr	r0, [r7, #12]
 8014d58:	f001 fd98 	bl	801688c <USBD_LL_PrepareReceive>
 8014d5c:	e01c      	b.n	8014d98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b03      	cmp	r3, #3
 8014d68:	d10f      	bne.n	8014d8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d70:	68db      	ldr	r3, [r3, #12]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d009      	beq.n	8014d8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d84:	68db      	ldr	r3, [r3, #12]
 8014d86:	68f8      	ldr	r0, [r7, #12]
 8014d88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d8a:	2180      	movs	r1, #128	; 0x80
 8014d8c:	68f8      	ldr	r0, [r7, #12]
 8014d8e:	f001 fcd3 	bl	8016738 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014d92:	68f8      	ldr	r0, [r7, #12]
 8014d94:	f001 f8b7 	bl	8015f06 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d03a      	beq.n	8014e18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f7ff fe42 	bl	8014a2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2200      	movs	r2, #0
 8014dac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014db0:	e032      	b.n	8014e18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014db2:	7afb      	ldrb	r3, [r7, #11]
 8014db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	4619      	mov	r1, r3
 8014dbc:	68f8      	ldr	r0, [r7, #12]
 8014dbe:	f000 f97f 	bl	80150c0 <USBD_CoreFindEP>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014dc6:	7dfb      	ldrb	r3, [r7, #23]
 8014dc8:	2bff      	cmp	r3, #255	; 0xff
 8014dca:	d025      	beq.n	8014e18 <USBD_LL_DataInStage+0x15a>
 8014dcc:	7dfb      	ldrb	r3, [r7, #23]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d122      	bne.n	8014e18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	2b03      	cmp	r3, #3
 8014ddc:	d11c      	bne.n	8014e18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014dde:	7dfa      	ldrb	r2, [r7, #23]
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	32ae      	adds	r2, #174	; 0xae
 8014de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de8:	695b      	ldr	r3, [r3, #20]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d014      	beq.n	8014e18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014dee:	7dfa      	ldrb	r2, [r7, #23]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014df6:	7dfa      	ldrb	r2, [r7, #23]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	32ae      	adds	r2, #174	; 0xae
 8014dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e00:	695b      	ldr	r3, [r3, #20]
 8014e02:	7afa      	ldrb	r2, [r7, #11]
 8014e04:	4611      	mov	r1, r2
 8014e06:	68f8      	ldr	r0, [r7, #12]
 8014e08:	4798      	blx	r3
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014e0e:	7dbb      	ldrb	r3, [r7, #22]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d001      	beq.n	8014e18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014e14:	7dbb      	ldrb	r3, [r7, #22]
 8014e16:	e000      	b.n	8014e1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3718      	adds	r7, #24
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}

08014e22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014e22:	b580      	push	{r7, lr}
 8014e24:	b084      	sub	sp, #16
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2201      	movs	r2, #1
 8014e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2200      	movs	r2, #0
 8014e48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d014      	beq.n	8014e88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d00e      	beq.n	8014e88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	6852      	ldr	r2, [r2, #4]
 8014e76:	b2d2      	uxtb	r2, r2
 8014e78:	4611      	mov	r1, r2
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	4798      	blx	r3
 8014e7e:	4603      	mov	r3, r0
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d001      	beq.n	8014e88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014e84:	2303      	movs	r3, #3
 8014e86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014e88:	2340      	movs	r3, #64	; 0x40
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f001 fc0d 	bl	80166ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2201      	movs	r2, #1
 8014e98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2240      	movs	r2, #64	; 0x40
 8014ea0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014ea4:	2340      	movs	r3, #64	; 0x40
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	2180      	movs	r1, #128	; 0x80
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f001 fbff 	bl	80166ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2240      	movs	r2, #64	; 0x40
 8014eba:	621a      	str	r2, [r3, #32]

  return ret;
 8014ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3710      	adds	r7, #16
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}

08014ec6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014ec6:	b480      	push	{r7}
 8014ec8:	b083      	sub	sp, #12
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
 8014ece:	460b      	mov	r3, r1
 8014ed0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	78fa      	ldrb	r2, [r7, #3]
 8014ed6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	370c      	adds	r7, #12
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014ee6:	b480      	push	{r7}
 8014ee8:	b083      	sub	sp, #12
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ef4:	b2da      	uxtb	r2, r3
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2204      	movs	r2, #4
 8014f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014f04:	2300      	movs	r3, #0
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	370c      	adds	r7, #12
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr

08014f12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014f12:	b480      	push	{r7}
 8014f14:	b083      	sub	sp, #12
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	2b04      	cmp	r3, #4
 8014f24:	d106      	bne.n	8014f34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014f2c:	b2da      	uxtb	r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014f34:	2300      	movs	r3, #0
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	370c      	adds	r7, #12
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr

08014f42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b082      	sub	sp, #8
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	2b03      	cmp	r3, #3
 8014f54:	d110      	bne.n	8014f78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d00b      	beq.n	8014f78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f66:	69db      	ldr	r3, [r3, #28]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d005      	beq.n	8014f78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f72:	69db      	ldr	r3, [r3, #28]
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014f78:	2300      	movs	r3, #0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b082      	sub	sp, #8
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	32ae      	adds	r2, #174	; 0xae
 8014f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d101      	bne.n	8014fa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014fa0:	2303      	movs	r3, #3
 8014fa2:	e01c      	b.n	8014fde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	2b03      	cmp	r3, #3
 8014fae:	d115      	bne.n	8014fdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	32ae      	adds	r2, #174	; 0xae
 8014fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fbe:	6a1b      	ldr	r3, [r3, #32]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00b      	beq.n	8014fdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	32ae      	adds	r2, #174	; 0xae
 8014fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fd2:	6a1b      	ldr	r3, [r3, #32]
 8014fd4:	78fa      	ldrb	r2, [r7, #3]
 8014fd6:	4611      	mov	r1, r2
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3708      	adds	r7, #8
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}

08014fe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014fe6:	b580      	push	{r7, lr}
 8014fe8:	b082      	sub	sp, #8
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	6078      	str	r0, [r7, #4]
 8014fee:	460b      	mov	r3, r1
 8014ff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	32ae      	adds	r2, #174	; 0xae
 8014ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015004:	2303      	movs	r3, #3
 8015006:	e01c      	b.n	8015042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801500e:	b2db      	uxtb	r3, r3
 8015010:	2b03      	cmp	r3, #3
 8015012:	d115      	bne.n	8015040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	32ae      	adds	r2, #174	; 0xae
 801501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015024:	2b00      	cmp	r3, #0
 8015026:	d00b      	beq.n	8015040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	32ae      	adds	r2, #174	; 0xae
 8015032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015038:	78fa      	ldrb	r2, [r7, #3]
 801503a:	4611      	mov	r1, r2
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015040:	2300      	movs	r3, #0
}
 8015042:	4618      	mov	r0, r3
 8015044:	3708      	adds	r7, #8
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}

0801504a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801504a:	b480      	push	{r7}
 801504c:	b083      	sub	sp, #12
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015052:	2300      	movs	r3, #0
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b084      	sub	sp, #16
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015068:	2300      	movs	r3, #0
 801506a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2201      	movs	r2, #1
 8015070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801507a:	2b00      	cmp	r3, #0
 801507c:	d00e      	beq.n	801509c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	6852      	ldr	r2, [r2, #4]
 801508a:	b2d2      	uxtb	r2, r2
 801508c:	4611      	mov	r1, r2
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	4798      	blx	r3
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d001      	beq.n	801509c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015098:	2303      	movs	r3, #3
 801509a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801509c:	7bfb      	ldrb	r3, [r7, #15]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80150a6:	b480      	push	{r7}
 80150a8:	b083      	sub	sp, #12
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	460b      	mov	r3, r1
 80150b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80150b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	370c      	adds	r7, #12
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr

080150c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	460b      	mov	r3, r1
 80150ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80150cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	370c      	adds	r7, #12
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr

080150da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80150da:	b580      	push	{r7, lr}
 80150dc:	b086      	sub	sp, #24
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
 80150e2:	460b      	mov	r3, r1
 80150e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80150ee:	2300      	movs	r3, #0
 80150f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	885b      	ldrh	r3, [r3, #2]
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	429a      	cmp	r2, r3
 8015100:	d920      	bls.n	8015144 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	b29b      	uxth	r3, r3
 8015108:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801510a:	e013      	b.n	8015134 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801510c:	f107 030a 	add.w	r3, r7, #10
 8015110:	4619      	mov	r1, r3
 8015112:	6978      	ldr	r0, [r7, #20]
 8015114:	f000 f81b 	bl	801514e <USBD_GetNextDesc>
 8015118:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	785b      	ldrb	r3, [r3, #1]
 801511e:	2b05      	cmp	r3, #5
 8015120:	d108      	bne.n	8015134 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	789b      	ldrb	r3, [r3, #2]
 801512a:	78fa      	ldrb	r2, [r7, #3]
 801512c:	429a      	cmp	r2, r3
 801512e:	d008      	beq.n	8015142 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015130:	2300      	movs	r3, #0
 8015132:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	885b      	ldrh	r3, [r3, #2]
 8015138:	b29a      	uxth	r2, r3
 801513a:	897b      	ldrh	r3, [r7, #10]
 801513c:	429a      	cmp	r2, r3
 801513e:	d8e5      	bhi.n	801510c <USBD_GetEpDesc+0x32>
 8015140:	e000      	b.n	8015144 <USBD_GetEpDesc+0x6a>
          break;
 8015142:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015144:	693b      	ldr	r3, [r7, #16]
}
 8015146:	4618      	mov	r0, r3
 8015148:	3718      	adds	r7, #24
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801514e:	b480      	push	{r7}
 8015150:	b085      	sub	sp, #20
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
 8015156:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	881a      	ldrh	r2, [r3, #0]
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	b29b      	uxth	r3, r3
 8015166:	4413      	add	r3, r2
 8015168:	b29a      	uxth	r2, r3
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	461a      	mov	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	4413      	add	r3, r2
 8015178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801517a:	68fb      	ldr	r3, [r7, #12]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3714      	adds	r7, #20
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	3301      	adds	r3, #1
 801519e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	781b      	ldrb	r3, [r3, #0]
 80151a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80151a6:	8a3b      	ldrh	r3, [r7, #16]
 80151a8:	021b      	lsls	r3, r3, #8
 80151aa:	b21a      	sxth	r2, r3
 80151ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80151b0:	4313      	orrs	r3, r2
 80151b2:	b21b      	sxth	r3, r3
 80151b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80151b6:	89fb      	ldrh	r3, [r7, #14]
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	371c      	adds	r7, #28
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80151ce:	2300      	movs	r3, #0
 80151d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80151da:	2b40      	cmp	r3, #64	; 0x40
 80151dc:	d005      	beq.n	80151ea <USBD_StdDevReq+0x26>
 80151de:	2b40      	cmp	r3, #64	; 0x40
 80151e0:	d857      	bhi.n	8015292 <USBD_StdDevReq+0xce>
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00f      	beq.n	8015206 <USBD_StdDevReq+0x42>
 80151e6:	2b20      	cmp	r3, #32
 80151e8:	d153      	bne.n	8015292 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	32ae      	adds	r2, #174	; 0xae
 80151f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151f8:	689b      	ldr	r3, [r3, #8]
 80151fa:	6839      	ldr	r1, [r7, #0]
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	4798      	blx	r3
 8015200:	4603      	mov	r3, r0
 8015202:	73fb      	strb	r3, [r7, #15]
      break;
 8015204:	e04a      	b.n	801529c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	785b      	ldrb	r3, [r3, #1]
 801520a:	2b09      	cmp	r3, #9
 801520c:	d83b      	bhi.n	8015286 <USBD_StdDevReq+0xc2>
 801520e:	a201      	add	r2, pc, #4	; (adr r2, 8015214 <USBD_StdDevReq+0x50>)
 8015210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015214:	08015269 	.word	0x08015269
 8015218:	0801527d 	.word	0x0801527d
 801521c:	08015287 	.word	0x08015287
 8015220:	08015273 	.word	0x08015273
 8015224:	08015287 	.word	0x08015287
 8015228:	08015247 	.word	0x08015247
 801522c:	0801523d 	.word	0x0801523d
 8015230:	08015287 	.word	0x08015287
 8015234:	0801525f 	.word	0x0801525f
 8015238:	08015251 	.word	0x08015251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801523c:	6839      	ldr	r1, [r7, #0]
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f000 fa3c 	bl	80156bc <USBD_GetDescriptor>
          break;
 8015244:	e024      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015246:	6839      	ldr	r1, [r7, #0]
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f000 fba1 	bl	8015990 <USBD_SetAddress>
          break;
 801524e:	e01f      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015250:	6839      	ldr	r1, [r7, #0]
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 fbe0 	bl	8015a18 <USBD_SetConfig>
 8015258:	4603      	mov	r3, r0
 801525a:	73fb      	strb	r3, [r7, #15]
          break;
 801525c:	e018      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801525e:	6839      	ldr	r1, [r7, #0]
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f000 fc83 	bl	8015b6c <USBD_GetConfig>
          break;
 8015266:	e013      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015268:	6839      	ldr	r1, [r7, #0]
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f000 fcb4 	bl	8015bd8 <USBD_GetStatus>
          break;
 8015270:	e00e      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015272:	6839      	ldr	r1, [r7, #0]
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f000 fce3 	bl	8015c40 <USBD_SetFeature>
          break;
 801527a:	e009      	b.n	8015290 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801527c:	6839      	ldr	r1, [r7, #0]
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f000 fd07 	bl	8015c92 <USBD_ClrFeature>
          break;
 8015284:	e004      	b.n	8015290 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f000 fd5e 	bl	8015d4a <USBD_CtlError>
          break;
 801528e:	bf00      	nop
      }
      break;
 8015290:	e004      	b.n	801529c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015292:	6839      	ldr	r1, [r7, #0]
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f000 fd58 	bl	8015d4a <USBD_CtlError>
      break;
 801529a:	bf00      	nop
  }

  return ret;
 801529c:	7bfb      	ldrb	r3, [r7, #15]
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3710      	adds	r7, #16
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop

080152a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80152b2:	2300      	movs	r3, #0
 80152b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80152be:	2b40      	cmp	r3, #64	; 0x40
 80152c0:	d005      	beq.n	80152ce <USBD_StdItfReq+0x26>
 80152c2:	2b40      	cmp	r3, #64	; 0x40
 80152c4:	d852      	bhi.n	801536c <USBD_StdItfReq+0xc4>
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d001      	beq.n	80152ce <USBD_StdItfReq+0x26>
 80152ca:	2b20      	cmp	r3, #32
 80152cc:	d14e      	bne.n	801536c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152d4:	b2db      	uxtb	r3, r3
 80152d6:	3b01      	subs	r3, #1
 80152d8:	2b02      	cmp	r3, #2
 80152da:	d840      	bhi.n	801535e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	889b      	ldrh	r3, [r3, #4]
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d836      	bhi.n	8015354 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	889b      	ldrh	r3, [r3, #4]
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	4619      	mov	r1, r3
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7ff fed9 	bl	80150a6 <USBD_CoreFindIF>
 80152f4:	4603      	mov	r3, r0
 80152f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152f8:	7bbb      	ldrb	r3, [r7, #14]
 80152fa:	2bff      	cmp	r3, #255	; 0xff
 80152fc:	d01d      	beq.n	801533a <USBD_StdItfReq+0x92>
 80152fe:	7bbb      	ldrb	r3, [r7, #14]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d11a      	bne.n	801533a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015304:	7bba      	ldrb	r2, [r7, #14]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	32ae      	adds	r2, #174	; 0xae
 801530a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801530e:	689b      	ldr	r3, [r3, #8]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d00f      	beq.n	8015334 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015314:	7bba      	ldrb	r2, [r7, #14]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801531c:	7bba      	ldrb	r2, [r7, #14]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	32ae      	adds	r2, #174	; 0xae
 8015322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015326:	689b      	ldr	r3, [r3, #8]
 8015328:	6839      	ldr	r1, [r7, #0]
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	4798      	blx	r3
 801532e:	4603      	mov	r3, r0
 8015330:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015332:	e004      	b.n	801533e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015334:	2303      	movs	r3, #3
 8015336:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015338:	e001      	b.n	801533e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801533a:	2303      	movs	r3, #3
 801533c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	88db      	ldrh	r3, [r3, #6]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d110      	bne.n	8015368 <USBD_StdItfReq+0xc0>
 8015346:	7bfb      	ldrb	r3, [r7, #15]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d10d      	bne.n	8015368 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 fdc7 	bl	8015ee0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015352:	e009      	b.n	8015368 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015354:	6839      	ldr	r1, [r7, #0]
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f000 fcf7 	bl	8015d4a <USBD_CtlError>
          break;
 801535c:	e004      	b.n	8015368 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801535e:	6839      	ldr	r1, [r7, #0]
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 fcf2 	bl	8015d4a <USBD_CtlError>
          break;
 8015366:	e000      	b.n	801536a <USBD_StdItfReq+0xc2>
          break;
 8015368:	bf00      	nop
      }
      break;
 801536a:	e004      	b.n	8015376 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801536c:	6839      	ldr	r1, [r7, #0]
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 fceb 	bl	8015d4a <USBD_CtlError>
      break;
 8015374:	bf00      	nop
  }

  return ret;
 8015376:	7bfb      	ldrb	r3, [r7, #15]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801538a:	2300      	movs	r3, #0
 801538c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	889b      	ldrh	r3, [r3, #4]
 8015392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801539c:	2b40      	cmp	r3, #64	; 0x40
 801539e:	d007      	beq.n	80153b0 <USBD_StdEPReq+0x30>
 80153a0:	2b40      	cmp	r3, #64	; 0x40
 80153a2:	f200 817f 	bhi.w	80156a4 <USBD_StdEPReq+0x324>
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d02a      	beq.n	8015400 <USBD_StdEPReq+0x80>
 80153aa:	2b20      	cmp	r3, #32
 80153ac:	f040 817a 	bne.w	80156a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80153b0:	7bbb      	ldrb	r3, [r7, #14]
 80153b2:	4619      	mov	r1, r3
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f7ff fe83 	bl	80150c0 <USBD_CoreFindEP>
 80153ba:	4603      	mov	r3, r0
 80153bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153be:	7b7b      	ldrb	r3, [r7, #13]
 80153c0:	2bff      	cmp	r3, #255	; 0xff
 80153c2:	f000 8174 	beq.w	80156ae <USBD_StdEPReq+0x32e>
 80153c6:	7b7b      	ldrb	r3, [r7, #13]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f040 8170 	bne.w	80156ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80153ce:	7b7a      	ldrb	r2, [r7, #13]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80153d6:	7b7a      	ldrb	r2, [r7, #13]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	32ae      	adds	r2, #174	; 0xae
 80153dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153e0:	689b      	ldr	r3, [r3, #8]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	f000 8163 	beq.w	80156ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80153e8:	7b7a      	ldrb	r2, [r7, #13]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	32ae      	adds	r2, #174	; 0xae
 80153ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153f2:	689b      	ldr	r3, [r3, #8]
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	4798      	blx	r3
 80153fa:	4603      	mov	r3, r0
 80153fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80153fe:	e156      	b.n	80156ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	785b      	ldrb	r3, [r3, #1]
 8015404:	2b03      	cmp	r3, #3
 8015406:	d008      	beq.n	801541a <USBD_StdEPReq+0x9a>
 8015408:	2b03      	cmp	r3, #3
 801540a:	f300 8145 	bgt.w	8015698 <USBD_StdEPReq+0x318>
 801540e:	2b00      	cmp	r3, #0
 8015410:	f000 809b 	beq.w	801554a <USBD_StdEPReq+0x1ca>
 8015414:	2b01      	cmp	r3, #1
 8015416:	d03c      	beq.n	8015492 <USBD_StdEPReq+0x112>
 8015418:	e13e      	b.n	8015698 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015420:	b2db      	uxtb	r3, r3
 8015422:	2b02      	cmp	r3, #2
 8015424:	d002      	beq.n	801542c <USBD_StdEPReq+0xac>
 8015426:	2b03      	cmp	r3, #3
 8015428:	d016      	beq.n	8015458 <USBD_StdEPReq+0xd8>
 801542a:	e02c      	b.n	8015486 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801542c:	7bbb      	ldrb	r3, [r7, #14]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d00d      	beq.n	801544e <USBD_StdEPReq+0xce>
 8015432:	7bbb      	ldrb	r3, [r7, #14]
 8015434:	2b80      	cmp	r3, #128	; 0x80
 8015436:	d00a      	beq.n	801544e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015438:	7bbb      	ldrb	r3, [r7, #14]
 801543a:	4619      	mov	r1, r3
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f001 f97b 	bl	8016738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015442:	2180      	movs	r1, #128	; 0x80
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f001 f977 	bl	8016738 <USBD_LL_StallEP>
 801544a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801544c:	e020      	b.n	8015490 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801544e:	6839      	ldr	r1, [r7, #0]
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 fc7a 	bl	8015d4a <USBD_CtlError>
              break;
 8015456:	e01b      	b.n	8015490 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	885b      	ldrh	r3, [r3, #2]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d10e      	bne.n	801547e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015460:	7bbb      	ldrb	r3, [r7, #14]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d00b      	beq.n	801547e <USBD_StdEPReq+0xfe>
 8015466:	7bbb      	ldrb	r3, [r7, #14]
 8015468:	2b80      	cmp	r3, #128	; 0x80
 801546a:	d008      	beq.n	801547e <USBD_StdEPReq+0xfe>
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	88db      	ldrh	r3, [r3, #6]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d104      	bne.n	801547e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015474:	7bbb      	ldrb	r3, [r7, #14]
 8015476:	4619      	mov	r1, r3
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f001 f95d 	bl	8016738 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f000 fd2e 	bl	8015ee0 <USBD_CtlSendStatus>

              break;
 8015484:	e004      	b.n	8015490 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015486:	6839      	ldr	r1, [r7, #0]
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f000 fc5e 	bl	8015d4a <USBD_CtlError>
              break;
 801548e:	bf00      	nop
          }
          break;
 8015490:	e107      	b.n	80156a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015498:	b2db      	uxtb	r3, r3
 801549a:	2b02      	cmp	r3, #2
 801549c:	d002      	beq.n	80154a4 <USBD_StdEPReq+0x124>
 801549e:	2b03      	cmp	r3, #3
 80154a0:	d016      	beq.n	80154d0 <USBD_StdEPReq+0x150>
 80154a2:	e04b      	b.n	801553c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80154a4:	7bbb      	ldrb	r3, [r7, #14]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00d      	beq.n	80154c6 <USBD_StdEPReq+0x146>
 80154aa:	7bbb      	ldrb	r3, [r7, #14]
 80154ac:	2b80      	cmp	r3, #128	; 0x80
 80154ae:	d00a      	beq.n	80154c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80154b0:	7bbb      	ldrb	r3, [r7, #14]
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f001 f93f 	bl	8016738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80154ba:	2180      	movs	r1, #128	; 0x80
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f001 f93b 	bl	8016738 <USBD_LL_StallEP>
 80154c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80154c4:	e040      	b.n	8015548 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80154c6:	6839      	ldr	r1, [r7, #0]
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 fc3e 	bl	8015d4a <USBD_CtlError>
              break;
 80154ce:	e03b      	b.n	8015548 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	885b      	ldrh	r3, [r3, #2]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d136      	bne.n	8015546 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80154d8:	7bbb      	ldrb	r3, [r7, #14]
 80154da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d004      	beq.n	80154ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80154e2:	7bbb      	ldrb	r3, [r7, #14]
 80154e4:	4619      	mov	r1, r3
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f001 f945 	bl	8016776 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 fcf7 	bl	8015ee0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80154f2:	7bbb      	ldrb	r3, [r7, #14]
 80154f4:	4619      	mov	r1, r3
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7ff fde2 	bl	80150c0 <USBD_CoreFindEP>
 80154fc:	4603      	mov	r3, r0
 80154fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015500:	7b7b      	ldrb	r3, [r7, #13]
 8015502:	2bff      	cmp	r3, #255	; 0xff
 8015504:	d01f      	beq.n	8015546 <USBD_StdEPReq+0x1c6>
 8015506:	7b7b      	ldrb	r3, [r7, #13]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d11c      	bne.n	8015546 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801550c:	7b7a      	ldrb	r2, [r7, #13]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015514:	7b7a      	ldrb	r2, [r7, #13]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	32ae      	adds	r2, #174	; 0xae
 801551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801551e:	689b      	ldr	r3, [r3, #8]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d010      	beq.n	8015546 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015524:	7b7a      	ldrb	r2, [r7, #13]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	32ae      	adds	r2, #174	; 0xae
 801552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801552e:	689b      	ldr	r3, [r3, #8]
 8015530:	6839      	ldr	r1, [r7, #0]
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	4798      	blx	r3
 8015536:	4603      	mov	r3, r0
 8015538:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801553a:	e004      	b.n	8015546 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801553c:	6839      	ldr	r1, [r7, #0]
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 fc03 	bl	8015d4a <USBD_CtlError>
              break;
 8015544:	e000      	b.n	8015548 <USBD_StdEPReq+0x1c8>
              break;
 8015546:	bf00      	nop
          }
          break;
 8015548:	e0ab      	b.n	80156a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015550:	b2db      	uxtb	r3, r3
 8015552:	2b02      	cmp	r3, #2
 8015554:	d002      	beq.n	801555c <USBD_StdEPReq+0x1dc>
 8015556:	2b03      	cmp	r3, #3
 8015558:	d032      	beq.n	80155c0 <USBD_StdEPReq+0x240>
 801555a:	e097      	b.n	801568c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801555c:	7bbb      	ldrb	r3, [r7, #14]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d007      	beq.n	8015572 <USBD_StdEPReq+0x1f2>
 8015562:	7bbb      	ldrb	r3, [r7, #14]
 8015564:	2b80      	cmp	r3, #128	; 0x80
 8015566:	d004      	beq.n	8015572 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015568:	6839      	ldr	r1, [r7, #0]
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 fbed 	bl	8015d4a <USBD_CtlError>
                break;
 8015570:	e091      	b.n	8015696 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015576:	2b00      	cmp	r3, #0
 8015578:	da0b      	bge.n	8015592 <USBD_StdEPReq+0x212>
 801557a:	7bbb      	ldrb	r3, [r7, #14]
 801557c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015580:	4613      	mov	r3, r2
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4413      	add	r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	3310      	adds	r3, #16
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	4413      	add	r3, r2
 801558e:	3304      	adds	r3, #4
 8015590:	e00b      	b.n	80155aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015592:	7bbb      	ldrb	r3, [r7, #14]
 8015594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015598:	4613      	mov	r3, r2
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	4413      	add	r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	4413      	add	r3, r2
 80155a8:	3304      	adds	r3, #4
 80155aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	2200      	movs	r2, #0
 80155b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	2202      	movs	r2, #2
 80155b6:	4619      	mov	r1, r3
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f000 fc37 	bl	8015e2c <USBD_CtlSendData>
              break;
 80155be:	e06a      	b.n	8015696 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80155c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	da11      	bge.n	80155ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80155c8:	7bbb      	ldrb	r3, [r7, #14]
 80155ca:	f003 020f 	and.w	r2, r3, #15
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	4613      	mov	r3, r2
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	4413      	add	r3, r2
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	440b      	add	r3, r1
 80155da:	3324      	adds	r3, #36	; 0x24
 80155dc:	881b      	ldrh	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d117      	bne.n	8015612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f000 fbb0 	bl	8015d4a <USBD_CtlError>
                  break;
 80155ea:	e054      	b.n	8015696 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80155ec:	7bbb      	ldrb	r3, [r7, #14]
 80155ee:	f003 020f 	and.w	r2, r3, #15
 80155f2:	6879      	ldr	r1, [r7, #4]
 80155f4:	4613      	mov	r3, r2
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	4413      	add	r3, r2
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	440b      	add	r3, r1
 80155fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015602:	881b      	ldrh	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d104      	bne.n	8015612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 fb9d 	bl	8015d4a <USBD_CtlError>
                  break;
 8015610:	e041      	b.n	8015696 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015616:	2b00      	cmp	r3, #0
 8015618:	da0b      	bge.n	8015632 <USBD_StdEPReq+0x2b2>
 801561a:	7bbb      	ldrb	r3, [r7, #14]
 801561c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015620:	4613      	mov	r3, r2
 8015622:	009b      	lsls	r3, r3, #2
 8015624:	4413      	add	r3, r2
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	3310      	adds	r3, #16
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	4413      	add	r3, r2
 801562e:	3304      	adds	r3, #4
 8015630:	e00b      	b.n	801564a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015632:	7bbb      	ldrb	r3, [r7, #14]
 8015634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015638:	4613      	mov	r3, r2
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4413      	add	r3, r2
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	4413      	add	r3, r2
 8015648:	3304      	adds	r3, #4
 801564a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801564c:	7bbb      	ldrb	r3, [r7, #14]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d002      	beq.n	8015658 <USBD_StdEPReq+0x2d8>
 8015652:	7bbb      	ldrb	r3, [r7, #14]
 8015654:	2b80      	cmp	r3, #128	; 0x80
 8015656:	d103      	bne.n	8015660 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2200      	movs	r2, #0
 801565c:	601a      	str	r2, [r3, #0]
 801565e:	e00e      	b.n	801567e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015660:	7bbb      	ldrb	r3, [r7, #14]
 8015662:	4619      	mov	r1, r3
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f001 f8a5 	bl	80167b4 <USBD_LL_IsStallEP>
 801566a:	4603      	mov	r3, r0
 801566c:	2b00      	cmp	r3, #0
 801566e:	d003      	beq.n	8015678 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2201      	movs	r2, #1
 8015674:	601a      	str	r2, [r3, #0]
 8015676:	e002      	b.n	801567e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	2200      	movs	r2, #0
 801567c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	2202      	movs	r2, #2
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f000 fbd1 	bl	8015e2c <USBD_CtlSendData>
              break;
 801568a:	e004      	b.n	8015696 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801568c:	6839      	ldr	r1, [r7, #0]
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f000 fb5b 	bl	8015d4a <USBD_CtlError>
              break;
 8015694:	bf00      	nop
          }
          break;
 8015696:	e004      	b.n	80156a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fb55 	bl	8015d4a <USBD_CtlError>
          break;
 80156a0:	bf00      	nop
      }
      break;
 80156a2:	e005      	b.n	80156b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80156a4:	6839      	ldr	r1, [r7, #0]
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f000 fb4f 	bl	8015d4a <USBD_CtlError>
      break;
 80156ac:	e000      	b.n	80156b0 <USBD_StdEPReq+0x330>
      break;
 80156ae:	bf00      	nop
  }

  return ret;
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
	...

080156bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80156c6:	2300      	movs	r3, #0
 80156c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80156ca:	2300      	movs	r3, #0
 80156cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80156ce:	2300      	movs	r3, #0
 80156d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	885b      	ldrh	r3, [r3, #2]
 80156d6:	0a1b      	lsrs	r3, r3, #8
 80156d8:	b29b      	uxth	r3, r3
 80156da:	3b01      	subs	r3, #1
 80156dc:	2b06      	cmp	r3, #6
 80156de:	f200 8128 	bhi.w	8015932 <USBD_GetDescriptor+0x276>
 80156e2:	a201      	add	r2, pc, #4	; (adr r2, 80156e8 <USBD_GetDescriptor+0x2c>)
 80156e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156e8:	08015705 	.word	0x08015705
 80156ec:	0801571d 	.word	0x0801571d
 80156f0:	0801575d 	.word	0x0801575d
 80156f4:	08015933 	.word	0x08015933
 80156f8:	08015933 	.word	0x08015933
 80156fc:	080158d3 	.word	0x080158d3
 8015700:	080158ff 	.word	0x080158ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	687a      	ldr	r2, [r7, #4]
 801570e:	7c12      	ldrb	r2, [r2, #16]
 8015710:	f107 0108 	add.w	r1, r7, #8
 8015714:	4610      	mov	r0, r2
 8015716:	4798      	blx	r3
 8015718:	60f8      	str	r0, [r7, #12]
      break;
 801571a:	e112      	b.n	8015942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	7c1b      	ldrb	r3, [r3, #16]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d10d      	bne.n	8015740 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801572c:	f107 0208 	add.w	r2, r7, #8
 8015730:	4610      	mov	r0, r2
 8015732:	4798      	blx	r3
 8015734:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	3301      	adds	r3, #1
 801573a:	2202      	movs	r2, #2
 801573c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801573e:	e100      	b.n	8015942 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015748:	f107 0208 	add.w	r2, r7, #8
 801574c:	4610      	mov	r0, r2
 801574e:	4798      	blx	r3
 8015750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	3301      	adds	r3, #1
 8015756:	2202      	movs	r2, #2
 8015758:	701a      	strb	r2, [r3, #0]
      break;
 801575a:	e0f2      	b.n	8015942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	885b      	ldrh	r3, [r3, #2]
 8015760:	b2db      	uxtb	r3, r3
 8015762:	2b05      	cmp	r3, #5
 8015764:	f200 80ac 	bhi.w	80158c0 <USBD_GetDescriptor+0x204>
 8015768:	a201      	add	r2, pc, #4	; (adr r2, 8015770 <USBD_GetDescriptor+0xb4>)
 801576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801576e:	bf00      	nop
 8015770:	08015789 	.word	0x08015789
 8015774:	080157bd 	.word	0x080157bd
 8015778:	080157f1 	.word	0x080157f1
 801577c:	08015825 	.word	0x08015825
 8015780:	08015859 	.word	0x08015859
 8015784:	0801588d 	.word	0x0801588d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00b      	beq.n	80157ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	7c12      	ldrb	r2, [r2, #16]
 80157a0:	f107 0108 	add.w	r1, r7, #8
 80157a4:	4610      	mov	r0, r2
 80157a6:	4798      	blx	r3
 80157a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80157aa:	e091      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80157ac:	6839      	ldr	r1, [r7, #0]
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f000 facb 	bl	8015d4a <USBD_CtlError>
            err++;
 80157b4:	7afb      	ldrb	r3, [r7, #11]
 80157b6:	3301      	adds	r3, #1
 80157b8:	72fb      	strb	r3, [r7, #11]
          break;
 80157ba:	e089      	b.n	80158d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157c2:	689b      	ldr	r3, [r3, #8]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00b      	beq.n	80157e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157ce:	689b      	ldr	r3, [r3, #8]
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	7c12      	ldrb	r2, [r2, #16]
 80157d4:	f107 0108 	add.w	r1, r7, #8
 80157d8:	4610      	mov	r0, r2
 80157da:	4798      	blx	r3
 80157dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80157de:	e077      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fab1 	bl	8015d4a <USBD_CtlError>
            err++;
 80157e8:	7afb      	ldrb	r3, [r7, #11]
 80157ea:	3301      	adds	r3, #1
 80157ec:	72fb      	strb	r3, [r7, #11]
          break;
 80157ee:	e06f      	b.n	80158d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d00b      	beq.n	8015814 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	7c12      	ldrb	r2, [r2, #16]
 8015808:	f107 0108 	add.w	r1, r7, #8
 801580c:	4610      	mov	r0, r2
 801580e:	4798      	blx	r3
 8015810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015812:	e05d      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 fa97 	bl	8015d4a <USBD_CtlError>
            err++;
 801581c:	7afb      	ldrb	r3, [r7, #11]
 801581e:	3301      	adds	r3, #1
 8015820:	72fb      	strb	r3, [r7, #11]
          break;
 8015822:	e055      	b.n	80158d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801582a:	691b      	ldr	r3, [r3, #16]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d00b      	beq.n	8015848 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015836:	691b      	ldr	r3, [r3, #16]
 8015838:	687a      	ldr	r2, [r7, #4]
 801583a:	7c12      	ldrb	r2, [r2, #16]
 801583c:	f107 0108 	add.w	r1, r7, #8
 8015840:	4610      	mov	r0, r2
 8015842:	4798      	blx	r3
 8015844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015846:	e043      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015848:	6839      	ldr	r1, [r7, #0]
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f000 fa7d 	bl	8015d4a <USBD_CtlError>
            err++;
 8015850:	7afb      	ldrb	r3, [r7, #11]
 8015852:	3301      	adds	r3, #1
 8015854:	72fb      	strb	r3, [r7, #11]
          break;
 8015856:	e03b      	b.n	80158d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801585e:	695b      	ldr	r3, [r3, #20]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d00b      	beq.n	801587c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801586a:	695b      	ldr	r3, [r3, #20]
 801586c:	687a      	ldr	r2, [r7, #4]
 801586e:	7c12      	ldrb	r2, [r2, #16]
 8015870:	f107 0108 	add.w	r1, r7, #8
 8015874:	4610      	mov	r0, r2
 8015876:	4798      	blx	r3
 8015878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801587a:	e029      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801587c:	6839      	ldr	r1, [r7, #0]
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f000 fa63 	bl	8015d4a <USBD_CtlError>
            err++;
 8015884:	7afb      	ldrb	r3, [r7, #11]
 8015886:	3301      	adds	r3, #1
 8015888:	72fb      	strb	r3, [r7, #11]
          break;
 801588a:	e021      	b.n	80158d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015892:	699b      	ldr	r3, [r3, #24]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d00b      	beq.n	80158b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801589e:	699b      	ldr	r3, [r3, #24]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	7c12      	ldrb	r2, [r2, #16]
 80158a4:	f107 0108 	add.w	r1, r7, #8
 80158a8:	4610      	mov	r0, r2
 80158aa:	4798      	blx	r3
 80158ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158ae:	e00f      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80158b0:	6839      	ldr	r1, [r7, #0]
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 fa49 	bl	8015d4a <USBD_CtlError>
            err++;
 80158b8:	7afb      	ldrb	r3, [r7, #11]
 80158ba:	3301      	adds	r3, #1
 80158bc:	72fb      	strb	r3, [r7, #11]
          break;
 80158be:	e007      	b.n	80158d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f000 fa41 	bl	8015d4a <USBD_CtlError>
          err++;
 80158c8:	7afb      	ldrb	r3, [r7, #11]
 80158ca:	3301      	adds	r3, #1
 80158cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80158ce:	bf00      	nop
      }
      break;
 80158d0:	e037      	b.n	8015942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	7c1b      	ldrb	r3, [r3, #16]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d109      	bne.n	80158ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158e2:	f107 0208 	add.w	r2, r7, #8
 80158e6:	4610      	mov	r0, r2
 80158e8:	4798      	blx	r3
 80158ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80158ec:	e029      	b.n	8015942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80158ee:	6839      	ldr	r1, [r7, #0]
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f000 fa2a 	bl	8015d4a <USBD_CtlError>
        err++;
 80158f6:	7afb      	ldrb	r3, [r7, #11]
 80158f8:	3301      	adds	r3, #1
 80158fa:	72fb      	strb	r3, [r7, #11]
      break;
 80158fc:	e021      	b.n	8015942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	7c1b      	ldrb	r3, [r3, #16]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d10d      	bne.n	8015922 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801590e:	f107 0208 	add.w	r2, r7, #8
 8015912:	4610      	mov	r0, r2
 8015914:	4798      	blx	r3
 8015916:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	3301      	adds	r3, #1
 801591c:	2207      	movs	r2, #7
 801591e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015920:	e00f      	b.n	8015942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015922:	6839      	ldr	r1, [r7, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 fa10 	bl	8015d4a <USBD_CtlError>
        err++;
 801592a:	7afb      	ldrb	r3, [r7, #11]
 801592c:	3301      	adds	r3, #1
 801592e:	72fb      	strb	r3, [r7, #11]
      break;
 8015930:	e007      	b.n	8015942 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 fa08 	bl	8015d4a <USBD_CtlError>
      err++;
 801593a:	7afb      	ldrb	r3, [r7, #11]
 801593c:	3301      	adds	r3, #1
 801593e:	72fb      	strb	r3, [r7, #11]
      break;
 8015940:	bf00      	nop
  }

  if (err != 0U)
 8015942:	7afb      	ldrb	r3, [r7, #11]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d11e      	bne.n	8015986 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	88db      	ldrh	r3, [r3, #6]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d016      	beq.n	801597e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015950:	893b      	ldrh	r3, [r7, #8]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00e      	beq.n	8015974 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	88da      	ldrh	r2, [r3, #6]
 801595a:	893b      	ldrh	r3, [r7, #8]
 801595c:	4293      	cmp	r3, r2
 801595e:	bf28      	it	cs
 8015960:	4613      	movcs	r3, r2
 8015962:	b29b      	uxth	r3, r3
 8015964:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015966:	893b      	ldrh	r3, [r7, #8]
 8015968:	461a      	mov	r2, r3
 801596a:	68f9      	ldr	r1, [r7, #12]
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f000 fa5d 	bl	8015e2c <USBD_CtlSendData>
 8015972:	e009      	b.n	8015988 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 f9e7 	bl	8015d4a <USBD_CtlError>
 801597c:	e004      	b.n	8015988 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 faae 	bl	8015ee0 <USBD_CtlSendStatus>
 8015984:	e000      	b.n	8015988 <USBD_GetDescriptor+0x2cc>
    return;
 8015986:	bf00      	nop
  }
}
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop

08015990 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	889b      	ldrh	r3, [r3, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d131      	bne.n	8015a06 <USBD_SetAddress+0x76>
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	88db      	ldrh	r3, [r3, #6]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d12d      	bne.n	8015a06 <USBD_SetAddress+0x76>
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	885b      	ldrh	r3, [r3, #2]
 80159ae:	2b7f      	cmp	r3, #127	; 0x7f
 80159b0:	d829      	bhi.n	8015a06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	885b      	ldrh	r3, [r3, #2]
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	2b03      	cmp	r3, #3
 80159c8:	d104      	bne.n	80159d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80159ca:	6839      	ldr	r1, [r7, #0]
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f000 f9bc 	bl	8015d4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159d2:	e01d      	b.n	8015a10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7bfa      	ldrb	r2, [r7, #15]
 80159d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80159dc:	7bfb      	ldrb	r3, [r7, #15]
 80159de:	4619      	mov	r1, r3
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f000 ff13 	bl	801680c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 fa7a 	bl	8015ee0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80159ec:	7bfb      	ldrb	r3, [r7, #15]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d004      	beq.n	80159fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2202      	movs	r2, #2
 80159f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159fa:	e009      	b.n	8015a10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2201      	movs	r2, #1
 8015a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a04:	e004      	b.n	8015a10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f000 f99e 	bl	8015d4a <USBD_CtlError>
  }
}
 8015a0e:	bf00      	nop
 8015a10:	bf00      	nop
 8015a12:	3710      	adds	r7, #16
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	885b      	ldrh	r3, [r3, #2]
 8015a2a:	b2da      	uxtb	r2, r3
 8015a2c:	4b4e      	ldr	r3, [pc, #312]	; (8015b68 <USBD_SetConfig+0x150>)
 8015a2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015a30:	4b4d      	ldr	r3, [pc, #308]	; (8015b68 <USBD_SetConfig+0x150>)
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d905      	bls.n	8015a44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 f985 	bl	8015d4a <USBD_CtlError>
    return USBD_FAIL;
 8015a40:	2303      	movs	r3, #3
 8015a42:	e08c      	b.n	8015b5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a4a:	b2db      	uxtb	r3, r3
 8015a4c:	2b02      	cmp	r3, #2
 8015a4e:	d002      	beq.n	8015a56 <USBD_SetConfig+0x3e>
 8015a50:	2b03      	cmp	r3, #3
 8015a52:	d029      	beq.n	8015aa8 <USBD_SetConfig+0x90>
 8015a54:	e075      	b.n	8015b42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015a56:	4b44      	ldr	r3, [pc, #272]	; (8015b68 <USBD_SetConfig+0x150>)
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d020      	beq.n	8015aa0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015a5e:	4b42      	ldr	r3, [pc, #264]	; (8015b68 <USBD_SetConfig+0x150>)
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	461a      	mov	r2, r3
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015a68:	4b3f      	ldr	r3, [pc, #252]	; (8015b68 <USBD_SetConfig+0x150>)
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f7fe ffe7 	bl	8014a42 <USBD_SetClassConfig>
 8015a74:	4603      	mov	r3, r0
 8015a76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015a78:	7bfb      	ldrb	r3, [r7, #15]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d008      	beq.n	8015a90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015a7e:	6839      	ldr	r1, [r7, #0]
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 f962 	bl	8015d4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2202      	movs	r2, #2
 8015a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015a8e:	e065      	b.n	8015b5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 fa25 	bl	8015ee0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2203      	movs	r2, #3
 8015a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015a9e:	e05d      	b.n	8015b5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f000 fa1d 	bl	8015ee0 <USBD_CtlSendStatus>
      break;
 8015aa6:	e059      	b.n	8015b5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015aa8:	4b2f      	ldr	r3, [pc, #188]	; (8015b68 <USBD_SetConfig+0x150>)
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d112      	bne.n	8015ad6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2202      	movs	r2, #2
 8015ab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015ab8:	4b2b      	ldr	r3, [pc, #172]	; (8015b68 <USBD_SetConfig+0x150>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	461a      	mov	r2, r3
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ac2:	4b29      	ldr	r3, [pc, #164]	; (8015b68 <USBD_SetConfig+0x150>)
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f7fe ffd6 	bl	8014a7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fa06 	bl	8015ee0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015ad4:	e042      	b.n	8015b5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015ad6:	4b24      	ldr	r3, [pc, #144]	; (8015b68 <USBD_SetConfig+0x150>)
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	461a      	mov	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d02a      	beq.n	8015b3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	4619      	mov	r1, r3
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7fe ffc4 	bl	8014a7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015af2:	4b1d      	ldr	r3, [pc, #116]	; (8015b68 <USBD_SetConfig+0x150>)
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	461a      	mov	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015afc:	4b1a      	ldr	r3, [pc, #104]	; (8015b68 <USBD_SetConfig+0x150>)
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	4619      	mov	r1, r3
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7fe ff9d 	bl	8014a42 <USBD_SetClassConfig>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015b0c:	7bfb      	ldrb	r3, [r7, #15]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00f      	beq.n	8015b32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015b12:	6839      	ldr	r1, [r7, #0]
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f000 f918 	bl	8015d4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	4619      	mov	r1, r3
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f7fe ffa9 	bl	8014a7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2202      	movs	r2, #2
 8015b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015b30:	e014      	b.n	8015b5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 f9d4 	bl	8015ee0 <USBD_CtlSendStatus>
      break;
 8015b38:	e010      	b.n	8015b5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f000 f9d0 	bl	8015ee0 <USBD_CtlSendStatus>
      break;
 8015b40:	e00c      	b.n	8015b5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015b42:	6839      	ldr	r1, [r7, #0]
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 f900 	bl	8015d4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015b4a:	4b07      	ldr	r3, [pc, #28]	; (8015b68 <USBD_SetConfig+0x150>)
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7fe ff92 	bl	8014a7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015b56:	2303      	movs	r3, #3
 8015b58:	73fb      	strb	r3, [r7, #15]
      break;
 8015b5a:	bf00      	nop
  }

  return ret;
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3710      	adds	r7, #16
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop
 8015b68:	200023f4 	.word	0x200023f4

08015b6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	88db      	ldrh	r3, [r3, #6]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d004      	beq.n	8015b88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015b7e:	6839      	ldr	r1, [r7, #0]
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f000 f8e2 	bl	8015d4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015b86:	e023      	b.n	8015bd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b02      	cmp	r3, #2
 8015b92:	dc02      	bgt.n	8015b9a <USBD_GetConfig+0x2e>
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	dc03      	bgt.n	8015ba0 <USBD_GetConfig+0x34>
 8015b98:	e015      	b.n	8015bc6 <USBD_GetConfig+0x5a>
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d00b      	beq.n	8015bb6 <USBD_GetConfig+0x4a>
 8015b9e:	e012      	b.n	8015bc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	3308      	adds	r3, #8
 8015baa:	2201      	movs	r2, #1
 8015bac:	4619      	mov	r1, r3
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 f93c 	bl	8015e2c <USBD_CtlSendData>
        break;
 8015bb4:	e00c      	b.n	8015bd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	3304      	adds	r3, #4
 8015bba:	2201      	movs	r2, #1
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f000 f934 	bl	8015e2c <USBD_CtlSendData>
        break;
 8015bc4:	e004      	b.n	8015bd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015bc6:	6839      	ldr	r1, [r7, #0]
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f000 f8be 	bl	8015d4a <USBD_CtlError>
        break;
 8015bce:	bf00      	nop
}
 8015bd0:	bf00      	nop
 8015bd2:	3708      	adds	r7, #8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	3b01      	subs	r3, #1
 8015bec:	2b02      	cmp	r3, #2
 8015bee:	d81e      	bhi.n	8015c2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	88db      	ldrh	r3, [r3, #6]
 8015bf4:	2b02      	cmp	r3, #2
 8015bf6:	d004      	beq.n	8015c02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015bf8:	6839      	ldr	r1, [r7, #0]
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f000 f8a5 	bl	8015d4a <USBD_CtlError>
        break;
 8015c00:	e01a      	b.n	8015c38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2201      	movs	r2, #1
 8015c06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d005      	beq.n	8015c1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	f043 0202 	orr.w	r2, r3, #2
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	330c      	adds	r3, #12
 8015c22:	2202      	movs	r2, #2
 8015c24:	4619      	mov	r1, r3
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 f900 	bl	8015e2c <USBD_CtlSendData>
      break;
 8015c2c:	e004      	b.n	8015c38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 f88a 	bl	8015d4a <USBD_CtlError>
      break;
 8015c36:	bf00      	nop
  }
}
 8015c38:	bf00      	nop
 8015c3a:	3708      	adds	r7, #8
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	885b      	ldrh	r3, [r3, #2]
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d107      	bne.n	8015c62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2201      	movs	r2, #1
 8015c56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015c5a:	6878      	ldr	r0, [r7, #4]
 8015c5c:	f000 f940 	bl	8015ee0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015c60:	e013      	b.n	8015c8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	885b      	ldrh	r3, [r3, #2]
 8015c66:	2b02      	cmp	r3, #2
 8015c68:	d10b      	bne.n	8015c82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	889b      	ldrh	r3, [r3, #4]
 8015c6e:	0a1b      	lsrs	r3, r3, #8
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	b2da      	uxtb	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 f930 	bl	8015ee0 <USBD_CtlSendStatus>
}
 8015c80:	e003      	b.n	8015c8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015c82:	6839      	ldr	r1, [r7, #0]
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f000 f860 	bl	8015d4a <USBD_CtlError>
}
 8015c8a:	bf00      	nop
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b082      	sub	sp, #8
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	6078      	str	r0, [r7, #4]
 8015c9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	2b02      	cmp	r3, #2
 8015ca8:	d80b      	bhi.n	8015cc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	885b      	ldrh	r3, [r3, #2]
 8015cae:	2b01      	cmp	r3, #1
 8015cb0:	d10c      	bne.n	8015ccc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f910 	bl	8015ee0 <USBD_CtlSendStatus>
      }
      break;
 8015cc0:	e004      	b.n	8015ccc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015cc2:	6839      	ldr	r1, [r7, #0]
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f840 	bl	8015d4a <USBD_CtlError>
      break;
 8015cca:	e000      	b.n	8015cce <USBD_ClrFeature+0x3c>
      break;
 8015ccc:	bf00      	nop
  }
}
 8015cce:	bf00      	nop
 8015cd0:	3708      	adds	r7, #8
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b084      	sub	sp, #16
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	781a      	ldrb	r2, [r3, #0]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	3301      	adds	r3, #1
 8015cf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	781a      	ldrb	r2, [r3, #0]
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015d00:	68f8      	ldr	r0, [r7, #12]
 8015d02:	f7ff fa41 	bl	8015188 <SWAPBYTE>
 8015d06:	4603      	mov	r3, r0
 8015d08:	461a      	mov	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	3301      	adds	r3, #1
 8015d12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	3301      	adds	r3, #1
 8015d18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015d1a:	68f8      	ldr	r0, [r7, #12]
 8015d1c:	f7ff fa34 	bl	8015188 <SWAPBYTE>
 8015d20:	4603      	mov	r3, r0
 8015d22:	461a      	mov	r2, r3
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	3301      	adds	r3, #1
 8015d32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f7ff fa27 	bl	8015188 <SWAPBYTE>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	80da      	strh	r2, [r3, #6]
}
 8015d42:	bf00      	nop
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b082      	sub	sp, #8
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
 8015d52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d54:	2180      	movs	r1, #128	; 0x80
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f000 fcee 	bl	8016738 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 fcea 	bl	8016738 <USBD_LL_StallEP>
}
 8015d64:	bf00      	nop
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d036      	beq.n	8015df0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015d86:	6938      	ldr	r0, [r7, #16]
 8015d88:	f000 f836 	bl	8015df8 <USBD_GetLen>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	3301      	adds	r3, #1
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	b29a      	uxth	r2, r3
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015d9a:	7dfb      	ldrb	r3, [r7, #23]
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	4413      	add	r3, r2
 8015da0:	687a      	ldr	r2, [r7, #4]
 8015da2:	7812      	ldrb	r2, [r2, #0]
 8015da4:	701a      	strb	r2, [r3, #0]
  idx++;
 8015da6:	7dfb      	ldrb	r3, [r7, #23]
 8015da8:	3301      	adds	r3, #1
 8015daa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015dac:	7dfb      	ldrb	r3, [r7, #23]
 8015dae:	68ba      	ldr	r2, [r7, #8]
 8015db0:	4413      	add	r3, r2
 8015db2:	2203      	movs	r2, #3
 8015db4:	701a      	strb	r2, [r3, #0]
  idx++;
 8015db6:	7dfb      	ldrb	r3, [r7, #23]
 8015db8:	3301      	adds	r3, #1
 8015dba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015dbc:	e013      	b.n	8015de6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015dbe:	7dfb      	ldrb	r3, [r7, #23]
 8015dc0:	68ba      	ldr	r2, [r7, #8]
 8015dc2:	4413      	add	r3, r2
 8015dc4:	693a      	ldr	r2, [r7, #16]
 8015dc6:	7812      	ldrb	r2, [r2, #0]
 8015dc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	3301      	adds	r3, #1
 8015dce:	613b      	str	r3, [r7, #16]
    idx++;
 8015dd0:	7dfb      	ldrb	r3, [r7, #23]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015dd6:	7dfb      	ldrb	r3, [r7, #23]
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	4413      	add	r3, r2
 8015ddc:	2200      	movs	r2, #0
 8015dde:	701a      	strb	r2, [r3, #0]
    idx++;
 8015de0:	7dfb      	ldrb	r3, [r7, #23]
 8015de2:	3301      	adds	r3, #1
 8015de4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d1e7      	bne.n	8015dbe <USBD_GetString+0x52>
 8015dee:	e000      	b.n	8015df2 <USBD_GetString+0x86>
    return;
 8015df0:	bf00      	nop
  }
}
 8015df2:	3718      	adds	r7, #24
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015e00:	2300      	movs	r3, #0
 8015e02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015e08:	e005      	b.n	8015e16 <USBD_GetLen+0x1e>
  {
    len++;
 8015e0a:	7bfb      	ldrb	r3, [r7, #15]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	3301      	adds	r3, #1
 8015e14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d1f5      	bne.n	8015e0a <USBD_GetLen+0x12>
  }

  return len;
 8015e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3714      	adds	r7, #20
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr

08015e2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2202      	movs	r2, #2
 8015e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	687a      	ldr	r2, [r7, #4]
 8015e44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	68ba      	ldr	r2, [r7, #8]
 8015e50:	2100      	movs	r1, #0
 8015e52:	68f8      	ldr	r0, [r7, #12]
 8015e54:	f000 fcf9 	bl	801684a <USBD_LL_Transmit>

  return USBD_OK;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3710      	adds	r7, #16
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b084      	sub	sp, #16
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	60f8      	str	r0, [r7, #12]
 8015e6a:	60b9      	str	r1, [r7, #8]
 8015e6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	68ba      	ldr	r2, [r7, #8]
 8015e72:	2100      	movs	r1, #0
 8015e74:	68f8      	ldr	r0, [r7, #12]
 8015e76:	f000 fce8 	bl	801684a <USBD_LL_Transmit>

  return USBD_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3710      	adds	r7, #16
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2203      	movs	r2, #3
 8015e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	2100      	movs	r1, #0
 8015eae:	68f8      	ldr	r0, [r7, #12]
 8015eb0:	f000 fcec 	bl	801688c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b084      	sub	sp, #16
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	60f8      	str	r0, [r7, #12]
 8015ec6:	60b9      	str	r1, [r7, #8]
 8015ec8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	68ba      	ldr	r2, [r7, #8]
 8015ece:	2100      	movs	r1, #0
 8015ed0:	68f8      	ldr	r0, [r7, #12]
 8015ed2:	f000 fcdb 	bl	801688c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ed6:	2300      	movs	r3, #0
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3710      	adds	r7, #16
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2204      	movs	r2, #4
 8015eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 fca7 	bl	801684a <USBD_LL_Transmit>

  return USBD_OK;
 8015efc:	2300      	movs	r3, #0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3708      	adds	r7, #8
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015f06:	b580      	push	{r7, lr}
 8015f08:	b082      	sub	sp, #8
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2205      	movs	r2, #5
 8015f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015f16:	2300      	movs	r3, #0
 8015f18:	2200      	movs	r2, #0
 8015f1a:	2100      	movs	r1, #0
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 fcb5 	bl	801688c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015f22:	2300      	movs	r3, #0
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3708      	adds	r7, #8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8015f30:	2201      	movs	r2, #1
 8015f32:	4916      	ldr	r1, [pc, #88]	; (8015f8c <MX_USB_DEVICE_Init+0x60>)
 8015f34:	4816      	ldr	r0, [pc, #88]	; (8015f90 <MX_USB_DEVICE_Init+0x64>)
 8015f36:	f7fe fd07 	bl	8014948 <USBD_Init>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d003      	beq.n	8015f48 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8015f40:	2149      	movs	r1, #73	; 0x49
 8015f42:	4814      	ldr	r0, [pc, #80]	; (8015f94 <MX_USB_DEVICE_Init+0x68>)
 8015f44:	f7f0 ffb8 	bl	8006eb8 <_Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8015f48:	4913      	ldr	r1, [pc, #76]	; (8015f98 <MX_USB_DEVICE_Init+0x6c>)
 8015f4a:	4811      	ldr	r0, [pc, #68]	; (8015f90 <MX_USB_DEVICE_Init+0x64>)
 8015f4c:	f7fe fd2c 	bl	80149a8 <USBD_RegisterClass>
 8015f50:	4603      	mov	r3, r0
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d003      	beq.n	8015f5e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
 8015f56:	214d      	movs	r1, #77	; 0x4d
 8015f58:	480e      	ldr	r0, [pc, #56]	; (8015f94 <MX_USB_DEVICE_Init+0x68>)
 8015f5a:	f7f0 ffad 	bl	8006eb8 <_Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8015f5e:	490f      	ldr	r1, [pc, #60]	; (8015f9c <MX_USB_DEVICE_Init+0x70>)
 8015f60:	480b      	ldr	r0, [pc, #44]	; (8015f90 <MX_USB_DEVICE_Init+0x64>)
 8015f62:	f7fe fc61 	bl	8014828 <USBD_CDC_RegisterInterface>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d003      	beq.n	8015f74 <MX_USB_DEVICE_Init+0x48>
  {
    Error_Handler();
 8015f6c:	2151      	movs	r1, #81	; 0x51
 8015f6e:	4809      	ldr	r0, [pc, #36]	; (8015f94 <MX_USB_DEVICE_Init+0x68>)
 8015f70:	f7f0 ffa2 	bl	8006eb8 <_Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015f74:	4806      	ldr	r0, [pc, #24]	; (8015f90 <MX_USB_DEVICE_Init+0x64>)
 8015f76:	f7fe fd4d 	bl	8014a14 <USBD_Start>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d003      	beq.n	8015f88 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 8015f80:	2155      	movs	r1, #85	; 0x55
 8015f82:	4804      	ldr	r0, [pc, #16]	; (8015f94 <MX_USB_DEVICE_Init+0x68>)
 8015f84:	f7f0 ff98 	bl	8006eb8 <_Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015f88:	bf00      	nop
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	200002a4 	.word	0x200002a4
 8015f90:	200023f8 	.word	0x200023f8
 8015f94:	080186e4 	.word	0x080186e4
 8015f98:	20000210 	.word	0x20000210
 8015f9c:	20000290 	.word	0x20000290

08015fa0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	4905      	ldr	r1, [pc, #20]	; (8015fbc <CDC_Init_HS+0x1c>)
 8015fa8:	4805      	ldr	r0, [pc, #20]	; (8015fc0 <CDC_Init_HS+0x20>)
 8015faa:	f7fe fc57 	bl	801485c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8015fae:	4905      	ldr	r1, [pc, #20]	; (8015fc4 <CDC_Init_HS+0x24>)
 8015fb0:	4803      	ldr	r0, [pc, #12]	; (8015fc0 <CDC_Init_HS+0x20>)
 8015fb2:	f7fe fc75 	bl	80148a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015fb6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	20002754 	.word	0x20002754
 8015fc0:	200023f8 	.word	0x200023f8
 8015fc4:	200026d4 	.word	0x200026d4

08015fc8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8015fc8:	b480      	push	{r7}
 8015fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8015fcc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr

08015fd8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	4603      	mov	r3, r0
 8015fe0:	6039      	str	r1, [r7, #0]
 8015fe2:	71fb      	strb	r3, [r7, #7]
 8015fe4:	4613      	mov	r3, r2
 8015fe6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8015fe8:	79fb      	ldrb	r3, [r7, #7]
 8015fea:	2b23      	cmp	r3, #35	; 0x23
 8015fec:	d84a      	bhi.n	8016084 <CDC_Control_HS+0xac>
 8015fee:	a201      	add	r2, pc, #4	; (adr r2, 8015ff4 <CDC_Control_HS+0x1c>)
 8015ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff4:	08016085 	.word	0x08016085
 8015ff8:	08016085 	.word	0x08016085
 8015ffc:	08016085 	.word	0x08016085
 8016000:	08016085 	.word	0x08016085
 8016004:	08016085 	.word	0x08016085
 8016008:	08016085 	.word	0x08016085
 801600c:	08016085 	.word	0x08016085
 8016010:	08016085 	.word	0x08016085
 8016014:	08016085 	.word	0x08016085
 8016018:	08016085 	.word	0x08016085
 801601c:	08016085 	.word	0x08016085
 8016020:	08016085 	.word	0x08016085
 8016024:	08016085 	.word	0x08016085
 8016028:	08016085 	.word	0x08016085
 801602c:	08016085 	.word	0x08016085
 8016030:	08016085 	.word	0x08016085
 8016034:	08016085 	.word	0x08016085
 8016038:	08016085 	.word	0x08016085
 801603c:	08016085 	.word	0x08016085
 8016040:	08016085 	.word	0x08016085
 8016044:	08016085 	.word	0x08016085
 8016048:	08016085 	.word	0x08016085
 801604c:	08016085 	.word	0x08016085
 8016050:	08016085 	.word	0x08016085
 8016054:	08016085 	.word	0x08016085
 8016058:	08016085 	.word	0x08016085
 801605c:	08016085 	.word	0x08016085
 8016060:	08016085 	.word	0x08016085
 8016064:	08016085 	.word	0x08016085
 8016068:	08016085 	.word	0x08016085
 801606c:	08016085 	.word	0x08016085
 8016070:	08016085 	.word	0x08016085
 8016074:	08016085 	.word	0x08016085
 8016078:	08016085 	.word	0x08016085
 801607c:	08016085 	.word	0x08016085
 8016080:	08016085 	.word	0x08016085
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016084:	bf00      	nop
  }

  return (USBD_OK);
 8016086:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016088:	4618      	mov	r0, r3
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr

08016094 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801609e:	6879      	ldr	r1, [r7, #4]
 80160a0:	4805      	ldr	r0, [pc, #20]	; (80160b8 <CDC_Receive_HS+0x24>)
 80160a2:	f7fe fbfd 	bl	80148a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80160a6:	4804      	ldr	r0, [pc, #16]	; (80160b8 <CDC_Receive_HS+0x24>)
 80160a8:	f7fe fc18 	bl	80148dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80160ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3708      	adds	r7, #8
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	200023f8 	.word	0x200023f8

080160bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80160bc:	b480      	push	{r7}
 80160be:	b087      	sub	sp, #28
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	4613      	mov	r3, r2
 80160c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80160ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	371c      	adds	r7, #28
 80160d6:	46bd      	mov	sp, r7
 80160d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160dc:	4770      	bx	lr
	...

080160e0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	4603      	mov	r3, r0
 80160e8:	6039      	str	r1, [r7, #0]
 80160ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	2212      	movs	r2, #18
 80160f0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80160f2:	4b03      	ldr	r3, [pc, #12]	; (8016100 <USBD_HS_DeviceDescriptor+0x20>)
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	370c      	adds	r7, #12
 80160f8:	46bd      	mov	sp, r7
 80160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fe:	4770      	bx	lr
 8016100:	200002c0 	.word	0x200002c0

08016104 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016104:	b480      	push	{r7}
 8016106:	b083      	sub	sp, #12
 8016108:	af00      	add	r7, sp, #0
 801610a:	4603      	mov	r3, r0
 801610c:	6039      	str	r1, [r7, #0]
 801610e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	2204      	movs	r2, #4
 8016114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016116:	4b03      	ldr	r3, [pc, #12]	; (8016124 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016118:	4618      	mov	r0, r3
 801611a:	370c      	adds	r7, #12
 801611c:	46bd      	mov	sp, r7
 801611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016122:	4770      	bx	lr
 8016124:	200002d4 	.word	0x200002d4

08016128 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	4603      	mov	r3, r0
 8016130:	6039      	str	r1, [r7, #0]
 8016132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016134:	79fb      	ldrb	r3, [r7, #7]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d105      	bne.n	8016146 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801613a:	683a      	ldr	r2, [r7, #0]
 801613c:	4907      	ldr	r1, [pc, #28]	; (801615c <USBD_HS_ProductStrDescriptor+0x34>)
 801613e:	4808      	ldr	r0, [pc, #32]	; (8016160 <USBD_HS_ProductStrDescriptor+0x38>)
 8016140:	f7ff fe14 	bl	8015d6c <USBD_GetString>
 8016144:	e004      	b.n	8016150 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016146:	683a      	ldr	r2, [r7, #0]
 8016148:	4904      	ldr	r1, [pc, #16]	; (801615c <USBD_HS_ProductStrDescriptor+0x34>)
 801614a:	4805      	ldr	r0, [pc, #20]	; (8016160 <USBD_HS_ProductStrDescriptor+0x38>)
 801614c:	f7ff fe0e 	bl	8015d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016150:	4b02      	ldr	r3, [pc, #8]	; (801615c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016152:	4618      	mov	r0, r3
 8016154:	3708      	adds	r7, #8
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	bf00      	nop
 801615c:	200028e0 	.word	0x200028e0
 8016160:	08018704 	.word	0x08018704

08016164 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	4603      	mov	r3, r0
 801616c:	6039      	str	r1, [r7, #0]
 801616e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016170:	683a      	ldr	r2, [r7, #0]
 8016172:	4904      	ldr	r1, [pc, #16]	; (8016184 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016174:	4804      	ldr	r0, [pc, #16]	; (8016188 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016176:	f7ff fdf9 	bl	8015d6c <USBD_GetString>
  return USBD_StrDesc;
 801617a:	4b02      	ldr	r3, [pc, #8]	; (8016184 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	200028e0 	.word	0x200028e0
 8016188:	08018714 	.word	0x08018714

0801618c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
 8016192:	4603      	mov	r3, r0
 8016194:	6039      	str	r1, [r7, #0]
 8016196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	221a      	movs	r2, #26
 801619c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801619e:	f000 f843 	bl	8016228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80161a2:	4b02      	ldr	r3, [pc, #8]	; (80161ac <USBD_HS_SerialStrDescriptor+0x20>)
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3708      	adds	r7, #8
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	200002d8 	.word	0x200002d8

080161b0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	4603      	mov	r3, r0
 80161b8:	6039      	str	r1, [r7, #0]
 80161ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80161bc:	79fb      	ldrb	r3, [r7, #7]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d105      	bne.n	80161ce <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80161c2:	683a      	ldr	r2, [r7, #0]
 80161c4:	4907      	ldr	r1, [pc, #28]	; (80161e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80161c6:	4808      	ldr	r0, [pc, #32]	; (80161e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80161c8:	f7ff fdd0 	bl	8015d6c <USBD_GetString>
 80161cc:	e004      	b.n	80161d8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80161ce:	683a      	ldr	r2, [r7, #0]
 80161d0:	4904      	ldr	r1, [pc, #16]	; (80161e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80161d2:	4805      	ldr	r0, [pc, #20]	; (80161e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80161d4:	f7ff fdca 	bl	8015d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80161d8:	4b02      	ldr	r3, [pc, #8]	; (80161e4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3708      	adds	r7, #8
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
 80161e2:	bf00      	nop
 80161e4:	200028e0 	.word	0x200028e0
 80161e8:	08018728 	.word	0x08018728

080161ec <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	4603      	mov	r3, r0
 80161f4:	6039      	str	r1, [r7, #0]
 80161f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80161f8:	79fb      	ldrb	r3, [r7, #7]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d105      	bne.n	801620a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80161fe:	683a      	ldr	r2, [r7, #0]
 8016200:	4907      	ldr	r1, [pc, #28]	; (8016220 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016202:	4808      	ldr	r0, [pc, #32]	; (8016224 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016204:	f7ff fdb2 	bl	8015d6c <USBD_GetString>
 8016208:	e004      	b.n	8016214 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801620a:	683a      	ldr	r2, [r7, #0]
 801620c:	4904      	ldr	r1, [pc, #16]	; (8016220 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801620e:	4805      	ldr	r0, [pc, #20]	; (8016224 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016210:	f7ff fdac 	bl	8015d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016214:	4b02      	ldr	r3, [pc, #8]	; (8016220 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016216:	4618      	mov	r0, r3
 8016218:	3708      	adds	r7, #8
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	200028e0 	.word	0x200028e0
 8016224:	08018734 	.word	0x08018734

08016228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801622e:	4b0f      	ldr	r3, [pc, #60]	; (801626c <Get_SerialNum+0x44>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016234:	4b0e      	ldr	r3, [pc, #56]	; (8016270 <Get_SerialNum+0x48>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801623a:	4b0e      	ldr	r3, [pc, #56]	; (8016274 <Get_SerialNum+0x4c>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	4413      	add	r3, r2
 8016246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d009      	beq.n	8016262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801624e:	2208      	movs	r2, #8
 8016250:	4909      	ldr	r1, [pc, #36]	; (8016278 <Get_SerialNum+0x50>)
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f000 f814 	bl	8016280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016258:	2204      	movs	r2, #4
 801625a:	4908      	ldr	r1, [pc, #32]	; (801627c <Get_SerialNum+0x54>)
 801625c:	68b8      	ldr	r0, [r7, #8]
 801625e:	f000 f80f 	bl	8016280 <IntToUnicode>
  }
}
 8016262:	bf00      	nop
 8016264:	3710      	adds	r7, #16
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	1fff7a10 	.word	0x1fff7a10
 8016270:	1fff7a14 	.word	0x1fff7a14
 8016274:	1fff7a18 	.word	0x1fff7a18
 8016278:	200002da 	.word	0x200002da
 801627c:	200002ea 	.word	0x200002ea

08016280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016280:	b480      	push	{r7}
 8016282:	b087      	sub	sp, #28
 8016284:	af00      	add	r7, sp, #0
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	4613      	mov	r3, r2
 801628c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801628e:	2300      	movs	r3, #0
 8016290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016292:	2300      	movs	r3, #0
 8016294:	75fb      	strb	r3, [r7, #23]
 8016296:	e027      	b.n	80162e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	0f1b      	lsrs	r3, r3, #28
 801629c:	2b09      	cmp	r3, #9
 801629e:	d80b      	bhi.n	80162b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	0f1b      	lsrs	r3, r3, #28
 80162a4:	b2da      	uxtb	r2, r3
 80162a6:	7dfb      	ldrb	r3, [r7, #23]
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4619      	mov	r1, r3
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	440b      	add	r3, r1
 80162b0:	3230      	adds	r2, #48	; 0x30
 80162b2:	b2d2      	uxtb	r2, r2
 80162b4:	701a      	strb	r2, [r3, #0]
 80162b6:	e00a      	b.n	80162ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	0f1b      	lsrs	r3, r3, #28
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	7dfb      	ldrb	r3, [r7, #23]
 80162c0:	005b      	lsls	r3, r3, #1
 80162c2:	4619      	mov	r1, r3
 80162c4:	68bb      	ldr	r3, [r7, #8]
 80162c6:	440b      	add	r3, r1
 80162c8:	3237      	adds	r2, #55	; 0x37
 80162ca:	b2d2      	uxtb	r2, r2
 80162cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	011b      	lsls	r3, r3, #4
 80162d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80162d4:	7dfb      	ldrb	r3, [r7, #23]
 80162d6:	005b      	lsls	r3, r3, #1
 80162d8:	3301      	adds	r3, #1
 80162da:	68ba      	ldr	r2, [r7, #8]
 80162dc:	4413      	add	r3, r2
 80162de:	2200      	movs	r2, #0
 80162e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80162e2:	7dfb      	ldrb	r3, [r7, #23]
 80162e4:	3301      	adds	r3, #1
 80162e6:	75fb      	strb	r3, [r7, #23]
 80162e8:	7dfa      	ldrb	r2, [r7, #23]
 80162ea:	79fb      	ldrb	r3, [r7, #7]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d3d3      	bcc.n	8016298 <IntToUnicode+0x18>
  }
}
 80162f0:	bf00      	nop
 80162f2:	bf00      	nop
 80162f4:	371c      	adds	r7, #28
 80162f6:	46bd      	mov	sp, r7
 80162f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fc:	4770      	bx	lr
	...

08016300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08a      	sub	sp, #40	; 0x28
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016308:	f107 0314 	add.w	r3, r7, #20
 801630c:	2200      	movs	r2, #0
 801630e:	601a      	str	r2, [r3, #0]
 8016310:	605a      	str	r2, [r3, #4]
 8016312:	609a      	str	r2, [r3, #8]
 8016314:	60da      	str	r2, [r3, #12]
 8016316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4a2c      	ldr	r2, [pc, #176]	; (80163d0 <HAL_PCD_MspInit+0xd0>)
 801631e:	4293      	cmp	r3, r2
 8016320:	d152      	bne.n	80163c8 <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016322:	2300      	movs	r3, #0
 8016324:	613b      	str	r3, [r7, #16]
 8016326:	4b2b      	ldr	r3, [pc, #172]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 8016328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801632a:	4a2a      	ldr	r2, [pc, #168]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 801632c:	f043 0302 	orr.w	r3, r3, #2
 8016330:	6313      	str	r3, [r2, #48]	; 0x30
 8016332:	4b28      	ldr	r3, [pc, #160]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 8016334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016336:	f003 0302 	and.w	r3, r3, #2
 801633a:	613b      	str	r3, [r7, #16]
 801633c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DP_Pin;
 801633e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8016342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016344:	2302      	movs	r3, #2
 8016346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016348:	2300      	movs	r3, #0
 801634a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801634c:	2300      	movs	r3, #0
 801634e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8016350:	230c      	movs	r3, #12
 8016352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016354:	f107 0314 	add.w	r3, r7, #20
 8016358:	4619      	mov	r1, r3
 801635a:	481f      	ldr	r0, [pc, #124]	; (80163d8 <HAL_PCD_MspInit+0xd8>)
 801635c:	f7f7 fe9a 	bl	800e094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8016360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016366:	2300      	movs	r3, #0
 8016368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801636a:	2300      	movs	r3, #0
 801636c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801636e:	f107 0314 	add.w	r3, r7, #20
 8016372:	4619      	mov	r1, r3
 8016374:	4818      	ldr	r0, [pc, #96]	; (80163d8 <HAL_PCD_MspInit+0xd8>)
 8016376:	f7f7 fe8d 	bl	800e094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 801637a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801637e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016380:	2302      	movs	r3, #2
 8016382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016384:	2300      	movs	r3, #0
 8016386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016388:	2303      	movs	r3, #3
 801638a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801638c:	230c      	movs	r3, #12
 801638e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016390:	f107 0314 	add.w	r3, r7, #20
 8016394:	4619      	mov	r1, r3
 8016396:	4810      	ldr	r0, [pc, #64]	; (80163d8 <HAL_PCD_MspInit+0xd8>)
 8016398:	f7f7 fe7c 	bl	800e094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801639c:	2300      	movs	r3, #0
 801639e:	60fb      	str	r3, [r7, #12]
 80163a0:	4b0c      	ldr	r3, [pc, #48]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 80163a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163a4:	4a0b      	ldr	r2, [pc, #44]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 80163a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80163aa:	6313      	str	r3, [r2, #48]	; 0x30
 80163ac:	4b09      	ldr	r3, [pc, #36]	; (80163d4 <HAL_PCD_MspInit+0xd4>)
 80163ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80163b4:	60fb      	str	r3, [r7, #12]
 80163b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80163b8:	2200      	movs	r2, #0
 80163ba:	2100      	movs	r1, #0
 80163bc:	204d      	movs	r0, #77	; 0x4d
 80163be:	f7f6 ff3e 	bl	800d23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80163c2:	204d      	movs	r0, #77	; 0x4d
 80163c4:	f7f6 ff57 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80163c8:	bf00      	nop
 80163ca:	3728      	adds	r7, #40	; 0x28
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	40040000 	.word	0x40040000
 80163d4:	40023800 	.word	0x40023800
 80163d8:	40020400 	.word	0x40020400

080163dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80163f0:	4619      	mov	r1, r3
 80163f2:	4610      	mov	r0, r2
 80163f4:	f7fe fb5b 	bl	8014aae <USBD_LL_SetupStage>
}
 80163f8:	bf00      	nop
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	460b      	mov	r3, r1
 801640a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016412:	78fa      	ldrb	r2, [r7, #3]
 8016414:	6879      	ldr	r1, [r7, #4]
 8016416:	4613      	mov	r3, r2
 8016418:	00db      	lsls	r3, r3, #3
 801641a:	4413      	add	r3, r2
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	440b      	add	r3, r1
 8016420:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	78fb      	ldrb	r3, [r7, #3]
 8016428:	4619      	mov	r1, r3
 801642a:	f7fe fb95 	bl	8014b58 <USBD_LL_DataOutStage>
}
 801642e:	bf00      	nop
 8016430:	3708      	adds	r7, #8
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}

08016436 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016436:	b580      	push	{r7, lr}
 8016438:	b082      	sub	sp, #8
 801643a:	af00      	add	r7, sp, #0
 801643c:	6078      	str	r0, [r7, #4]
 801643e:	460b      	mov	r3, r1
 8016440:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016448:	78fa      	ldrb	r2, [r7, #3]
 801644a:	6879      	ldr	r1, [r7, #4]
 801644c:	4613      	mov	r3, r2
 801644e:	00db      	lsls	r3, r3, #3
 8016450:	4413      	add	r3, r2
 8016452:	009b      	lsls	r3, r3, #2
 8016454:	440b      	add	r3, r1
 8016456:	334c      	adds	r3, #76	; 0x4c
 8016458:	681a      	ldr	r2, [r3, #0]
 801645a:	78fb      	ldrb	r3, [r7, #3]
 801645c:	4619      	mov	r1, r3
 801645e:	f7fe fc2e 	bl	8014cbe <USBD_LL_DataInStage>
}
 8016462:	bf00      	nop
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016478:	4618      	mov	r0, r3
 801647a:	f7fe fd62 	bl	8014f42 <USBD_LL_SOF>
}
 801647e:	bf00      	nop
 8016480:	3708      	adds	r7, #8
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
	...

08016488 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016490:	2301      	movs	r3, #1
 8016492:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d102      	bne.n	80164a2 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801649c:	2300      	movs	r3, #0
 801649e:	73fb      	strb	r3, [r7, #15]
 80164a0:	e00a      	b.n	80164b8 <HAL_PCD_ResetCallback+0x30>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	68db      	ldr	r3, [r3, #12]
 80164a6:	2b02      	cmp	r3, #2
 80164a8:	d102      	bne.n	80164b0 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80164aa:	2301      	movs	r3, #1
 80164ac:	73fb      	strb	r3, [r7, #15]
 80164ae:	e003      	b.n	80164b8 <HAL_PCD_ResetCallback+0x30>
  }
  else
  {
    Error_Handler();
 80164b0:	21e0      	movs	r1, #224	; 0xe0
 80164b2:	480a      	ldr	r0, [pc, #40]	; (80164dc <HAL_PCD_ResetCallback+0x54>)
 80164b4:	f7f0 fd00 	bl	8006eb8 <_Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80164be:	7bfa      	ldrb	r2, [r7, #15]
 80164c0:	4611      	mov	r1, r2
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7fe fcff 	bl	8014ec6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fe fca7 	bl	8014e22 <USBD_LL_Reset>
}
 80164d4:	bf00      	nop
 80164d6:	3710      	adds	r7, #16
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}
 80164dc:	08018744 	.word	0x08018744

080164e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b082      	sub	sp, #8
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fe fcf9 	bl	8014ee6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	6812      	ldr	r2, [r2, #0]
 8016502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016506:	f043 0301 	orr.w	r3, r3, #1
 801650a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6a1b      	ldr	r3, [r3, #32]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d005      	beq.n	8016520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016514:	4b04      	ldr	r3, [pc, #16]	; (8016528 <HAL_PCD_SuspendCallback+0x48>)
 8016516:	691b      	ldr	r3, [r3, #16]
 8016518:	4a03      	ldr	r2, [pc, #12]	; (8016528 <HAL_PCD_SuspendCallback+0x48>)
 801651a:	f043 0306 	orr.w	r3, r3, #6
 801651e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016520:	bf00      	nop
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}
 8016528:	e000ed00 	.word	0xe000ed00

0801652c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801653a:	4618      	mov	r0, r3
 801653c:	f7fe fce9 	bl	8014f12 <USBD_LL_Resume>
}
 8016540:	bf00      	nop
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	460b      	mov	r3, r1
 8016552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801655a:	78fa      	ldrb	r2, [r7, #3]
 801655c:	4611      	mov	r1, r2
 801655e:	4618      	mov	r0, r3
 8016560:	f7fe fd41 	bl	8014fe6 <USBD_LL_IsoOUTIncomplete>
}
 8016564:	bf00      	nop
 8016566:	3708      	adds	r7, #8
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}

0801656c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	460b      	mov	r3, r1
 8016576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801657e:	78fa      	ldrb	r2, [r7, #3]
 8016580:	4611      	mov	r1, r2
 8016582:	4618      	mov	r0, r3
 8016584:	f7fe fcfd 	bl	8014f82 <USBD_LL_IsoINIncomplete>
}
 8016588:	bf00      	nop
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fe fd53 	bl	801504a <USBD_LL_DevConnected>
}
 80165a4:	bf00      	nop
 80165a6:	3708      	adds	r7, #8
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}

080165ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7fe fd50 	bl	8015060 <USBD_LL_DevDisconnected>
}
 80165c0:	bf00      	nop
 80165c2:	3708      	adds	r7, #8
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d143      	bne.n	8016660 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80165d8:	4a24      	ldr	r2, [pc, #144]	; (801666c <USBD_LL_Init+0xa4>)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	4a22      	ldr	r2, [pc, #136]	; (801666c <USBD_LL_Init+0xa4>)
 80165e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80165e8:	4b20      	ldr	r3, [pc, #128]	; (801666c <USBD_LL_Init+0xa4>)
 80165ea:	4a21      	ldr	r2, [pc, #132]	; (8016670 <USBD_LL_Init+0xa8>)
 80165ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80165ee:	4b1f      	ldr	r3, [pc, #124]	; (801666c <USBD_LL_Init+0xa4>)
 80165f0:	2206      	movs	r2, #6
 80165f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80165f4:	4b1d      	ldr	r3, [pc, #116]	; (801666c <USBD_LL_Init+0xa4>)
 80165f6:	2202      	movs	r2, #2
 80165f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80165fa:	4b1c      	ldr	r3, [pc, #112]	; (801666c <USBD_LL_Init+0xa4>)
 80165fc:	2200      	movs	r2, #0
 80165fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016600:	4b1a      	ldr	r3, [pc, #104]	; (801666c <USBD_LL_Init+0xa4>)
 8016602:	2202      	movs	r2, #2
 8016604:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016606:	4b19      	ldr	r3, [pc, #100]	; (801666c <USBD_LL_Init+0xa4>)
 8016608:	2200      	movs	r2, #0
 801660a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801660c:	4b17      	ldr	r3, [pc, #92]	; (801666c <USBD_LL_Init+0xa4>)
 801660e:	2200      	movs	r2, #0
 8016610:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016612:	4b16      	ldr	r3, [pc, #88]	; (801666c <USBD_LL_Init+0xa4>)
 8016614:	2200      	movs	r2, #0
 8016616:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016618:	4b14      	ldr	r3, [pc, #80]	; (801666c <USBD_LL_Init+0xa4>)
 801661a:	2200      	movs	r2, #0
 801661c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801661e:	4b13      	ldr	r3, [pc, #76]	; (801666c <USBD_LL_Init+0xa4>)
 8016620:	2200      	movs	r2, #0
 8016622:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016624:	4b11      	ldr	r3, [pc, #68]	; (801666c <USBD_LL_Init+0xa4>)
 8016626:	2200      	movs	r2, #0
 8016628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801662a:	4810      	ldr	r0, [pc, #64]	; (801666c <USBD_LL_Init+0xa4>)
 801662c:	f7f7 ff33 	bl	800e496 <HAL_PCD_Init>
 8016630:	4603      	mov	r3, r0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d004      	beq.n	8016640 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8016636:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801663a:	480e      	ldr	r0, [pc, #56]	; (8016674 <USBD_LL_Init+0xac>)
 801663c:	f7f0 fc3c 	bl	8006eb8 <_Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016644:	4809      	ldr	r0, [pc, #36]	; (801666c <USBD_LL_Init+0xa4>)
 8016646:	f7f9 f986 	bl	800f956 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801664a:	2280      	movs	r2, #128	; 0x80
 801664c:	2100      	movs	r1, #0
 801664e:	4807      	ldr	r0, [pc, #28]	; (801666c <USBD_LL_Init+0xa4>)
 8016650:	f7f9 f93a 	bl	800f8c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016654:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016658:	2101      	movs	r1, #1
 801665a:	4804      	ldr	r0, [pc, #16]	; (801666c <USBD_LL_Init+0xa4>)
 801665c:	f7f9 f934 	bl	800f8c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016660:	2300      	movs	r3, #0
}
 8016662:	4618      	mov	r0, r3
 8016664:	3708      	adds	r7, #8
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}
 801666a:	bf00      	nop
 801666c:	20002ae0 	.word	0x20002ae0
 8016670:	40040000 	.word	0x40040000
 8016674:	08018744 	.word	0x08018744

08016678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b084      	sub	sp, #16
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016680:	2300      	movs	r3, #0
 8016682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016684:	2300      	movs	r3, #0
 8016686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801668e:	4618      	mov	r0, r3
 8016690:	f7f8 f81e 	bl	800e6d0 <HAL_PCD_Start>
 8016694:	4603      	mov	r3, r0
 8016696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016698:	7bfb      	ldrb	r3, [r7, #15]
 801669a:	4618      	mov	r0, r3
 801669c:	f000 f942 	bl	8016924 <USBD_Get_USB_Status>
 80166a0:	4603      	mov	r3, r0
 80166a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3710      	adds	r7, #16
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}

080166ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80166ae:	b580      	push	{r7, lr}
 80166b0:	b084      	sub	sp, #16
 80166b2:	af00      	add	r7, sp, #0
 80166b4:	6078      	str	r0, [r7, #4]
 80166b6:	4608      	mov	r0, r1
 80166b8:	4611      	mov	r1, r2
 80166ba:	461a      	mov	r2, r3
 80166bc:	4603      	mov	r3, r0
 80166be:	70fb      	strb	r3, [r7, #3]
 80166c0:	460b      	mov	r3, r1
 80166c2:	70bb      	strb	r3, [r7, #2]
 80166c4:	4613      	mov	r3, r2
 80166c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166c8:	2300      	movs	r3, #0
 80166ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166cc:	2300      	movs	r3, #0
 80166ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80166d6:	78bb      	ldrb	r3, [r7, #2]
 80166d8:	883a      	ldrh	r2, [r7, #0]
 80166da:	78f9      	ldrb	r1, [r7, #3]
 80166dc:	f7f8 fcef 	bl	800f0be <HAL_PCD_EP_Open>
 80166e0:	4603      	mov	r3, r0
 80166e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166e4:	7bfb      	ldrb	r3, [r7, #15]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f000 f91c 	bl	8016924 <USBD_Get_USB_Status>
 80166ec:	4603      	mov	r3, r0
 80166ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3710      	adds	r7, #16
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}

080166fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80166fa:	b580      	push	{r7, lr}
 80166fc:	b084      	sub	sp, #16
 80166fe:	af00      	add	r7, sp, #0
 8016700:	6078      	str	r0, [r7, #4]
 8016702:	460b      	mov	r3, r1
 8016704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016706:	2300      	movs	r3, #0
 8016708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801670a:	2300      	movs	r3, #0
 801670c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016714:	78fa      	ldrb	r2, [r7, #3]
 8016716:	4611      	mov	r1, r2
 8016718:	4618      	mov	r0, r3
 801671a:	f7f8 fd38 	bl	800f18e <HAL_PCD_EP_Close>
 801671e:	4603      	mov	r3, r0
 8016720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016722:	7bfb      	ldrb	r3, [r7, #15]
 8016724:	4618      	mov	r0, r3
 8016726:	f000 f8fd 	bl	8016924 <USBD_Get_USB_Status>
 801672a:	4603      	mov	r3, r0
 801672c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801672e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016730:	4618      	mov	r0, r3
 8016732:	3710      	adds	r7, #16
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016744:	2300      	movs	r3, #0
 8016746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016748:	2300      	movs	r3, #0
 801674a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016752:	78fa      	ldrb	r2, [r7, #3]
 8016754:	4611      	mov	r1, r2
 8016756:	4618      	mov	r0, r3
 8016758:	f7f8 fe10 	bl	800f37c <HAL_PCD_EP_SetStall>
 801675c:	4603      	mov	r3, r0
 801675e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016760:	7bfb      	ldrb	r3, [r7, #15]
 8016762:	4618      	mov	r0, r3
 8016764:	f000 f8de 	bl	8016924 <USBD_Get_USB_Status>
 8016768:	4603      	mov	r3, r0
 801676a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801676c:	7bbb      	ldrb	r3, [r7, #14]
}
 801676e:	4618      	mov	r0, r3
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b084      	sub	sp, #16
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
 801677e:	460b      	mov	r3, r1
 8016780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016782:	2300      	movs	r3, #0
 8016784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016786:	2300      	movs	r3, #0
 8016788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016790:	78fa      	ldrb	r2, [r7, #3]
 8016792:	4611      	mov	r1, r2
 8016794:	4618      	mov	r0, r3
 8016796:	f7f8 fe55 	bl	800f444 <HAL_PCD_EP_ClrStall>
 801679a:	4603      	mov	r3, r0
 801679c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801679e:	7bfb      	ldrb	r3, [r7, #15]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f000 f8bf 	bl	8016924 <USBD_Get_USB_Status>
 80167a6:	4603      	mov	r3, r0
 80167a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3710      	adds	r7, #16
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167b4:	b480      	push	{r7}
 80167b6:	b085      	sub	sp, #20
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	460b      	mov	r3, r1
 80167be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80167c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	da0b      	bge.n	80167e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80167d0:	78fb      	ldrb	r3, [r7, #3]
 80167d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80167d6:	68f9      	ldr	r1, [r7, #12]
 80167d8:	4613      	mov	r3, r2
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	4413      	add	r3, r2
 80167de:	009b      	lsls	r3, r3, #2
 80167e0:	440b      	add	r3, r1
 80167e2:	333e      	adds	r3, #62	; 0x3e
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	e00b      	b.n	8016800 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80167e8:	78fb      	ldrb	r3, [r7, #3]
 80167ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80167ee:	68f9      	ldr	r1, [r7, #12]
 80167f0:	4613      	mov	r3, r2
 80167f2:	00db      	lsls	r3, r3, #3
 80167f4:	4413      	add	r3, r2
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	440b      	add	r3, r1
 80167fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80167fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016800:	4618      	mov	r0, r3
 8016802:	3714      	adds	r7, #20
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr

0801680c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	460b      	mov	r3, r1
 8016816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016818:	2300      	movs	r3, #0
 801681a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801681c:	2300      	movs	r3, #0
 801681e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016826:	78fa      	ldrb	r2, [r7, #3]
 8016828:	4611      	mov	r1, r2
 801682a:	4618      	mov	r0, r3
 801682c:	f7f8 fc22 	bl	800f074 <HAL_PCD_SetAddress>
 8016830:	4603      	mov	r3, r0
 8016832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016834:	7bfb      	ldrb	r3, [r7, #15]
 8016836:	4618      	mov	r0, r3
 8016838:	f000 f874 	bl	8016924 <USBD_Get_USB_Status>
 801683c:	4603      	mov	r3, r0
 801683e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016840:	7bbb      	ldrb	r3, [r7, #14]
}
 8016842:	4618      	mov	r0, r3
 8016844:	3710      	adds	r7, #16
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801684a:	b580      	push	{r7, lr}
 801684c:	b086      	sub	sp, #24
 801684e:	af00      	add	r7, sp, #0
 8016850:	60f8      	str	r0, [r7, #12]
 8016852:	607a      	str	r2, [r7, #4]
 8016854:	603b      	str	r3, [r7, #0]
 8016856:	460b      	mov	r3, r1
 8016858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801685a:	2300      	movs	r3, #0
 801685c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801685e:	2300      	movs	r3, #0
 8016860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016868:	7af9      	ldrb	r1, [r7, #11]
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	687a      	ldr	r2, [r7, #4]
 801686e:	f7f8 fd3b 	bl	800f2e8 <HAL_PCD_EP_Transmit>
 8016872:	4603      	mov	r3, r0
 8016874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016876:	7dfb      	ldrb	r3, [r7, #23]
 8016878:	4618      	mov	r0, r3
 801687a:	f000 f853 	bl	8016924 <USBD_Get_USB_Status>
 801687e:	4603      	mov	r3, r0
 8016880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016882:	7dbb      	ldrb	r3, [r7, #22]
}
 8016884:	4618      	mov	r0, r3
 8016886:	3718      	adds	r7, #24
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	607a      	str	r2, [r7, #4]
 8016896:	603b      	str	r3, [r7, #0]
 8016898:	460b      	mov	r3, r1
 801689a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801689c:	2300      	movs	r3, #0
 801689e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80168aa:	7af9      	ldrb	r1, [r7, #11]
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	f7f8 fcb7 	bl	800f222 <HAL_PCD_EP_Receive>
 80168b4:	4603      	mov	r3, r0
 80168b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168b8:	7dfb      	ldrb	r3, [r7, #23]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f000 f832 	bl	8016924 <USBD_Get_USB_Status>
 80168c0:	4603      	mov	r3, r0
 80168c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80168c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3718      	adds	r7, #24
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}

080168ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b082      	sub	sp, #8
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
 80168d6:	460b      	mov	r3, r1
 80168d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168e0:	78fa      	ldrb	r2, [r7, #3]
 80168e2:	4611      	mov	r1, r2
 80168e4:	4618      	mov	r0, r3
 80168e6:	f7f8 fce7 	bl	800f2b8 <HAL_PCD_EP_GetRxCount>
 80168ea:	4603      	mov	r3, r0
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80168fc:	4b03      	ldr	r3, [pc, #12]	; (801690c <USBD_static_malloc+0x18>)
}
 80168fe:	4618      	mov	r0, r3
 8016900:	370c      	adds	r7, #12
 8016902:	46bd      	mov	sp, r7
 8016904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop
 801690c:	20002fec 	.word	0x20002fec

08016910 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]

}
 8016918:	bf00      	nop
 801691a:	370c      	adds	r7, #12
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr

08016924 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016924:	b480      	push	{r7}
 8016926:	b085      	sub	sp, #20
 8016928:	af00      	add	r7, sp, #0
 801692a:	4603      	mov	r3, r0
 801692c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801692e:	2300      	movs	r3, #0
 8016930:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016932:	79fb      	ldrb	r3, [r7, #7]
 8016934:	2b03      	cmp	r3, #3
 8016936:	d817      	bhi.n	8016968 <USBD_Get_USB_Status+0x44>
 8016938:	a201      	add	r2, pc, #4	; (adr r2, 8016940 <USBD_Get_USB_Status+0x1c>)
 801693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801693e:	bf00      	nop
 8016940:	08016951 	.word	0x08016951
 8016944:	08016957 	.word	0x08016957
 8016948:	0801695d 	.word	0x0801695d
 801694c:	08016963 	.word	0x08016963
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016950:	2300      	movs	r3, #0
 8016952:	73fb      	strb	r3, [r7, #15]
    break;
 8016954:	e00b      	b.n	801696e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016956:	2303      	movs	r3, #3
 8016958:	73fb      	strb	r3, [r7, #15]
    break;
 801695a:	e008      	b.n	801696e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801695c:	2301      	movs	r3, #1
 801695e:	73fb      	strb	r3, [r7, #15]
    break;
 8016960:	e005      	b.n	801696e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016962:	2303      	movs	r3, #3
 8016964:	73fb      	strb	r3, [r7, #15]
    break;
 8016966:	e002      	b.n	801696e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016968:	2303      	movs	r3, #3
 801696a:	73fb      	strb	r3, [r7, #15]
    break;
 801696c:	bf00      	nop
  }
  return usb_status;
 801696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3714      	adds	r7, #20
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr

0801697c <__errno>:
 801697c:	4b01      	ldr	r3, [pc, #4]	; (8016984 <__errno+0x8>)
 801697e:	6818      	ldr	r0, [r3, #0]
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	200002f4 	.word	0x200002f4

08016988 <__libc_init_array>:
 8016988:	b570      	push	{r4, r5, r6, lr}
 801698a:	4d0d      	ldr	r5, [pc, #52]	; (80169c0 <__libc_init_array+0x38>)
 801698c:	4c0d      	ldr	r4, [pc, #52]	; (80169c4 <__libc_init_array+0x3c>)
 801698e:	1b64      	subs	r4, r4, r5
 8016990:	10a4      	asrs	r4, r4, #2
 8016992:	2600      	movs	r6, #0
 8016994:	42a6      	cmp	r6, r4
 8016996:	d109      	bne.n	80169ac <__libc_init_array+0x24>
 8016998:	4d0b      	ldr	r5, [pc, #44]	; (80169c8 <__libc_init_array+0x40>)
 801699a:	4c0c      	ldr	r4, [pc, #48]	; (80169cc <__libc_init_array+0x44>)
 801699c:	f001 fa0a 	bl	8017db4 <_init>
 80169a0:	1b64      	subs	r4, r4, r5
 80169a2:	10a4      	asrs	r4, r4, #2
 80169a4:	2600      	movs	r6, #0
 80169a6:	42a6      	cmp	r6, r4
 80169a8:	d105      	bne.n	80169b6 <__libc_init_array+0x2e>
 80169aa:	bd70      	pop	{r4, r5, r6, pc}
 80169ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80169b0:	4798      	blx	r3
 80169b2:	3601      	adds	r6, #1
 80169b4:	e7ee      	b.n	8016994 <__libc_init_array+0xc>
 80169b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169ba:	4798      	blx	r3
 80169bc:	3601      	adds	r6, #1
 80169be:	e7f2      	b.n	80169a6 <__libc_init_array+0x1e>
 80169c0:	08019dd0 	.word	0x08019dd0
 80169c4:	08019dd0 	.word	0x08019dd0
 80169c8:	08019dd0 	.word	0x08019dd0
 80169cc:	08019dd4 	.word	0x08019dd4

080169d0 <malloc>:
 80169d0:	4b02      	ldr	r3, [pc, #8]	; (80169dc <malloc+0xc>)
 80169d2:	4601      	mov	r1, r0
 80169d4:	6818      	ldr	r0, [r3, #0]
 80169d6:	f000 b88d 	b.w	8016af4 <_malloc_r>
 80169da:	bf00      	nop
 80169dc:	200002f4 	.word	0x200002f4

080169e0 <free>:
 80169e0:	4b02      	ldr	r3, [pc, #8]	; (80169ec <free+0xc>)
 80169e2:	4601      	mov	r1, r0
 80169e4:	6818      	ldr	r0, [r3, #0]
 80169e6:	f000 b819 	b.w	8016a1c <_free_r>
 80169ea:	bf00      	nop
 80169ec:	200002f4 	.word	0x200002f4

080169f0 <memcpy>:
 80169f0:	440a      	add	r2, r1
 80169f2:	4291      	cmp	r1, r2
 80169f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80169f8:	d100      	bne.n	80169fc <memcpy+0xc>
 80169fa:	4770      	bx	lr
 80169fc:	b510      	push	{r4, lr}
 80169fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a06:	4291      	cmp	r1, r2
 8016a08:	d1f9      	bne.n	80169fe <memcpy+0xe>
 8016a0a:	bd10      	pop	{r4, pc}

08016a0c <memset>:
 8016a0c:	4402      	add	r2, r0
 8016a0e:	4603      	mov	r3, r0
 8016a10:	4293      	cmp	r3, r2
 8016a12:	d100      	bne.n	8016a16 <memset+0xa>
 8016a14:	4770      	bx	lr
 8016a16:	f803 1b01 	strb.w	r1, [r3], #1
 8016a1a:	e7f9      	b.n	8016a10 <memset+0x4>

08016a1c <_free_r>:
 8016a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a1e:	2900      	cmp	r1, #0
 8016a20:	d044      	beq.n	8016aac <_free_r+0x90>
 8016a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a26:	9001      	str	r0, [sp, #4]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a2e:	bfb8      	it	lt
 8016a30:	18e4      	addlt	r4, r4, r3
 8016a32:	f000 fc6b 	bl	801730c <__malloc_lock>
 8016a36:	4a1e      	ldr	r2, [pc, #120]	; (8016ab0 <_free_r+0x94>)
 8016a38:	9801      	ldr	r0, [sp, #4]
 8016a3a:	6813      	ldr	r3, [r2, #0]
 8016a3c:	b933      	cbnz	r3, 8016a4c <_free_r+0x30>
 8016a3e:	6063      	str	r3, [r4, #4]
 8016a40:	6014      	str	r4, [r2, #0]
 8016a42:	b003      	add	sp, #12
 8016a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a48:	f000 bc66 	b.w	8017318 <__malloc_unlock>
 8016a4c:	42a3      	cmp	r3, r4
 8016a4e:	d908      	bls.n	8016a62 <_free_r+0x46>
 8016a50:	6825      	ldr	r5, [r4, #0]
 8016a52:	1961      	adds	r1, r4, r5
 8016a54:	428b      	cmp	r3, r1
 8016a56:	bf01      	itttt	eq
 8016a58:	6819      	ldreq	r1, [r3, #0]
 8016a5a:	685b      	ldreq	r3, [r3, #4]
 8016a5c:	1949      	addeq	r1, r1, r5
 8016a5e:	6021      	streq	r1, [r4, #0]
 8016a60:	e7ed      	b.n	8016a3e <_free_r+0x22>
 8016a62:	461a      	mov	r2, r3
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	b10b      	cbz	r3, 8016a6c <_free_r+0x50>
 8016a68:	42a3      	cmp	r3, r4
 8016a6a:	d9fa      	bls.n	8016a62 <_free_r+0x46>
 8016a6c:	6811      	ldr	r1, [r2, #0]
 8016a6e:	1855      	adds	r5, r2, r1
 8016a70:	42a5      	cmp	r5, r4
 8016a72:	d10b      	bne.n	8016a8c <_free_r+0x70>
 8016a74:	6824      	ldr	r4, [r4, #0]
 8016a76:	4421      	add	r1, r4
 8016a78:	1854      	adds	r4, r2, r1
 8016a7a:	42a3      	cmp	r3, r4
 8016a7c:	6011      	str	r1, [r2, #0]
 8016a7e:	d1e0      	bne.n	8016a42 <_free_r+0x26>
 8016a80:	681c      	ldr	r4, [r3, #0]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	6053      	str	r3, [r2, #4]
 8016a86:	4421      	add	r1, r4
 8016a88:	6011      	str	r1, [r2, #0]
 8016a8a:	e7da      	b.n	8016a42 <_free_r+0x26>
 8016a8c:	d902      	bls.n	8016a94 <_free_r+0x78>
 8016a8e:	230c      	movs	r3, #12
 8016a90:	6003      	str	r3, [r0, #0]
 8016a92:	e7d6      	b.n	8016a42 <_free_r+0x26>
 8016a94:	6825      	ldr	r5, [r4, #0]
 8016a96:	1961      	adds	r1, r4, r5
 8016a98:	428b      	cmp	r3, r1
 8016a9a:	bf04      	itt	eq
 8016a9c:	6819      	ldreq	r1, [r3, #0]
 8016a9e:	685b      	ldreq	r3, [r3, #4]
 8016aa0:	6063      	str	r3, [r4, #4]
 8016aa2:	bf04      	itt	eq
 8016aa4:	1949      	addeq	r1, r1, r5
 8016aa6:	6021      	streq	r1, [r4, #0]
 8016aa8:	6054      	str	r4, [r2, #4]
 8016aaa:	e7ca      	b.n	8016a42 <_free_r+0x26>
 8016aac:	b003      	add	sp, #12
 8016aae:	bd30      	pop	{r4, r5, pc}
 8016ab0:	2000320c 	.word	0x2000320c

08016ab4 <sbrk_aligned>:
 8016ab4:	b570      	push	{r4, r5, r6, lr}
 8016ab6:	4e0e      	ldr	r6, [pc, #56]	; (8016af0 <sbrk_aligned+0x3c>)
 8016ab8:	460c      	mov	r4, r1
 8016aba:	6831      	ldr	r1, [r6, #0]
 8016abc:	4605      	mov	r5, r0
 8016abe:	b911      	cbnz	r1, 8016ac6 <sbrk_aligned+0x12>
 8016ac0:	f000 f8a4 	bl	8016c0c <_sbrk_r>
 8016ac4:	6030      	str	r0, [r6, #0]
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4628      	mov	r0, r5
 8016aca:	f000 f89f 	bl	8016c0c <_sbrk_r>
 8016ace:	1c43      	adds	r3, r0, #1
 8016ad0:	d00a      	beq.n	8016ae8 <sbrk_aligned+0x34>
 8016ad2:	1cc4      	adds	r4, r0, #3
 8016ad4:	f024 0403 	bic.w	r4, r4, #3
 8016ad8:	42a0      	cmp	r0, r4
 8016ada:	d007      	beq.n	8016aec <sbrk_aligned+0x38>
 8016adc:	1a21      	subs	r1, r4, r0
 8016ade:	4628      	mov	r0, r5
 8016ae0:	f000 f894 	bl	8016c0c <_sbrk_r>
 8016ae4:	3001      	adds	r0, #1
 8016ae6:	d101      	bne.n	8016aec <sbrk_aligned+0x38>
 8016ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8016aec:	4620      	mov	r0, r4
 8016aee:	bd70      	pop	{r4, r5, r6, pc}
 8016af0:	20003210 	.word	0x20003210

08016af4 <_malloc_r>:
 8016af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af8:	1ccd      	adds	r5, r1, #3
 8016afa:	f025 0503 	bic.w	r5, r5, #3
 8016afe:	3508      	adds	r5, #8
 8016b00:	2d0c      	cmp	r5, #12
 8016b02:	bf38      	it	cc
 8016b04:	250c      	movcc	r5, #12
 8016b06:	2d00      	cmp	r5, #0
 8016b08:	4607      	mov	r7, r0
 8016b0a:	db01      	blt.n	8016b10 <_malloc_r+0x1c>
 8016b0c:	42a9      	cmp	r1, r5
 8016b0e:	d905      	bls.n	8016b1c <_malloc_r+0x28>
 8016b10:	230c      	movs	r3, #12
 8016b12:	603b      	str	r3, [r7, #0]
 8016b14:	2600      	movs	r6, #0
 8016b16:	4630      	mov	r0, r6
 8016b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b1c:	4e2e      	ldr	r6, [pc, #184]	; (8016bd8 <_malloc_r+0xe4>)
 8016b1e:	f000 fbf5 	bl	801730c <__malloc_lock>
 8016b22:	6833      	ldr	r3, [r6, #0]
 8016b24:	461c      	mov	r4, r3
 8016b26:	bb34      	cbnz	r4, 8016b76 <_malloc_r+0x82>
 8016b28:	4629      	mov	r1, r5
 8016b2a:	4638      	mov	r0, r7
 8016b2c:	f7ff ffc2 	bl	8016ab4 <sbrk_aligned>
 8016b30:	1c43      	adds	r3, r0, #1
 8016b32:	4604      	mov	r4, r0
 8016b34:	d14d      	bne.n	8016bd2 <_malloc_r+0xde>
 8016b36:	6834      	ldr	r4, [r6, #0]
 8016b38:	4626      	mov	r6, r4
 8016b3a:	2e00      	cmp	r6, #0
 8016b3c:	d140      	bne.n	8016bc0 <_malloc_r+0xcc>
 8016b3e:	6823      	ldr	r3, [r4, #0]
 8016b40:	4631      	mov	r1, r6
 8016b42:	4638      	mov	r0, r7
 8016b44:	eb04 0803 	add.w	r8, r4, r3
 8016b48:	f000 f860 	bl	8016c0c <_sbrk_r>
 8016b4c:	4580      	cmp	r8, r0
 8016b4e:	d13a      	bne.n	8016bc6 <_malloc_r+0xd2>
 8016b50:	6821      	ldr	r1, [r4, #0]
 8016b52:	3503      	adds	r5, #3
 8016b54:	1a6d      	subs	r5, r5, r1
 8016b56:	f025 0503 	bic.w	r5, r5, #3
 8016b5a:	3508      	adds	r5, #8
 8016b5c:	2d0c      	cmp	r5, #12
 8016b5e:	bf38      	it	cc
 8016b60:	250c      	movcc	r5, #12
 8016b62:	4629      	mov	r1, r5
 8016b64:	4638      	mov	r0, r7
 8016b66:	f7ff ffa5 	bl	8016ab4 <sbrk_aligned>
 8016b6a:	3001      	adds	r0, #1
 8016b6c:	d02b      	beq.n	8016bc6 <_malloc_r+0xd2>
 8016b6e:	6823      	ldr	r3, [r4, #0]
 8016b70:	442b      	add	r3, r5
 8016b72:	6023      	str	r3, [r4, #0]
 8016b74:	e00e      	b.n	8016b94 <_malloc_r+0xa0>
 8016b76:	6822      	ldr	r2, [r4, #0]
 8016b78:	1b52      	subs	r2, r2, r5
 8016b7a:	d41e      	bmi.n	8016bba <_malloc_r+0xc6>
 8016b7c:	2a0b      	cmp	r2, #11
 8016b7e:	d916      	bls.n	8016bae <_malloc_r+0xba>
 8016b80:	1961      	adds	r1, r4, r5
 8016b82:	42a3      	cmp	r3, r4
 8016b84:	6025      	str	r5, [r4, #0]
 8016b86:	bf18      	it	ne
 8016b88:	6059      	strne	r1, [r3, #4]
 8016b8a:	6863      	ldr	r3, [r4, #4]
 8016b8c:	bf08      	it	eq
 8016b8e:	6031      	streq	r1, [r6, #0]
 8016b90:	5162      	str	r2, [r4, r5]
 8016b92:	604b      	str	r3, [r1, #4]
 8016b94:	4638      	mov	r0, r7
 8016b96:	f104 060b 	add.w	r6, r4, #11
 8016b9a:	f000 fbbd 	bl	8017318 <__malloc_unlock>
 8016b9e:	f026 0607 	bic.w	r6, r6, #7
 8016ba2:	1d23      	adds	r3, r4, #4
 8016ba4:	1af2      	subs	r2, r6, r3
 8016ba6:	d0b6      	beq.n	8016b16 <_malloc_r+0x22>
 8016ba8:	1b9b      	subs	r3, r3, r6
 8016baa:	50a3      	str	r3, [r4, r2]
 8016bac:	e7b3      	b.n	8016b16 <_malloc_r+0x22>
 8016bae:	6862      	ldr	r2, [r4, #4]
 8016bb0:	42a3      	cmp	r3, r4
 8016bb2:	bf0c      	ite	eq
 8016bb4:	6032      	streq	r2, [r6, #0]
 8016bb6:	605a      	strne	r2, [r3, #4]
 8016bb8:	e7ec      	b.n	8016b94 <_malloc_r+0xa0>
 8016bba:	4623      	mov	r3, r4
 8016bbc:	6864      	ldr	r4, [r4, #4]
 8016bbe:	e7b2      	b.n	8016b26 <_malloc_r+0x32>
 8016bc0:	4634      	mov	r4, r6
 8016bc2:	6876      	ldr	r6, [r6, #4]
 8016bc4:	e7b9      	b.n	8016b3a <_malloc_r+0x46>
 8016bc6:	230c      	movs	r3, #12
 8016bc8:	603b      	str	r3, [r7, #0]
 8016bca:	4638      	mov	r0, r7
 8016bcc:	f000 fba4 	bl	8017318 <__malloc_unlock>
 8016bd0:	e7a1      	b.n	8016b16 <_malloc_r+0x22>
 8016bd2:	6025      	str	r5, [r4, #0]
 8016bd4:	e7de      	b.n	8016b94 <_malloc_r+0xa0>
 8016bd6:	bf00      	nop
 8016bd8:	2000320c 	.word	0x2000320c

08016bdc <iprintf>:
 8016bdc:	b40f      	push	{r0, r1, r2, r3}
 8016bde:	4b0a      	ldr	r3, [pc, #40]	; (8016c08 <iprintf+0x2c>)
 8016be0:	b513      	push	{r0, r1, r4, lr}
 8016be2:	681c      	ldr	r4, [r3, #0]
 8016be4:	b124      	cbz	r4, 8016bf0 <iprintf+0x14>
 8016be6:	69a3      	ldr	r3, [r4, #24]
 8016be8:	b913      	cbnz	r3, 8016bf0 <iprintf+0x14>
 8016bea:	4620      	mov	r0, r4
 8016bec:	f000 fa88 	bl	8017100 <__sinit>
 8016bf0:	ab05      	add	r3, sp, #20
 8016bf2:	9a04      	ldr	r2, [sp, #16]
 8016bf4:	68a1      	ldr	r1, [r4, #8]
 8016bf6:	9301      	str	r3, [sp, #4]
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f000 fd19 	bl	8017630 <_vfiprintf_r>
 8016bfe:	b002      	add	sp, #8
 8016c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c04:	b004      	add	sp, #16
 8016c06:	4770      	bx	lr
 8016c08:	200002f4 	.word	0x200002f4

08016c0c <_sbrk_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4d06      	ldr	r5, [pc, #24]	; (8016c28 <_sbrk_r+0x1c>)
 8016c10:	2300      	movs	r3, #0
 8016c12:	4604      	mov	r4, r0
 8016c14:	4608      	mov	r0, r1
 8016c16:	602b      	str	r3, [r5, #0]
 8016c18:	f7f4 fa24 	bl	800b064 <_sbrk>
 8016c1c:	1c43      	adds	r3, r0, #1
 8016c1e:	d102      	bne.n	8016c26 <_sbrk_r+0x1a>
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	b103      	cbz	r3, 8016c26 <_sbrk_r+0x1a>
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	bd38      	pop	{r3, r4, r5, pc}
 8016c28:	20003218 	.word	0x20003218

08016c2c <siprintf>:
 8016c2c:	b40e      	push	{r1, r2, r3}
 8016c2e:	b500      	push	{lr}
 8016c30:	b09c      	sub	sp, #112	; 0x70
 8016c32:	ab1d      	add	r3, sp, #116	; 0x74
 8016c34:	9002      	str	r0, [sp, #8]
 8016c36:	9006      	str	r0, [sp, #24]
 8016c38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c3c:	4809      	ldr	r0, [pc, #36]	; (8016c64 <siprintf+0x38>)
 8016c3e:	9107      	str	r1, [sp, #28]
 8016c40:	9104      	str	r1, [sp, #16]
 8016c42:	4909      	ldr	r1, [pc, #36]	; (8016c68 <siprintf+0x3c>)
 8016c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c48:	9105      	str	r1, [sp, #20]
 8016c4a:	6800      	ldr	r0, [r0, #0]
 8016c4c:	9301      	str	r3, [sp, #4]
 8016c4e:	a902      	add	r1, sp, #8
 8016c50:	f000 fbc4 	bl	80173dc <_svfiprintf_r>
 8016c54:	9b02      	ldr	r3, [sp, #8]
 8016c56:	2200      	movs	r2, #0
 8016c58:	701a      	strb	r2, [r3, #0]
 8016c5a:	b01c      	add	sp, #112	; 0x70
 8016c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c60:	b003      	add	sp, #12
 8016c62:	4770      	bx	lr
 8016c64:	200002f4 	.word	0x200002f4
 8016c68:	ffff0208 	.word	0xffff0208

08016c6c <strcat>:
 8016c6c:	b510      	push	{r4, lr}
 8016c6e:	4602      	mov	r2, r0
 8016c70:	7814      	ldrb	r4, [r2, #0]
 8016c72:	4613      	mov	r3, r2
 8016c74:	3201      	adds	r2, #1
 8016c76:	2c00      	cmp	r4, #0
 8016c78:	d1fa      	bne.n	8016c70 <strcat+0x4>
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c84:	2a00      	cmp	r2, #0
 8016c86:	d1f9      	bne.n	8016c7c <strcat+0x10>
 8016c88:	bd10      	pop	{r4, pc}

08016c8a <strcpy>:
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c90:	f803 2b01 	strb.w	r2, [r3], #1
 8016c94:	2a00      	cmp	r2, #0
 8016c96:	d1f9      	bne.n	8016c8c <strcpy+0x2>
 8016c98:	4770      	bx	lr

08016c9a <strncmp>:
 8016c9a:	b510      	push	{r4, lr}
 8016c9c:	b17a      	cbz	r2, 8016cbe <strncmp+0x24>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	3901      	subs	r1, #1
 8016ca2:	1884      	adds	r4, r0, r2
 8016ca4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016ca8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016cac:	4290      	cmp	r0, r2
 8016cae:	d101      	bne.n	8016cb4 <strncmp+0x1a>
 8016cb0:	42a3      	cmp	r3, r4
 8016cb2:	d101      	bne.n	8016cb8 <strncmp+0x1e>
 8016cb4:	1a80      	subs	r0, r0, r2
 8016cb6:	bd10      	pop	{r4, pc}
 8016cb8:	2800      	cmp	r0, #0
 8016cba:	d1f3      	bne.n	8016ca4 <strncmp+0xa>
 8016cbc:	e7fa      	b.n	8016cb4 <strncmp+0x1a>
 8016cbe:	4610      	mov	r0, r2
 8016cc0:	e7f9      	b.n	8016cb6 <strncmp+0x1c>
	...

08016cc4 <__utoa>:
 8016cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc6:	4c1f      	ldr	r4, [pc, #124]	; (8016d44 <__utoa+0x80>)
 8016cc8:	b08b      	sub	sp, #44	; 0x2c
 8016cca:	4605      	mov	r5, r0
 8016ccc:	460b      	mov	r3, r1
 8016cce:	466e      	mov	r6, sp
 8016cd0:	f104 0c20 	add.w	ip, r4, #32
 8016cd4:	6820      	ldr	r0, [r4, #0]
 8016cd6:	6861      	ldr	r1, [r4, #4]
 8016cd8:	4637      	mov	r7, r6
 8016cda:	c703      	stmia	r7!, {r0, r1}
 8016cdc:	3408      	adds	r4, #8
 8016cde:	4564      	cmp	r4, ip
 8016ce0:	463e      	mov	r6, r7
 8016ce2:	d1f7      	bne.n	8016cd4 <__utoa+0x10>
 8016ce4:	7921      	ldrb	r1, [r4, #4]
 8016ce6:	7139      	strb	r1, [r7, #4]
 8016ce8:	1e91      	subs	r1, r2, #2
 8016cea:	6820      	ldr	r0, [r4, #0]
 8016cec:	6038      	str	r0, [r7, #0]
 8016cee:	2922      	cmp	r1, #34	; 0x22
 8016cf0:	f04f 0100 	mov.w	r1, #0
 8016cf4:	d904      	bls.n	8016d00 <__utoa+0x3c>
 8016cf6:	7019      	strb	r1, [r3, #0]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	b00b      	add	sp, #44	; 0x2c
 8016cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d00:	1e58      	subs	r0, r3, #1
 8016d02:	4684      	mov	ip, r0
 8016d04:	fbb5 f7f2 	udiv	r7, r5, r2
 8016d08:	fb02 5617 	mls	r6, r2, r7, r5
 8016d0c:	3628      	adds	r6, #40	; 0x28
 8016d0e:	446e      	add	r6, sp
 8016d10:	460c      	mov	r4, r1
 8016d12:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8016d16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8016d1a:	462e      	mov	r6, r5
 8016d1c:	42b2      	cmp	r2, r6
 8016d1e:	f101 0101 	add.w	r1, r1, #1
 8016d22:	463d      	mov	r5, r7
 8016d24:	d9ee      	bls.n	8016d04 <__utoa+0x40>
 8016d26:	2200      	movs	r2, #0
 8016d28:	545a      	strb	r2, [r3, r1]
 8016d2a:	1919      	adds	r1, r3, r4
 8016d2c:	1aa5      	subs	r5, r4, r2
 8016d2e:	42aa      	cmp	r2, r5
 8016d30:	dae3      	bge.n	8016cfa <__utoa+0x36>
 8016d32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8016d36:	780e      	ldrb	r6, [r1, #0]
 8016d38:	7006      	strb	r6, [r0, #0]
 8016d3a:	3201      	adds	r2, #1
 8016d3c:	f801 5901 	strb.w	r5, [r1], #-1
 8016d40:	e7f4      	b.n	8016d2c <__utoa+0x68>
 8016d42:	bf00      	nop
 8016d44:	08019d0c 	.word	0x08019d0c

08016d48 <utoa>:
 8016d48:	f7ff bfbc 	b.w	8016cc4 <__utoa>

08016d4c <__swbuf_r>:
 8016d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4e:	460e      	mov	r6, r1
 8016d50:	4614      	mov	r4, r2
 8016d52:	4605      	mov	r5, r0
 8016d54:	b118      	cbz	r0, 8016d5e <__swbuf_r+0x12>
 8016d56:	6983      	ldr	r3, [r0, #24]
 8016d58:	b90b      	cbnz	r3, 8016d5e <__swbuf_r+0x12>
 8016d5a:	f000 f9d1 	bl	8017100 <__sinit>
 8016d5e:	4b21      	ldr	r3, [pc, #132]	; (8016de4 <__swbuf_r+0x98>)
 8016d60:	429c      	cmp	r4, r3
 8016d62:	d12b      	bne.n	8016dbc <__swbuf_r+0x70>
 8016d64:	686c      	ldr	r4, [r5, #4]
 8016d66:	69a3      	ldr	r3, [r4, #24]
 8016d68:	60a3      	str	r3, [r4, #8]
 8016d6a:	89a3      	ldrh	r3, [r4, #12]
 8016d6c:	071a      	lsls	r2, r3, #28
 8016d6e:	d52f      	bpl.n	8016dd0 <__swbuf_r+0x84>
 8016d70:	6923      	ldr	r3, [r4, #16]
 8016d72:	b36b      	cbz	r3, 8016dd0 <__swbuf_r+0x84>
 8016d74:	6923      	ldr	r3, [r4, #16]
 8016d76:	6820      	ldr	r0, [r4, #0]
 8016d78:	1ac0      	subs	r0, r0, r3
 8016d7a:	6963      	ldr	r3, [r4, #20]
 8016d7c:	b2f6      	uxtb	r6, r6
 8016d7e:	4283      	cmp	r3, r0
 8016d80:	4637      	mov	r7, r6
 8016d82:	dc04      	bgt.n	8016d8e <__swbuf_r+0x42>
 8016d84:	4621      	mov	r1, r4
 8016d86:	4628      	mov	r0, r5
 8016d88:	f000 f926 	bl	8016fd8 <_fflush_r>
 8016d8c:	bb30      	cbnz	r0, 8016ddc <__swbuf_r+0x90>
 8016d8e:	68a3      	ldr	r3, [r4, #8]
 8016d90:	3b01      	subs	r3, #1
 8016d92:	60a3      	str	r3, [r4, #8]
 8016d94:	6823      	ldr	r3, [r4, #0]
 8016d96:	1c5a      	adds	r2, r3, #1
 8016d98:	6022      	str	r2, [r4, #0]
 8016d9a:	701e      	strb	r6, [r3, #0]
 8016d9c:	6963      	ldr	r3, [r4, #20]
 8016d9e:	3001      	adds	r0, #1
 8016da0:	4283      	cmp	r3, r0
 8016da2:	d004      	beq.n	8016dae <__swbuf_r+0x62>
 8016da4:	89a3      	ldrh	r3, [r4, #12]
 8016da6:	07db      	lsls	r3, r3, #31
 8016da8:	d506      	bpl.n	8016db8 <__swbuf_r+0x6c>
 8016daa:	2e0a      	cmp	r6, #10
 8016dac:	d104      	bne.n	8016db8 <__swbuf_r+0x6c>
 8016dae:	4621      	mov	r1, r4
 8016db0:	4628      	mov	r0, r5
 8016db2:	f000 f911 	bl	8016fd8 <_fflush_r>
 8016db6:	b988      	cbnz	r0, 8016ddc <__swbuf_r+0x90>
 8016db8:	4638      	mov	r0, r7
 8016dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dbc:	4b0a      	ldr	r3, [pc, #40]	; (8016de8 <__swbuf_r+0x9c>)
 8016dbe:	429c      	cmp	r4, r3
 8016dc0:	d101      	bne.n	8016dc6 <__swbuf_r+0x7a>
 8016dc2:	68ac      	ldr	r4, [r5, #8]
 8016dc4:	e7cf      	b.n	8016d66 <__swbuf_r+0x1a>
 8016dc6:	4b09      	ldr	r3, [pc, #36]	; (8016dec <__swbuf_r+0xa0>)
 8016dc8:	429c      	cmp	r4, r3
 8016dca:	bf08      	it	eq
 8016dcc:	68ec      	ldreq	r4, [r5, #12]
 8016dce:	e7ca      	b.n	8016d66 <__swbuf_r+0x1a>
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f000 f80c 	bl	8016df0 <__swsetup_r>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d0cb      	beq.n	8016d74 <__swbuf_r+0x28>
 8016ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8016de0:	e7ea      	b.n	8016db8 <__swbuf_r+0x6c>
 8016de2:	bf00      	nop
 8016de4:	08019d54 	.word	0x08019d54
 8016de8:	08019d74 	.word	0x08019d74
 8016dec:	08019d34 	.word	0x08019d34

08016df0 <__swsetup_r>:
 8016df0:	4b32      	ldr	r3, [pc, #200]	; (8016ebc <__swsetup_r+0xcc>)
 8016df2:	b570      	push	{r4, r5, r6, lr}
 8016df4:	681d      	ldr	r5, [r3, #0]
 8016df6:	4606      	mov	r6, r0
 8016df8:	460c      	mov	r4, r1
 8016dfa:	b125      	cbz	r5, 8016e06 <__swsetup_r+0x16>
 8016dfc:	69ab      	ldr	r3, [r5, #24]
 8016dfe:	b913      	cbnz	r3, 8016e06 <__swsetup_r+0x16>
 8016e00:	4628      	mov	r0, r5
 8016e02:	f000 f97d 	bl	8017100 <__sinit>
 8016e06:	4b2e      	ldr	r3, [pc, #184]	; (8016ec0 <__swsetup_r+0xd0>)
 8016e08:	429c      	cmp	r4, r3
 8016e0a:	d10f      	bne.n	8016e2c <__swsetup_r+0x3c>
 8016e0c:	686c      	ldr	r4, [r5, #4]
 8016e0e:	89a3      	ldrh	r3, [r4, #12]
 8016e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e14:	0719      	lsls	r1, r3, #28
 8016e16:	d42c      	bmi.n	8016e72 <__swsetup_r+0x82>
 8016e18:	06dd      	lsls	r5, r3, #27
 8016e1a:	d411      	bmi.n	8016e40 <__swsetup_r+0x50>
 8016e1c:	2309      	movs	r3, #9
 8016e1e:	6033      	str	r3, [r6, #0]
 8016e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e24:	81a3      	strh	r3, [r4, #12]
 8016e26:	f04f 30ff 	mov.w	r0, #4294967295
 8016e2a:	e03e      	b.n	8016eaa <__swsetup_r+0xba>
 8016e2c:	4b25      	ldr	r3, [pc, #148]	; (8016ec4 <__swsetup_r+0xd4>)
 8016e2e:	429c      	cmp	r4, r3
 8016e30:	d101      	bne.n	8016e36 <__swsetup_r+0x46>
 8016e32:	68ac      	ldr	r4, [r5, #8]
 8016e34:	e7eb      	b.n	8016e0e <__swsetup_r+0x1e>
 8016e36:	4b24      	ldr	r3, [pc, #144]	; (8016ec8 <__swsetup_r+0xd8>)
 8016e38:	429c      	cmp	r4, r3
 8016e3a:	bf08      	it	eq
 8016e3c:	68ec      	ldreq	r4, [r5, #12]
 8016e3e:	e7e6      	b.n	8016e0e <__swsetup_r+0x1e>
 8016e40:	0758      	lsls	r0, r3, #29
 8016e42:	d512      	bpl.n	8016e6a <__swsetup_r+0x7a>
 8016e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e46:	b141      	cbz	r1, 8016e5a <__swsetup_r+0x6a>
 8016e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e4c:	4299      	cmp	r1, r3
 8016e4e:	d002      	beq.n	8016e56 <__swsetup_r+0x66>
 8016e50:	4630      	mov	r0, r6
 8016e52:	f7ff fde3 	bl	8016a1c <_free_r>
 8016e56:	2300      	movs	r3, #0
 8016e58:	6363      	str	r3, [r4, #52]	; 0x34
 8016e5a:	89a3      	ldrh	r3, [r4, #12]
 8016e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e60:	81a3      	strh	r3, [r4, #12]
 8016e62:	2300      	movs	r3, #0
 8016e64:	6063      	str	r3, [r4, #4]
 8016e66:	6923      	ldr	r3, [r4, #16]
 8016e68:	6023      	str	r3, [r4, #0]
 8016e6a:	89a3      	ldrh	r3, [r4, #12]
 8016e6c:	f043 0308 	orr.w	r3, r3, #8
 8016e70:	81a3      	strh	r3, [r4, #12]
 8016e72:	6923      	ldr	r3, [r4, #16]
 8016e74:	b94b      	cbnz	r3, 8016e8a <__swsetup_r+0x9a>
 8016e76:	89a3      	ldrh	r3, [r4, #12]
 8016e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e80:	d003      	beq.n	8016e8a <__swsetup_r+0x9a>
 8016e82:	4621      	mov	r1, r4
 8016e84:	4630      	mov	r0, r6
 8016e86:	f000 fa01 	bl	801728c <__smakebuf_r>
 8016e8a:	89a0      	ldrh	r0, [r4, #12]
 8016e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e90:	f010 0301 	ands.w	r3, r0, #1
 8016e94:	d00a      	beq.n	8016eac <__swsetup_r+0xbc>
 8016e96:	2300      	movs	r3, #0
 8016e98:	60a3      	str	r3, [r4, #8]
 8016e9a:	6963      	ldr	r3, [r4, #20]
 8016e9c:	425b      	negs	r3, r3
 8016e9e:	61a3      	str	r3, [r4, #24]
 8016ea0:	6923      	ldr	r3, [r4, #16]
 8016ea2:	b943      	cbnz	r3, 8016eb6 <__swsetup_r+0xc6>
 8016ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ea8:	d1ba      	bne.n	8016e20 <__swsetup_r+0x30>
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}
 8016eac:	0781      	lsls	r1, r0, #30
 8016eae:	bf58      	it	pl
 8016eb0:	6963      	ldrpl	r3, [r4, #20]
 8016eb2:	60a3      	str	r3, [r4, #8]
 8016eb4:	e7f4      	b.n	8016ea0 <__swsetup_r+0xb0>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	e7f7      	b.n	8016eaa <__swsetup_r+0xba>
 8016eba:	bf00      	nop
 8016ebc:	200002f4 	.word	0x200002f4
 8016ec0:	08019d54 	.word	0x08019d54
 8016ec4:	08019d74 	.word	0x08019d74
 8016ec8:	08019d34 	.word	0x08019d34

08016ecc <__sflush_r>:
 8016ecc:	898a      	ldrh	r2, [r1, #12]
 8016ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ed2:	4605      	mov	r5, r0
 8016ed4:	0710      	lsls	r0, r2, #28
 8016ed6:	460c      	mov	r4, r1
 8016ed8:	d458      	bmi.n	8016f8c <__sflush_r+0xc0>
 8016eda:	684b      	ldr	r3, [r1, #4]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	dc05      	bgt.n	8016eec <__sflush_r+0x20>
 8016ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	dc02      	bgt.n	8016eec <__sflush_r+0x20>
 8016ee6:	2000      	movs	r0, #0
 8016ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eee:	2e00      	cmp	r6, #0
 8016ef0:	d0f9      	beq.n	8016ee6 <__sflush_r+0x1a>
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ef8:	682f      	ldr	r7, [r5, #0]
 8016efa:	602b      	str	r3, [r5, #0]
 8016efc:	d032      	beq.n	8016f64 <__sflush_r+0x98>
 8016efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	075a      	lsls	r2, r3, #29
 8016f04:	d505      	bpl.n	8016f12 <__sflush_r+0x46>
 8016f06:	6863      	ldr	r3, [r4, #4]
 8016f08:	1ac0      	subs	r0, r0, r3
 8016f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f0c:	b10b      	cbz	r3, 8016f12 <__sflush_r+0x46>
 8016f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f10:	1ac0      	subs	r0, r0, r3
 8016f12:	2300      	movs	r3, #0
 8016f14:	4602      	mov	r2, r0
 8016f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f18:	6a21      	ldr	r1, [r4, #32]
 8016f1a:	4628      	mov	r0, r5
 8016f1c:	47b0      	blx	r6
 8016f1e:	1c43      	adds	r3, r0, #1
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	d106      	bne.n	8016f32 <__sflush_r+0x66>
 8016f24:	6829      	ldr	r1, [r5, #0]
 8016f26:	291d      	cmp	r1, #29
 8016f28:	d82c      	bhi.n	8016f84 <__sflush_r+0xb8>
 8016f2a:	4a2a      	ldr	r2, [pc, #168]	; (8016fd4 <__sflush_r+0x108>)
 8016f2c:	40ca      	lsrs	r2, r1
 8016f2e:	07d6      	lsls	r6, r2, #31
 8016f30:	d528      	bpl.n	8016f84 <__sflush_r+0xb8>
 8016f32:	2200      	movs	r2, #0
 8016f34:	6062      	str	r2, [r4, #4]
 8016f36:	04d9      	lsls	r1, r3, #19
 8016f38:	6922      	ldr	r2, [r4, #16]
 8016f3a:	6022      	str	r2, [r4, #0]
 8016f3c:	d504      	bpl.n	8016f48 <__sflush_r+0x7c>
 8016f3e:	1c42      	adds	r2, r0, #1
 8016f40:	d101      	bne.n	8016f46 <__sflush_r+0x7a>
 8016f42:	682b      	ldr	r3, [r5, #0]
 8016f44:	b903      	cbnz	r3, 8016f48 <__sflush_r+0x7c>
 8016f46:	6560      	str	r0, [r4, #84]	; 0x54
 8016f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f4a:	602f      	str	r7, [r5, #0]
 8016f4c:	2900      	cmp	r1, #0
 8016f4e:	d0ca      	beq.n	8016ee6 <__sflush_r+0x1a>
 8016f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f54:	4299      	cmp	r1, r3
 8016f56:	d002      	beq.n	8016f5e <__sflush_r+0x92>
 8016f58:	4628      	mov	r0, r5
 8016f5a:	f7ff fd5f 	bl	8016a1c <_free_r>
 8016f5e:	2000      	movs	r0, #0
 8016f60:	6360      	str	r0, [r4, #52]	; 0x34
 8016f62:	e7c1      	b.n	8016ee8 <__sflush_r+0x1c>
 8016f64:	6a21      	ldr	r1, [r4, #32]
 8016f66:	2301      	movs	r3, #1
 8016f68:	4628      	mov	r0, r5
 8016f6a:	47b0      	blx	r6
 8016f6c:	1c41      	adds	r1, r0, #1
 8016f6e:	d1c7      	bne.n	8016f00 <__sflush_r+0x34>
 8016f70:	682b      	ldr	r3, [r5, #0]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d0c4      	beq.n	8016f00 <__sflush_r+0x34>
 8016f76:	2b1d      	cmp	r3, #29
 8016f78:	d001      	beq.n	8016f7e <__sflush_r+0xb2>
 8016f7a:	2b16      	cmp	r3, #22
 8016f7c:	d101      	bne.n	8016f82 <__sflush_r+0xb6>
 8016f7e:	602f      	str	r7, [r5, #0]
 8016f80:	e7b1      	b.n	8016ee6 <__sflush_r+0x1a>
 8016f82:	89a3      	ldrh	r3, [r4, #12]
 8016f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f88:	81a3      	strh	r3, [r4, #12]
 8016f8a:	e7ad      	b.n	8016ee8 <__sflush_r+0x1c>
 8016f8c:	690f      	ldr	r7, [r1, #16]
 8016f8e:	2f00      	cmp	r7, #0
 8016f90:	d0a9      	beq.n	8016ee6 <__sflush_r+0x1a>
 8016f92:	0793      	lsls	r3, r2, #30
 8016f94:	680e      	ldr	r6, [r1, #0]
 8016f96:	bf08      	it	eq
 8016f98:	694b      	ldreq	r3, [r1, #20]
 8016f9a:	600f      	str	r7, [r1, #0]
 8016f9c:	bf18      	it	ne
 8016f9e:	2300      	movne	r3, #0
 8016fa0:	eba6 0807 	sub.w	r8, r6, r7
 8016fa4:	608b      	str	r3, [r1, #8]
 8016fa6:	f1b8 0f00 	cmp.w	r8, #0
 8016faa:	dd9c      	ble.n	8016ee6 <__sflush_r+0x1a>
 8016fac:	6a21      	ldr	r1, [r4, #32]
 8016fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fb0:	4643      	mov	r3, r8
 8016fb2:	463a      	mov	r2, r7
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	47b0      	blx	r6
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	dc06      	bgt.n	8016fca <__sflush_r+0xfe>
 8016fbc:	89a3      	ldrh	r3, [r4, #12]
 8016fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc2:	81a3      	strh	r3, [r4, #12]
 8016fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc8:	e78e      	b.n	8016ee8 <__sflush_r+0x1c>
 8016fca:	4407      	add	r7, r0
 8016fcc:	eba8 0800 	sub.w	r8, r8, r0
 8016fd0:	e7e9      	b.n	8016fa6 <__sflush_r+0xda>
 8016fd2:	bf00      	nop
 8016fd4:	20400001 	.word	0x20400001

08016fd8 <_fflush_r>:
 8016fd8:	b538      	push	{r3, r4, r5, lr}
 8016fda:	690b      	ldr	r3, [r1, #16]
 8016fdc:	4605      	mov	r5, r0
 8016fde:	460c      	mov	r4, r1
 8016fe0:	b913      	cbnz	r3, 8016fe8 <_fflush_r+0x10>
 8016fe2:	2500      	movs	r5, #0
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	bd38      	pop	{r3, r4, r5, pc}
 8016fe8:	b118      	cbz	r0, 8016ff2 <_fflush_r+0x1a>
 8016fea:	6983      	ldr	r3, [r0, #24]
 8016fec:	b90b      	cbnz	r3, 8016ff2 <_fflush_r+0x1a>
 8016fee:	f000 f887 	bl	8017100 <__sinit>
 8016ff2:	4b14      	ldr	r3, [pc, #80]	; (8017044 <_fflush_r+0x6c>)
 8016ff4:	429c      	cmp	r4, r3
 8016ff6:	d11b      	bne.n	8017030 <_fflush_r+0x58>
 8016ff8:	686c      	ldr	r4, [r5, #4]
 8016ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d0ef      	beq.n	8016fe2 <_fflush_r+0xa>
 8017002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017004:	07d0      	lsls	r0, r2, #31
 8017006:	d404      	bmi.n	8017012 <_fflush_r+0x3a>
 8017008:	0599      	lsls	r1, r3, #22
 801700a:	d402      	bmi.n	8017012 <_fflush_r+0x3a>
 801700c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801700e:	f000 f915 	bl	801723c <__retarget_lock_acquire_recursive>
 8017012:	4628      	mov	r0, r5
 8017014:	4621      	mov	r1, r4
 8017016:	f7ff ff59 	bl	8016ecc <__sflush_r>
 801701a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801701c:	07da      	lsls	r2, r3, #31
 801701e:	4605      	mov	r5, r0
 8017020:	d4e0      	bmi.n	8016fe4 <_fflush_r+0xc>
 8017022:	89a3      	ldrh	r3, [r4, #12]
 8017024:	059b      	lsls	r3, r3, #22
 8017026:	d4dd      	bmi.n	8016fe4 <_fflush_r+0xc>
 8017028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801702a:	f000 f908 	bl	801723e <__retarget_lock_release_recursive>
 801702e:	e7d9      	b.n	8016fe4 <_fflush_r+0xc>
 8017030:	4b05      	ldr	r3, [pc, #20]	; (8017048 <_fflush_r+0x70>)
 8017032:	429c      	cmp	r4, r3
 8017034:	d101      	bne.n	801703a <_fflush_r+0x62>
 8017036:	68ac      	ldr	r4, [r5, #8]
 8017038:	e7df      	b.n	8016ffa <_fflush_r+0x22>
 801703a:	4b04      	ldr	r3, [pc, #16]	; (801704c <_fflush_r+0x74>)
 801703c:	429c      	cmp	r4, r3
 801703e:	bf08      	it	eq
 8017040:	68ec      	ldreq	r4, [r5, #12]
 8017042:	e7da      	b.n	8016ffa <_fflush_r+0x22>
 8017044:	08019d54 	.word	0x08019d54
 8017048:	08019d74 	.word	0x08019d74
 801704c:	08019d34 	.word	0x08019d34

08017050 <std>:
 8017050:	2300      	movs	r3, #0
 8017052:	b510      	push	{r4, lr}
 8017054:	4604      	mov	r4, r0
 8017056:	e9c0 3300 	strd	r3, r3, [r0]
 801705a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801705e:	6083      	str	r3, [r0, #8]
 8017060:	8181      	strh	r1, [r0, #12]
 8017062:	6643      	str	r3, [r0, #100]	; 0x64
 8017064:	81c2      	strh	r2, [r0, #14]
 8017066:	6183      	str	r3, [r0, #24]
 8017068:	4619      	mov	r1, r3
 801706a:	2208      	movs	r2, #8
 801706c:	305c      	adds	r0, #92	; 0x5c
 801706e:	f7ff fccd 	bl	8016a0c <memset>
 8017072:	4b05      	ldr	r3, [pc, #20]	; (8017088 <std+0x38>)
 8017074:	6263      	str	r3, [r4, #36]	; 0x24
 8017076:	4b05      	ldr	r3, [pc, #20]	; (801708c <std+0x3c>)
 8017078:	62a3      	str	r3, [r4, #40]	; 0x28
 801707a:	4b05      	ldr	r3, [pc, #20]	; (8017090 <std+0x40>)
 801707c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801707e:	4b05      	ldr	r3, [pc, #20]	; (8017094 <std+0x44>)
 8017080:	6224      	str	r4, [r4, #32]
 8017082:	6323      	str	r3, [r4, #48]	; 0x30
 8017084:	bd10      	pop	{r4, pc}
 8017086:	bf00      	nop
 8017088:	08017bb9 	.word	0x08017bb9
 801708c:	08017bdb 	.word	0x08017bdb
 8017090:	08017c13 	.word	0x08017c13
 8017094:	08017c37 	.word	0x08017c37

08017098 <_cleanup_r>:
 8017098:	4901      	ldr	r1, [pc, #4]	; (80170a0 <_cleanup_r+0x8>)
 801709a:	f000 b8af 	b.w	80171fc <_fwalk_reent>
 801709e:	bf00      	nop
 80170a0:	08016fd9 	.word	0x08016fd9

080170a4 <__sfmoreglue>:
 80170a4:	b570      	push	{r4, r5, r6, lr}
 80170a6:	2268      	movs	r2, #104	; 0x68
 80170a8:	1e4d      	subs	r5, r1, #1
 80170aa:	4355      	muls	r5, r2
 80170ac:	460e      	mov	r6, r1
 80170ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80170b2:	f7ff fd1f 	bl	8016af4 <_malloc_r>
 80170b6:	4604      	mov	r4, r0
 80170b8:	b140      	cbz	r0, 80170cc <__sfmoreglue+0x28>
 80170ba:	2100      	movs	r1, #0
 80170bc:	e9c0 1600 	strd	r1, r6, [r0]
 80170c0:	300c      	adds	r0, #12
 80170c2:	60a0      	str	r0, [r4, #8]
 80170c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80170c8:	f7ff fca0 	bl	8016a0c <memset>
 80170cc:	4620      	mov	r0, r4
 80170ce:	bd70      	pop	{r4, r5, r6, pc}

080170d0 <__sfp_lock_acquire>:
 80170d0:	4801      	ldr	r0, [pc, #4]	; (80170d8 <__sfp_lock_acquire+0x8>)
 80170d2:	f000 b8b3 	b.w	801723c <__retarget_lock_acquire_recursive>
 80170d6:	bf00      	nop
 80170d8:	20003215 	.word	0x20003215

080170dc <__sfp_lock_release>:
 80170dc:	4801      	ldr	r0, [pc, #4]	; (80170e4 <__sfp_lock_release+0x8>)
 80170de:	f000 b8ae 	b.w	801723e <__retarget_lock_release_recursive>
 80170e2:	bf00      	nop
 80170e4:	20003215 	.word	0x20003215

080170e8 <__sinit_lock_acquire>:
 80170e8:	4801      	ldr	r0, [pc, #4]	; (80170f0 <__sinit_lock_acquire+0x8>)
 80170ea:	f000 b8a7 	b.w	801723c <__retarget_lock_acquire_recursive>
 80170ee:	bf00      	nop
 80170f0:	20003216 	.word	0x20003216

080170f4 <__sinit_lock_release>:
 80170f4:	4801      	ldr	r0, [pc, #4]	; (80170fc <__sinit_lock_release+0x8>)
 80170f6:	f000 b8a2 	b.w	801723e <__retarget_lock_release_recursive>
 80170fa:	bf00      	nop
 80170fc:	20003216 	.word	0x20003216

08017100 <__sinit>:
 8017100:	b510      	push	{r4, lr}
 8017102:	4604      	mov	r4, r0
 8017104:	f7ff fff0 	bl	80170e8 <__sinit_lock_acquire>
 8017108:	69a3      	ldr	r3, [r4, #24]
 801710a:	b11b      	cbz	r3, 8017114 <__sinit+0x14>
 801710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017110:	f7ff bff0 	b.w	80170f4 <__sinit_lock_release>
 8017114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017118:	6523      	str	r3, [r4, #80]	; 0x50
 801711a:	4b13      	ldr	r3, [pc, #76]	; (8017168 <__sinit+0x68>)
 801711c:	4a13      	ldr	r2, [pc, #76]	; (801716c <__sinit+0x6c>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	62a2      	str	r2, [r4, #40]	; 0x28
 8017122:	42a3      	cmp	r3, r4
 8017124:	bf04      	itt	eq
 8017126:	2301      	moveq	r3, #1
 8017128:	61a3      	streq	r3, [r4, #24]
 801712a:	4620      	mov	r0, r4
 801712c:	f000 f820 	bl	8017170 <__sfp>
 8017130:	6060      	str	r0, [r4, #4]
 8017132:	4620      	mov	r0, r4
 8017134:	f000 f81c 	bl	8017170 <__sfp>
 8017138:	60a0      	str	r0, [r4, #8]
 801713a:	4620      	mov	r0, r4
 801713c:	f000 f818 	bl	8017170 <__sfp>
 8017140:	2200      	movs	r2, #0
 8017142:	60e0      	str	r0, [r4, #12]
 8017144:	2104      	movs	r1, #4
 8017146:	6860      	ldr	r0, [r4, #4]
 8017148:	f7ff ff82 	bl	8017050 <std>
 801714c:	68a0      	ldr	r0, [r4, #8]
 801714e:	2201      	movs	r2, #1
 8017150:	2109      	movs	r1, #9
 8017152:	f7ff ff7d 	bl	8017050 <std>
 8017156:	68e0      	ldr	r0, [r4, #12]
 8017158:	2202      	movs	r2, #2
 801715a:	2112      	movs	r1, #18
 801715c:	f7ff ff78 	bl	8017050 <std>
 8017160:	2301      	movs	r3, #1
 8017162:	61a3      	str	r3, [r4, #24]
 8017164:	e7d2      	b.n	801710c <__sinit+0xc>
 8017166:	bf00      	nop
 8017168:	08019d08 	.word	0x08019d08
 801716c:	08017099 	.word	0x08017099

08017170 <__sfp>:
 8017170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017172:	4607      	mov	r7, r0
 8017174:	f7ff ffac 	bl	80170d0 <__sfp_lock_acquire>
 8017178:	4b1e      	ldr	r3, [pc, #120]	; (80171f4 <__sfp+0x84>)
 801717a:	681e      	ldr	r6, [r3, #0]
 801717c:	69b3      	ldr	r3, [r6, #24]
 801717e:	b913      	cbnz	r3, 8017186 <__sfp+0x16>
 8017180:	4630      	mov	r0, r6
 8017182:	f7ff ffbd 	bl	8017100 <__sinit>
 8017186:	3648      	adds	r6, #72	; 0x48
 8017188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801718c:	3b01      	subs	r3, #1
 801718e:	d503      	bpl.n	8017198 <__sfp+0x28>
 8017190:	6833      	ldr	r3, [r6, #0]
 8017192:	b30b      	cbz	r3, 80171d8 <__sfp+0x68>
 8017194:	6836      	ldr	r6, [r6, #0]
 8017196:	e7f7      	b.n	8017188 <__sfp+0x18>
 8017198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801719c:	b9d5      	cbnz	r5, 80171d4 <__sfp+0x64>
 801719e:	4b16      	ldr	r3, [pc, #88]	; (80171f8 <__sfp+0x88>)
 80171a0:	60e3      	str	r3, [r4, #12]
 80171a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80171a6:	6665      	str	r5, [r4, #100]	; 0x64
 80171a8:	f000 f847 	bl	801723a <__retarget_lock_init_recursive>
 80171ac:	f7ff ff96 	bl	80170dc <__sfp_lock_release>
 80171b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80171b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80171b8:	6025      	str	r5, [r4, #0]
 80171ba:	61a5      	str	r5, [r4, #24]
 80171bc:	2208      	movs	r2, #8
 80171be:	4629      	mov	r1, r5
 80171c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80171c4:	f7ff fc22 	bl	8016a0c <memset>
 80171c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171d0:	4620      	mov	r0, r4
 80171d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171d4:	3468      	adds	r4, #104	; 0x68
 80171d6:	e7d9      	b.n	801718c <__sfp+0x1c>
 80171d8:	2104      	movs	r1, #4
 80171da:	4638      	mov	r0, r7
 80171dc:	f7ff ff62 	bl	80170a4 <__sfmoreglue>
 80171e0:	4604      	mov	r4, r0
 80171e2:	6030      	str	r0, [r6, #0]
 80171e4:	2800      	cmp	r0, #0
 80171e6:	d1d5      	bne.n	8017194 <__sfp+0x24>
 80171e8:	f7ff ff78 	bl	80170dc <__sfp_lock_release>
 80171ec:	230c      	movs	r3, #12
 80171ee:	603b      	str	r3, [r7, #0]
 80171f0:	e7ee      	b.n	80171d0 <__sfp+0x60>
 80171f2:	bf00      	nop
 80171f4:	08019d08 	.word	0x08019d08
 80171f8:	ffff0001 	.word	0xffff0001

080171fc <_fwalk_reent>:
 80171fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017200:	4606      	mov	r6, r0
 8017202:	4688      	mov	r8, r1
 8017204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017208:	2700      	movs	r7, #0
 801720a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801720e:	f1b9 0901 	subs.w	r9, r9, #1
 8017212:	d505      	bpl.n	8017220 <_fwalk_reent+0x24>
 8017214:	6824      	ldr	r4, [r4, #0]
 8017216:	2c00      	cmp	r4, #0
 8017218:	d1f7      	bne.n	801720a <_fwalk_reent+0xe>
 801721a:	4638      	mov	r0, r7
 801721c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017220:	89ab      	ldrh	r3, [r5, #12]
 8017222:	2b01      	cmp	r3, #1
 8017224:	d907      	bls.n	8017236 <_fwalk_reent+0x3a>
 8017226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801722a:	3301      	adds	r3, #1
 801722c:	d003      	beq.n	8017236 <_fwalk_reent+0x3a>
 801722e:	4629      	mov	r1, r5
 8017230:	4630      	mov	r0, r6
 8017232:	47c0      	blx	r8
 8017234:	4307      	orrs	r7, r0
 8017236:	3568      	adds	r5, #104	; 0x68
 8017238:	e7e9      	b.n	801720e <_fwalk_reent+0x12>

0801723a <__retarget_lock_init_recursive>:
 801723a:	4770      	bx	lr

0801723c <__retarget_lock_acquire_recursive>:
 801723c:	4770      	bx	lr

0801723e <__retarget_lock_release_recursive>:
 801723e:	4770      	bx	lr

08017240 <__swhatbuf_r>:
 8017240:	b570      	push	{r4, r5, r6, lr}
 8017242:	460e      	mov	r6, r1
 8017244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017248:	2900      	cmp	r1, #0
 801724a:	b096      	sub	sp, #88	; 0x58
 801724c:	4614      	mov	r4, r2
 801724e:	461d      	mov	r5, r3
 8017250:	da08      	bge.n	8017264 <__swhatbuf_r+0x24>
 8017252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017256:	2200      	movs	r2, #0
 8017258:	602a      	str	r2, [r5, #0]
 801725a:	061a      	lsls	r2, r3, #24
 801725c:	d410      	bmi.n	8017280 <__swhatbuf_r+0x40>
 801725e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017262:	e00e      	b.n	8017282 <__swhatbuf_r+0x42>
 8017264:	466a      	mov	r2, sp
 8017266:	f000 fd0d 	bl	8017c84 <_fstat_r>
 801726a:	2800      	cmp	r0, #0
 801726c:	dbf1      	blt.n	8017252 <__swhatbuf_r+0x12>
 801726e:	9a01      	ldr	r2, [sp, #4]
 8017270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017278:	425a      	negs	r2, r3
 801727a:	415a      	adcs	r2, r3
 801727c:	602a      	str	r2, [r5, #0]
 801727e:	e7ee      	b.n	801725e <__swhatbuf_r+0x1e>
 8017280:	2340      	movs	r3, #64	; 0x40
 8017282:	2000      	movs	r0, #0
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	b016      	add	sp, #88	; 0x58
 8017288:	bd70      	pop	{r4, r5, r6, pc}
	...

0801728c <__smakebuf_r>:
 801728c:	898b      	ldrh	r3, [r1, #12]
 801728e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017290:	079d      	lsls	r5, r3, #30
 8017292:	4606      	mov	r6, r0
 8017294:	460c      	mov	r4, r1
 8017296:	d507      	bpl.n	80172a8 <__smakebuf_r+0x1c>
 8017298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801729c:	6023      	str	r3, [r4, #0]
 801729e:	6123      	str	r3, [r4, #16]
 80172a0:	2301      	movs	r3, #1
 80172a2:	6163      	str	r3, [r4, #20]
 80172a4:	b002      	add	sp, #8
 80172a6:	bd70      	pop	{r4, r5, r6, pc}
 80172a8:	ab01      	add	r3, sp, #4
 80172aa:	466a      	mov	r2, sp
 80172ac:	f7ff ffc8 	bl	8017240 <__swhatbuf_r>
 80172b0:	9900      	ldr	r1, [sp, #0]
 80172b2:	4605      	mov	r5, r0
 80172b4:	4630      	mov	r0, r6
 80172b6:	f7ff fc1d 	bl	8016af4 <_malloc_r>
 80172ba:	b948      	cbnz	r0, 80172d0 <__smakebuf_r+0x44>
 80172bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172c0:	059a      	lsls	r2, r3, #22
 80172c2:	d4ef      	bmi.n	80172a4 <__smakebuf_r+0x18>
 80172c4:	f023 0303 	bic.w	r3, r3, #3
 80172c8:	f043 0302 	orr.w	r3, r3, #2
 80172cc:	81a3      	strh	r3, [r4, #12]
 80172ce:	e7e3      	b.n	8017298 <__smakebuf_r+0xc>
 80172d0:	4b0d      	ldr	r3, [pc, #52]	; (8017308 <__smakebuf_r+0x7c>)
 80172d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80172d4:	89a3      	ldrh	r3, [r4, #12]
 80172d6:	6020      	str	r0, [r4, #0]
 80172d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172dc:	81a3      	strh	r3, [r4, #12]
 80172de:	9b00      	ldr	r3, [sp, #0]
 80172e0:	6163      	str	r3, [r4, #20]
 80172e2:	9b01      	ldr	r3, [sp, #4]
 80172e4:	6120      	str	r0, [r4, #16]
 80172e6:	b15b      	cbz	r3, 8017300 <__smakebuf_r+0x74>
 80172e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172ec:	4630      	mov	r0, r6
 80172ee:	f000 fcdb 	bl	8017ca8 <_isatty_r>
 80172f2:	b128      	cbz	r0, 8017300 <__smakebuf_r+0x74>
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	f023 0303 	bic.w	r3, r3, #3
 80172fa:	f043 0301 	orr.w	r3, r3, #1
 80172fe:	81a3      	strh	r3, [r4, #12]
 8017300:	89a0      	ldrh	r0, [r4, #12]
 8017302:	4305      	orrs	r5, r0
 8017304:	81a5      	strh	r5, [r4, #12]
 8017306:	e7cd      	b.n	80172a4 <__smakebuf_r+0x18>
 8017308:	08017099 	.word	0x08017099

0801730c <__malloc_lock>:
 801730c:	4801      	ldr	r0, [pc, #4]	; (8017314 <__malloc_lock+0x8>)
 801730e:	f7ff bf95 	b.w	801723c <__retarget_lock_acquire_recursive>
 8017312:	bf00      	nop
 8017314:	20003214 	.word	0x20003214

08017318 <__malloc_unlock>:
 8017318:	4801      	ldr	r0, [pc, #4]	; (8017320 <__malloc_unlock+0x8>)
 801731a:	f7ff bf90 	b.w	801723e <__retarget_lock_release_recursive>
 801731e:	bf00      	nop
 8017320:	20003214 	.word	0x20003214

08017324 <__ssputs_r>:
 8017324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017328:	688e      	ldr	r6, [r1, #8]
 801732a:	429e      	cmp	r6, r3
 801732c:	4682      	mov	sl, r0
 801732e:	460c      	mov	r4, r1
 8017330:	4690      	mov	r8, r2
 8017332:	461f      	mov	r7, r3
 8017334:	d838      	bhi.n	80173a8 <__ssputs_r+0x84>
 8017336:	898a      	ldrh	r2, [r1, #12]
 8017338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801733c:	d032      	beq.n	80173a4 <__ssputs_r+0x80>
 801733e:	6825      	ldr	r5, [r4, #0]
 8017340:	6909      	ldr	r1, [r1, #16]
 8017342:	eba5 0901 	sub.w	r9, r5, r1
 8017346:	6965      	ldr	r5, [r4, #20]
 8017348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801734c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017350:	3301      	adds	r3, #1
 8017352:	444b      	add	r3, r9
 8017354:	106d      	asrs	r5, r5, #1
 8017356:	429d      	cmp	r5, r3
 8017358:	bf38      	it	cc
 801735a:	461d      	movcc	r5, r3
 801735c:	0553      	lsls	r3, r2, #21
 801735e:	d531      	bpl.n	80173c4 <__ssputs_r+0xa0>
 8017360:	4629      	mov	r1, r5
 8017362:	f7ff fbc7 	bl	8016af4 <_malloc_r>
 8017366:	4606      	mov	r6, r0
 8017368:	b950      	cbnz	r0, 8017380 <__ssputs_r+0x5c>
 801736a:	230c      	movs	r3, #12
 801736c:	f8ca 3000 	str.w	r3, [sl]
 8017370:	89a3      	ldrh	r3, [r4, #12]
 8017372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017376:	81a3      	strh	r3, [r4, #12]
 8017378:	f04f 30ff 	mov.w	r0, #4294967295
 801737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017380:	6921      	ldr	r1, [r4, #16]
 8017382:	464a      	mov	r2, r9
 8017384:	f7ff fb34 	bl	80169f0 <memcpy>
 8017388:	89a3      	ldrh	r3, [r4, #12]
 801738a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801738e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017392:	81a3      	strh	r3, [r4, #12]
 8017394:	6126      	str	r6, [r4, #16]
 8017396:	6165      	str	r5, [r4, #20]
 8017398:	444e      	add	r6, r9
 801739a:	eba5 0509 	sub.w	r5, r5, r9
 801739e:	6026      	str	r6, [r4, #0]
 80173a0:	60a5      	str	r5, [r4, #8]
 80173a2:	463e      	mov	r6, r7
 80173a4:	42be      	cmp	r6, r7
 80173a6:	d900      	bls.n	80173aa <__ssputs_r+0x86>
 80173a8:	463e      	mov	r6, r7
 80173aa:	6820      	ldr	r0, [r4, #0]
 80173ac:	4632      	mov	r2, r6
 80173ae:	4641      	mov	r1, r8
 80173b0:	f000 fc9c 	bl	8017cec <memmove>
 80173b4:	68a3      	ldr	r3, [r4, #8]
 80173b6:	1b9b      	subs	r3, r3, r6
 80173b8:	60a3      	str	r3, [r4, #8]
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	4433      	add	r3, r6
 80173be:	6023      	str	r3, [r4, #0]
 80173c0:	2000      	movs	r0, #0
 80173c2:	e7db      	b.n	801737c <__ssputs_r+0x58>
 80173c4:	462a      	mov	r2, r5
 80173c6:	f000 fcab 	bl	8017d20 <_realloc_r>
 80173ca:	4606      	mov	r6, r0
 80173cc:	2800      	cmp	r0, #0
 80173ce:	d1e1      	bne.n	8017394 <__ssputs_r+0x70>
 80173d0:	6921      	ldr	r1, [r4, #16]
 80173d2:	4650      	mov	r0, sl
 80173d4:	f7ff fb22 	bl	8016a1c <_free_r>
 80173d8:	e7c7      	b.n	801736a <__ssputs_r+0x46>
	...

080173dc <_svfiprintf_r>:
 80173dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e0:	4698      	mov	r8, r3
 80173e2:	898b      	ldrh	r3, [r1, #12]
 80173e4:	061b      	lsls	r3, r3, #24
 80173e6:	b09d      	sub	sp, #116	; 0x74
 80173e8:	4607      	mov	r7, r0
 80173ea:	460d      	mov	r5, r1
 80173ec:	4614      	mov	r4, r2
 80173ee:	d50e      	bpl.n	801740e <_svfiprintf_r+0x32>
 80173f0:	690b      	ldr	r3, [r1, #16]
 80173f2:	b963      	cbnz	r3, 801740e <_svfiprintf_r+0x32>
 80173f4:	2140      	movs	r1, #64	; 0x40
 80173f6:	f7ff fb7d 	bl	8016af4 <_malloc_r>
 80173fa:	6028      	str	r0, [r5, #0]
 80173fc:	6128      	str	r0, [r5, #16]
 80173fe:	b920      	cbnz	r0, 801740a <_svfiprintf_r+0x2e>
 8017400:	230c      	movs	r3, #12
 8017402:	603b      	str	r3, [r7, #0]
 8017404:	f04f 30ff 	mov.w	r0, #4294967295
 8017408:	e0d1      	b.n	80175ae <_svfiprintf_r+0x1d2>
 801740a:	2340      	movs	r3, #64	; 0x40
 801740c:	616b      	str	r3, [r5, #20]
 801740e:	2300      	movs	r3, #0
 8017410:	9309      	str	r3, [sp, #36]	; 0x24
 8017412:	2320      	movs	r3, #32
 8017414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017418:	f8cd 800c 	str.w	r8, [sp, #12]
 801741c:	2330      	movs	r3, #48	; 0x30
 801741e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80175c8 <_svfiprintf_r+0x1ec>
 8017422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017426:	f04f 0901 	mov.w	r9, #1
 801742a:	4623      	mov	r3, r4
 801742c:	469a      	mov	sl, r3
 801742e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017432:	b10a      	cbz	r2, 8017438 <_svfiprintf_r+0x5c>
 8017434:	2a25      	cmp	r2, #37	; 0x25
 8017436:	d1f9      	bne.n	801742c <_svfiprintf_r+0x50>
 8017438:	ebba 0b04 	subs.w	fp, sl, r4
 801743c:	d00b      	beq.n	8017456 <_svfiprintf_r+0x7a>
 801743e:	465b      	mov	r3, fp
 8017440:	4622      	mov	r2, r4
 8017442:	4629      	mov	r1, r5
 8017444:	4638      	mov	r0, r7
 8017446:	f7ff ff6d 	bl	8017324 <__ssputs_r>
 801744a:	3001      	adds	r0, #1
 801744c:	f000 80aa 	beq.w	80175a4 <_svfiprintf_r+0x1c8>
 8017450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017452:	445a      	add	r2, fp
 8017454:	9209      	str	r2, [sp, #36]	; 0x24
 8017456:	f89a 3000 	ldrb.w	r3, [sl]
 801745a:	2b00      	cmp	r3, #0
 801745c:	f000 80a2 	beq.w	80175a4 <_svfiprintf_r+0x1c8>
 8017460:	2300      	movs	r3, #0
 8017462:	f04f 32ff 	mov.w	r2, #4294967295
 8017466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801746a:	f10a 0a01 	add.w	sl, sl, #1
 801746e:	9304      	str	r3, [sp, #16]
 8017470:	9307      	str	r3, [sp, #28]
 8017472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017476:	931a      	str	r3, [sp, #104]	; 0x68
 8017478:	4654      	mov	r4, sl
 801747a:	2205      	movs	r2, #5
 801747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017480:	4851      	ldr	r0, [pc, #324]	; (80175c8 <_svfiprintf_r+0x1ec>)
 8017482:	f7e8 febd 	bl	8000200 <memchr>
 8017486:	9a04      	ldr	r2, [sp, #16]
 8017488:	b9d8      	cbnz	r0, 80174c2 <_svfiprintf_r+0xe6>
 801748a:	06d0      	lsls	r0, r2, #27
 801748c:	bf44      	itt	mi
 801748e:	2320      	movmi	r3, #32
 8017490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017494:	0711      	lsls	r1, r2, #28
 8017496:	bf44      	itt	mi
 8017498:	232b      	movmi	r3, #43	; 0x2b
 801749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801749e:	f89a 3000 	ldrb.w	r3, [sl]
 80174a2:	2b2a      	cmp	r3, #42	; 0x2a
 80174a4:	d015      	beq.n	80174d2 <_svfiprintf_r+0xf6>
 80174a6:	9a07      	ldr	r2, [sp, #28]
 80174a8:	4654      	mov	r4, sl
 80174aa:	2000      	movs	r0, #0
 80174ac:	f04f 0c0a 	mov.w	ip, #10
 80174b0:	4621      	mov	r1, r4
 80174b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174b6:	3b30      	subs	r3, #48	; 0x30
 80174b8:	2b09      	cmp	r3, #9
 80174ba:	d94e      	bls.n	801755a <_svfiprintf_r+0x17e>
 80174bc:	b1b0      	cbz	r0, 80174ec <_svfiprintf_r+0x110>
 80174be:	9207      	str	r2, [sp, #28]
 80174c0:	e014      	b.n	80174ec <_svfiprintf_r+0x110>
 80174c2:	eba0 0308 	sub.w	r3, r0, r8
 80174c6:	fa09 f303 	lsl.w	r3, r9, r3
 80174ca:	4313      	orrs	r3, r2
 80174cc:	9304      	str	r3, [sp, #16]
 80174ce:	46a2      	mov	sl, r4
 80174d0:	e7d2      	b.n	8017478 <_svfiprintf_r+0x9c>
 80174d2:	9b03      	ldr	r3, [sp, #12]
 80174d4:	1d19      	adds	r1, r3, #4
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	9103      	str	r1, [sp, #12]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	bfbb      	ittet	lt
 80174de:	425b      	neglt	r3, r3
 80174e0:	f042 0202 	orrlt.w	r2, r2, #2
 80174e4:	9307      	strge	r3, [sp, #28]
 80174e6:	9307      	strlt	r3, [sp, #28]
 80174e8:	bfb8      	it	lt
 80174ea:	9204      	strlt	r2, [sp, #16]
 80174ec:	7823      	ldrb	r3, [r4, #0]
 80174ee:	2b2e      	cmp	r3, #46	; 0x2e
 80174f0:	d10c      	bne.n	801750c <_svfiprintf_r+0x130>
 80174f2:	7863      	ldrb	r3, [r4, #1]
 80174f4:	2b2a      	cmp	r3, #42	; 0x2a
 80174f6:	d135      	bne.n	8017564 <_svfiprintf_r+0x188>
 80174f8:	9b03      	ldr	r3, [sp, #12]
 80174fa:	1d1a      	adds	r2, r3, #4
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	9203      	str	r2, [sp, #12]
 8017500:	2b00      	cmp	r3, #0
 8017502:	bfb8      	it	lt
 8017504:	f04f 33ff 	movlt.w	r3, #4294967295
 8017508:	3402      	adds	r4, #2
 801750a:	9305      	str	r3, [sp, #20]
 801750c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80175d8 <_svfiprintf_r+0x1fc>
 8017510:	7821      	ldrb	r1, [r4, #0]
 8017512:	2203      	movs	r2, #3
 8017514:	4650      	mov	r0, sl
 8017516:	f7e8 fe73 	bl	8000200 <memchr>
 801751a:	b140      	cbz	r0, 801752e <_svfiprintf_r+0x152>
 801751c:	2340      	movs	r3, #64	; 0x40
 801751e:	eba0 000a 	sub.w	r0, r0, sl
 8017522:	fa03 f000 	lsl.w	r0, r3, r0
 8017526:	9b04      	ldr	r3, [sp, #16]
 8017528:	4303      	orrs	r3, r0
 801752a:	3401      	adds	r4, #1
 801752c:	9304      	str	r3, [sp, #16]
 801752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017532:	4826      	ldr	r0, [pc, #152]	; (80175cc <_svfiprintf_r+0x1f0>)
 8017534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017538:	2206      	movs	r2, #6
 801753a:	f7e8 fe61 	bl	8000200 <memchr>
 801753e:	2800      	cmp	r0, #0
 8017540:	d038      	beq.n	80175b4 <_svfiprintf_r+0x1d8>
 8017542:	4b23      	ldr	r3, [pc, #140]	; (80175d0 <_svfiprintf_r+0x1f4>)
 8017544:	bb1b      	cbnz	r3, 801758e <_svfiprintf_r+0x1b2>
 8017546:	9b03      	ldr	r3, [sp, #12]
 8017548:	3307      	adds	r3, #7
 801754a:	f023 0307 	bic.w	r3, r3, #7
 801754e:	3308      	adds	r3, #8
 8017550:	9303      	str	r3, [sp, #12]
 8017552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017554:	4433      	add	r3, r6
 8017556:	9309      	str	r3, [sp, #36]	; 0x24
 8017558:	e767      	b.n	801742a <_svfiprintf_r+0x4e>
 801755a:	fb0c 3202 	mla	r2, ip, r2, r3
 801755e:	460c      	mov	r4, r1
 8017560:	2001      	movs	r0, #1
 8017562:	e7a5      	b.n	80174b0 <_svfiprintf_r+0xd4>
 8017564:	2300      	movs	r3, #0
 8017566:	3401      	adds	r4, #1
 8017568:	9305      	str	r3, [sp, #20]
 801756a:	4619      	mov	r1, r3
 801756c:	f04f 0c0a 	mov.w	ip, #10
 8017570:	4620      	mov	r0, r4
 8017572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017576:	3a30      	subs	r2, #48	; 0x30
 8017578:	2a09      	cmp	r2, #9
 801757a:	d903      	bls.n	8017584 <_svfiprintf_r+0x1a8>
 801757c:	2b00      	cmp	r3, #0
 801757e:	d0c5      	beq.n	801750c <_svfiprintf_r+0x130>
 8017580:	9105      	str	r1, [sp, #20]
 8017582:	e7c3      	b.n	801750c <_svfiprintf_r+0x130>
 8017584:	fb0c 2101 	mla	r1, ip, r1, r2
 8017588:	4604      	mov	r4, r0
 801758a:	2301      	movs	r3, #1
 801758c:	e7f0      	b.n	8017570 <_svfiprintf_r+0x194>
 801758e:	ab03      	add	r3, sp, #12
 8017590:	9300      	str	r3, [sp, #0]
 8017592:	462a      	mov	r2, r5
 8017594:	4b0f      	ldr	r3, [pc, #60]	; (80175d4 <_svfiprintf_r+0x1f8>)
 8017596:	a904      	add	r1, sp, #16
 8017598:	4638      	mov	r0, r7
 801759a:	f3af 8000 	nop.w
 801759e:	1c42      	adds	r2, r0, #1
 80175a0:	4606      	mov	r6, r0
 80175a2:	d1d6      	bne.n	8017552 <_svfiprintf_r+0x176>
 80175a4:	89ab      	ldrh	r3, [r5, #12]
 80175a6:	065b      	lsls	r3, r3, #25
 80175a8:	f53f af2c 	bmi.w	8017404 <_svfiprintf_r+0x28>
 80175ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175ae:	b01d      	add	sp, #116	; 0x74
 80175b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b4:	ab03      	add	r3, sp, #12
 80175b6:	9300      	str	r3, [sp, #0]
 80175b8:	462a      	mov	r2, r5
 80175ba:	4b06      	ldr	r3, [pc, #24]	; (80175d4 <_svfiprintf_r+0x1f8>)
 80175bc:	a904      	add	r1, sp, #16
 80175be:	4638      	mov	r0, r7
 80175c0:	f000 f9d4 	bl	801796c <_printf_i>
 80175c4:	e7eb      	b.n	801759e <_svfiprintf_r+0x1c2>
 80175c6:	bf00      	nop
 80175c8:	08019d94 	.word	0x08019d94
 80175cc:	08019d9e 	.word	0x08019d9e
 80175d0:	00000000 	.word	0x00000000
 80175d4:	08017325 	.word	0x08017325
 80175d8:	08019d9a 	.word	0x08019d9a

080175dc <__sfputc_r>:
 80175dc:	6893      	ldr	r3, [r2, #8]
 80175de:	3b01      	subs	r3, #1
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	b410      	push	{r4}
 80175e4:	6093      	str	r3, [r2, #8]
 80175e6:	da08      	bge.n	80175fa <__sfputc_r+0x1e>
 80175e8:	6994      	ldr	r4, [r2, #24]
 80175ea:	42a3      	cmp	r3, r4
 80175ec:	db01      	blt.n	80175f2 <__sfputc_r+0x16>
 80175ee:	290a      	cmp	r1, #10
 80175f0:	d103      	bne.n	80175fa <__sfputc_r+0x1e>
 80175f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175f6:	f7ff bba9 	b.w	8016d4c <__swbuf_r>
 80175fa:	6813      	ldr	r3, [r2, #0]
 80175fc:	1c58      	adds	r0, r3, #1
 80175fe:	6010      	str	r0, [r2, #0]
 8017600:	7019      	strb	r1, [r3, #0]
 8017602:	4608      	mov	r0, r1
 8017604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017608:	4770      	bx	lr

0801760a <__sfputs_r>:
 801760a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801760c:	4606      	mov	r6, r0
 801760e:	460f      	mov	r7, r1
 8017610:	4614      	mov	r4, r2
 8017612:	18d5      	adds	r5, r2, r3
 8017614:	42ac      	cmp	r4, r5
 8017616:	d101      	bne.n	801761c <__sfputs_r+0x12>
 8017618:	2000      	movs	r0, #0
 801761a:	e007      	b.n	801762c <__sfputs_r+0x22>
 801761c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017620:	463a      	mov	r2, r7
 8017622:	4630      	mov	r0, r6
 8017624:	f7ff ffda 	bl	80175dc <__sfputc_r>
 8017628:	1c43      	adds	r3, r0, #1
 801762a:	d1f3      	bne.n	8017614 <__sfputs_r+0xa>
 801762c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017630 <_vfiprintf_r>:
 8017630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017634:	460d      	mov	r5, r1
 8017636:	b09d      	sub	sp, #116	; 0x74
 8017638:	4614      	mov	r4, r2
 801763a:	4698      	mov	r8, r3
 801763c:	4606      	mov	r6, r0
 801763e:	b118      	cbz	r0, 8017648 <_vfiprintf_r+0x18>
 8017640:	6983      	ldr	r3, [r0, #24]
 8017642:	b90b      	cbnz	r3, 8017648 <_vfiprintf_r+0x18>
 8017644:	f7ff fd5c 	bl	8017100 <__sinit>
 8017648:	4b89      	ldr	r3, [pc, #548]	; (8017870 <_vfiprintf_r+0x240>)
 801764a:	429d      	cmp	r5, r3
 801764c:	d11b      	bne.n	8017686 <_vfiprintf_r+0x56>
 801764e:	6875      	ldr	r5, [r6, #4]
 8017650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017652:	07d9      	lsls	r1, r3, #31
 8017654:	d405      	bmi.n	8017662 <_vfiprintf_r+0x32>
 8017656:	89ab      	ldrh	r3, [r5, #12]
 8017658:	059a      	lsls	r2, r3, #22
 801765a:	d402      	bmi.n	8017662 <_vfiprintf_r+0x32>
 801765c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801765e:	f7ff fded 	bl	801723c <__retarget_lock_acquire_recursive>
 8017662:	89ab      	ldrh	r3, [r5, #12]
 8017664:	071b      	lsls	r3, r3, #28
 8017666:	d501      	bpl.n	801766c <_vfiprintf_r+0x3c>
 8017668:	692b      	ldr	r3, [r5, #16]
 801766a:	b9eb      	cbnz	r3, 80176a8 <_vfiprintf_r+0x78>
 801766c:	4629      	mov	r1, r5
 801766e:	4630      	mov	r0, r6
 8017670:	f7ff fbbe 	bl	8016df0 <__swsetup_r>
 8017674:	b1c0      	cbz	r0, 80176a8 <_vfiprintf_r+0x78>
 8017676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017678:	07dc      	lsls	r4, r3, #31
 801767a:	d50e      	bpl.n	801769a <_vfiprintf_r+0x6a>
 801767c:	f04f 30ff 	mov.w	r0, #4294967295
 8017680:	b01d      	add	sp, #116	; 0x74
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	4b7b      	ldr	r3, [pc, #492]	; (8017874 <_vfiprintf_r+0x244>)
 8017688:	429d      	cmp	r5, r3
 801768a:	d101      	bne.n	8017690 <_vfiprintf_r+0x60>
 801768c:	68b5      	ldr	r5, [r6, #8]
 801768e:	e7df      	b.n	8017650 <_vfiprintf_r+0x20>
 8017690:	4b79      	ldr	r3, [pc, #484]	; (8017878 <_vfiprintf_r+0x248>)
 8017692:	429d      	cmp	r5, r3
 8017694:	bf08      	it	eq
 8017696:	68f5      	ldreq	r5, [r6, #12]
 8017698:	e7da      	b.n	8017650 <_vfiprintf_r+0x20>
 801769a:	89ab      	ldrh	r3, [r5, #12]
 801769c:	0598      	lsls	r0, r3, #22
 801769e:	d4ed      	bmi.n	801767c <_vfiprintf_r+0x4c>
 80176a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176a2:	f7ff fdcc 	bl	801723e <__retarget_lock_release_recursive>
 80176a6:	e7e9      	b.n	801767c <_vfiprintf_r+0x4c>
 80176a8:	2300      	movs	r3, #0
 80176aa:	9309      	str	r3, [sp, #36]	; 0x24
 80176ac:	2320      	movs	r3, #32
 80176ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80176b6:	2330      	movs	r3, #48	; 0x30
 80176b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801787c <_vfiprintf_r+0x24c>
 80176bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176c0:	f04f 0901 	mov.w	r9, #1
 80176c4:	4623      	mov	r3, r4
 80176c6:	469a      	mov	sl, r3
 80176c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176cc:	b10a      	cbz	r2, 80176d2 <_vfiprintf_r+0xa2>
 80176ce:	2a25      	cmp	r2, #37	; 0x25
 80176d0:	d1f9      	bne.n	80176c6 <_vfiprintf_r+0x96>
 80176d2:	ebba 0b04 	subs.w	fp, sl, r4
 80176d6:	d00b      	beq.n	80176f0 <_vfiprintf_r+0xc0>
 80176d8:	465b      	mov	r3, fp
 80176da:	4622      	mov	r2, r4
 80176dc:	4629      	mov	r1, r5
 80176de:	4630      	mov	r0, r6
 80176e0:	f7ff ff93 	bl	801760a <__sfputs_r>
 80176e4:	3001      	adds	r0, #1
 80176e6:	f000 80aa 	beq.w	801783e <_vfiprintf_r+0x20e>
 80176ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176ec:	445a      	add	r2, fp
 80176ee:	9209      	str	r2, [sp, #36]	; 0x24
 80176f0:	f89a 3000 	ldrb.w	r3, [sl]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f000 80a2 	beq.w	801783e <_vfiprintf_r+0x20e>
 80176fa:	2300      	movs	r3, #0
 80176fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017704:	f10a 0a01 	add.w	sl, sl, #1
 8017708:	9304      	str	r3, [sp, #16]
 801770a:	9307      	str	r3, [sp, #28]
 801770c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017710:	931a      	str	r3, [sp, #104]	; 0x68
 8017712:	4654      	mov	r4, sl
 8017714:	2205      	movs	r2, #5
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	4858      	ldr	r0, [pc, #352]	; (801787c <_vfiprintf_r+0x24c>)
 801771c:	f7e8 fd70 	bl	8000200 <memchr>
 8017720:	9a04      	ldr	r2, [sp, #16]
 8017722:	b9d8      	cbnz	r0, 801775c <_vfiprintf_r+0x12c>
 8017724:	06d1      	lsls	r1, r2, #27
 8017726:	bf44      	itt	mi
 8017728:	2320      	movmi	r3, #32
 801772a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801772e:	0713      	lsls	r3, r2, #28
 8017730:	bf44      	itt	mi
 8017732:	232b      	movmi	r3, #43	; 0x2b
 8017734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017738:	f89a 3000 	ldrb.w	r3, [sl]
 801773c:	2b2a      	cmp	r3, #42	; 0x2a
 801773e:	d015      	beq.n	801776c <_vfiprintf_r+0x13c>
 8017740:	9a07      	ldr	r2, [sp, #28]
 8017742:	4654      	mov	r4, sl
 8017744:	2000      	movs	r0, #0
 8017746:	f04f 0c0a 	mov.w	ip, #10
 801774a:	4621      	mov	r1, r4
 801774c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017750:	3b30      	subs	r3, #48	; 0x30
 8017752:	2b09      	cmp	r3, #9
 8017754:	d94e      	bls.n	80177f4 <_vfiprintf_r+0x1c4>
 8017756:	b1b0      	cbz	r0, 8017786 <_vfiprintf_r+0x156>
 8017758:	9207      	str	r2, [sp, #28]
 801775a:	e014      	b.n	8017786 <_vfiprintf_r+0x156>
 801775c:	eba0 0308 	sub.w	r3, r0, r8
 8017760:	fa09 f303 	lsl.w	r3, r9, r3
 8017764:	4313      	orrs	r3, r2
 8017766:	9304      	str	r3, [sp, #16]
 8017768:	46a2      	mov	sl, r4
 801776a:	e7d2      	b.n	8017712 <_vfiprintf_r+0xe2>
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	1d19      	adds	r1, r3, #4
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	9103      	str	r1, [sp, #12]
 8017774:	2b00      	cmp	r3, #0
 8017776:	bfbb      	ittet	lt
 8017778:	425b      	neglt	r3, r3
 801777a:	f042 0202 	orrlt.w	r2, r2, #2
 801777e:	9307      	strge	r3, [sp, #28]
 8017780:	9307      	strlt	r3, [sp, #28]
 8017782:	bfb8      	it	lt
 8017784:	9204      	strlt	r2, [sp, #16]
 8017786:	7823      	ldrb	r3, [r4, #0]
 8017788:	2b2e      	cmp	r3, #46	; 0x2e
 801778a:	d10c      	bne.n	80177a6 <_vfiprintf_r+0x176>
 801778c:	7863      	ldrb	r3, [r4, #1]
 801778e:	2b2a      	cmp	r3, #42	; 0x2a
 8017790:	d135      	bne.n	80177fe <_vfiprintf_r+0x1ce>
 8017792:	9b03      	ldr	r3, [sp, #12]
 8017794:	1d1a      	adds	r2, r3, #4
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	9203      	str	r2, [sp, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	bfb8      	it	lt
 801779e:	f04f 33ff 	movlt.w	r3, #4294967295
 80177a2:	3402      	adds	r4, #2
 80177a4:	9305      	str	r3, [sp, #20]
 80177a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801788c <_vfiprintf_r+0x25c>
 80177aa:	7821      	ldrb	r1, [r4, #0]
 80177ac:	2203      	movs	r2, #3
 80177ae:	4650      	mov	r0, sl
 80177b0:	f7e8 fd26 	bl	8000200 <memchr>
 80177b4:	b140      	cbz	r0, 80177c8 <_vfiprintf_r+0x198>
 80177b6:	2340      	movs	r3, #64	; 0x40
 80177b8:	eba0 000a 	sub.w	r0, r0, sl
 80177bc:	fa03 f000 	lsl.w	r0, r3, r0
 80177c0:	9b04      	ldr	r3, [sp, #16]
 80177c2:	4303      	orrs	r3, r0
 80177c4:	3401      	adds	r4, #1
 80177c6:	9304      	str	r3, [sp, #16]
 80177c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177cc:	482c      	ldr	r0, [pc, #176]	; (8017880 <_vfiprintf_r+0x250>)
 80177ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177d2:	2206      	movs	r2, #6
 80177d4:	f7e8 fd14 	bl	8000200 <memchr>
 80177d8:	2800      	cmp	r0, #0
 80177da:	d03f      	beq.n	801785c <_vfiprintf_r+0x22c>
 80177dc:	4b29      	ldr	r3, [pc, #164]	; (8017884 <_vfiprintf_r+0x254>)
 80177de:	bb1b      	cbnz	r3, 8017828 <_vfiprintf_r+0x1f8>
 80177e0:	9b03      	ldr	r3, [sp, #12]
 80177e2:	3307      	adds	r3, #7
 80177e4:	f023 0307 	bic.w	r3, r3, #7
 80177e8:	3308      	adds	r3, #8
 80177ea:	9303      	str	r3, [sp, #12]
 80177ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ee:	443b      	add	r3, r7
 80177f0:	9309      	str	r3, [sp, #36]	; 0x24
 80177f2:	e767      	b.n	80176c4 <_vfiprintf_r+0x94>
 80177f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80177f8:	460c      	mov	r4, r1
 80177fa:	2001      	movs	r0, #1
 80177fc:	e7a5      	b.n	801774a <_vfiprintf_r+0x11a>
 80177fe:	2300      	movs	r3, #0
 8017800:	3401      	adds	r4, #1
 8017802:	9305      	str	r3, [sp, #20]
 8017804:	4619      	mov	r1, r3
 8017806:	f04f 0c0a 	mov.w	ip, #10
 801780a:	4620      	mov	r0, r4
 801780c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017810:	3a30      	subs	r2, #48	; 0x30
 8017812:	2a09      	cmp	r2, #9
 8017814:	d903      	bls.n	801781e <_vfiprintf_r+0x1ee>
 8017816:	2b00      	cmp	r3, #0
 8017818:	d0c5      	beq.n	80177a6 <_vfiprintf_r+0x176>
 801781a:	9105      	str	r1, [sp, #20]
 801781c:	e7c3      	b.n	80177a6 <_vfiprintf_r+0x176>
 801781e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017822:	4604      	mov	r4, r0
 8017824:	2301      	movs	r3, #1
 8017826:	e7f0      	b.n	801780a <_vfiprintf_r+0x1da>
 8017828:	ab03      	add	r3, sp, #12
 801782a:	9300      	str	r3, [sp, #0]
 801782c:	462a      	mov	r2, r5
 801782e:	4b16      	ldr	r3, [pc, #88]	; (8017888 <_vfiprintf_r+0x258>)
 8017830:	a904      	add	r1, sp, #16
 8017832:	4630      	mov	r0, r6
 8017834:	f3af 8000 	nop.w
 8017838:	4607      	mov	r7, r0
 801783a:	1c78      	adds	r0, r7, #1
 801783c:	d1d6      	bne.n	80177ec <_vfiprintf_r+0x1bc>
 801783e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017840:	07d9      	lsls	r1, r3, #31
 8017842:	d405      	bmi.n	8017850 <_vfiprintf_r+0x220>
 8017844:	89ab      	ldrh	r3, [r5, #12]
 8017846:	059a      	lsls	r2, r3, #22
 8017848:	d402      	bmi.n	8017850 <_vfiprintf_r+0x220>
 801784a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801784c:	f7ff fcf7 	bl	801723e <__retarget_lock_release_recursive>
 8017850:	89ab      	ldrh	r3, [r5, #12]
 8017852:	065b      	lsls	r3, r3, #25
 8017854:	f53f af12 	bmi.w	801767c <_vfiprintf_r+0x4c>
 8017858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801785a:	e711      	b.n	8017680 <_vfiprintf_r+0x50>
 801785c:	ab03      	add	r3, sp, #12
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	462a      	mov	r2, r5
 8017862:	4b09      	ldr	r3, [pc, #36]	; (8017888 <_vfiprintf_r+0x258>)
 8017864:	a904      	add	r1, sp, #16
 8017866:	4630      	mov	r0, r6
 8017868:	f000 f880 	bl	801796c <_printf_i>
 801786c:	e7e4      	b.n	8017838 <_vfiprintf_r+0x208>
 801786e:	bf00      	nop
 8017870:	08019d54 	.word	0x08019d54
 8017874:	08019d74 	.word	0x08019d74
 8017878:	08019d34 	.word	0x08019d34
 801787c:	08019d94 	.word	0x08019d94
 8017880:	08019d9e 	.word	0x08019d9e
 8017884:	00000000 	.word	0x00000000
 8017888:	0801760b 	.word	0x0801760b
 801788c:	08019d9a 	.word	0x08019d9a

08017890 <_printf_common>:
 8017890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017894:	4616      	mov	r6, r2
 8017896:	4699      	mov	r9, r3
 8017898:	688a      	ldr	r2, [r1, #8]
 801789a:	690b      	ldr	r3, [r1, #16]
 801789c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178a0:	4293      	cmp	r3, r2
 80178a2:	bfb8      	it	lt
 80178a4:	4613      	movlt	r3, r2
 80178a6:	6033      	str	r3, [r6, #0]
 80178a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80178ac:	4607      	mov	r7, r0
 80178ae:	460c      	mov	r4, r1
 80178b0:	b10a      	cbz	r2, 80178b6 <_printf_common+0x26>
 80178b2:	3301      	adds	r3, #1
 80178b4:	6033      	str	r3, [r6, #0]
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	0699      	lsls	r1, r3, #26
 80178ba:	bf42      	ittt	mi
 80178bc:	6833      	ldrmi	r3, [r6, #0]
 80178be:	3302      	addmi	r3, #2
 80178c0:	6033      	strmi	r3, [r6, #0]
 80178c2:	6825      	ldr	r5, [r4, #0]
 80178c4:	f015 0506 	ands.w	r5, r5, #6
 80178c8:	d106      	bne.n	80178d8 <_printf_common+0x48>
 80178ca:	f104 0a19 	add.w	sl, r4, #25
 80178ce:	68e3      	ldr	r3, [r4, #12]
 80178d0:	6832      	ldr	r2, [r6, #0]
 80178d2:	1a9b      	subs	r3, r3, r2
 80178d4:	42ab      	cmp	r3, r5
 80178d6:	dc26      	bgt.n	8017926 <_printf_common+0x96>
 80178d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80178dc:	1e13      	subs	r3, r2, #0
 80178de:	6822      	ldr	r2, [r4, #0]
 80178e0:	bf18      	it	ne
 80178e2:	2301      	movne	r3, #1
 80178e4:	0692      	lsls	r2, r2, #26
 80178e6:	d42b      	bmi.n	8017940 <_printf_common+0xb0>
 80178e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178ec:	4649      	mov	r1, r9
 80178ee:	4638      	mov	r0, r7
 80178f0:	47c0      	blx	r8
 80178f2:	3001      	adds	r0, #1
 80178f4:	d01e      	beq.n	8017934 <_printf_common+0xa4>
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	68e5      	ldr	r5, [r4, #12]
 80178fa:	6832      	ldr	r2, [r6, #0]
 80178fc:	f003 0306 	and.w	r3, r3, #6
 8017900:	2b04      	cmp	r3, #4
 8017902:	bf08      	it	eq
 8017904:	1aad      	subeq	r5, r5, r2
 8017906:	68a3      	ldr	r3, [r4, #8]
 8017908:	6922      	ldr	r2, [r4, #16]
 801790a:	bf0c      	ite	eq
 801790c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017910:	2500      	movne	r5, #0
 8017912:	4293      	cmp	r3, r2
 8017914:	bfc4      	itt	gt
 8017916:	1a9b      	subgt	r3, r3, r2
 8017918:	18ed      	addgt	r5, r5, r3
 801791a:	2600      	movs	r6, #0
 801791c:	341a      	adds	r4, #26
 801791e:	42b5      	cmp	r5, r6
 8017920:	d11a      	bne.n	8017958 <_printf_common+0xc8>
 8017922:	2000      	movs	r0, #0
 8017924:	e008      	b.n	8017938 <_printf_common+0xa8>
 8017926:	2301      	movs	r3, #1
 8017928:	4652      	mov	r2, sl
 801792a:	4649      	mov	r1, r9
 801792c:	4638      	mov	r0, r7
 801792e:	47c0      	blx	r8
 8017930:	3001      	adds	r0, #1
 8017932:	d103      	bne.n	801793c <_printf_common+0xac>
 8017934:	f04f 30ff 	mov.w	r0, #4294967295
 8017938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801793c:	3501      	adds	r5, #1
 801793e:	e7c6      	b.n	80178ce <_printf_common+0x3e>
 8017940:	18e1      	adds	r1, r4, r3
 8017942:	1c5a      	adds	r2, r3, #1
 8017944:	2030      	movs	r0, #48	; 0x30
 8017946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801794a:	4422      	add	r2, r4
 801794c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017954:	3302      	adds	r3, #2
 8017956:	e7c7      	b.n	80178e8 <_printf_common+0x58>
 8017958:	2301      	movs	r3, #1
 801795a:	4622      	mov	r2, r4
 801795c:	4649      	mov	r1, r9
 801795e:	4638      	mov	r0, r7
 8017960:	47c0      	blx	r8
 8017962:	3001      	adds	r0, #1
 8017964:	d0e6      	beq.n	8017934 <_printf_common+0xa4>
 8017966:	3601      	adds	r6, #1
 8017968:	e7d9      	b.n	801791e <_printf_common+0x8e>
	...

0801796c <_printf_i>:
 801796c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017970:	7e0f      	ldrb	r7, [r1, #24]
 8017972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017974:	2f78      	cmp	r7, #120	; 0x78
 8017976:	4691      	mov	r9, r2
 8017978:	4680      	mov	r8, r0
 801797a:	460c      	mov	r4, r1
 801797c:	469a      	mov	sl, r3
 801797e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017982:	d807      	bhi.n	8017994 <_printf_i+0x28>
 8017984:	2f62      	cmp	r7, #98	; 0x62
 8017986:	d80a      	bhi.n	801799e <_printf_i+0x32>
 8017988:	2f00      	cmp	r7, #0
 801798a:	f000 80d8 	beq.w	8017b3e <_printf_i+0x1d2>
 801798e:	2f58      	cmp	r7, #88	; 0x58
 8017990:	f000 80a3 	beq.w	8017ada <_printf_i+0x16e>
 8017994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801799c:	e03a      	b.n	8017a14 <_printf_i+0xa8>
 801799e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179a2:	2b15      	cmp	r3, #21
 80179a4:	d8f6      	bhi.n	8017994 <_printf_i+0x28>
 80179a6:	a101      	add	r1, pc, #4	; (adr r1, 80179ac <_printf_i+0x40>)
 80179a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80179ac:	08017a05 	.word	0x08017a05
 80179b0:	08017a19 	.word	0x08017a19
 80179b4:	08017995 	.word	0x08017995
 80179b8:	08017995 	.word	0x08017995
 80179bc:	08017995 	.word	0x08017995
 80179c0:	08017995 	.word	0x08017995
 80179c4:	08017a19 	.word	0x08017a19
 80179c8:	08017995 	.word	0x08017995
 80179cc:	08017995 	.word	0x08017995
 80179d0:	08017995 	.word	0x08017995
 80179d4:	08017995 	.word	0x08017995
 80179d8:	08017b25 	.word	0x08017b25
 80179dc:	08017a49 	.word	0x08017a49
 80179e0:	08017b07 	.word	0x08017b07
 80179e4:	08017995 	.word	0x08017995
 80179e8:	08017995 	.word	0x08017995
 80179ec:	08017b47 	.word	0x08017b47
 80179f0:	08017995 	.word	0x08017995
 80179f4:	08017a49 	.word	0x08017a49
 80179f8:	08017995 	.word	0x08017995
 80179fc:	08017995 	.word	0x08017995
 8017a00:	08017b0f 	.word	0x08017b0f
 8017a04:	682b      	ldr	r3, [r5, #0]
 8017a06:	1d1a      	adds	r2, r3, #4
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	602a      	str	r2, [r5, #0]
 8017a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a14:	2301      	movs	r3, #1
 8017a16:	e0a3      	b.n	8017b60 <_printf_i+0x1f4>
 8017a18:	6820      	ldr	r0, [r4, #0]
 8017a1a:	6829      	ldr	r1, [r5, #0]
 8017a1c:	0606      	lsls	r6, r0, #24
 8017a1e:	f101 0304 	add.w	r3, r1, #4
 8017a22:	d50a      	bpl.n	8017a3a <_printf_i+0xce>
 8017a24:	680e      	ldr	r6, [r1, #0]
 8017a26:	602b      	str	r3, [r5, #0]
 8017a28:	2e00      	cmp	r6, #0
 8017a2a:	da03      	bge.n	8017a34 <_printf_i+0xc8>
 8017a2c:	232d      	movs	r3, #45	; 0x2d
 8017a2e:	4276      	negs	r6, r6
 8017a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a34:	485e      	ldr	r0, [pc, #376]	; (8017bb0 <_printf_i+0x244>)
 8017a36:	230a      	movs	r3, #10
 8017a38:	e019      	b.n	8017a6e <_printf_i+0x102>
 8017a3a:	680e      	ldr	r6, [r1, #0]
 8017a3c:	602b      	str	r3, [r5, #0]
 8017a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a42:	bf18      	it	ne
 8017a44:	b236      	sxthne	r6, r6
 8017a46:	e7ef      	b.n	8017a28 <_printf_i+0xbc>
 8017a48:	682b      	ldr	r3, [r5, #0]
 8017a4a:	6820      	ldr	r0, [r4, #0]
 8017a4c:	1d19      	adds	r1, r3, #4
 8017a4e:	6029      	str	r1, [r5, #0]
 8017a50:	0601      	lsls	r1, r0, #24
 8017a52:	d501      	bpl.n	8017a58 <_printf_i+0xec>
 8017a54:	681e      	ldr	r6, [r3, #0]
 8017a56:	e002      	b.n	8017a5e <_printf_i+0xf2>
 8017a58:	0646      	lsls	r6, r0, #25
 8017a5a:	d5fb      	bpl.n	8017a54 <_printf_i+0xe8>
 8017a5c:	881e      	ldrh	r6, [r3, #0]
 8017a5e:	4854      	ldr	r0, [pc, #336]	; (8017bb0 <_printf_i+0x244>)
 8017a60:	2f6f      	cmp	r7, #111	; 0x6f
 8017a62:	bf0c      	ite	eq
 8017a64:	2308      	moveq	r3, #8
 8017a66:	230a      	movne	r3, #10
 8017a68:	2100      	movs	r1, #0
 8017a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a6e:	6865      	ldr	r5, [r4, #4]
 8017a70:	60a5      	str	r5, [r4, #8]
 8017a72:	2d00      	cmp	r5, #0
 8017a74:	bfa2      	ittt	ge
 8017a76:	6821      	ldrge	r1, [r4, #0]
 8017a78:	f021 0104 	bicge.w	r1, r1, #4
 8017a7c:	6021      	strge	r1, [r4, #0]
 8017a7e:	b90e      	cbnz	r6, 8017a84 <_printf_i+0x118>
 8017a80:	2d00      	cmp	r5, #0
 8017a82:	d04d      	beq.n	8017b20 <_printf_i+0x1b4>
 8017a84:	4615      	mov	r5, r2
 8017a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8017a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8017a8e:	5dc7      	ldrb	r7, [r0, r7]
 8017a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017a94:	4637      	mov	r7, r6
 8017a96:	42bb      	cmp	r3, r7
 8017a98:	460e      	mov	r6, r1
 8017a9a:	d9f4      	bls.n	8017a86 <_printf_i+0x11a>
 8017a9c:	2b08      	cmp	r3, #8
 8017a9e:	d10b      	bne.n	8017ab8 <_printf_i+0x14c>
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	07de      	lsls	r6, r3, #31
 8017aa4:	d508      	bpl.n	8017ab8 <_printf_i+0x14c>
 8017aa6:	6923      	ldr	r3, [r4, #16]
 8017aa8:	6861      	ldr	r1, [r4, #4]
 8017aaa:	4299      	cmp	r1, r3
 8017aac:	bfde      	ittt	le
 8017aae:	2330      	movle	r3, #48	; 0x30
 8017ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ab8:	1b52      	subs	r2, r2, r5
 8017aba:	6122      	str	r2, [r4, #16]
 8017abc:	f8cd a000 	str.w	sl, [sp]
 8017ac0:	464b      	mov	r3, r9
 8017ac2:	aa03      	add	r2, sp, #12
 8017ac4:	4621      	mov	r1, r4
 8017ac6:	4640      	mov	r0, r8
 8017ac8:	f7ff fee2 	bl	8017890 <_printf_common>
 8017acc:	3001      	adds	r0, #1
 8017ace:	d14c      	bne.n	8017b6a <_printf_i+0x1fe>
 8017ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad4:	b004      	add	sp, #16
 8017ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ada:	4835      	ldr	r0, [pc, #212]	; (8017bb0 <_printf_i+0x244>)
 8017adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017ae0:	6829      	ldr	r1, [r5, #0]
 8017ae2:	6823      	ldr	r3, [r4, #0]
 8017ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ae8:	6029      	str	r1, [r5, #0]
 8017aea:	061d      	lsls	r5, r3, #24
 8017aec:	d514      	bpl.n	8017b18 <_printf_i+0x1ac>
 8017aee:	07df      	lsls	r7, r3, #31
 8017af0:	bf44      	itt	mi
 8017af2:	f043 0320 	orrmi.w	r3, r3, #32
 8017af6:	6023      	strmi	r3, [r4, #0]
 8017af8:	b91e      	cbnz	r6, 8017b02 <_printf_i+0x196>
 8017afa:	6823      	ldr	r3, [r4, #0]
 8017afc:	f023 0320 	bic.w	r3, r3, #32
 8017b00:	6023      	str	r3, [r4, #0]
 8017b02:	2310      	movs	r3, #16
 8017b04:	e7b0      	b.n	8017a68 <_printf_i+0xfc>
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	f043 0320 	orr.w	r3, r3, #32
 8017b0c:	6023      	str	r3, [r4, #0]
 8017b0e:	2378      	movs	r3, #120	; 0x78
 8017b10:	4828      	ldr	r0, [pc, #160]	; (8017bb4 <_printf_i+0x248>)
 8017b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b16:	e7e3      	b.n	8017ae0 <_printf_i+0x174>
 8017b18:	0659      	lsls	r1, r3, #25
 8017b1a:	bf48      	it	mi
 8017b1c:	b2b6      	uxthmi	r6, r6
 8017b1e:	e7e6      	b.n	8017aee <_printf_i+0x182>
 8017b20:	4615      	mov	r5, r2
 8017b22:	e7bb      	b.n	8017a9c <_printf_i+0x130>
 8017b24:	682b      	ldr	r3, [r5, #0]
 8017b26:	6826      	ldr	r6, [r4, #0]
 8017b28:	6961      	ldr	r1, [r4, #20]
 8017b2a:	1d18      	adds	r0, r3, #4
 8017b2c:	6028      	str	r0, [r5, #0]
 8017b2e:	0635      	lsls	r5, r6, #24
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	d501      	bpl.n	8017b38 <_printf_i+0x1cc>
 8017b34:	6019      	str	r1, [r3, #0]
 8017b36:	e002      	b.n	8017b3e <_printf_i+0x1d2>
 8017b38:	0670      	lsls	r0, r6, #25
 8017b3a:	d5fb      	bpl.n	8017b34 <_printf_i+0x1c8>
 8017b3c:	8019      	strh	r1, [r3, #0]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	6123      	str	r3, [r4, #16]
 8017b42:	4615      	mov	r5, r2
 8017b44:	e7ba      	b.n	8017abc <_printf_i+0x150>
 8017b46:	682b      	ldr	r3, [r5, #0]
 8017b48:	1d1a      	adds	r2, r3, #4
 8017b4a:	602a      	str	r2, [r5, #0]
 8017b4c:	681d      	ldr	r5, [r3, #0]
 8017b4e:	6862      	ldr	r2, [r4, #4]
 8017b50:	2100      	movs	r1, #0
 8017b52:	4628      	mov	r0, r5
 8017b54:	f7e8 fb54 	bl	8000200 <memchr>
 8017b58:	b108      	cbz	r0, 8017b5e <_printf_i+0x1f2>
 8017b5a:	1b40      	subs	r0, r0, r5
 8017b5c:	6060      	str	r0, [r4, #4]
 8017b5e:	6863      	ldr	r3, [r4, #4]
 8017b60:	6123      	str	r3, [r4, #16]
 8017b62:	2300      	movs	r3, #0
 8017b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b68:	e7a8      	b.n	8017abc <_printf_i+0x150>
 8017b6a:	6923      	ldr	r3, [r4, #16]
 8017b6c:	462a      	mov	r2, r5
 8017b6e:	4649      	mov	r1, r9
 8017b70:	4640      	mov	r0, r8
 8017b72:	47d0      	blx	sl
 8017b74:	3001      	adds	r0, #1
 8017b76:	d0ab      	beq.n	8017ad0 <_printf_i+0x164>
 8017b78:	6823      	ldr	r3, [r4, #0]
 8017b7a:	079b      	lsls	r3, r3, #30
 8017b7c:	d413      	bmi.n	8017ba6 <_printf_i+0x23a>
 8017b7e:	68e0      	ldr	r0, [r4, #12]
 8017b80:	9b03      	ldr	r3, [sp, #12]
 8017b82:	4298      	cmp	r0, r3
 8017b84:	bfb8      	it	lt
 8017b86:	4618      	movlt	r0, r3
 8017b88:	e7a4      	b.n	8017ad4 <_printf_i+0x168>
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	4632      	mov	r2, r6
 8017b8e:	4649      	mov	r1, r9
 8017b90:	4640      	mov	r0, r8
 8017b92:	47d0      	blx	sl
 8017b94:	3001      	adds	r0, #1
 8017b96:	d09b      	beq.n	8017ad0 <_printf_i+0x164>
 8017b98:	3501      	adds	r5, #1
 8017b9a:	68e3      	ldr	r3, [r4, #12]
 8017b9c:	9903      	ldr	r1, [sp, #12]
 8017b9e:	1a5b      	subs	r3, r3, r1
 8017ba0:	42ab      	cmp	r3, r5
 8017ba2:	dcf2      	bgt.n	8017b8a <_printf_i+0x21e>
 8017ba4:	e7eb      	b.n	8017b7e <_printf_i+0x212>
 8017ba6:	2500      	movs	r5, #0
 8017ba8:	f104 0619 	add.w	r6, r4, #25
 8017bac:	e7f5      	b.n	8017b9a <_printf_i+0x22e>
 8017bae:	bf00      	nop
 8017bb0:	08019da5 	.word	0x08019da5
 8017bb4:	08019db6 	.word	0x08019db6

08017bb8 <__sread>:
 8017bb8:	b510      	push	{r4, lr}
 8017bba:	460c      	mov	r4, r1
 8017bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bc0:	f000 f8de 	bl	8017d80 <_read_r>
 8017bc4:	2800      	cmp	r0, #0
 8017bc6:	bfab      	itete	ge
 8017bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017bca:	89a3      	ldrhlt	r3, [r4, #12]
 8017bcc:	181b      	addge	r3, r3, r0
 8017bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017bd2:	bfac      	ite	ge
 8017bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017bd6:	81a3      	strhlt	r3, [r4, #12]
 8017bd8:	bd10      	pop	{r4, pc}

08017bda <__swrite>:
 8017bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bde:	461f      	mov	r7, r3
 8017be0:	898b      	ldrh	r3, [r1, #12]
 8017be2:	05db      	lsls	r3, r3, #23
 8017be4:	4605      	mov	r5, r0
 8017be6:	460c      	mov	r4, r1
 8017be8:	4616      	mov	r6, r2
 8017bea:	d505      	bpl.n	8017bf8 <__swrite+0x1e>
 8017bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bf0:	2302      	movs	r3, #2
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	f000 f868 	bl	8017cc8 <_lseek_r>
 8017bf8:	89a3      	ldrh	r3, [r4, #12]
 8017bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c02:	81a3      	strh	r3, [r4, #12]
 8017c04:	4632      	mov	r2, r6
 8017c06:	463b      	mov	r3, r7
 8017c08:	4628      	mov	r0, r5
 8017c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0e:	f000 b817 	b.w	8017c40 <_write_r>

08017c12 <__sseek>:
 8017c12:	b510      	push	{r4, lr}
 8017c14:	460c      	mov	r4, r1
 8017c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c1a:	f000 f855 	bl	8017cc8 <_lseek_r>
 8017c1e:	1c43      	adds	r3, r0, #1
 8017c20:	89a3      	ldrh	r3, [r4, #12]
 8017c22:	bf15      	itete	ne
 8017c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c2e:	81a3      	strheq	r3, [r4, #12]
 8017c30:	bf18      	it	ne
 8017c32:	81a3      	strhne	r3, [r4, #12]
 8017c34:	bd10      	pop	{r4, pc}

08017c36 <__sclose>:
 8017c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c3a:	f000 b813 	b.w	8017c64 <_close_r>
	...

08017c40 <_write_r>:
 8017c40:	b538      	push	{r3, r4, r5, lr}
 8017c42:	4d07      	ldr	r5, [pc, #28]	; (8017c60 <_write_r+0x20>)
 8017c44:	4604      	mov	r4, r0
 8017c46:	4608      	mov	r0, r1
 8017c48:	4611      	mov	r1, r2
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	602a      	str	r2, [r5, #0]
 8017c4e:	461a      	mov	r2, r3
 8017c50:	f7f3 f9b7 	bl	800afc2 <_write>
 8017c54:	1c43      	adds	r3, r0, #1
 8017c56:	d102      	bne.n	8017c5e <_write_r+0x1e>
 8017c58:	682b      	ldr	r3, [r5, #0]
 8017c5a:	b103      	cbz	r3, 8017c5e <_write_r+0x1e>
 8017c5c:	6023      	str	r3, [r4, #0]
 8017c5e:	bd38      	pop	{r3, r4, r5, pc}
 8017c60:	20003218 	.word	0x20003218

08017c64 <_close_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4d06      	ldr	r5, [pc, #24]	; (8017c80 <_close_r+0x1c>)
 8017c68:	2300      	movs	r3, #0
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	4608      	mov	r0, r1
 8017c6e:	602b      	str	r3, [r5, #0]
 8017c70:	f7f3 f9c3 	bl	800affa <_close>
 8017c74:	1c43      	adds	r3, r0, #1
 8017c76:	d102      	bne.n	8017c7e <_close_r+0x1a>
 8017c78:	682b      	ldr	r3, [r5, #0]
 8017c7a:	b103      	cbz	r3, 8017c7e <_close_r+0x1a>
 8017c7c:	6023      	str	r3, [r4, #0]
 8017c7e:	bd38      	pop	{r3, r4, r5, pc}
 8017c80:	20003218 	.word	0x20003218

08017c84 <_fstat_r>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	4d07      	ldr	r5, [pc, #28]	; (8017ca4 <_fstat_r+0x20>)
 8017c88:	2300      	movs	r3, #0
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	4608      	mov	r0, r1
 8017c8e:	4611      	mov	r1, r2
 8017c90:	602b      	str	r3, [r5, #0]
 8017c92:	f7f3 f9be 	bl	800b012 <_fstat>
 8017c96:	1c43      	adds	r3, r0, #1
 8017c98:	d102      	bne.n	8017ca0 <_fstat_r+0x1c>
 8017c9a:	682b      	ldr	r3, [r5, #0]
 8017c9c:	b103      	cbz	r3, 8017ca0 <_fstat_r+0x1c>
 8017c9e:	6023      	str	r3, [r4, #0]
 8017ca0:	bd38      	pop	{r3, r4, r5, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20003218 	.word	0x20003218

08017ca8 <_isatty_r>:
 8017ca8:	b538      	push	{r3, r4, r5, lr}
 8017caa:	4d06      	ldr	r5, [pc, #24]	; (8017cc4 <_isatty_r+0x1c>)
 8017cac:	2300      	movs	r3, #0
 8017cae:	4604      	mov	r4, r0
 8017cb0:	4608      	mov	r0, r1
 8017cb2:	602b      	str	r3, [r5, #0]
 8017cb4:	f7f3 f9bd 	bl	800b032 <_isatty>
 8017cb8:	1c43      	adds	r3, r0, #1
 8017cba:	d102      	bne.n	8017cc2 <_isatty_r+0x1a>
 8017cbc:	682b      	ldr	r3, [r5, #0]
 8017cbe:	b103      	cbz	r3, 8017cc2 <_isatty_r+0x1a>
 8017cc0:	6023      	str	r3, [r4, #0]
 8017cc2:	bd38      	pop	{r3, r4, r5, pc}
 8017cc4:	20003218 	.word	0x20003218

08017cc8 <_lseek_r>:
 8017cc8:	b538      	push	{r3, r4, r5, lr}
 8017cca:	4d07      	ldr	r5, [pc, #28]	; (8017ce8 <_lseek_r+0x20>)
 8017ccc:	4604      	mov	r4, r0
 8017cce:	4608      	mov	r0, r1
 8017cd0:	4611      	mov	r1, r2
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	602a      	str	r2, [r5, #0]
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	f7f3 f9b6 	bl	800b048 <_lseek>
 8017cdc:	1c43      	adds	r3, r0, #1
 8017cde:	d102      	bne.n	8017ce6 <_lseek_r+0x1e>
 8017ce0:	682b      	ldr	r3, [r5, #0]
 8017ce2:	b103      	cbz	r3, 8017ce6 <_lseek_r+0x1e>
 8017ce4:	6023      	str	r3, [r4, #0]
 8017ce6:	bd38      	pop	{r3, r4, r5, pc}
 8017ce8:	20003218 	.word	0x20003218

08017cec <memmove>:
 8017cec:	4288      	cmp	r0, r1
 8017cee:	b510      	push	{r4, lr}
 8017cf0:	eb01 0402 	add.w	r4, r1, r2
 8017cf4:	d902      	bls.n	8017cfc <memmove+0x10>
 8017cf6:	4284      	cmp	r4, r0
 8017cf8:	4623      	mov	r3, r4
 8017cfa:	d807      	bhi.n	8017d0c <memmove+0x20>
 8017cfc:	1e43      	subs	r3, r0, #1
 8017cfe:	42a1      	cmp	r1, r4
 8017d00:	d008      	beq.n	8017d14 <memmove+0x28>
 8017d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d0a:	e7f8      	b.n	8017cfe <memmove+0x12>
 8017d0c:	4402      	add	r2, r0
 8017d0e:	4601      	mov	r1, r0
 8017d10:	428a      	cmp	r2, r1
 8017d12:	d100      	bne.n	8017d16 <memmove+0x2a>
 8017d14:	bd10      	pop	{r4, pc}
 8017d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d1e:	e7f7      	b.n	8017d10 <memmove+0x24>

08017d20 <_realloc_r>:
 8017d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d24:	4680      	mov	r8, r0
 8017d26:	4614      	mov	r4, r2
 8017d28:	460e      	mov	r6, r1
 8017d2a:	b921      	cbnz	r1, 8017d36 <_realloc_r+0x16>
 8017d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d30:	4611      	mov	r1, r2
 8017d32:	f7fe bedf 	b.w	8016af4 <_malloc_r>
 8017d36:	b92a      	cbnz	r2, 8017d44 <_realloc_r+0x24>
 8017d38:	f7fe fe70 	bl	8016a1c <_free_r>
 8017d3c:	4625      	mov	r5, r4
 8017d3e:	4628      	mov	r0, r5
 8017d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d44:	f000 f82e 	bl	8017da4 <_malloc_usable_size_r>
 8017d48:	4284      	cmp	r4, r0
 8017d4a:	4607      	mov	r7, r0
 8017d4c:	d802      	bhi.n	8017d54 <_realloc_r+0x34>
 8017d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d52:	d812      	bhi.n	8017d7a <_realloc_r+0x5a>
 8017d54:	4621      	mov	r1, r4
 8017d56:	4640      	mov	r0, r8
 8017d58:	f7fe fecc 	bl	8016af4 <_malloc_r>
 8017d5c:	4605      	mov	r5, r0
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d0ed      	beq.n	8017d3e <_realloc_r+0x1e>
 8017d62:	42bc      	cmp	r4, r7
 8017d64:	4622      	mov	r2, r4
 8017d66:	4631      	mov	r1, r6
 8017d68:	bf28      	it	cs
 8017d6a:	463a      	movcs	r2, r7
 8017d6c:	f7fe fe40 	bl	80169f0 <memcpy>
 8017d70:	4631      	mov	r1, r6
 8017d72:	4640      	mov	r0, r8
 8017d74:	f7fe fe52 	bl	8016a1c <_free_r>
 8017d78:	e7e1      	b.n	8017d3e <_realloc_r+0x1e>
 8017d7a:	4635      	mov	r5, r6
 8017d7c:	e7df      	b.n	8017d3e <_realloc_r+0x1e>
	...

08017d80 <_read_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	4d07      	ldr	r5, [pc, #28]	; (8017da0 <_read_r+0x20>)
 8017d84:	4604      	mov	r4, r0
 8017d86:	4608      	mov	r0, r1
 8017d88:	4611      	mov	r1, r2
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	602a      	str	r2, [r5, #0]
 8017d8e:	461a      	mov	r2, r3
 8017d90:	f7f3 f8fa 	bl	800af88 <_read>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d102      	bne.n	8017d9e <_read_r+0x1e>
 8017d98:	682b      	ldr	r3, [r5, #0]
 8017d9a:	b103      	cbz	r3, 8017d9e <_read_r+0x1e>
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	20003218 	.word	0x20003218

08017da4 <_malloc_usable_size_r>:
 8017da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017da8:	1f18      	subs	r0, r3, #4
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	bfbc      	itt	lt
 8017dae:	580b      	ldrlt	r3, [r1, r0]
 8017db0:	18c0      	addlt	r0, r0, r3
 8017db2:	4770      	bx	lr

08017db4 <_init>:
 8017db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017db6:	bf00      	nop
 8017db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dba:	bc08      	pop	{r3}
 8017dbc:	469e      	mov	lr, r3
 8017dbe:	4770      	bx	lr

08017dc0 <_fini>:
 8017dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dc2:	bf00      	nop
 8017dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dc6:	bc08      	pop	{r3}
 8017dc8:	469e      	mov	lr, r3
 8017dca:	4770      	bx	lr
